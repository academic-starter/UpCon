{
  "matches": [
    {
      "src": "}: } [1124,1125]",
      "dest": "}: } [1100,1101]"
    },
    {
      "src": "(: ( [1341,1342]",
      "dest": "(: ( [1317,1318]"
    },
    {
      "src": "call_expression [1692,1716]",
      "dest": "call_expression [1668,1692]"
    },
    {
      "src": "identifier: isContract [1692,1702]",
      "dest": "identifier: isContract [1668,1678]"
    },
    {
      "src": "uint256: uint256 [1209,1216]",
      "dest": "uint256: uint256 [1185,1192]"
    },
    {
      "src": "variable_declaration_statement [1244,1297]",
      "dest": "variable_declaration_statement [1220,1273]"
    },
    {
      "src": "comment: // NOLINTNEXTLINE: low-level-calls. [1748,1783]",
      "dest": "comment: // NOLINTNEXTLINE: low-level-calls. [1724,1759]"
    },
    {
      "src": "identifier: value [1278,1283]",
      "dest": "identifier: value [1254,1259]"
    },
    {
      "src": "member_expression [1834,1851]",
      "dest": "member_expression [1810,1827]"
    },
    {
      "src": "internal: internal [1225,1233]",
      "dest": "internal: internal [1201,1209]"
    },
    {
      "src": "library_declaration [756,2615]",
      "dest": "library_declaration [732,2019]"
    },
    {
      "src": "\": \" [1294,1295]",
      "dest": "\": \" [1270,1271]"
    },
    {
      "src": "parameter [1190,1207]",
      "dest": "parameter [1166,1183]"
    },
    {
      "src": "assembly: assembly [1064,1072]",
      "dest": "assembly: assembly [1040,1048]"
    },
    {
      "src": "variable_declaration_tuple [1244,1260]",
      "dest": "variable_declaration_tuple [1220,1236]"
    },
    {
      "src": "(: ( [1106,1107]",
      "dest": "(: ( [1082,1083]"
    },
    {
      "src": "identifier: amount [1285,1291]",
      "dest": "identifier: amount [1261,1267]"
    },
    {
      "src": ",: , [1805,1806]",
      "dest": ",: , [1781,1782]"
    },
    {
      "src": "(: ( [1025,1026]",
      "dest": "(: ( [1001,1002]"
    },
    {
      "src": "): ) [1943,1944]",
      "dest": "): ) [1919,1920]"
    },
    {
      "src": "identifier: callData [1655,1663]",
      "dest": "identifier: callData [1631,1639]"
    },
    {
      "src": ",: , [1257,1258]",
      "dest": ",: , [1233,1234]"
    },
    {
      "src": "view: view [1012,1016]",
      "dest": "view: view [988,992]"
    },
    {
      "src": ".: . [1846,1847]",
      "dest": ".: . [1822,1823]"
    },
    {
      "src": "{: { [1277,1278]",
      "dest": "{: { [1253,1254]"
    },
    {
      "src": "type_name [1642,1647]",
      "dest": "type_name [1618,1623]"
    },
    {
      "src": "variable_declaration [1793,1805]",
      "dest": "variable_declaration [1769,1781]"
    },
    {
      "src": "function: function [1589,1597]",
      "dest": "function: function [1565,1573]"
    },
    {
      "src": "binary_expression [1922,1943]",
      "dest": "binary_expression [1898,1919]"
    },
    {
      "src": "pragma: pragma [636,642]",
      "dest": "pragma: pragma [636,642]"
    },
    {
      "src": "primitive_type [1620,1627]",
      "dest": "primitive_type [1596,1603]"
    },
    {
      "src": "library: library [756,763]",
      "dest": "library: library [732,739]"
    },
    {
      "src": "): ) [1906,1907]",
      "dest": "): ) [1882,1883]"
    },
    {
      "src": "primitive_type [1642,1647]",
      "dest": "primitive_type [1618,1623]"
    },
    {
      "src": "): ) [1259,1260]",
      "dest": "): ) [1235,1236]"
    },
    {
      "src": "identifier: callData [1852,1860]",
      "dest": "identifier: callData [1828,1836]"
    },
    {
      "src": "): ) [1001,1002]",
      "dest": "): ) [977,978]"
    },
    {
      "src": "{: { [1073,1074]",
      "dest": "{: { [1049,1050]"
    },
    {
      "src": "(: ( [1244,1245]",
      "dest": "(: ( [1220,1221]"
    },
    {
      "src": "primitive_type [1209,1216]",
      "dest": "primitive_type [1185,1192]"
    },
    {
      "src": "(: ( [1792,1793]",
      "dest": "(: ( [1768,1769]"
    },
    {
      "src": ">: > [1940,1941]",
      "dest": ">: > [1916,1917]"
    },
    {
      "src": "identifier: size [1141,1145]",
      "dest": "identifier: size [1117,1121]"
    },
    {
      "src": "identifier: call [1273,1277]",
      "dest": "identifier: call [1249,1253]"
    },
    {
      "src": "yul_identifier [1087,1091]",
      "dest": "yul_identifier [1063,1067]"
    },
    {
      "src": ":=: := [1092,1094]",
      "dest": ":=: := [1068,1070]"
    },
    {
      "src": "member_expression [1922,1939]",
      "dest": "member_expression [1898,1915]"
    },
    {
      "src": "expression_statement [1684,1739]",
      "dest": "expression_statement [1660,1715]"
    },
    {
      "src": "call_expression [1263,1296]",
      "dest": "call_expression [1239,1272]"
    },
    {
      "src": "primitive_type [1190,1197]",
      "dest": "primitive_type [1166,1173]"
    },
    {
      "src": "string_literal [1351,1372]",
      "dest": "string_literal [1327,1348]"
    },
    {
      "src": "identifier: decode [1971,1977]",
      "dest": "identifier: decode [1947,1953]"
    },
    {
      "src": "identifier: account [1107,1114]",
      "dest": "identifier: account [1083,1090]"
    },
    {
      "src": ",: , [1640,1641]",
      "dest": ",: , [1616,1617]"
    },
    {
      "src": "identifier: returndata [1820,1830]",
      "dest": "identifier: returndata [1796,1806]"
    },
    {
      "src": "identifier: recipient [1263,1272]",
      "dest": "identifier: recipient [1239,1248]"
    },
    {
      "src": "identifier: tokenAddress [1834,1846]",
      "dest": "identifier: tokenAddress [1810,1822]"
    },
    {
      "src": "call_argument [1293,1295]",
      "dest": "call_argument [1269,1271]"
    },
    {
      "src": "parameter [1620,1640]",
      "dest": "parameter [1596,1616]"
    },
    {
      "src": "identifier: size [1087,1091]",
      "dest": "identifier: size [1063,1067]"
    },
    {
      "src": "call_argument [1692,1716]",
      "dest": "call_argument [1668,1692]"
    },
    {
      "src": "identifier: call [1847,1851]",
      "dest": "identifier: call [1823,1827]"
    },
    {
      "src": "identifier: require [1334,1341]",
      "dest": "identifier: require [1310,1317]"
    },
    {
      "src": "comment: /*       Note: isContract function has some known limitation.       See https://github.com/OpenZeppelin/       openzeppelin-contracts/blob/master/contracts/utils/Address.sol.     */ [780,961]",
      "dest": "comment: /*       Note: isContract function has some known limitation.       See https://github.com/OpenZeppelin/       openzeppelin-contracts/blob/master/contracts/utils/Address.sol.     */ [756,937]"
    },
    {
      "src": "): ) [1860,1861]",
      "dest": "): ) [1836,1837]"
    },
    {
      "src": "solidity_version_comparison_operator [651,653]",
      "dest": "solidity_version_comparison_operator [651,653]"
    },
    {
      "src": "type_name [986,993]",
      "dest": "type_name [962,969]"
    },
    {
      "src": "yul_evm_builtin [1095,1106]",
      "dest": "yul_evm_builtin [1071,1082]"
    },
    {
      "src": "identifier: performEthTransfer [1171,1189]",
      "dest": "identifier: performEthTransfer [1147,1165]"
    },
    {
      "src": "): ) [1114,1115]",
      "dest": "): ) [1090,1091]"
    },
    {
      "src": "(: ( [1894,1895]",
      "dest": "(: ( [1870,1871]"
    },
    {
      "src": "primitive_type [1026,1030]",
      "dest": "primitive_type [1002,1006]"
    },
    {
      "src": "expression_statement [1959,2025]",
      "dest": "expression_statement [1935,2001]"
    },
    {
      "src": "identifier: success [1879,1886]",
      "dest": "identifier: success [1855,1862]"
    },
    {
      "src": "): ) [1715,1716]",
      "dest": "): ) [1691,1692]"
    },
    {
      "src": "identifier: safeTokenContractCall [1598,1619]",
      "dest": "identifier: safeTokenContractCall [1574,1595]"
    },
    {
      "src": "call_argument [1999,2023]",
      "dest": "call_argument [1975,1999]"
    },
    {
      "src": "function_definition [966,1156]",
      "dest": "function_definition [942,1132]"
    },
    {
      "src": "variable_declaration_statement [1042,1055]",
      "dest": "variable_declaration_statement [1018,1031]"
    },
    {
      "src": ",: , [1207,1208]",
      "dest": ",: , [1183,1184]"
    },
    {
      "src": "\": \" [1999,2000]",
      "dest": "\": \" [1975,1976]"
    },
    {
      "src": "parameter [986,1001]",
      "dest": "parameter [962,977]"
    },
    {
      "src": ">: > [1146,1147]",
      "dest": ">: > [1122,1123]"
    },
    {
      "src": "bytes: bytes [1807,1812]",
      "dest": "bytes: bytes [1783,1788]"
    },
    {
      "src": "{: { [774,775]",
      "dest": "{: { [750,751]"
    },
    {
      "src": "member_expression [1263,1277]",
      "dest": "member_expression [1239,1253]"
    },
    {
      "src": "}: } [2614,2615]",
      "dest": "}: } [2018,2019]"
    },
    {
      "src": "function: function [966,974]",
      "dest": "function: function [942,950]"
    },
    {
      "src": "identifier: returndata [1922,1932]",
      "dest": "identifier: returndata [1898,1908]"
    },
    {
      "src": "=: = [1832,1833]",
      "dest": "=: = [1808,1809]"
    },
    {
      "src": "string_literal [1718,1737]",
      "dest": "string_literal [1694,1713]"
    },
    {
      "src": "function_definition [1162,1380]",
      "dest": "function_definition [1138,1356]"
    },
    {
      "src": "parenthesized_expression [1990,1996]",
      "dest": "parenthesized_expression [1966,1972]"
    },
    {
      "src": "parameter [1026,1030]",
      "dest": "parameter [1002,1006]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]",
      "dest": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]"
    },
    {
      "src": "number_literal: 0 [1942,1943]",
      "dest": "number_literal: 0 [1918,1919]"
    },
    {
      "src": "}: } [2040,2041]",
      "dest": "}: } [2016,2017]"
    },
    {
      "src": "uint256: uint256 [1042,1049]",
      "dest": "uint256: uint256 [1018,1025]"
    },
    {
      "src": "identifier: require [1959,1966]",
      "dest": "identifier: require [1935,1942]"
    },
    {
      "src": "(: ( [1878,1879]",
      "dest": "(: ( [1854,1855]"
    },
    {
      "src": "call_argument [1703,1715]",
      "dest": "call_argument [1679,1691]"
    },
    {
      "src": "primitive_type [1245,1249]",
      "dest": "primitive_type [1221,1225]"
    },
    {
      "src": "identifier: tokenAddress [1703,1715]",
      "dest": "identifier: tokenAddress [1679,1691]"
    },
    {
      "src": ",: , [1988,1989]",
      "dest": ",: , [1964,1965]"
    },
    {
      "src": "variable_declaration [1807,1830]",
      "dest": "variable_declaration [1783,1806]"
    },
    {
      "src": "yul_function_call [1095,1115]",
      "dest": "yul_function_call [1071,1091]"
    },
    {
      "src": "identifier: success [1342,1349]",
      "dest": "identifier: success [1318,1325]"
    },
    {
      "src": "type_name [1026,1030]",
      "dest": "type_name [1002,1006]"
    },
    {
      "src": "primitive_type [1807,1812]",
      "dest": "primitive_type [1783,1788]"
    },
    {
      "src": "identifier: Addresses [764,773]",
      "dest": "identifier: Addresses [740,749]"
    },
    {
      "src": "): ) [1995,1996]",
      "dest": "): ) [1971,1972]"
    },
    {
      "src": "address: address [1620,1627]",
      "dest": "address: address [1596,1603]"
    },
    {
      "src": "{: { [1674,1675]",
      "dest": "{: { [1650,1651]"
    },
    {
      "src": "type_cast_expression [1888,1906]",
      "dest": "type_cast_expression [1864,1882]"
    },
    {
      "src": "(: ( [985,986]",
      "dest": "(: ( [961,962]"
    },
    {
      "src": "bytes: bytes [1642,1647]",
      "dest": "bytes: bytes [1618,1623]"
    },
    {
      "src": ",: , [1997,1998]",
      "dest": ",: , [1973,1974]"
    },
    {
      "src": "call_expression [1684,1738]",
      "dest": "call_expression [1660,1714]"
    },
    {
      "src": "{: { [1945,1946]",
      "dest": "{: { [1921,1922]"
    },
    {
      "src": "bool: bool [1793,1797]",
      "dest": "bool: bool [1769,1773]"
    },
    {
      "src": "): ) [1372,1373]",
      "dest": "): ) [1348,1349]"
    },
    {
      "src": "variable_declaration [1042,1054]",
      "dest": "variable_declaration [1018,1030]"
    },
    {
      "src": "{: { [1234,1235]",
      "dest": "{: { [1210,1211]"
    },
    {
      "src": "internal: internal [1003,1011]",
      "dest": "internal: internal [979,987]"
    },
    {
      "src": "\": \" [1351,1352]",
      "dest": "\": \" [1327,1328]"
    },
    {
      "src": "primitive_type [1991,1995]",
      "dest": "primitive_type [1967,1971]"
    },
    {
      "src": "identifier: require [1684,1691]",
      "dest": "identifier: require [1660,1667]"
    },
    {
      "src": "block_statement [1945,2035]",
      "dest": "block_statement [1921,2011]"
    },
    {
      "src": "identifier: abi [1967,1970]",
      "dest": "identifier: abi [1943,1946]"
    },
    {
      "src": "call_argument [1990,1996]",
      "dest": "call_argument [1966,1972]"
    },
    {
      "src": "bool: bool [1245,1249]",
      "dest": "bool: bool [1221,1225]"
    },
    {
      "src": "call_argument [1351,1372]",
      "dest": "call_argument [1327,1348]"
    },
    {
      "src": "type_name [1620,1627]",
      "dest": "type_name [1596,1603]"
    },
    {
      "src": "bool: bool [1991,1995]",
      "dest": "bool: bool [1967,1971]"
    },
    {
      "src": "memory: memory [1813,1819]",
      "dest": "memory: memory [1789,1795]"
    },
    {
      "src": ",: , [1716,1717]",
      "dest": ",: , [1692,1693]"
    },
    {
      "src": "expression_statement [1871,1908]",
      "dest": "expression_statement [1847,1884]"
    },
    {
      "src": ":: : [1283,1284]",
      "dest": ":: : [1259,1260]"
    },
    {
      "src": "string [1718,1737]",
      "dest": "string [1694,1713]"
    },
    {
      "src": "^:  ^ [651,653]",
      "dest": "^:  ^ [651,653]"
    },
    {
      "src": "identifier: require [1871,1878]",
      "dest": "identifier: require [1847,1854]"
    },
    {
      "src": "}: } [2034,2035]",
      "dest": "}: } [2010,2011]"
    },
    {
      "src": ",: , [1886,1887]",
      "dest": ",: , [1862,1863]"
    },
    {
      "src": "comment: // NOLINT: low-level-calls. [1298,1325]",
      "dest": "comment: // NOLINT: low-level-calls. [1274,1301]"
    },
    {
      "src": "call_argument [1852,1860]",
      "dest": "call_argument [1828,1836]"
    },
    {
      "src": "identifier: success [1250,1257]",
      "dest": "identifier: success [1226,1233]"
    },
    {
      "src": "memory: memory [1648,1654]",
      "dest": "memory: memory [1624,1630]"
    },
    {
      "src": "string_literal [1293,1295]",
      "dest": "string_literal [1269,1271]"
    },
    {
      "src": "(: ( [1189,1190]",
      "dest": "(: ( [1165,1166]"
    },
    {
      "src": "type_name [1190,1197]",
      "dest": "type_name [1166,1173]"
    },
    {
      "src": "call_argument [1967,1997]",
      "dest": "call_argument [1943,1973]"
    },
    {
      "src": "yul_identifier [1107,1114]",
      "dest": "yul_identifier [1083,1090]"
    },
    {
      "src": "): ) [1295,1296]",
      "dest": "): ) [1271,1272]"
    },
    {
      "src": "}: } [1379,1380]",
      "dest": "}: } [1355,1356]"
    },
    {
      "src": "yul_path [1087,1091]",
      "dest": "yul_path [1063,1067]"
    },
    {
      "src": "binary_expression [1141,1149]",
      "dest": "binary_expression [1117,1125]"
    },
    {
      "src": "return: return [1134,1140]",
      "dest": "return: return [1110,1116]"
    },
    {
      "src": "comment: /*   Copyright 2019-2022 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "dest": "comment: /*   Copyright 2019-2022 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]"
    },
    {
      "src": "variable_declaration_tuple [1792,1831]",
      "dest": "variable_declaration_tuple [1768,1807]"
    },
    {
      "src": "type_name [1793,1797]",
      "dest": "type_name [1769,1773]"
    },
    {
      "src": ".: . [1932,1933]",
      "dest": ".: . [1908,1909]"
    },
    {
      "src": "string: string [1888,1894]",
      "dest": "string: string [1864,1870]"
    },
    {
      "src": "identifier: tokenAddress [1628,1640]",
      "dest": "identifier: tokenAddress [1604,1616]"
    },
    {
      "src": "): ) [1737,1738]",
      "dest": "): ) [1713,1714]"
    },
    {
      "src": "identifier: returndata [1895,1905]",
      "dest": "identifier: returndata [1871,1881]"
    },
    {
      "src": "(: ( [1921,1922]",
      "dest": "(: ( [1897,1898]"
    },
    {
      "src": "function_definition [1589,2041]",
      "dest": "function_definition [1565,2017]"
    },
    {
      "src": "variable_declaration [1245,1257]",
      "dest": "variable_declaration [1221,1233]"
    },
    {
      "src": "string [1999,2023]",
      "dest": "string [1975,1999]"
    },
    {
      "src": "yul_path [1107,1114]",
      "dest": "yul_path [1083,1090]"
    },
    {
      "src": "variable_declaration_statement [1792,1862]",
      "dest": "variable_declaration_statement [1768,1838]"
    },
    {
      "src": "identifier: returndata [1978,1988]",
      "dest": "identifier: returndata [1954,1964]"
    },
    {
      "src": "address: address [1190,1197]",
      "dest": "address: address [1166,1173]"
    },
    {
      "src": "return_type_definition [1017,1031]",
      "dest": "return_type_definition [993,1007]"
    },
    {
      "src": "\": \" [1293,1294]",
      "dest": "\": \" [1269,1270]"
    },
    {
      "src": "comment: /*       Safe wrapper around ERC20/ERC721 calls.       This is required because many deployed ERC20 contracts don't return a value.       See https://github.com/ethereum/solidity/issues/4116.     */ [1386,1584]",
      "dest": "comment: /*       Safe wrapper around ERC20/ERC721 calls.       This is required because many deployed ERC20 contracts don't return a value.       See https://github.com/ethereum/solidity/issues/4116.     */ [1362,1560]"
    },
    {
      "src": "call_argument [1879,1886]",
      "dest": "call_argument [1855,1862]"
    },
    {
      "src": "primitive_type [1793,1797]",
      "dest": "primitive_type [1769,1773]"
    },
    {
      "src": "}: } [1291,1292]",
      "dest": "}: } [1267,1268]"
    },
    {
      "src": "solidity_pragma_token [643,659]",
      "dest": "solidity_pragma_token [643,659]"
    },
    {
      "src": "\": \" [1736,1737]",
      "dest": "\": \" [1712,1713]"
    },
    {
      "src": "): ) [1996,1997]",
      "dest": "): ) [1972,1973]"
    },
    {
      "src": "struct_field_assignment [1278,1291]",
      "dest": "struct_field_assignment [1254,1267]"
    },
    {
      "src": "primitive_type [1042,1049]",
      "dest": "primitive_type [1018,1025]"
    },
    {
      "src": "\": \" [1371,1372]",
      "dest": "\": \" [1347,1348]"
    },
    {
      "src": "expression_statement [1334,1374]",
      "dest": "expression_statement [1310,1350]"
    },
    {
      "src": "call_expression [1334,1373]",
      "dest": "call_expression [1310,1349]"
    },
    {
      "src": "): ) [1030,1031]",
      "dest": "): ) [1006,1007]"
    },
    {
      "src": "call_argument [1718,1737]",
      "dest": "call_argument [1694,1713]"
    },
    {
      "src": "visibility [1665,1673]",
      "dest": "visibility [1641,1649]"
    },
    {
      "src": "if_statement [1918,2035]",
      "dest": "if_statement [1894,2011]"
    },
    {
      "src": "(: ( [1292,1293]",
      "dest": "(: ( [1268,1269]"
    },
    {
      "src": "(: ( [1851,1852]",
      "dest": "(: ( [1827,1828]"
    },
    {
      "src": "\": \" [2022,2023]",
      "dest": "\": \" [1998,1999]"
    },
    {
      "src": "): ) [2023,2024]",
      "dest": "): ) [1999,2000]"
    },
    {
      "src": "extcodesize: extcodesize [1095,1106]",
      "dest": "extcodesize: extcodesize [1071,1082]"
    },
    {
      "src": "call_expression [1871,1907]",
      "dest": "call_expression [1847,1883]"
    },
    {
      "src": ",: , [1349,1350]",
      "dest": ",: , [1325,1326]"
    },
    {
      "src": ".: . [1970,1971]",
      "dest": ".: . [1946,1947]"
    },
    {
      "src": "parameter [1209,1223]",
      "dest": "parameter [1185,1199]"
    },
    {
      "src": "member_expression [1967,1977]",
      "dest": "member_expression [1943,1953]"
    },
    {
      "src": "string [1293,1295]",
      "dest": "string [1269,1271]"
    },
    {
      "src": "contract_body [774,2615]",
      "dest": "contract_body [750,2019]"
    },
    {
      "src": "identifier: success [1798,1805]",
      "dest": "identifier: success [1774,1781]"
    },
    {
      "src": "=: = [1261,1262]",
      "dest": "=: = [1237,1238]"
    },
    {
      "src": "identifier: size [1050,1054]",
      "dest": "identifier: size [1026,1030]"
    },
    {
      "src": "comment: /*   Common Utility librarries.   I. Addresses (extending address). */ [685,755]",
      "dest": "comment: /*   Common Utility Libraries.   I. Addresses (extending address). */ [662,731]"
    },
    {
      "src": "call_expression [1967,1997]",
      "dest": "call_expression [1943,1973]"
    },
    {
      "src": "type_name [1245,1249]",
      "dest": "type_name [1221,1225]"
    },
    {
      "src": "number_literal: 0 [1148,1149]",
      "dest": "number_literal: 0 [1124,1125]"
    },
    {
      "src": "visibility [1003,1011]",
      "dest": "visibility [979,987]"
    },
    {
      "src": "call_argument [1342,1349]",
      "dest": "call_argument [1318,1325]"
    },
    {
      "src": "(: ( [1691,1692]",
      "dest": "(: ( [1667,1668]"
    },
    {
      "src": "function: function [1162,1170]",
      "dest": "function: function [1138,1146]"
    },
    {
      "src": "(: ( [1966,1967]",
      "dest": "(: ( [1942,1943]"
    },
    {
      "src": "): ) [1905,1906]",
      "dest": "): ) [1881,1882]"
    },
    {
      "src": ".: . [1272,1273]",
      "dest": ".: . [1248,1249]"
    },
    {
      "src": "): ) [1663,1664]",
      "dest": "): ) [1639,1640]"
    },
    {
      "src": "type_name [1042,1049]",
      "dest": "type_name [1018,1025]"
    },
    {
      "src": "type_name [1209,1216]",
      "dest": "type_name [1185,1192]"
    },
    {
      "src": "primitive_type [986,993]",
      "dest": "primitive_type [962,969]"
    },
    {
      "src": "call_argument [1895,1905]",
      "dest": "call_argument [1871,1881]"
    },
    {
      "src": "parameter [1642,1663]",
      "dest": "parameter [1618,1639]"
    },
    {
      "src": "source_file [0,2616]",
      "dest": "source_file [0,2020]"
    },
    {
      "src": "identifier: length [1933,1939]",
      "dest": "identifier: length [1909,1915]"
    },
    {
      "src": "function_body [1674,2041]",
      "dest": "function_body [1650,2017]"
    },
    {
      "src": "function_body [1032,1156]",
      "dest": "function_body [1008,1132]"
    },
    {
      "src": "state_mutability [1012,1016]",
      "dest": "state_mutability [988,992]"
    },
    {
      "src": "(: ( [1990,1991]",
      "dest": "(: ( [1966,1967]"
    },
    {
      "src": "solidity: solidity [643,651]",
      "dest": "solidity: solidity [643,651]"
    },
    {
      "src": "solidity_version: 0.6.12 [653,659]",
      "dest": "solidity_version: 0.6.12 [653,659]"
    },
    {
      "src": "\": \" [1718,1719]",
      "dest": "\": \" [1694,1695]"
    },
    {
      "src": "(: ( [1977,1978]",
      "dest": "(: ( [1953,1954]"
    },
    {
      "src": "identifier: isContract [975,985]",
      "dest": "identifier: isContract [951,961]"
    },
    {
      "src": "(: ( [1702,1703]",
      "dest": "(: ( [1678,1679]"
    },
    {
      "src": "function_body [1234,1380]",
      "dest": "function_body [1210,1356]"
    },
    {
      "src": "address: address [986,993]",
      "dest": "address: address [962,969]"
    },
    {
      "src": "return_statement [1134,1150]",
      "dest": "return_statement [1110,1126]"
    },
    {
      "src": "): ) [1223,1224]",
      "dest": "): ) [1199,1200]"
    },
    {
      "src": "assembly_statement [1064,1125]",
      "dest": "assembly_statement [1040,1101]"
    },
    {
      "src": "call_expression [1959,2024]",
      "dest": "call_expression [1935,2000]"
    },
    {
      "src": "string_literal [1999,2023]",
      "dest": "string_literal [1975,1999]"
    },
    {
      "src": "string [1351,1372]",
      "dest": "string [1327,1348]"
    },
    {
      "src": "call_expression [1834,1861]",
      "dest": "call_expression [1810,1837]"
    },
    {
      "src": "bool: bool [1026,1030]",
      "dest": "bool: bool [1002,1006]"
    },
    {
      "src": "type_name [1807,1812]",
      "dest": "type_name [1783,1788]"
    },
    {
      "src": "struct_expression [1263,1292]",
      "dest": "struct_expression [1239,1268]"
    },
    {
      "src": "if: if [1918,1920]",
      "dest": "if: if [1894,1896]"
    },
    {
      "src": "pragma_directive [636,660]",
      "dest": "pragma_directive [636,660]"
    },
    {
      "src": "identifier: amount [1217,1223]",
      "dest": "identifier: amount [1193,1199]"
    },
    {
      "src": "call_argument [1888,1906]",
      "dest": "call_argument [1864,1882]"
    },
    {
      "src": "visibility [1225,1233]",
      "dest": "visibility [1201,1209]"
    },
    {
      "src": "): ) [1830,1831]",
      "dest": "): ) [1806,1807]"
    },
    {
      "src": "primitive_type [1888,1894]",
      "dest": "primitive_type [1864,1870]"
    },
    {
      "src": "(: ( [1619,1620]",
      "dest": "(: ( [1595,1596]"
    },
    {
      "src": "yul_assignment [1087,1115]",
      "dest": "yul_assignment [1063,1091]"
    },
    {
      "src": "identifier: account [994,1001]",
      "dest": "identifier: account [970,977]"
    },
    {
      "src": "returns: returns [1017,1024]",
      "dest": "returns: returns [993,1000]"
    },
    {
      "src": "}: } [1155,1156]",
      "dest": "}: } [1131,1132]"
    },
    {
      "src": "identifier: recipient [1198,1207]",
      "dest": "identifier: recipient [1174,1183]"
    },
    {
      "src": "{: { [1032,1033]",
      "dest": "{: { [1008,1009]"
    },
    {
      "src": "call_argument [1978,1988]",
      "dest": "call_argument [1954,1964]"
    },
    {
      "src": "internal: internal [1665,1673]",
      "dest": "internal: internal [1641,1649]"
    }
  ],
  "actions": [
    {
      "action": "update-node",
      "tree": "comment: /*   Common Utility librarries.   I. Addresses (extending address). */ [685,755]",
      "label": "/*   Common Utility Libraries.   I. Addresses (extending address). */"
    },
    {
      "action": "delete-tree",
      "tree": "import_directive [661,683]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /*       Validates that the passed contract address is of a real contract,       and that its id hash (as infered fromn identify()) matched the expected one.     */ [2047,2211]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [2216,2613]"
    }
  ]
}