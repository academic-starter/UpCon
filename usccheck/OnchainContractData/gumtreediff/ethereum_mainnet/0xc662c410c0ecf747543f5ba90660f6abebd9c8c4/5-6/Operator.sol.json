{
  "matches": [
    {
      "src": "import: import [662,668]",
      "dest": "import: import [662,668]"
    },
    {
      "src": "{: { [1476,1477]",
      "dest": "{: { [1476,1477]"
    },
    {
      "src": "identifier: MOperator [1092,1101]",
      "dest": "identifier: MOperator [1092,1101]"
    },
    {
      "src": "}: } [1599,1600]",
      "dest": "}: } [1599,1600]"
    },
    {
      "src": "): ) [1706,1707]",
      "dest": "): ) [1706,1707]"
    },
    {
      "src": "contract_body [1102,1722]",
      "dest": "contract_body [1102,1722]"
    },
    {
      "src": "identifier: isOperator [1203,1213]",
      "dest": "identifier: isOperator [1203,1213]"
    },
    {
      "src": "(: ( [1133,1134]",
      "dest": "(: ( [1133,1134]"
    },
    {
      "src": "visibility [1155,1163]",
      "dest": "visibility [1155,1163]"
    },
    {
      "src": "(: ( [1254,1255]",
      "dest": "(: ( [1254,1255]"
    },
    {
      "src": "): ) [1226,1227]",
      "dest": "): ) [1226,1227]"
    },
    {
      "src": "primitive_type [1134,1141]",
      "dest": "primitive_type [1134,1141]"
    },
    {
      "src": "comment: /*   Copyright 2019-2022 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "dest": "comment: /*   Copyright 2019-2022 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]"
    },
    {
      "src": "[: [ [1256,1257]",
      "dest": "[: [ [1256,1257]"
    },
    {
      "src": "pragma: pragma [636,642]",
      "dest": "pragma: pragma [636,642]"
    },
    {
      "src": "]: ] [1520,1521]",
      "dest": "]: ] [1520,1521]"
    },
    {
      "src": "boolean_literal [1272,1276]",
      "dest": "boolean_literal [1272,1276]"
    },
    {
      "src": "override_specifier [1652,1660]",
      "dest": "override_specifier [1652,1660]"
    },
    {
      "src": "array_access [1242,1269]",
      "dest": "array_access [1242,1269]"
    },
    {
      "src": "(: ( [1669,1670]",
      "dest": "(: ( [1669,1670]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]",
      "dest": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]"
    },
    {
      "src": "comment: /**   The Operator of the contract is the entity entitled to submit state update requests   by calling :sol:func:`updateState`.    An Operator may be instantly appointed or removed by the contract Governor   (see :sol:mod:`Governance`). Typically, the Operator is the hot wallet of the service   submitting proofs for state updates. */ [713,1048]",
      "dest": "comment: /**   The Operator of the contract is the entity entitled to submit state update requests   by calling :sol:func:`updateState`.    An Operator may be instantly appointed or removed by the contract Governor   (see :sol:mod:`Governance`). Typically, the Operator is the hot wallet of the service   submitting proofs for state updates. */ [713,1048]"
    },
    {
      "src": "identifier: onlyGovernance [1418,1432]",
      "dest": "identifier: onlyGovernance [1418,1432]"
    },
    {
      "src": "if: if [1198,1200]",
      "dest": "if: if [1198,1200]"
    },
    {
      "src": "identifier: removedOperator [1383,1398]",
      "dest": "identifier: removedOperator [1383,1398]"
    },
    {
      "src": "contract_declaration [1049,1722]",
      "dest": "contract_declaration [1049,1722]"
    },
    {
      "src": "type_name [1626,1633]",
      "dest": "type_name [1626,1633]"
    },
    {
      "src": "}: } [1721,1722]",
      "dest": "}: } [1721,1722]"
    },
    {
      "src": "{: { [1228,1229]",
      "dest": "{: { [1228,1229]"
    },
    {
      "src": "string [693,710]",
      "dest": "string [693,710]"
    },
    {
      "src": "override_specifier [1164,1172]",
      "dest": "override_specifier [1164,1172]"
    },
    {
      "src": "modifier_invocation [1173,1187]",
      "dest": "modifier_invocation [1173,1187]"
    },
    {
      "src": "solidity_version_comparison_operator [651,653]",
      "dest": "solidity_version_comparison_operator [651,653]"
    },
    {
      "src": "identifier: onlyGovernance [1173,1187]",
      "dest": "identifier: onlyGovernance [1173,1187]"
    },
    {
      "src": "function: function [1347,1355]",
      "dest": "function: function [1347,1355]"
    },
    {
      "src": "address: address [1626,1633]",
      "dest": "address: address [1626,1633]"
    },
    {
      "src": "returns: returns [1661,1668]",
      "dest": "returns: returns [1661,1668]"
    },
    {
      "src": "parameter [1375,1398]",
      "dest": "parameter [1375,1398]"
    },
    {
      "src": "visibility [1640,1646]",
      "dest": "visibility [1640,1646]"
    },
    {
      "src": "emit: emit [1290,1294]",
      "dest": "emit: emit [1290,1294]"
    },
    {
      "src": "\": \" [683,684]",
      "dest": "\": \" [683,684]"
    },
    {
      "src": "string [669,684]",
      "dest": "string [669,684]"
    },
    {
      "src": "): ) [1153,1154]",
      "dest": "): ) [1153,1154]"
    },
    {
      "src": "call_argument [1312,1323]",
      "dest": "call_argument [1312,1323]"
    },
    {
      "src": "function_definition [1347,1600]",
      "dest": "function_definition [1347,1600]"
    },
    {
      "src": "): ) [1323,1324]",
      "dest": "): ) [1323,1324]"
    },
    {
      "src": "solidity: solidity [643,651]",
      "dest": "solidity: solidity [643,651]"
    },
    {
      "src": "\": \" [693,694]",
      "dest": "\": \" [693,694]"
    },
    {
      "src": "(: ( [1502,1503]",
      "dest": "(: ( [1502,1503]"
    },
    {
      "src": "external: external [1155,1163]",
      "dest": "external: external [1155,1163]"
    },
    {
      "src": "(: ( [1457,1458]",
      "dest": "(: ( [1457,1458]"
    },
    {
      "src": "public: public [1640,1646]",
      "dest": "public: public [1640,1646]"
    },
    {
      "src": "call_expression [1242,1256]",
      "dest": "call_expression [1242,1256]"
    },
    {
      "src": "(: ( [1566,1567]",
      "dest": "(: ( [1566,1567]"
    },
    {
      "src": "]: ] [1712,1713]",
      "dest": "]: ] [1712,1713]"
    },
    {
      "src": "]: ] [1268,1269]",
      "dest": "]: ] [1268,1269]"
    },
    {
      "src": "function_body [1188,1341]",
      "dest": "function_body [1188,1341]"
    },
    {
      "src": "override: override [1164,1172]",
      "dest": "override: override [1164,1172]"
    },
    {
      "src": "primitive_type [1375,1382]",
      "dest": "primitive_type [1375,1382]"
    },
    {
      "src": "return_type_definition [1661,1675]",
      "dest": "return_type_definition [1661,1675]"
    },
    {
      "src": "}: } [1719,1720]",
      "dest": "}: } [1719,1720]"
    },
    {
      "src": "identifier: newOperator [1142,1153]",
      "dest": "identifier: newOperator [1142,1153]"
    },
    {
      "src": "assignment_expression [1490,1529]",
      "dest": "assignment_expression [1490,1529]"
    },
    {
      "src": "identifier: unregisterOperator [1356,1374]",
      "dest": "identifier: unregisterOperator [1356,1374]"
    },
    {
      "src": "user_defined_type [1079,1090]",
      "dest": "user_defined_type [1079,1090]"
    },
    {
      "src": "(: ( [1446,1447]",
      "dest": "(: ( [1446,1447]"
    },
    {
      "src": "emit: emit [1543,1547]",
      "dest": "emit: emit [1543,1547]"
    },
    {
      "src": "import_directive [686,711]",
      "dest": "import_directive [686,711]"
    },
    {
      "src": "(: ( [1213,1214]",
      "dest": "(: ( [1213,1214]"
    },
    {
      "src": "block_statement [1228,1335]",
      "dest": "block_statement [1228,1335]"
    },
    {
      "src": "import_directive [662,685]",
      "dest": "import_directive [662,685]"
    },
    {
      "src": "identifier: LogOperatorRemoved [1548,1566]",
      "dest": "identifier: LogOperatorRemoved [1548,1566]"
    },
    {
      "src": "function_body [1676,1720]",
      "dest": "function_body [1676,1720]"
    },
    {
      "src": "user_defined_type [1092,1101]",
      "dest": "user_defined_type [1092,1101]"
    },
    {
      "src": "parameter [1134,1153]",
      "dest": "parameter [1134,1153]"
    },
    {
      "src": "contract: contract [1058,1066]",
      "dest": "contract: contract [1058,1066]"
    },
    {
      "src": "}: } [1334,1335]",
      "dest": "}: } [1334,1335]"
    },
    {
      "src": "expression_statement [1242,1277]",
      "dest": "expression_statement [1242,1277]"
    },
    {
      "src": "assignment_expression [1242,1276]",
      "dest": "assignment_expression [1242,1276]"
    },
    {
      "src": "): ) [1638,1639]",
      "dest": "): ) [1638,1639]"
    },
    {
      "src": "(: ( [1705,1706]",
      "dest": "(: ( [1705,1706]"
    },
    {
      "src": "identifier: getOperators [1242,1254]",
      "dest": "identifier: getOperators [1242,1254]"
    },
    {
      "src": "[: [ [1504,1505]",
      "dest": "[: [ [1504,1505]"
    },
    {
      "src": "identifier: removedOperator [1505,1520]",
      "dest": "identifier: removedOperator [1505,1520]"
    },
    {
      "src": "): ) [1255,1256]",
      "dest": "): ) [1255,1256]"
    },
    {
      "src": "source_file [0,1723]",
      "dest": "source_file [0,1723]"
    },
    {
      "src": "if: if [1443,1445]",
      "dest": "if: if [1443,1445]"
    },
    {
      "src": "primitive_type [1670,1674]",
      "dest": "primitive_type [1670,1674]"
    },
    {
      "src": "function_definition [1606,1720]",
      "dest": "function_definition [1606,1720]"
    },
    {
      "src": "{: { [1433,1434]",
      "dest": "{: { [1433,1434]"
    },
    {
      "src": "false: false [1524,1529]",
      "dest": "false: false [1524,1529]"
    },
    {
      "src": "solidity_pragma_token [643,659]",
      "dest": "solidity_pragma_token [643,659]"
    },
    {
      "src": "identifier: LogOperatorAdded [1295,1311]",
      "dest": "identifier: LogOperatorAdded [1295,1311]"
    },
    {
      "src": "if_statement [1198,1335]",
      "dest": "if_statement [1198,1335]"
    },
    {
      "src": "external: external [1400,1408]",
      "dest": "external: external [1400,1408]"
    },
    {
      "src": "=: = [1270,1271]",
      "dest": "=: = [1270,1271]"
    },
    {
      "src": "identifier: registerOperator [1117,1133]",
      "dest": "identifier: registerOperator [1117,1133]"
    },
    {
      "src": "call_expression [1693,1707]",
      "dest": "call_expression [1693,1707]"
    },
    {
      "src": "^:  ^ [651,653]",
      "dest": "^:  ^ [651,653]"
    },
    {
      "src": "function_body [1433,1600]",
      "dest": "function_body [1433,1600]"
    },
    {
      "src": "call_expression [1490,1504]",
      "dest": "call_expression [1490,1504]"
    },
    {
      "src": "boolean_literal [1524,1529]",
      "dest": "boolean_literal [1524,1529]"
    },
    {
      "src": "view: view [1647,1651]",
      "dest": "view: view [1647,1651]"
    },
    {
      "src": "inheritance_specifier [1092,1101]",
      "dest": "inheritance_specifier [1092,1101]"
    },
    {
      "src": "function: function [1606,1614]",
      "dest": "function: function [1606,1614]"
    },
    {
      "src": "modifier_invocation [1418,1432]",
      "dest": "modifier_invocation [1418,1432]"
    },
    {
      "src": "): ) [1503,1504]",
      "dest": "): ) [1503,1504]"
    },
    {
      "src": "parameter [1670,1674]",
      "dest": "parameter [1670,1674]"
    },
    {
      "src": "call_expression [1203,1226]",
      "dest": "call_expression [1203,1226]"
    },
    {
      "src": "identifier: newOperator [1312,1323]",
      "dest": "identifier: newOperator [1312,1323]"
    },
    {
      "src": "): ) [1582,1583]",
      "dest": "): ) [1582,1583]"
    },
    {
      "src": "abstract: abstract [1049,1057]",
      "dest": "abstract: abstract [1049,1057]"
    },
    {
      "src": "}: } [1593,1594]",
      "dest": "}: } [1593,1594]"
    },
    {
      "src": "parameter [1626,1638]",
      "dest": "parameter [1626,1638]"
    },
    {
      "src": "(: ( [1374,1375]",
      "dest": "(: ( [1374,1375]"
    },
    {
      "src": "(: ( [1625,1626]",
      "dest": "(: ( [1625,1626]"
    },
    {
      "src": "identifier: newOperator [1214,1225]",
      "dest": "identifier: newOperator [1214,1225]"
    },
    {
      "src": "identifier: user [1708,1712]",
      "dest": "identifier: user [1708,1712]"
    },
    {
      "src": "type_name [1134,1141]",
      "dest": "type_name [1134,1141]"
    },
    {
      "src": "): ) [1674,1675]",
      "dest": "): ) [1674,1675]"
    },
    {
      "src": "(: ( [1311,1312]",
      "dest": "(: ( [1311,1312]"
    },
    {
      "src": "): ) [1473,1474]",
      "dest": "): ) [1473,1474]"
    },
    {
      "src": "address: address [1375,1382]",
      "dest": "address: address [1375,1382]"
    },
    {
      "src": "import: import [686,692]",
      "dest": "import: import [686,692]"
    },
    {
      "src": "=: = [1522,1523]",
      "dest": "=: = [1522,1523]"
    },
    {
      "src": "type_name [1375,1382]",
      "dest": "type_name [1375,1382]"
    },
    {
      "src": "return: return [1686,1692]",
      "dest": "return: return [1686,1692]"
    },
    {
      "src": "identifier: user [1634,1638]",
      "dest": "identifier: user [1634,1638]"
    },
    {
      "src": "is: is [1076,1078]",
      "dest": "is: is [1076,1078]"
    },
    {
      "src": "override: override [1409,1417]",
      "dest": "override: override [1409,1417]"
    },
    {
      "src": "identifier: newOperator [1257,1268]",
      "dest": "identifier: newOperator [1257,1268]"
    },
    {
      "src": "function_definition [1108,1341]",
      "dest": "function_definition [1108,1341]"
    },
    {
      "src": "): ) [1474,1475]",
      "dest": "): ) [1474,1475]"
    },
    {
      "src": "function: function [1108,1116]",
      "dest": "function: function [1108,1116]"
    },
    {
      "src": "call_argument [1458,1473]",
      "dest": "call_argument [1458,1473]"
    },
    {
      "src": "(: ( [1201,1202]",
      "dest": "(: ( [1201,1202]"
    },
    {
      "src": "call_argument [1567,1582]",
      "dest": "call_argument [1567,1582]"
    },
    {
      "src": "address: address [1134,1141]",
      "dest": "address: address [1134,1141]"
    },
    {
      "src": "!: ! [1202,1203]",
      "dest": "!: ! [1202,1203]"
    },
    {
      "src": "call_expression [1447,1474]",
      "dest": "call_expression [1447,1474]"
    },
    {
      "src": "[: [ [1707,1708]",
      "dest": "[: [ [1707,1708]"
    },
    {
      "src": "primitive_type [1626,1633]",
      "dest": "primitive_type [1626,1633]"
    },
    {
      "src": "state_mutability [1647,1651]",
      "dest": "state_mutability [1647,1651]"
    },
    {
      "src": "{: { [1102,1103]",
      "dest": "{: { [1102,1103]"
    },
    {
      "src": "expression_statement [1490,1530]",
      "dest": "expression_statement [1490,1530]"
    },
    {
      "src": "false [1524,1529]",
      "dest": "false [1524,1529]"
    },
    {
      "src": "override_specifier [1409,1417]",
      "dest": "override_specifier [1409,1417]"
    },
    {
      "src": "\": \" [669,670]",
      "dest": "\": \" [669,670]"
    },
    {
      "src": "inheritance_specifier [1079,1090]",
      "dest": "inheritance_specifier [1079,1090]"
    },
    {
      "src": "true: true [1272,1276]",
      "dest": "true: true [1272,1276]"
    },
    {
      "src": "return_statement [1686,1714]",
      "dest": "return_statement [1686,1714]"
    },
    {
      "src": "bool: bool [1670,1674]",
      "dest": "bool: bool [1670,1674]"
    },
    {
      "src": "identifier: getOperators [1490,1502]",
      "dest": "identifier: getOperators [1490,1502]"
    },
    {
      "src": "\": \" [709,710]",
      "dest": "\": \" [709,710]"
    },
    {
      "src": "array_access [1490,1521]",
      "dest": "array_access [1490,1521]"
    },
    {
      "src": "identifier: MGovernance [1079,1090]",
      "dest": "identifier: MGovernance [1079,1090]"
    },
    {
      "src": "): ) [1225,1226]",
      "dest": "): ) [1225,1226]"
    },
    {
      "src": "visibility [1400,1408]",
      "dest": "visibility [1400,1408]"
    },
    {
      "src": "{: { [1188,1189]",
      "dest": "{: { [1188,1189]"
    },
    {
      "src": "type_name [1670,1674]",
      "dest": "type_name [1670,1674]"
    },
    {
      "src": "unary_expression [1202,1226]",
      "dest": "unary_expression [1202,1226]"
    },
    {
      "src": "}: } [1340,1341]",
      "dest": "}: } [1340,1341]"
    },
    {
      "src": "{: { [1676,1677]",
      "dest": "{: { [1676,1677]"
    },
    {
      "src": "array_access [1693,1713]",
      "dest": "array_access [1693,1713]"
    },
    {
      "src": "block_statement [1476,1594]",
      "dest": "block_statement [1476,1594]"
    },
    {
      "src": "identifier: removedOperator [1567,1582]",
      "dest": "identifier: removedOperator [1567,1582]"
    },
    {
      "src": "true [1272,1276]",
      "dest": "true [1272,1276]"
    },
    {
      "src": ",: , [1090,1091]",
      "dest": ",: , [1090,1091]"
    },
    {
      "src": "): ) [1398,1399]",
      "dest": "): ) [1398,1399]"
    },
    {
      "src": "call_argument [1214,1225]",
      "dest": "call_argument [1214,1225]"
    },
    {
      "src": "emit_statement [1290,1325]",
      "dest": "emit_statement [1290,1325]"
    },
    {
      "src": "if_statement [1443,1594]",
      "dest": "if_statement [1443,1594]"
    },
    {
      "src": "solidity_version: 0.6.12 [653,659]",
      "dest": "solidity_version: 0.6.12 [653,659]"
    },
    {
      "src": "identifier: removedOperator [1458,1473]",
      "dest": "identifier: removedOperator [1458,1473]"
    },
    {
      "src": "emit_statement [1543,1584]",
      "dest": "emit_statement [1543,1584]"
    },
    {
      "src": "identifier: isOperator [1615,1625]",
      "dest": "identifier: isOperator [1615,1625]"
    },
    {
      "src": "identifier: isOperator [1447,1457]",
      "dest": "identifier: isOperator [1447,1457]"
    },
    {
      "src": "pragma_directive [636,660]",
      "dest": "pragma_directive [636,660]"
    },
    {
      "src": "identifier: Operator [1067,1075]",
      "dest": "identifier: Operator [1067,1075]"
    },
    {
      "src": "override: override [1652,1660]",
      "dest": "override: override [1652,1660]"
    },
    {
      "src": "identifier: getOperators [1693,1705]",
      "dest": "identifier: getOperators [1693,1705]"
    }
  ],
  "actions": []
}