{
  "matches": [
    {
      "src": "type_name [967,974]",
      "dest": "type_name [967,974]"
    },
    {
      "src": "binary_expression [1068,1074]",
      "dest": "binary_expression [1068,1074]"
    },
    {
      "src": "string: string [1876,1882]",
      "dest": "string: string [1876,1882]"
    },
    {
      "src": "pure: pure [1913,1917]",
      "dest": "pure: pure [1913,1917]"
    },
    {
      "src": "\": \" [1076,1077]",
      "dest": "\": \" [1076,1077]"
    },
    {
      "src": "primitive_type [1423,1430]",
      "dest": "primitive_type [1423,1430]"
    },
    {
      "src": "primitive_type [3867,3874]",
      "dest": "primitive_type [3867,3874]"
    },
    {
      "src": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      * - Addition cannot overflow.      */ [723,948]",
      "dest": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      * - Addition cannot overflow.      */ [723,948]"
    },
    {
      "src": "variable_declaration [1032,1041]",
      "dest": "variable_declaration [1032,1041]"
    },
    {
      "src": "identifier: a [1431,1432]",
      "dest": "identifier: a [1431,1432]"
    },
    {
      "src": "/: / [4002,4003]",
      "dest": "/: / [4002,4003]"
    },
    {
      "src": "type_name [1468,1475]",
      "dest": "type_name [1468,1475]"
    },
    {
      "src": "(: ( [2586,2587]",
      "dest": "(: ( [2586,2587]"
    },
    {
      "src": "return_type_definition [1918,1935]",
      "dest": "return_type_definition [1918,1935]"
    },
    {
      "src": ",: , [3876,3877]",
      "dest": ",: , [3876,3877]"
    },
    {
      "src": "{: { [3938,3939]",
      "dest": "{: { [3938,3939]"
    },
    {
      "src": "(: ( [1422,1423]",
      "dest": "(: ( [1422,1423]"
    },
    {
      "src": "call_argument [1963,1975]",
      "dest": "call_argument [1963,1975]"
    },
    {
      "src": "pragma_directive [0,23]",
      "dest": "pragma_directive [0,23]"
    },
    {
      "src": "): ) [1934,1935]",
      "dest": "): ) [1934,1935]"
    },
    {
      "src": "state_mutability [3915,3919]",
      "dest": "state_mutability [3915,3919]"
    },
    {
      "src": "internal: internal [2319,2327]",
      "dest": "internal: internal [2319,2327]"
    },
    {
      "src": "uint256: uint256 [3281,3288]",
      "dest": "uint256: uint256 [3281,3288]"
    },
    {
      "src": "identifier: a [1499,1500]",
      "dest": "identifier: a [1499,1500]"
    },
    {
      "src": "primitive_type [1012,1019]",
      "dest": "primitive_type [1012,1019]"
    },
    {
      "src": "=: = [1042,1043]",
      "dest": "=: = [1042,1043]"
    },
    {
      "src": "visibility [1445,1453]",
      "dest": "visibility [1445,1453]"
    },
    {
      "src": "binary_expression [2678,2688]",
      "dest": "binary_expression [2678,2688]"
    },
    {
      "src": "call_argument [1502,1503]",
      "dest": "call_argument [1502,1503]"
    },
    {
      "src": "identifier: b [1048,1049]",
      "dest": "identifier: b [1048,1049]"
    },
    {
      "src": "uint256: uint256 [3236,3243]",
      "dest": "uint256: uint256 [3236,3243]"
    },
    {
      "src": "uint256: uint256 [1423,1430]",
      "dest": "uint256: uint256 [1423,1430]"
    },
    {
      "src": "(: ( [3928,3929]",
      "dest": "(: ( [3928,3929]"
    },
    {
      "src": "visibility [989,997]",
      "dest": "visibility [989,997]"
    },
    {
      "src": "parameter [4591,4600]",
      "dest": "parameter [4591,4600]"
    },
    {
      "src": "uint256: uint256 [5271,5278]",
      "dest": "uint256: uint256 [5271,5278]"
    },
    {
      "src": "function_body [1936,2033]",
      "dest": "function_body [1936,2033]"
    },
    {
      "src": "type_name [3988,3995]",
      "dest": "type_name [3988,3995]"
    },
    {
      "src": ",: , [1503,1504]",
      "dest": ",: , [1503,1504]"
    },
    {
      "src": "binary_expression [2587,2593]",
      "dest": "binary_expression [2587,2593]"
    },
    {
      "src": "internal: internal [989,997]",
      "dest": "internal: internal [989,997]"
    },
    {
      "src": "(: ( [3311,3312]",
      "dest": "(: ( [3311,3312]"
    },
    {
      "src": "number_literal: 0 [2592,2593]",
      "dest": "number_literal: 0 [2592,2593]"
    },
    {
      "src": "return_type_definition [5262,5279]",
      "dest": "return_type_definition [5262,5279]"
    },
    {
      "src": "type_name [1423,1430]",
      "dest": "type_name [1423,1430]"
    },
    {
      "src": "parameter [3247,3256]",
      "dest": "parameter [3247,3256]"
    },
    {
      "src": "return: return [4656,4662]",
      "dest": "return: return [4656,4662]"
    },
    {
      "src": "identifier: c [1068,1069]",
      "dest": "identifier: c [1068,1069]"
    },
    {
      "src": ",: , [5218,5219]",
      "dest": ",: , [5218,5219]"
    },
    {
      "src": "primitive_type [3281,3288]",
      "dest": "primitive_type [3281,3288]"
    },
    {
      "src": "visibility [5248,5256]",
      "dest": "visibility [5248,5256]"
    },
    {
      "src": "primitive_type [1865,1872]",
      "dest": "primitive_type [1865,1872]"
    },
    {
      "src": "primitive_type [5271,5278]",
      "dest": "primitive_type [5271,5278]"
    },
    {
      "src": "pure: pure [998,1002]",
      "dest": "pure: pure [998,1002]"
    },
    {
      "src": "binary_expression [1044,1049]",
      "dest": "binary_expression [1044,1049]"
    },
    {
      "src": "\": \" [2690,2691]",
      "dest": "\": \" [2690,2691]"
    },
    {
      "src": "identifier: a [4599,4600]",
      "dest": "identifier: a [4599,4600]"
    },
    {
      "src": "uint256: uint256 [5209,5216]",
      "dest": "uint256: uint256 [5209,5216]"
    },
    {
      "src": ",: , [2306,2307]",
      "dest": ",: , [2306,2307]"
    },
    {
      "src": "parameter [1468,1475]",
      "dest": "parameter [1468,1475]"
    },
    {
      "src": "call_argument [3957,3962]",
      "dest": "call_argument [3957,3962]"
    },
    {
      "src": "pure: pure [4622,4626]",
      "dest": "pure: pure [4622,4626]"
    },
    {
      "src": "}: } [5350,5351]",
      "dest": "}: } [5350,5351]"
    },
    {
      "src": "call_argument [5307,5319]",
      "dest": "call_argument [5307,5319]"
    },
    {
      "src": "returns: returns [3272,3279]",
      "dest": "returns: returns [3272,3279]"
    },
    {
      "src": "identifier: errorMessage [3964,3976]",
      "dest": "identifier: errorMessage [3964,3976]"
    },
    {
      "src": "function: function [5185,5193]",
      "dest": "function: function [5185,5193]"
    },
    {
      "src": "parameter [2342,2349]",
      "dest": "parameter [2342,2349]"
    },
    {
      "src": "string_literal [1505,1537]",
      "dest": "string_literal [1505,1537]"
    },
    {
      "src": "): ) [3288,3289]",
      "dest": "): ) [3288,3289]"
    },
    {
      "src": "function_body [2351,2755]",
      "dest": "function_body [2351,2755]"
    },
    {
      "src": ",: , [1874,1875]",
      "dest": ",: , [1874,1875]"
    },
    {
      "src": "visibility [3906,3914]",
      "dest": "visibility [3906,3914]"
    },
    {
      "src": "identifier: a [4000,4001]",
      "dest": "identifier: a [4000,4001]"
    },
    {
      "src": "type_name [4636,4643]",
      "dest": "type_name [4636,4643]"
    },
    {
      "src": "identifier: a [2654,2655]",
      "dest": "identifier: a [2654,2655]"
    },
    {
      "src": "memory: memory [3885,3891]",
      "dest": "memory: memory [3885,3891]"
    },
    {
      "src": "identifier: a [3244,3245]",
      "dest": "identifier: a [3244,3245]"
    },
    {
      "src": "return_type_definition [3920,3937]",
      "dest": "return_type_definition [3920,3937]"
    },
    {
      "src": "identifier: c [2746,2747]",
      "dest": "identifier: c [2746,2747]"
    },
    {
      "src": "type_name [3856,3863]",
      "dest": "type_name [3856,3863]"
    },
    {
      "src": "type_name [2297,2304]",
      "dest": "type_name [2297,2304]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [4716,5179]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [4716,5179]"
    },
    {
      "src": ",: , [1432,1433]",
      "dest": ",: , [1432,1433]"
    },
    {
      "src": "type_name [1854,1861]",
      "dest": "type_name [1854,1861]"
    },
    {
      "src": "return_statement [4656,4701]",
      "dest": "return_statement [4656,4701]"
    },
    {
      "src": "parameter [1423,1432]",
      "dest": "parameter [1423,1432]"
    },
    {
      "src": "parameter [1434,1443]",
      "dest": "parameter [1434,1443]"
    },
    {
      "src": "solidity: solidity [7,15]",
      "dest": "solidity: solidity [7,15]"
    },
    {
      "src": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [2502,2573]",
      "dest": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [2502,2573]"
    },
    {
      "src": "type_name [3247,3254]",
      "dest": "type_name [3247,3254]"
    },
    {
      "src": "identifier: a [3864,3865]",
      "dest": "identifier: a [3864,3865]"
    },
    {
      "src": "): ) [4611,4612]",
      "dest": "): ) [4611,4612]"
    },
    {
      "src": "parameter [3929,3936]",
      "dest": "parameter [3929,3936]"
    },
    {
      "src": "primitive_type [4591,4598]",
      "dest": "primitive_type [4591,4598]"
    },
    {
      "src": "function_body [5280,5351]",
      "dest": "function_body [5280,5351]"
    },
    {
      "src": "{: { [1477,1478]",
      "dest": "{: { [1477,1478]"
    },
    {
      "src": ",: , [4671,4672]",
      "dest": ",: , [4671,4672]"
    },
    {
      "src": "\": \" [1505,1506]",
      "dest": "\": \" [1505,1506]"
    },
    {
      "src": "type_name [1927,1934]",
      "dest": "type_name [1927,1934]"
    },
    {
      "src": "): ) [2725,2726]",
      "dest": "): ) [2725,2726]"
    },
    {
      "src": "identifier: b [3315,3316]",
      "dest": "identifier: b [3315,3316]"
    },
    {
      "src": "(: ( [5197,5198]",
      "dest": "(: ( [5197,5198]"
    },
    {
      "src": "return: return [2017,2023]",
      "dest": "return: return [2017,2023]"
    },
    {
      "src": "type_name [5198,5205]",
      "dest": "type_name [5198,5205]"
    },
    {
      "src": "return: return [2739,2745]",
      "dest": "return: return [2739,2745]"
    },
    {
      "src": "}: } [1134,1135]",
      "dest": "}: } [1134,1135]"
    },
    {
      "src": "call_argument [1076,1105]",
      "dest": "call_argument [1076,1105]"
    },
    {
      "src": "identifier: b [1442,1443]",
      "dest": "identifier: b [1442,1443]"
    },
    {
      "src": "uint256: uint256 [2297,2304]",
      "dest": "uint256: uint256 [2297,2304]"
    },
    {
      "src": ",: , [976,977]",
      "dest": ",: , [976,977]"
    },
    {
      "src": "function: function [4578,4586]",
      "dest": "function: function [4578,4586]"
    },
    {
      "src": "return_type_definition [1003,1020]",
      "dest": "return_type_definition [1003,1020]"
    },
    {
      "src": "identifier: a [1044,1045]",
      "dest": "identifier: a [1044,1045]"
    },
    {
      "src": "{: { [2351,2352]",
      "dest": "{: { [2351,2352]"
    },
    {
      "src": "identifier: require [2670,2677]",
      "dest": "identifier: require [2670,2677]"
    },
    {
      "src": "function: function [2284,2292]",
      "dest": "function: function [2284,2292]"
    },
    {
      "src": "=: = [3998,3999]",
      "dest": "=: = [3998,3999]"
    },
    {
      "src": "uint256: uint256 [4636,4643]",
      "dest": "uint256: uint256 [4636,4643]"
    },
    {
      "src": ",: , [1074,1075]",
      "dest": ",: , [1074,1075]"
    },
    {
      "src": "return: return [3301,3307]",
      "dest": "return: return [3301,3307]"
    },
    {
      "src": "function_body [1021,1135]",
      "dest": "function_body [1021,1135]"
    },
    {
      "src": ",: , [3316,3317]",
      "dest": ",: , [3316,3317]"
    },
    {
      "src": "expression_statement [5291,5321]",
      "dest": "expression_statement [5291,5321]"
    },
    {
      "src": "call_argument [4673,4699]",
      "dest": "call_argument [4673,4699]"
    },
    {
      "src": "primitive_type [1927,1934]",
      "dest": "primitive_type [1927,1934]"
    },
    {
      "src": "identifier: a [5206,5207]",
      "dest": "identifier: a [5206,5207]"
    },
    {
      "src": "call_expression [3949,3977]",
      "dest": "call_expression [3949,3977]"
    },
    {
      "src": "identifier: b [3255,3256]",
      "dest": "identifier: b [3255,3256]"
    },
    {
      "src": "state_mutability [4622,4626]",
      "dest": "state_mutability [4622,4626]"
    },
    {
      "src": "identifier: sub [1419,1422]",
      "dest": "identifier: sub [1419,1422]"
    },
    {
      "src": ",: , [1961,1962]",
      "dest": ",: , [1961,1962]"
    },
    {
      "src": ">: > [3959,3960]",
      "dest": ">: > [3959,3960]"
    },
    {
      "src": "identifier: b [986,987]",
      "dest": "identifier: b [986,987]"
    },
    {
      "src": "string [1076,1105]",
      "dest": "string [1076,1105]"
    },
    {
      "src": "internal: internal [4613,4621]",
      "dest": "internal: internal [4613,4621]"
    },
    {
      "src": "call_argument [4667,4668]",
      "dest": "call_argument [4667,4668]"
    },
    {
      "src": "): ) [3976,3977]",
      "dest": "): ) [3976,3977]"
    },
    {
      "src": "identifier: errorMessage [3892,3904]",
      "dest": "identifier: errorMessage [3892,3904]"
    },
    {
      "src": "variable_declaration [1987,1996]",
      "dest": "variable_declaration [1987,1996]"
    },
    {
      "src": ",: , [1863,1864]",
      "dest": ",: , [1863,1864]"
    },
    {
      "src": "type_name [1865,1872]",
      "dest": "type_name [1865,1872]"
    },
    {
      "src": "return_type_definition [4627,4644]",
      "dest": "return_type_definition [4627,4644]"
    },
    {
      "src": "identifier: SafeMath [707,715]",
      "dest": "identifier: SafeMath [707,715]"
    },
    {
      "src": "variable_declaration_statement [2642,2660]",
      "dest": "variable_declaration_statement [2642,2660]"
    },
    {
      "src": "library: library [699,706]",
      "dest": "library: library [699,706]"
    },
    {
      "src": "state_mutability [3267,3271]",
      "dest": "state_mutability [3267,3271]"
    },
    {
      "src": "parameter [2297,2306]",
      "dest": "parameter [2297,2306]"
    },
    {
      "src": "==: == [2589,2591]",
      "dest": "==: == [2589,2591]"
    },
    {
      "src": "=: = [2652,2653]",
      "dest": "=: = [2652,2653]"
    },
    {
      "src": "identifier: b [5299,5300]",
      "dest": "identifier: b [5299,5300]"
    },
    {
      "src": "identifier: c [2650,2651]",
      "dest": "identifier: c [2650,2651]"
    },
    {
      "src": ",: , [3865,3866]",
      "dest": ",: , [3865,3866]"
    },
    {
      "src": "\": \" [3345,3346]",
      "dest": "\": \" [3345,3346]"
    },
    {
      "src": "(: ( [3235,3236]",
      "dest": "(: ( [3235,3236]"
    },
    {
      "src": "function: function [3223,3231]",
      "dest": "function: function [3223,3231]"
    },
    {
      "src": "parameter [1854,1863]",
      "dest": "parameter [1854,1863]"
    },
    {
      "src": "\": \" [4698,4699]",
      "dest": "\": \" [4698,4699]"
    },
    {
      "src": "number_literal: 0 [5304,5305]",
      "dest": "number_literal: 0 [5304,5305]"
    },
    {
      "src": "primitive_type [1032,1039]",
      "dest": "primitive_type [1032,1039]"
    },
    {
      "src": "(: ( [1926,1927]",
      "dest": "(: ( [1926,1927]"
    },
    {
      "src": "string_literal [3318,3346]",
      "dest": "string_literal [3318,3346]"
    },
    {
      "src": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [2763,3217]",
      "dest": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [2763,3217]"
    },
    {
      "src": "uint256: uint256 [1865,1872]",
      "dest": "uint256: uint256 [1865,1872]"
    },
    {
      "src": "function_definition [4578,4708]",
      "dest": "function_definition [4578,4708]"
    },
    {
      "src": "primitive_type [1987,1994]",
      "dest": "primitive_type [1987,1994]"
    },
    {
      "src": "\": \" [2724,2725]",
      "dest": "\": \" [2724,2725]"
    },
    {
      "src": ",: , [3245,3246]",
      "dest": ",: , [3245,3246]"
    },
    {
      "src": "): ) [4643,4644]",
      "dest": "): ) [4643,4644]"
    },
    {
      "src": "): ) [1537,1538]",
      "dest": "): ) [1537,1538]"
    },
    {
      "src": "identifier: errorMessage [1963,1975]",
      "dest": "identifier: errorMessage [1963,1975]"
    },
    {
      "src": "binary_expression [2678,2683]",
      "dest": "binary_expression [2678,2683]"
    },
    {
      "src": "return: return [5331,5337]",
      "dest": "return: return [5331,5337]"
    },
    {
      "src": "^:  ^ [15,17]",
      "dest": "^:  ^ [15,17]"
    },
    {
      "src": "function: function [954,962]",
      "dest": "function: function [954,962]"
    },
    {
      "src": "(: ( [1011,1012]",
      "dest": "(: ( [1011,1012]"
    },
    {
      "src": "identifier: c [1126,1127]",
      "dest": "identifier: c [1126,1127]"
    },
    {
      "src": "function_definition [3843,4121]",
      "dest": "function_definition [3843,4121]"
    },
    {
      "src": "return_statement [3301,3348]",
      "dest": "return_statement [3301,3348]"
    },
    {
      "src": "}: } [1545,1546]",
      "dest": "}: } [1545,1546]"
    },
    {
      "src": "comment: // benefit is lost if 'b' is also tested. [2451,2492]",
      "dest": "comment: // benefit is lost if 'b' is also tested. [2451,2492]"
    },
    {
      "src": "(: ( [1467,1468]",
      "dest": "(: ( [1467,1468]"
    },
    {
      "src": "call_argument [2678,2688]",
      "dest": "call_argument [2678,2688]"
    },
    {
      "src": "binary_expression [1999,2004]",
      "dest": "binary_expression [1999,2004]"
    },
    {
      "src": "visibility [4613,4621]",
      "dest": "visibility [4613,4621]"
    },
    {
      "src": "string [2690,2725]",
      "dest": "string [2690,2725]"
    },
    {
      "src": "identifier: a [1999,2000]",
      "dest": "identifier: a [1999,2000]"
    },
    {
      "src": "{: { [5280,5281]",
      "dest": "{: { [5280,5281]"
    },
    {
      "src": "primitive_type [2342,2349]",
      "dest": "primitive_type [2342,2349]"
    },
    {
      "src": "): ) [1975,1976]",
      "dest": "): ) [1975,1976]"
    },
    {
      "src": "uint256: uint256 [5198,5205]",
      "dest": "uint256: uint256 [5198,5205]"
    },
    {
      "src": "primitive_type [3988,3995]",
      "dest": "primitive_type [3988,3995]"
    },
    {
      "src": "\": \" [4673,4674]",
      "dest": "\": \" [4673,4674]"
    },
    {
      "src": "identifier: c [2024,2025]",
      "dest": "identifier: c [2024,2025]"
    },
    {
      "src": "binary_expression [5299,5305]",
      "dest": "binary_expression [5299,5305]"
    },
    {
      "src": "identifier: b [3875,3876]",
      "dest": "identifier: b [3875,3876]"
    },
    {
      "src": "memory: memory [5227,5233]",
      "dest": "memory: memory [5227,5233]"
    },
    {
      "src": "type_name [3281,3288]",
      "dest": "type_name [3281,3288]"
    },
    {
      "src": "type_name [1987,1994]",
      "dest": "type_name [1987,1994]"
    },
    {
      "src": "variable_declaration_statement [1032,1050]",
      "dest": "variable_declaration_statement [1032,1050]"
    },
    {
      "src": "(: ( [1498,1499]",
      "dest": "(: ( [1498,1499]"
    },
    {
      "src": "parameter [967,976]",
      "dest": "parameter [967,976]"
    },
    {
      "src": "uint256: uint256 [978,985]",
      "dest": "uint256: uint256 [978,985]"
    },
    {
      "src": "call_argument [1955,1961]",
      "dest": "call_argument [1955,1961]"
    },
    {
      "src": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [2362,2441]",
      "dest": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [2362,2441]"
    },
    {
      "src": "parameter [3281,3288]",
      "dest": "parameter [3281,3288]"
    },
    {
      "src": "primitive_type [3247,3254]",
      "dest": "primitive_type [3247,3254]"
    },
    {
      "src": "type_name [1876,1882]",
      "dest": "type_name [1876,1882]"
    },
    {
      "src": "internal: internal [3258,3266]",
      "dest": "internal: internal [3258,3266]"
    },
    {
      "src": ",: , [3962,3963]",
      "dest": ",: , [3962,3963]"
    },
    {
      "src": "type_name [5209,5216]",
      "dest": "type_name [5209,5216]"
    },
    {
      "src": "identifier: c [1040,1041]",
      "dest": "identifier: c [1040,1041]"
    },
    {
      "src": "uint256: uint256 [2342,2349]",
      "dest": "uint256: uint256 [2342,2349]"
    },
    {
      "src": "visibility [2319,2327]",
      "dest": "visibility [2319,2327]"
    },
    {
      "src": "identifier: b [4610,4611]",
      "dest": "identifier: b [4610,4611]"
    },
    {
      "src": "identifier: c [2678,2679]",
      "dest": "identifier: c [2678,2679]"
    },
    {
      "src": "==: == [2684,2686]",
      "dest": "==: == [2684,2686]"
    },
    {
      "src": "primitive_type [4602,4609]",
      "dest": "primitive_type [4602,4609]"
    },
    {
      "src": "identifier: b [5217,5218]",
      "dest": "identifier: b [5217,5218]"
    },
    {
      "src": "internal: internal [1445,1453]",
      "dest": "internal: internal [1445,1453]"
    },
    {
      "src": "uint256: uint256 [1032,1039]",
      "dest": "uint256: uint256 [1032,1039]"
    },
    {
      "src": "primitive_type [2297,2304]",
      "dest": "primitive_type [2297,2304]"
    },
    {
      "src": "function_body [1477,1546]",
      "dest": "function_body [1477,1546]"
    },
    {
      "src": "type_name [2308,2315]",
      "dest": "type_name [2308,2315]"
    },
    {
      "src": "number_literal: 0 [3961,3962]",
      "dest": "number_literal: 0 [3961,3962]"
    },
    {
      "src": "call_expression [4663,4700]",
      "dest": "call_expression [4663,4700]"
    },
    {
      "src": "identifier: errorMessage [1890,1902]",
      "dest": "identifier: errorMessage [1890,1902]"
    },
    {
      "src": "if: if [2583,2585]",
      "dest": "if: if [2583,2585]"
    },
    {
      "src": "function_definition [2284,2755]",
      "dest": "function_definition [2284,2755]"
    },
    {
      "src": "function_definition [954,1135]",
      "dest": "function_definition [954,1135]"
    },
    {
      "src": "type_name [2342,2349]",
      "dest": "type_name [2342,2349]"
    },
    {
      "src": "solidity_pragma_token [7,22]",
      "dest": "solidity_pragma_token [7,22]"
    },
    {
      "src": "expression_statement [2670,2727]",
      "dest": "expression_statement [2670,2727]"
    },
    {
      "src": "(: ( [4635,4636]",
      "dest": "(: ( [4635,4636]"
    },
    {
      "src": "{: { [4645,4646]",
      "dest": "{: { [4645,4646]"
    },
    {
      "src": "primitive_type [5220,5226]",
      "dest": "primitive_type [5220,5226]"
    },
    {
      "src": "comment: // Contract on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts [27,118]",
      "dest": "comment: // Contract on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts [27,118]"
    },
    {
      "src": "pure: pure [2328,2332]",
      "dest": "pure: pure [2328,2332]"
    },
    {
      "src": "return_statement [2739,2748]",
      "dest": "return_statement [2739,2748]"
    },
    {
      "src": "string [3318,3346]",
      "dest": "string [3318,3346]"
    },
    {
      "src": "identifier: b [1873,1874]",
      "dest": "identifier: b [1873,1874]"
    },
    {
      "src": "primitive_type [2642,2649]",
      "dest": "primitive_type [2642,2649]"
    },
    {
      "src": "pure: pure [3915,3919]",
      "dest": "pure: pure [3915,3919]"
    },
    {
      "src": "identifier: b [2003,2004]",
      "dest": "identifier: b [2003,2004]"
    },
    {
      "src": "): ) [1475,1476]",
      "dest": "): ) [1475,1476]"
    },
    {
      "src": "): ) [1443,1444]",
      "dest": "): ) [1443,1444]"
    },
    {
      "src": "return_type_definition [1459,1476]",
      "dest": "return_type_definition [1459,1476]"
    },
    {
      "src": "identifier: a [1960,1961]",
      "dest": "identifier: a [1960,1961]"
    },
    {
      "src": "parameter [3856,3865]",
      "dest": "parameter [3856,3865]"
    },
    {
      "src": "variable_declaration [3988,3997]",
      "dest": "variable_declaration [3988,3997]"
    },
    {
      "src": "identifier: require [5291,5298]",
      "dest": "identifier: require [5291,5298]"
    },
    {
      "src": "visibility [1904,1912]",
      "dest": "visibility [1904,1912]"
    },
    {
      "src": "uint256: uint256 [1987,1994]",
      "dest": "uint256: uint256 [1987,1994]"
    },
    {
      "src": "parameter [5271,5278]",
      "dest": "parameter [5271,5278]"
    },
    {
      "src": "parameter [1865,1874]",
      "dest": "parameter [1865,1874]"
    },
    {
      "src": "identifier: c [4112,4113]",
      "dest": "identifier: c [4112,4113]"
    },
    {
      "src": "}: } [2754,2755]",
      "dest": "}: } [2754,2755]"
    },
    {
      "src": "(: ( [3855,3856]",
      "dest": "(: ( [3855,3856]"
    },
    {
      "src": "call_argument [4670,4671]",
      "dest": "call_argument [4670,4671]"
    },
    {
      "src": "variable_declaration_statement [3988,4006]",
      "dest": "variable_declaration_statement [3988,4006]"
    },
    {
      "src": "number_literal: 0 [2617,2618]",
      "dest": "number_literal: 0 [2617,2618]"
    },
    {
      "src": "type_name [978,985]",
      "dest": "type_name [978,985]"
    },
    {
      "src": "parameter [3867,3876]",
      "dest": "parameter [3867,3876]"
    },
    {
      "src": "string: string [5220,5226]",
      "dest": "string: string [5220,5226]"
    },
    {
      "src": ",: , [2688,2689]",
      "dest": ",: , [2688,2689]"
    },
    {
      "src": "return_type_definition [2333,2350]",
      "dest": "return_type_definition [2333,2350]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      * - Subtraction cannot overflow.      */ [1554,1835]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      * - Subtraction cannot overflow.      */ [1554,1835]"
    },
    {
      "src": "): ) [3936,3937]",
      "dest": "): ) [3936,3937]"
    },
    {
      "src": "identifier: b [1955,1956]",
      "dest": "identifier: b [1955,1956]"
    },
    {
      "src": "binary_expression [3957,3962]",
      "dest": "binary_expression [3957,3962]"
    },
    {
      "src": "(: ( [4666,4667]",
      "dest": "(: ( [4666,4667]"
    },
    {
      "src": "string [4673,4699]",
      "dest": "string [4673,4699]"
    },
    {
      "src": "parameter [3878,3904]",
      "dest": "parameter [3878,3904]"
    },
    {
      "src": "pure: pure [3267,3271]",
      "dest": "pure: pure [3267,3271]"
    },
    {
      "src": "%: % [5340,5341]",
      "dest": "%: % [5340,5341]"
    },
    {
      "src": "string_literal [1076,1105]",
      "dest": "string_literal [1076,1105]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      * - Subtraction cannot overflow.      */ [1143,1404]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      * - Subtraction cannot overflow.      */ [1143,1404]"
    },
    {
      "src": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [3363,3837]",
      "dest": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [3363,3837]"
    },
    {
      "src": "identifier: mod [4663,4666]",
      "dest": "identifier: mod [4663,4666]"
    },
    {
      "src": "type_name [5220,5226]",
      "dest": "type_name [5220,5226]"
    },
    {
      "src": "identifier: a [5338,5339]",
      "dest": "identifier: a [5338,5339]"
    },
    {
      "src": "uint256: uint256 [2308,2315]",
      "dest": "uint256: uint256 [2308,2315]"
    },
    {
      "src": "parameter [5209,5218]",
      "dest": "parameter [5209,5218]"
    },
    {
      "src": "uint256: uint256 [4591,4598]",
      "dest": "uint256: uint256 [4591,4598]"
    },
    {
      "src": "returns: returns [1918,1925]",
      "dest": "returns: returns [1918,1925]"
    },
    {
      "src": "identifier: div [3852,3855]",
      "dest": "identifier: div [3852,3855]"
    },
    {
      "src": "primitive_type [1876,1882]",
      "dest": "primitive_type [1876,1882]"
    },
    {
      "src": "uint256: uint256 [3247,3254]",
      "dest": "uint256: uint256 [3247,3254]"
    },
    {
      "src": "expression_statement [1060,1107]",
      "dest": "expression_statement [1060,1107]"
    },
    {
      "src": "binary_expression [2654,2659]",
      "dest": "binary_expression [2654,2659]"
    },
    {
      "src": "binary_expression [1955,1961]",
      "dest": "binary_expression [1955,1961]"
    },
    {
      "src": "call_argument [3312,3313]",
      "dest": "call_argument [3312,3313]"
    },
    {
      "src": "call_argument [1505,1537]",
      "dest": "call_argument [1505,1537]"
    },
    {
      "src": "block_statement [2595,2630]",
      "dest": "block_statement [2595,2630]"
    },
    {
      "src": "primitive_type [4636,4643]",
      "dest": "primitive_type [4636,4643]"
    },
    {
      "src": "expression_statement [1947,1977]",
      "dest": "expression_statement [1947,1977]"
    },
    {
      "src": "returns: returns [3920,3927]",
      "dest": "returns: returns [3920,3927]"
    },
    {
      "src": "identifier: b [4004,4005]",
      "dest": "identifier: b [4004,4005]"
    },
    {
      "src": "identifier: a [4667,4668]",
      "dest": "identifier: a [4667,4668]"
    },
    {
      "src": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      * - Multiplication cannot overflow.      */ [2041,2278]",
      "dest": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      * - Multiplication cannot overflow.      */ [2041,2278]"
    },
    {
      "src": "identifier: add [963,966]",
      "dest": "identifier: add [963,966]"
    },
    {
      "src": "binary_expression [5338,5343]",
      "dest": "binary_expression [5338,5343]"
    },
    {
      "src": "variable_declaration [2642,2651]",
      "dest": "variable_declaration [2642,2651]"
    },
    {
      "src": "(: ( [1954,1955]",
      "dest": "(: ( [1954,1955]"
    },
    {
      "src": "return_statement [1119,1128]",
      "dest": "return_statement [1119,1128]"
    },
    {
      "src": "variable_declaration_statement [1987,2005]",
      "dest": "variable_declaration_statement [1987,2005]"
    },
    {
      "src": "}: } [4707,4708]",
      "dest": "}: } [4707,4708]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [4129,4572]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [4129,4572]"
    },
    {
      "src": "identifier: a [3312,3313]",
      "dest": "identifier: a [3312,3313]"
    },
    {
      "src": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [4016,4093]",
      "dest": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [4016,4093]"
    },
    {
      "src": "): ) [2593,2594]",
      "dest": "): ) [2593,2594]"
    },
    {
      "src": "}: } [5353,5354]",
      "dest": "}: } [5353,5354]"
    },
    {
      "src": "function_definition [1841,2033]",
      "dest": "function_definition [1841,2033]"
    },
    {
      "src": "-: - [2001,2002]",
      "dest": "-: - [2001,2002]"
    },
    {
      "src": "primitive_type [3856,3863]",
      "dest": "primitive_type [3856,3863]"
    },
    {
      "src": "function_body [4645,4708]",
      "dest": "function_body [4645,4708]"
    },
    {
      "src": "/: / [2680,2681]",
      "dest": "/: / [2680,2681]"
    },
    {
      "src": "function_definition [3223,3355]",
      "dest": "function_definition [3223,3355]"
    },
    {
      "src": "function_body [3290,3355]",
      "dest": "function_body [3290,3355]"
    },
    {
      "src": "identifier: b [3957,3958]",
      "dest": "identifier: b [3957,3958]"
    },
    {
      "src": "solidity_version_comparison_operator [15,17]",
      "dest": "solidity_version_comparison_operator [15,17]"
    },
    {
      "src": "return_statement [2610,2619]",
      "dest": "return_statement [2610,2619]"
    },
    {
      "src": "identifier: errorMessage [5307,5319]",
      "dest": "identifier: errorMessage [5307,5319]"
    },
    {
      "src": "call_expression [1060,1106]",
      "dest": "call_expression [1060,1106]"
    },
    {
      "src": "identifier: a [1862,1863]",
      "dest": "identifier: a [1862,1863]"
    },
    {
      "src": "type_name [2642,2649]",
      "dest": "type_name [2642,2649]"
    },
    {
      "src": "identifier: b [4670,4671]",
      "dest": "identifier: b [4670,4671]"
    },
    {
      "src": "internal: internal [3906,3914]",
      "dest": "internal: internal [3906,3914]"
    },
    {
      "src": "pure: pure [5257,5261]",
      "dest": "pure: pure [5257,5261]"
    },
    {
      "src": "return_statement [4105,4114]",
      "dest": "return_statement [4105,4114]"
    },
    {
      "src": "parameter [4636,4643]",
      "dest": "parameter [4636,4643]"
    },
    {
      "src": "returns: returns [1003,1010]",
      "dest": "returns: returns [1003,1010]"
    },
    {
      "src": "identifier: a [2305,2306]",
      "dest": "identifier: a [2305,2306]"
    },
    {
      "src": "identifier: require [1947,1954]",
      "dest": "identifier: require [1947,1954]"
    },
    {
      "src": "(: ( [1853,1854]",
      "dest": "(: ( [1853,1854]"
    },
    {
      "src": "return_statement [1488,1539]",
      "dest": "return_statement [1488,1539]"
    },
    {
      "src": "returns: returns [2333,2340]",
      "dest": "returns: returns [2333,2340]"
    },
    {
      "src": "parameter [978,987]",
      "dest": "parameter [978,987]"
    },
    {
      "src": "call_argument [1499,1500]",
      "dest": "call_argument [1499,1500]"
    },
    {
      "src": "uint256: uint256 [967,974]",
      "dest": "uint256: uint256 [967,974]"
    },
    {
      "src": "parameter [5198,5207]",
      "dest": "parameter [5198,5207]"
    },
    {
      "src": "state_mutability [1454,1458]",
      "dest": "state_mutability [1454,1458]"
    },
    {
      "src": "): ) [3904,3905]",
      "dest": "): ) [3904,3905]"
    },
    {
      "src": "parameter [1012,1019]",
      "dest": "parameter [1012,1019]"
    },
    {
      "src": "identifier: a [975,976]",
      "dest": "identifier: a [975,976]"
    },
    {
      "src": "primitive_type [1434,1441]",
      "dest": "primitive_type [1434,1441]"
    },
    {
      "src": ">=: >= [1070,1072]",
      "dest": ">=: >= [1070,1072]"
    },
    {
      "src": "{: { [2595,2596]",
      "dest": "{: { [2595,2596]"
    },
    {
      "src": "state_mutability [5257,5261]",
      "dest": "state_mutability [5257,5261]"
    },
    {
      "src": "(: ( [2341,2342]",
      "dest": "(: ( [2341,2342]"
    },
    {
      "src": "identifier: c [3996,3997]",
      "dest": "identifier: c [3996,3997]"
    },
    {
      "src": "uint256: uint256 [3929,3936]",
      "dest": "uint256: uint256 [3929,3936]"
    },
    {
      "src": "pure: pure [1454,1458]",
      "dest": "pure: pure [1454,1458]"
    },
    {
      "src": ",: , [4600,4601]",
      "dest": ",: , [4600,4601]"
    },
    {
      "src": "type_name [3878,3884]",
      "dest": "type_name [3878,3884]"
    },
    {
      "src": "+: + [1046,1047]",
      "dest": "+: + [1046,1047]"
    },
    {
      "src": "primitive_type [1468,1475]",
      "dest": "primitive_type [1468,1475]"
    },
    {
      "src": "call_expression [2670,2726]",
      "dest": "call_expression [2670,2726]"
    },
    {
      "src": "type_name [5271,5278]",
      "dest": "type_name [5271,5278]"
    },
    {
      "src": "): ) [1105,1106]",
      "dest": "): ) [1105,1106]"
    },
    {
      "src": "parameter [4602,4611]",
      "dest": "parameter [4602,4611]"
    },
    {
      "src": ",: , [4668,4669]",
      "dest": ",: , [4668,4669]"
    },
    {
      "src": "(: ( [2296,2297]",
      "dest": "(: ( [2296,2297]"
    },
    {
      "src": "function_definition [1410,1546]",
      "dest": "function_definition [1410,1546]"
    },
    {
      "src": "string: string [3878,3884]",
      "dest": "string: string [3878,3884]"
    },
    {
      "src": "): ) [5319,5320]",
      "dest": "): ) [5319,5320]"
    },
    {
      "src": "\": \" [1104,1105]",
      "dest": "\": \" [1104,1105]"
    },
    {
      "src": "state_mutability [1913,1917]",
      "dest": "state_mutability [1913,1917]"
    },
    {
      "src": "): ) [2317,2318]",
      "dest": "): ) [2317,2318]"
    },
    {
      "src": ",: , [1500,1501]",
      "dest": ",: , [1500,1501]"
    },
    {
      "src": "pragma: pragma [0,6]",
      "dest": "pragma: pragma [0,6]"
    },
    {
      "src": "): ) [3346,3347]",
      "dest": "): ) [3346,3347]"
    },
    {
      "src": "identifier: mod [5194,5197]",
      "dest": "identifier: mod [5194,5197]"
    },
    {
      "src": "}: } [2032,2033]",
      "dest": "}: } [2032,2033]"
    },
    {
      "src": "): ) [4699,4700]",
      "dest": "): ) [4699,4700]"
    },
    {
      "src": "!=: != [5301,5303]",
      "dest": "!=: != [5301,5303]"
    },
    {
      "src": "returns: returns [5262,5269]",
      "dest": "returns: returns [5262,5269]"
    },
    {
      "src": "uint256: uint256 [1468,1475]",
      "dest": "uint256: uint256 [1468,1475]"
    },
    {
      "src": "uint256: uint256 [3856,3863]",
      "dest": "uint256: uint256 [3856,3863]"
    },
    {
      "src": "): ) [5278,5279]",
      "dest": "): ) [5278,5279]"
    },
    {
      "src": "type_name [3867,3874]",
      "dest": "type_name [3867,3874]"
    },
    {
      "src": "parameter [5220,5246]",
      "dest": "parameter [5220,5246]"
    },
    {
      "src": "): ) [987,988]",
      "dest": "): ) [987,988]"
    },
    {
      "src": "type_name [3929,3936]",
      "dest": "type_name [3929,3936]"
    },
    {
      "src": "identifier: b [5342,5343]",
      "dest": "identifier: b [5342,5343]"
    },
    {
      "src": "identifier: a [2682,2683]",
      "dest": "identifier: a [2682,2683]"
    },
    {
      "src": "internal: internal [5248,5256]",
      "dest": "internal: internal [5248,5256]"
    },
    {
      "src": "primitive_type [3236,3243]",
      "dest": "primitive_type [3236,3243]"
    },
    {
      "src": "primitive_type [978,985]",
      "dest": "primitive_type [978,985]"
    },
    {
      "src": "=: = [1997,1998]",
      "dest": "=: = [1997,1998]"
    },
    {
      "src": "{: { [3290,3291]",
      "dest": "{: { [3290,3291]"
    },
    {
      "src": "call_argument [1068,1074]",
      "dest": "call_argument [1068,1074]"
    },
    {
      "src": "{: { [716,717]",
      "dest": "{: { [716,717]"
    },
    {
      "src": "uint256: uint256 [1927,1934]",
      "dest": "uint256: uint256 [1927,1934]"
    },
    {
      "src": "function: function [1841,1849]",
      "dest": "function: function [1841,1849]"
    },
    {
      "src": "{: { [1021,1022]",
      "dest": "{: { [1021,1022]"
    },
    {
      "src": "contract_body [716,5354]",
      "dest": "contract_body [716,5354]"
    },
    {
      "src": "type_name [1434,1441]",
      "dest": "type_name [1434,1441]"
    },
    {
      "src": "identifier: require [1060,1067]",
      "dest": "identifier: require [1060,1067]"
    },
    {
      "src": "identifier: c [1995,1996]",
      "dest": "identifier: c [1995,1996]"
    },
    {
      "src": "call_argument [3315,3316]",
      "dest": "call_argument [3315,3316]"
    },
    {
      "src": "(: ( [5270,5271]",
      "dest": "(: ( [5270,5271]"
    },
    {
      "src": "return: return [4105,4111]",
      "dest": "return: return [4105,4111]"
    },
    {
      "src": "(: ( [966,967]",
      "dest": "(: ( [966,967]"
    },
    {
      "src": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [122,697]",
      "dest": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [122,697]"
    },
    {
      "src": "string_literal [2690,2725]",
      "dest": "string_literal [2690,2725]"
    },
    {
      "src": "parameter [3236,3245]",
      "dest": "parameter [3236,3245]"
    },
    {
      "src": "identifier: b [1502,1503]",
      "dest": "identifier: b [1502,1503]"
    },
    {
      "src": "identifier: a [1073,1074]",
      "dest": "identifier: a [1073,1074]"
    },
    {
      "src": "}: } [2629,2630]",
      "dest": "}: } [2629,2630]"
    },
    {
      "src": "call_argument [3318,3346]",
      "dest": "call_argument [3318,3346]"
    },
    {
      "src": "identifier: b [2687,2688]",
      "dest": "identifier: b [2687,2688]"
    },
    {
      "src": "state_mutability [2328,2332]",
      "dest": "state_mutability [2328,2332]"
    },
    {
      "src": "expression_statement [3949,3978]",
      "dest": "expression_statement [3949,3978]"
    },
    {
      "src": "identifier: sub [1495,1498]",
      "dest": "identifier: sub [1495,1498]"
    },
    {
      "src": "primitive_type [3878,3884]",
      "dest": "primitive_type [3878,3884]"
    },
    {
      "src": "uint256: uint256 [4602,4609]",
      "dest": "uint256: uint256 [4602,4609]"
    },
    {
      "src": "return: return [1488,1494]",
      "dest": "return: return [1488,1494]"
    },
    {
      "src": "type_name [3236,3243]",
      "dest": "type_name [3236,3243]"
    },
    {
      "src": "function: function [3843,3851]",
      "dest": "function: function [3843,3851]"
    },
    {
      "src": "return: return [1119,1125]",
      "dest": "return: return [1119,1125]"
    },
    {
      "src": ",: , [3313,3314]",
      "dest": ",: , [3313,3314]"
    },
    {
      "src": "<=: <= [1957,1959]",
      "dest": "<=: <= [1957,1959]"
    },
    {
      "src": "identifier: sub [1850,1853]",
      "dest": "identifier: sub [1850,1853]"
    },
    {
      "src": "): ) [5246,5247]",
      "dest": "): ) [5246,5247]"
    },
    {
      "src": "type_name [1012,1019]",
      "dest": "type_name [1012,1019]"
    },
    {
      "src": "identifier: mul [2293,2296]",
      "dest": "identifier: mul [2293,2296]"
    },
    {
      "src": "(: ( [5298,5299]",
      "dest": "(: ( [5298,5299]"
    },
    {
      "src": "primitive_type [3929,3936]",
      "dest": "primitive_type [3929,3936]"
    },
    {
      "src": "}: } [3354,3355]",
      "dest": "}: } [3354,3355]"
    },
    {
      "src": "call_argument [3964,3976]",
      "dest": "call_argument [3964,3976]"
    },
    {
      "src": "uint256: uint256 [3867,3874]",
      "dest": "uint256: uint256 [3867,3874]"
    },
    {
      "src": "call_expression [1495,1538]",
      "dest": "call_expression [1495,1538]"
    },
    {
      "src": "type_name [4602,4609]",
      "dest": "type_name [4602,4609]"
    },
    {
      "src": "): ) [3256,3257]",
      "dest": "): ) [3256,3257]"
    },
    {
      "src": "return_type_definition [3272,3289]",
      "dest": "return_type_definition [3272,3289]"
    },
    {
      "src": "return: return [2610,2616]",
      "dest": "return: return [2610,2616]"
    },
    {
      "src": "binary_expression [4000,4005]",
      "dest": "binary_expression [4000,4005]"
    },
    {
      "src": "string_literal [4673,4699]",
      "dest": "string_literal [4673,4699]"
    },
    {
      "src": "library_declaration [699,5354]",
      "dest": "library_declaration [699,5354]"
    },
    {
      "src": "parameter [1876,1902]",
      "dest": "parameter [1876,1902]"
    },
    {
      "src": "function_body [3938,4121]",
      "dest": "function_body [3938,4121]"
    },
    {
      "src": "identifier: mod [4587,4590]",
      "dest": "identifier: mod [4587,4590]"
    },
    {
      "src": "{: { [1936,1937]",
      "dest": "{: { [1936,1937]"
    },
    {
      "src": "if_statement [2583,2630]",
      "dest": "if_statement [2583,2630]"
    },
    {
      "src": "call_expression [3308,3347]",
      "dest": "call_expression [3308,3347]"
    },
    {
      "src": "parameter [1927,1934]",
      "dest": "parameter [1927,1934]"
    },
    {
      "src": "*: * [2656,2657]",
      "dest": "*: * [2656,2657]"
    },
    {
      "src": "}: } [4120,4121]",
      "dest": "}: } [4120,4121]"
    },
    {
      "src": "identifier: b [2316,2317]",
      "dest": "identifier: b [2316,2317]"
    },
    {
      "src": "return_statement [2017,2026]",
      "dest": "return_statement [2017,2026]"
    },
    {
      "src": "uint256: uint256 [1854,1861]",
      "dest": "uint256: uint256 [1854,1861]"
    },
    {
      "src": "state_mutability [998,1002]",
      "dest": "state_mutability [998,1002]"
    },
    {
      "src": "(: ( [1067,1068]",
      "dest": "(: ( [1067,1068]"
    },
    {
      "src": "identifier: div [3308,3311]",
      "dest": "identifier: div [3308,3311]"
    },
    {
      "src": "identifier: require [3949,3956]",
      "dest": "identifier: require [3949,3956]"
    },
    {
      "src": "function: function [1410,1418]",
      "dest": "function: function [1410,1418]"
    },
    {
      "src": "\": \" [3318,3319]",
      "dest": "\": \" [3318,3319]"
    },
    {
      "src": "uint256: uint256 [1012,1019]",
      "dest": "uint256: uint256 [1012,1019]"
    },
    {
      "src": "uint256: uint256 [3988,3995]",
      "dest": "uint256: uint256 [3988,3995]"
    },
    {
      "src": "parameter [2308,2317]",
      "dest": "parameter [2308,2317]"
    },
    {
      "src": "type_name [1032,1039]",
      "dest": "type_name [1032,1039]"
    },
    {
      "src": "function_definition [5185,5351]",
      "dest": "function_definition [5185,5351]"
    },
    {
      "src": "string [1505,1537]",
      "dest": "string [1505,1537]"
    },
    {
      "src": "source_file [0,5356]",
      "dest": "source_file [0,5356]"
    },
    {
      "src": "primitive_type [5198,5205]",
      "dest": "primitive_type [5198,5205]"
    },
    {
      "src": "(: ( [3280,3281]",
      "dest": "(: ( [3280,3281]"
    },
    {
      "src": "primitive_type [1854,1861]",
      "dest": "primitive_type [1854,1861]"
    },
    {
      "src": "returns: returns [4627,4634]",
      "dest": "returns: returns [4627,4634]"
    },
    {
      "src": "identifier: div [3232,3235]",
      "dest": "identifier: div [3232,3235]"
    },
    {
      "src": "call_argument [2690,2725]",
      "dest": "call_argument [2690,2725]"
    },
    {
      "src": ",: , [5207,5208]",
      "dest": ",: , [5207,5208]"
    },
    {
      "src": "(: ( [4590,4591]",
      "dest": "(: ( [4590,4591]"
    },
    {
      "src": "uint256: uint256 [1434,1441]",
      "dest": "uint256: uint256 [1434,1441]"
    },
    {
      "src": "call_argument [5299,5305]",
      "dest": "call_argument [5299,5305]"
    },
    {
      "src": "primitive_type [5209,5216]",
      "dest": "primitive_type [5209,5216]"
    },
    {
      "src": "returns: returns [1459,1466]",
      "dest": "returns: returns [1459,1466]"
    },
    {
      "src": "internal: internal [1904,1912]",
      "dest": "internal: internal [1904,1912]"
    },
    {
      "src": "uint256: uint256 [2642,2649]",
      "dest": "uint256: uint256 [2642,2649]"
    },
    {
      "src": "): ) [1019,1020]",
      "dest": "): ) [1019,1020]"
    },
    {
      "src": "\": \" [1536,1537]",
      "dest": "\": \" [1536,1537]"
    },
    {
      "src": "primitive_type [967,974]",
      "dest": "primitive_type [967,974]"
    },
    {
      "src": "identifier: errorMessage [5234,5246]",
      "dest": "identifier: errorMessage [5234,5246]"
    },
    {
      "src": "solidity_version: 0.6.6 [17,22]",
      "dest": "solidity_version: 0.6.6 [17,22]"
    },
    {
      "src": "call_expression [1947,1976]",
      "dest": "call_expression [1947,1976]"
    },
    {
      "src": "visibility [3258,3266]",
      "dest": "visibility [3258,3266]"
    },
    {
      "src": "memory: memory [1883,1889]",
      "dest": "memory: memory [1883,1889]"
    },
    {
      "src": "(: ( [2677,2678]",
      "dest": "(: ( [2677,2678]"
    },
    {
      "src": ",: , [5305,5306]",
      "dest": ",: , [5305,5306]"
    },
    {
      "src": "(: ( [3956,3957]",
      "dest": "(: ( [3956,3957]"
    },
    {
      "src": "type_name [4591,4598]",
      "dest": "type_name [4591,4598]"
    },
    {
      "src": "): ) [1902,1903]",
      "dest": "): ) [1902,1903]"
    },
    {
      "src": "identifier: a [2587,2588]",
      "dest": "identifier: a [2587,2588]"
    },
    {
      "src": "primitive_type [2308,2315]",
      "dest": "primitive_type [2308,2315]"
    },
    {
      "src": "identifier: b [2658,2659]",
      "dest": "identifier: b [2658,2659]"
    },
    {
      "src": "): ) [2349,2350]",
      "dest": "): ) [2349,2350]"
    },
    {
      "src": "call_expression [5291,5320]",
      "dest": "call_expression [5291,5320]"
    },
    {
      "src": "return_statement [5331,5344]",
      "dest": "return_statement [5331,5344]"
    }
  ],
  "actions": []
}