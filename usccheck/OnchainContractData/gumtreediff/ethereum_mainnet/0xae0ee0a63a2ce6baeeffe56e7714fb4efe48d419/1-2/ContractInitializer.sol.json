{
  "matches": [
    {
      "src": "): ) [1252,1253]",
      "dest": "): ) [1252,1253]"
    },
    {
      "src": "pure: pure [1077,1081]",
      "dest": "pure: pure [1077,1081]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]",
      "dest": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]"
    },
    {
      "src": "virtual: virtual [1082,1089]",
      "dest": "virtual: virtual [1082,1089]"
    },
    {
      "src": "identifier: processSubContractAddresses [1638,1665]",
      "dest": "identifier: processSubContractAddresses [1638,1665]"
    },
    {
      "src": "abstract: abstract [908,916]",
      "dest": "abstract: abstract [908,916]"
    },
    {
      "src": "type_name [1099,1106]",
      "dest": "type_name [1099,1106]"
    },
    {
      "src": "function: function [1858,1866]",
      "dest": "function: function [1858,1866]"
    },
    {
      "src": "bytes: bytes [1666,1671]",
      "dest": "bytes: bytes [1666,1671]"
    },
    {
      "src": "): ) [1106,1107]",
      "dest": "): ) [1106,1107]"
    },
    {
      "src": "primitive_type [1409,1414]",
      "dest": "primitive_type [1409,1414]"
    },
    {
      "src": "contract_declaration [908,1931]",
      "dest": "contract_declaration [908,1931]"
    },
    {
      "src": "pragma: pragma [636,642]",
      "dest": "pragma: pragma [636,642]"
    },
    {
      "src": "internal: internal [1703,1711]",
      "dest": "internal: internal [1703,1711]"
    },
    {
      "src": "parameter [1285,1289]",
      "dest": "parameter [1285,1289]"
    },
    {
      "src": "contract: contract [917,925]",
      "dest": "contract: contract [917,925]"
    },
    {
      "src": "): ) [1910,1911]",
      "dest": "): ) [1910,1911]"
    },
    {
      "src": "type_name [1285,1289]",
      "dest": "type_name [1285,1289]"
    },
    {
      "src": "identifier: subContractAddresses [1681,1701]",
      "dest": "identifier: subContractAddresses [1681,1701]"
    },
    {
      "src": "return_type_definition [1276,1290]",
      "dest": "return_type_definition [1276,1290]"
    },
    {
      "src": "(: ( [1890,1891]",
      "dest": "(: ( [1890,1891]"
    },
    {
      "src": "type_name [1891,1896]",
      "dest": "type_name [1891,1896]"
    },
    {
      "src": "primitive_type [1891,1896]",
      "dest": "primitive_type [1891,1896]"
    },
    {
      "src": "^:  ^ [651,653]",
      "dest": "^:  ^ [651,653]"
    },
    {
      "src": "state_mutability [1263,1267]",
      "dest": "state_mutability [1263,1267]"
    },
    {
      "src": "visibility [1254,1262]",
      "dest": "visibility [1254,1262]"
    },
    {
      "src": "state_mutability [1439,1443]",
      "dest": "state_mutability [1439,1443]"
    },
    {
      "src": "returns: returns [1276,1283]",
      "dest": "returns: returns [1276,1283]"
    },
    {
      "src": "function_definition [1039,1108]",
      "dest": "function_definition [1039,1108]"
    },
    {
      "src": "identifier: initializeContractState [1867,1890]",
      "dest": "identifier: initializeContractState [1867,1890]"
    },
    {
      "src": "virtual: virtual [1712,1719]",
      "dest": "virtual: virtual [1712,1719]"
    },
    {
      "src": "comment: /*       This function applies the logic of initializing the proxied contract state,       e.g. setting root values etc.     */ [1726,1853]",
      "dest": "comment: /*       This function applies the logic of initializing the proxied contract state,       e.g. setting root values etc.     */ [1726,1853]"
    },
    {
      "src": "virtual: virtual [1444,1451]",
      "dest": "virtual: virtual [1444,1451]"
    },
    {
      "src": "calldata: calldata [1415,1423]",
      "dest": "calldata: calldata [1415,1423]"
    },
    {
      "src": "bytes: bytes [1891,1896]",
      "dest": "bytes: bytes [1891,1896]"
    },
    {
      "src": "parameter [1891,1910]",
      "dest": "parameter [1891,1910]"
    },
    {
      "src": "function_definition [1858,1929]",
      "dest": "function_definition [1858,1929]"
    },
    {
      "src": "identifier: validateInitData [1392,1408]",
      "dest": "identifier: validateInitData [1392,1408]"
    },
    {
      "src": "(: ( [1065,1066]",
      "dest": "(: ( [1065,1066]"
    },
    {
      "src": "view: view [1263,1267]",
      "dest": "view: view [1263,1267]"
    },
    {
      "src": "(: ( [1665,1666]",
      "dest": "(: ( [1665,1666]"
    },
    {
      "src": "calldata: calldata [1672,1680]",
      "dest": "calldata: calldata [1672,1680]"
    },
    {
      "src": "(: ( [1251,1252]",
      "dest": "(: ( [1251,1252]"
    },
    {
      "src": "state_mutability [1077,1081]",
      "dest": "state_mutability [1077,1081]"
    },
    {
      "src": "primitive_type [1099,1106]",
      "dest": "primitive_type [1099,1106]"
    },
    {
      "src": "bool: bool [1285,1289]",
      "dest": "bool: bool [1285,1289]"
    },
    {
      "src": "): ) [1701,1702]",
      "dest": "): ) [1701,1702]"
    },
    {
      "src": "visibility [1703,1711]",
      "dest": "visibility [1703,1711]"
    },
    {
      "src": "): ) [1428,1429]",
      "dest": "): ) [1428,1429]"
    },
    {
      "src": "pragma_directive [636,660]",
      "dest": "pragma_directive [636,660]"
    },
    {
      "src": "type_name [1409,1414]",
      "dest": "type_name [1409,1414]"
    },
    {
      "src": "(: ( [1408,1409]",
      "dest": "(: ( [1408,1409]"
    },
    {
      "src": "comment: /*       Indicates if the proxied contract has already been initialized.       Used to prevent re-init.     */ [1114,1224]",
      "dest": "comment: /*       Indicates if the proxied contract has already been initialized.       Used to prevent re-init.     */ [1114,1224]"
    },
    {
      "src": "solidity_version: 0.6.12 [653,659]",
      "dest": "solidity_version: 0.6.12 [653,659]"
    },
    {
      "src": "contract_body [946,1931]",
      "dest": "contract_body [946,1931]"
    },
    {
      "src": "identifier: data [1906,1910]",
      "dest": "identifier: data [1906,1910]"
    },
    {
      "src": "identifier: data [1424,1428]",
      "dest": "identifier: data [1424,1428]"
    },
    {
      "src": "parameter [1099,1106]",
      "dest": "parameter [1099,1106]"
    },
    {
      "src": "function: function [1229,1237]",
      "dest": "function: function [1229,1237]"
    },
    {
      "src": "{: { [946,947]",
      "dest": "{: { [946,947]"
    },
    {
      "src": "internal: internal [1068,1076]",
      "dest": "internal: internal [1068,1076]"
    },
    {
      "src": "comment: /**   Interface for contract initialization.   The functions it exposes are the app specific parts of the contract initialization,   and are called by the ProxySupport contract that implement the generic part of behind-proxy   initialization. */ [662,907]",
      "dest": "comment: /**   Interface for contract initialization.   The functions it exposes are the app specific parts of the contract initialization,   and are called by the ProxySupport contract that implement the generic part of behind-proxy   initialization. */ [662,907]"
    },
    {
      "src": "function: function [1629,1637]",
      "dest": "function: function [1629,1637]"
    },
    {
      "src": "internal: internal [1430,1438]",
      "dest": "internal: internal [1430,1438]"
    },
    {
      "src": "primitive_type [1285,1289]",
      "dest": "primitive_type [1285,1289]"
    },
    {
      "src": "type_name [1666,1671]",
      "dest": "type_name [1666,1671]"
    },
    {
      "src": "comment: /*       Validates the init data that is passed into the proxied contract.     */ [1297,1378]",
      "dest": "comment: /*       Validates the init data that is passed into the proxied contract.     */ [1297,1378]"
    },
    {
      "src": "uint256: uint256 [1099,1106]",
      "dest": "uint256: uint256 [1099,1106]"
    },
    {
      "src": "visibility [1430,1438]",
      "dest": "visibility [1430,1438]"
    },
    {
      "src": "virtual: virtual [1268,1275]",
      "dest": "virtual: virtual [1268,1275]"
    },
    {
      "src": "source_file [0,1932]",
      "dest": "source_file [0,1932]"
    },
    {
      "src": "function: function [1039,1047]",
      "dest": "function: function [1039,1047]"
    },
    {
      "src": "comment: /*   Copyright 2019-2022 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "dest": "comment: /*   Copyright 2019-2023 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]"
    },
    {
      "src": "comment: /*       The number of sub-contracts that the proxied contract consists of.     */ [952,1034]",
      "dest": "comment: /*       The number of sub-contracts that the proxied contract consists of.     */ [952,1034]"
    },
    {
      "src": "bytes: bytes [1409,1414]",
      "dest": "bytes: bytes [1409,1414]"
    },
    {
      "src": "returns: returns [1090,1097]",
      "dest": "returns: returns [1090,1097]"
    },
    {
      "src": "comment: /*       For a proxied contract that consists of sub-contracts, this function processes       the sub-contract addresses, e.g. validates them, stores them etc.     */ [1458,1624]",
      "dest": "comment: /*       For a proxied contract that consists of sub-contracts, this function processes       the sub-contract addresses, e.g. validates them, stores them etc.     */ [1458,1624]"
    },
    {
      "src": "(: ( [1098,1099]",
      "dest": "(: ( [1098,1099]"
    },
    {
      "src": "visibility [1912,1920]",
      "dest": "visibility [1912,1920]"
    },
    {
      "src": "function_definition [1383,1452]",
      "dest": "function_definition [1383,1452]"
    },
    {
      "src": "virtual: virtual [1921,1928]",
      "dest": "virtual: virtual [1921,1928]"
    },
    {
      "src": "return_type_definition [1090,1107]",
      "dest": "return_type_definition [1090,1107]"
    },
    {
      "src": "identifier: ContractInitializer [926,945]",
      "dest": "identifier: ContractInitializer [926,945]"
    },
    {
      "src": "function_definition [1629,1720]",
      "dest": "function_definition [1629,1720]"
    },
    {
      "src": "internal: internal [1254,1262]",
      "dest": "internal: internal [1254,1262]"
    },
    {
      "src": "identifier: numOfSubContracts [1048,1065]",
      "dest": "identifier: numOfSubContracts [1048,1065]"
    },
    {
      "src": "solidity: solidity [643,651]",
      "dest": "solidity: solidity [643,651]"
    },
    {
      "src": "(: ( [1284,1285]",
      "dest": "(: ( [1284,1285]"
    },
    {
      "src": "function_definition [1229,1291]",
      "dest": "function_definition [1229,1291]"
    },
    {
      "src": "): ) [1066,1067]",
      "dest": "): ) [1066,1067]"
    },
    {
      "src": "primitive_type [1666,1671]",
      "dest": "primitive_type [1666,1671]"
    },
    {
      "src": "calldata: calldata [1897,1905]",
      "dest": "calldata: calldata [1897,1905]"
    },
    {
      "src": "parameter [1409,1428]",
      "dest": "parameter [1409,1428]"
    },
    {
      "src": "internal: internal [1912,1920]",
      "dest": "internal: internal [1912,1920]"
    },
    {
      "src": "}: } [1930,1931]",
      "dest": "}: } [1930,1931]"
    },
    {
      "src": "solidity_pragma_token [643,659]",
      "dest": "solidity_pragma_token [643,659]"
    },
    {
      "src": "visibility [1068,1076]",
      "dest": "visibility [1068,1076]"
    },
    {
      "src": "parameter [1666,1701]",
      "dest": "parameter [1666,1701]"
    },
    {
      "src": "solidity_version_comparison_operator [651,653]",
      "dest": "solidity_version_comparison_operator [651,653]"
    },
    {
      "src": "function: function [1383,1391]",
      "dest": "function: function [1383,1391]"
    },
    {
      "src": "identifier: isInitialized [1238,1251]",
      "dest": "identifier: isInitialized [1238,1251]"
    },
    {
      "src": "): ) [1289,1290]",
      "dest": "): ) [1289,1290]"
    }
  ],
  "actions": [
    {
      "action": "update-node",
      "tree": "comment: /*   Copyright 2019-2022 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "label": "/*   Copyright 2019-2023 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */"
    },
    {
      "action": "insert-node",
      "tree": "view: view [1439,1443]",
      "parent": "state_mutability [1439,1443]",
      "at": 0
    },
    {
      "action": "delete-node",
      "tree": "pure: pure [1439,1443]"
    }
  ]
}