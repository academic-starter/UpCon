{
  "matches": [
    {
      "src": "): ) [17874,17875]",
      "dest": "): ) [11598,11599]"
    },
    {
      "src": "return_statement [17891,17900]",
      "dest": "return_statement [11615,11624]"
    },
    {
      "src": "[: [ [9666,9667]",
      "dest": "[: [ [29306,29307]"
    },
    {
      "src": "solidity_version:  0.5.13 [20872,20879]",
      "dest": "solidity_version:  0.6.10 [31916,31923]"
    },
    {
      "src": "primitive_type [20641,20648]",
      "dest": "primitive_type [14246,14253]"
    },
    {
      "src": "identifier: spender [85597,85604]",
      "dest": "identifier: spender [24440,24447]"
    },
    {
      "src": "(: ( [20730,20731]",
      "dest": "(: ( [14335,14336]"
    },
    {
      "src": "address: address [5271,5278]",
      "dest": "address: address [7570,7577]"
    },
    {
      "src": "event: event [5760,5765]",
      "dest": "event: event [8059,8064]"
    },
    {
      "src": "): ) [37730,37731]",
      "dest": "): ) [28623,28624]"
    },
    {
      "src": "function_definition [3744,3821]",
      "dest": "function_definition [6043,6120]"
    },
    {
      "src": "parameter [17157,17183]",
      "dest": "parameter [10873,10899]"
    },
    {
      "src": "type_name [10148,10155]",
      "dest": "type_name [24713,24720]"
    },
    {
      "src": "primitive_type [22737,22741]",
      "dest": "primitive_type [827,831]"
    },
    {
      "src": "type_name [19992,19999]",
      "dest": "type_name [13631,13638]"
    },
    {
      "src": "(: ( [23400,23401]",
      "dest": "(: ( [1484,1485]"
    },
    {
      "src": "identifier: owner [26976,26981]",
      "dest": "identifier: owner [5302,5307]"
    },
    {
      "src": "\": \" [53479,53480]",
      "dest": "\": \" [40314,40315]"
    },
    {
      "src": "expression_statement [47217,47268]",
      "dest": "expression_statement [39032,39109]"
    },
    {
      "src": "call_expression [68630,68725]",
      "dest": "call_expression [16968,17046]"
    },
    {
      "src": "returns: returns [11031,11038]",
      "dest": "returns: returns [23709,23716]"
    },
    {
      "src": "\": \" [55423,55424]",
      "dest": "\": \" [30060,30061]"
    },
    {
      "src": "state_variable_declaration [22846,22867]",
      "dest": "state_variable_declaration [924,945]"
    },
    {
      "src": "(: ( [87035,87036]",
      "dest": "(: ( [43373,43374]"
    },
    {
      "src": "type_name [21029,21036]",
      "dest": "type_name [1386,1393]"
    },
    {
      "src": "identifier: IERC20 [3216,3222]",
      "dest": "identifier: IERC20 [5515,5521]"
    },
    {
      "src": "=: = [75376,75377]",
      "dest": "=: = [16920,16921]"
    },
    {
      "src": "contract_declaration [86883,87476]",
      "dest": "contract_declaration [43226,43747]"
    },
    {
      "src": "call_argument [55385,55421]",
      "dest": "call_argument [30039,30058]"
    },
    {
      "src": "function: function [4105,4113]",
      "dest": "function: function [6404,6412]"
    },
    {
      "src": "return_type_definition [87140,87155]",
      "dest": "return_type_definition [43487,43502]"
    },
    {
      "src": "call_argument [51772,51799]",
      "dest": "call_argument [39810,39853]"
    },
    {
      "src": "primitive_type [17157,17163]",
      "dest": "primitive_type [10873,10879]"
    },
    {
      "src": "return_type_definition [87323,87346]",
      "dest": "return_type_definition [43688,43711]"
    },
    {
      "src": "uint256: uint256 [48627,48634]",
      "dest": "uint256: uint256 [40984,40991]"
    },
    {
      "src": "bool: bool [35194,35198]",
      "dest": "bool: bool [40960,40964]"
    },
    {
      "src": "parameter [27312,27331]",
      "dest": "parameter [31405,31424]"
    },
    {
      "src": "call_argument [14063,14064]",
      "dest": "call_argument [27673,27674]"
    },
    {
      "src": "binary_expression [39072,39084]",
      "dest": "binary_expression [33945,33957]"
    },
    {
      "src": "): ) [23590,23591]",
      "dest": "): ) [1653,1654]"
    },
    {
      "src": "event_definition [38246,38298]",
      "dest": "event_definition [32725,32777]"
    },
    {
      "src": "member_expression [28733,28743]",
      "dest": "member_expression [8802,8812]"
    },
    {
      "src": "primitive_type [22875,22879]",
      "dest": "primitive_type [953,957]"
    },
    {
      "src": "call_argument [59304,59311]",
      "dest": "call_argument [34676,34683]"
    },
    {
      "src": "identifier: onlyOwner [27590,27599]",
      "dest": "identifier: onlyOwner [31778,31787]"
    },
    {
      "src": "primitive_type [34128,34132]",
      "dest": "primitive_type [24246,24250]"
    },
    {
      "src": "internal: internal [55126,55134]",
      "dest": "internal: internal [42826,42834]"
    },
    {
      "src": "emit: emit [26950,26954]",
      "dest": "emit: emit [5276,5280]"
    },
    {
      "src": "primitive_type [23224,23231]",
      "dest": "primitive_type [1308,1315]"
    },
    {
      "src": "address: address [22701,22708]",
      "dest": "address: address [791,798]"
    },
    {
      "src": "return_statement [11060,11106]",
      "dest": "return_statement [23738,23758]"
    },
    {
      "src": "{: { [10719,10720]",
      "dest": "{: { [23903,23904]"
    },
    {
      "src": "constant: constant [86988,86996]",
      "dest": "constant: constant [43326,43334]"
    },
    {
      "src": "external: external [27581,27589]",
      "dest": "external: external [31769,31777]"
    },
    {
      "src": "memory: memory [20659,20665]",
      "dest": "memory: memory [14264,14270]"
    },
    {
      "src": ",: , [27688,27689]",
      "dest": ",: , [31876,31877]"
    },
    {
      "src": "call_argument [20739,20751]",
      "dest": "call_argument [14344,14356]"
    },
    {
      "src": "function_body [86501,86605]",
      "dest": "function_body [26889,27059]"
    },
    {
      "src": "event_paramater [37225,37238]",
      "dest": "event_paramater [36666,36679]"
    },
    {
      "src": "=>: => [21026,21028]",
      "dest": "=>: => [1383,1385]"
    },
    {
      "src": "call_argument [48100,48122]",
      "dest": "call_argument [37867,37932]"
    },
    {
      "src": "identifier: pendingOwner [27038,27050]",
      "dest": "identifier: pendingOwner [5364,5376]"
    },
    {
      "src": "parameter [18517,18526]",
      "dest": "parameter [12249,12258]"
    },
    {
      "src": "): ) [75702,75703]",
      "dest": "): ) [16811,16812]"
    },
    {
      "src": "state_variable_declaration [86982,87010]",
      "dest": "state_variable_declaration [43320,43348]"
    },
    {
      "src": "(: ( [39071,39072]",
      "dest": "(: ( [33944,33945]"
    },
    {
      "src": "variable_declaration [17923,17932]",
      "dest": "variable_declaration [11647,11656]"
    },
    {
      "src": "call_expression [38505,38540]",
      "dest": "call_expression [37389,37411]"
    },
    {
      "src": "type_name [23068,23074]",
      "dest": "type_name [1149,1155]"
    },
    {
      "src": "address: address [52021,52028]",
      "dest": "address: address [29265,29272]"
    },
    {
      "src": "call_argument [86299,86306]",
      "dest": "call_argument [26197,26204]"
    },
    {
      "src": "): ) [53508,53509]",
      "dest": "): ) [40359,40360]"
    },
    {
      "src": "identifier: owner [22689,22694]",
      "dest": "identifier: owner [779,784]"
    },
    {
      "src": "call_argument [55757,55795]",
      "dest": "call_argument [29163,29184]"
    },
    {
      "src": "}: } [38547,38548]",
      "dest": "}: } [37455,37456]"
    },
    {
      "src": "number_literal: 0 [57842,57843]",
      "dest": "number_literal: 0 [29182,29183]"
    },
    {
      "src": "solidity_version_comparison_operator [3039,3041]",
      "dest": "solidity_version_comparison_operator [5419,5421]"
    },
    {
      "src": "): ) [33254,33255]",
      "dest": "): ) [33259,33260]"
    },
    {
      "src": "primitive_type [3762,3769]",
      "dest": "primitive_type [6061,6068]"
    },
    {
      "src": "uint256: uint256 [37173,37180]",
      "dest": "uint256: uint256 [32478,32485]"
    },
    {
      "src": "type_name [25819,25826]",
      "dest": "type_name [4126,4133]"
    },
    {
      "src": "call_argument [19347,19352]",
      "dest": "call_argument [12978,12983]"
    },
    {
      "src": "return_type_definition [7985,7999]",
      "dest": "return_type_definition [25436,25450]"
    },
    {
      "src": "external: external [8827,8835]",
      "dest": "external: external [38346,38354]"
    },
    {
      "src": "uint256: uint256 [19252,19259]",
      "dest": "uint256: uint256 [12950,12957]"
    },
    {
      "src": "identifier: b [20000,20001]",
      "dest": "identifier: b [13639,13640]"
    },
    {
      "src": "type_name [17623,17630]",
      "dest": "type_name [11347,11354]"
    },
    {
      "src": "): ) [27697,27698]",
      "dest": "): ) [31885,31886]"
    },
    {
      "src": "modifier_invocation [27342,27351]",
      "dest": "modifier_invocation [31435,31444]"
    },
    {
      "src": "boolean_literal [22908,22913]",
      "dest": "boolean_literal [986,991]"
    },
    {
      "src": "parameter [10148,10160]",
      "dest": "parameter [24713,24728]"
    },
    {
      "src": "function: function [17565,17573]",
      "dest": "function: function [11289,11297]"
    },
    {
      "src": "event_paramater [5775,5796]",
      "dest": "event_paramater [8074,8095]"
    },
    {
      "src": "(: ( [52397,52398]",
      "dest": "(: ( [28543,28544]"
    },
    {
      "src": "comment: //by setting the minimum extremely high, and we don't want to lock [38865,38931]",
      "dest": "comment: /**      * @dev Checks if amount is within allowed burn bounds and      * destroys `amount` tokens from `account`, reducing the      * total supply.      * @param account account to burn tokens for      * @param amount amount of tokens to burn      *      * Emits a {Burn} event      */ [34103,34397]"
    },
    {
      "src": "primitive_type [26717,26724]",
      "dest": "primitive_type [5041,5048]"
    },
    {
      "src": "identifier: spender [5814,5821]",
      "dest": "identifier: spender [8113,8120]"
    },
    {
      "src": "type_name [5823,5830]",
      "dest": "type_name [8122,8129]"
    },
    {
      "src": "address: address [23571,23578]",
      "dest": "address: address [1634,1641]"
    },
    {
      "src": "address: address [21225,21232]",
      "dest": "address: address [18240,18247]"
    },
    {
      "src": "identifier: finOpBalances [23592,23605]",
      "dest": "identifier: finOpBalances_Deprecated [1655,1679]"
    },
    {
      "src": "\": \" [47328,47329]",
      "dest": "\": \" [39957,39958]"
    },
    {
      "src": "string [67429,67464]",
      "dest": "string [19463,19503]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [19519,19962]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [13150,13601]"
    },
    {
      "src": ",: , [20058,20059]",
      "dest": ",: , [13697,13698]"
    },
    {
      "src": "function_body [20035,20098]",
      "dest": "function_body [13674,13737]"
    },
    {
      "src": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [17643,17722]",
      "dest": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [11367,11446]"
    },
    {
      "src": "binary_expression [37270,37278]",
      "dest": "binary_expression [36238,36244]"
    },
    {
      "src": "(: ( [85573,85574]",
      "dest": "(: ( [24416,24417]"
    },
    {
      "src": "{: { [3223,3224]",
      "dest": "{: { [5522,5523]"
    },
    {
      "src": "call_argument [26122,26132]",
      "dest": "call_argument [4417,4427]"
    },
    {
      "src": "string_literal [38469,38493]",
      "dest": "string_literal [37330,37377]"
    },
    {
      "src": "primitive_type [54110,54117]",
      "dest": "primitive_type [37821,37828]"
    },
    {
      "src": "): ) [54747,54748]",
      "dest": "): ) [42929,42930]"
    },
    {
      "src": "identifier: _to [75269,75272]",
      "dest": "identifier: recipient [16692,16701]"
    },
    {
      "src": "returns: returns [20017,20024]",
      "dest": "returns: returns [13656,13663]"
    },
    {
      "src": "identifier: value [6121,6126]",
      "dest": "identifier: proportion [1788,1798]"
    },
    {
      "src": "primitive_type [17578,17585]",
      "dest": "primitive_type [11302,11309]"
    },
    {
      "src": "(: ( [87058,87059]",
      "dest": "(: ( [43405,43406]"
    },
    {
      "src": "identifier: _transferAllArgs [75659,75675]",
      "dest": "identifier: require [16739,16746]"
    },
    {
      "src": "function_body [34139,34240]",
      "dest": "function_body [24252,24335]"
    },
    {
      "src": "contract: contract [27163,27171]",
      "dest": "contract: contract [31206,31214]"
    },
    {
      "src": "address: address [23796,23803]",
      "dest": "address: address [1844,1851]"
    },
    {
      "src": "identifier: HasOwner [25748,25756]",
      "dest": "identifier: ClaimableOwnable [3878,3894]"
    },
    {
      "src": "identifier: rounding [87117,87125]",
      "dest": "identifier: rounding [43464,43472]"
    },
    {
      "src": "(: ( [74483,74484]",
      "dest": "(: ( [17932,17933]"
    },
    {
      "src": "type_name [37438,37445]",
      "dest": "type_name [28401,28408]"
    },
    {
      "src": "primitive_type [25859,25866]",
      "dest": "primitive_type [4157,4164]"
    },
    {
      "src": "): ) [48122,48123]",
      "dest": "): ) [37932,37933]"
    },
    {
      "src": "identifier: newOwner [29210,29218]",
      "dest": "identifier: recipient [27736,27745]"
    },
    {
      "src": "internal: internal [31188,31196]",
      "dest": "internal: internal [8848,8856]"
    },
    {
      "src": "identifier: errorMessage [20739,20751]",
      "dest": "identifier: errorMessage [14344,14356]"
    },
    {
      "src": "identifier: amount [67013,67019]",
      "dest": "identifier: amount [42104,42110]"
    },
    {
      "src": "type_name [65471,65478]",
      "dest": "type_name [30980,30987]"
    },
    {
      "src": "type_name [22701,22708]",
      "dest": "type_name [791,798]"
    },
    {
      "src": "address: address [25859,25866]",
      "dest": "address: address [4157,4164]"
    },
    {
      "src": "^:  ^ [15349,15351]",
      "dest": "^:  ^ [14410,14412]"
    },
    {
      "src": ",: , [19990,19991]",
      "dest": ",: , [13629,13630]"
    },
    {
      "src": "call_argument [48161,48185]",
      "dest": "call_argument [38983,39020]"
    },
    {
      "src": "call_argument [67562,67568]",
      "dest": "call_argument [24828,24834]"
    },
    {
      "src": "call_argument [68471,68507]",
      "dest": "call_argument [19778,19809]"
    },
    {
      "src": "bool: bool [10203,10207]",
      "dest": "bool: bool [24779,24783]"
    },
    {
      "src": ",: , [86562,86563]",
      "dest": ",: , [26930,26931]"
    },
    {
      "src": "for: for [32224,32227]",
      "dest": "for: for [22523,22526]"
    },
    {
      "src": "primitive_type [37149,37156]",
      "dest": "primitive_type [32454,32461]"
    },
    {
      "src": "event_paramater [25819,25848]",
      "dest": "event_paramater [4126,4155]"
    },
    {
      "src": "(: ( [27375,27376]",
      "dest": "(: ( [31468,31469]"
    },
    {
      "src": "variable_declaration_statement [17923,17941]",
      "dest": "variable_declaration_statement [11647,11665]"
    },
    {
      "src": "call_argument [50539,50542]",
      "dest": "call_argument [41039,41046]"
    },
    {
      "src": "function: function [53367,53375]",
      "dest": "function: function [29079,29087]"
    },
    {
      "src": "uint256: uint256 [6024,6031]",
      "dest": "uint256: uint256 [19662,19669]"
    },
    {
      "src": "identifier: CENT [37263,37267]",
      "dest": "identifier: CENT [36231,36235]"
    },
    {
      "src": "state_variable_declaration [21009,21055]",
      "dest": "state_variable_declaration [1367,1405]"
    },
    {
      "src": ",: , [16671,16672]",
      "dest": ",: , [10421,10422]"
    },
    {
      "src": "identifier: balance [27619,27626]",
      "dest": "identifier: balance [31807,31814]"
    },
    {
      "src": "comment: /**  * @title FinancialOpportunity  * @dev Interface for third parties to implement financial opportunities  *  * -- Overview --  * The goal of this contract is to allow anyone to create an opportunity  * to earn interest on TUSD. deposit() \"mints\" yTUSD whcih is redeemable  * for some amount of TUSD. TrueUSD wraps this contractwith TrustToken  * Assurance, which provides protection from bugs and system design flaws  * TUSD is a compliant stablecoin, therefore we do not allow transfers of  * yTUSD, thus there are no transfer functions  *  * -- tokenValue() --  * This function returns the value in TUSD of 1 yTUSD  * This value should never decrease  *  * -- TUSD vs yTUSD --  * yTUSD represents a fixed value which is redeemable for some amount of TUSD  * Think of yTUSD like cTUSD, where cTokens are minted and increase in value versus  * the underlying asset as interest is accrued  *  * -- totalSupply() --  * This function returns the total supply of yTUSD issued by this contract  * It is important to track this value accuratley and add/deduct the correct  * amount on deposit/redemptions  *  * -- Assumptions --  * - tokenValue can never decrease  * - total TUSD owed to depositors = tokenValue() * totalSupply()  */ [273,1532]",
      "dest": "comment: /**  * @title ClamableOwnable  * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.  * and provides basic authorization control functions. Inherits storage layout of  * ProxyStorage.  */ [3648,3867]"
    },
    {
      "src": "=: = [22990,22991]",
      "dest": "=: = [1068,1069]"
    },
    {
      "src": "identifier: require [19339,19346]",
      "dest": "identifier: require [12970,12977]"
    },
    {
      "src": "primitive_type [84932,84939]",
      "dest": "primitive_type [1113,1120]"
    },
    {
      "src": ",: , [18594,18595]",
      "dest": ",: , [12326,12327]"
    },
    {
      "src": "): ) [7998,7999]",
      "dest": "): ) [25449,25450]"
    },
    {
      "src": "uint256: uint256 [61299,61306]",
      "dest": "uint256: uint256 [34435,34442]"
    },
    {
      "src": "): ) [59744,59745]",
      "dest": "): ) [37447,37448]"
    },
    {
      "src": "identifier: to [5576,5578]",
      "dest": "identifier: to [7875,7877]"
    },
    {
      "src": "): ) [23825,23826]",
      "dest": "): ) [1873,1874]"
    },
    {
      "src": "\": \" [81735,81736]",
      "dest": "\": \" [16954,16955]"
    },
    {
      "src": "return_type_definition [5331,5345]",
      "dest": "return_type_definition [7630,7644]"
    },
    {
      "src": "public: public [26735,26741]",
      "dest": "public: public [5059,5065]"
    },
    {
      "src": "string_literal [60452,60481]",
      "dest": "string_literal [25586,25628]"
    },
    {
      "src": "call_argument [67157,67163]",
      "dest": "call_argument [27833,27839]"
    },
    {
      "src": "call_argument [75676,75689]",
      "dest": "call_argument [16747,16778]"
    },
    {
      "src": "(: ( [77288,77289]",
      "dest": "(: ( [30136,30137]"
    },
    {
      "src": "uint256: uint256 [21029,21036]",
      "dest": "uint256: uint256 [1386,1393]"
    },
    {
      "src": "comment: /**      * @dev Returns the amount of tokens in existence.      */ [3230,3298]",
      "dest": "comment: /**      * @dev Returns the amount of tokens in existence.      */ [5529,5597]"
    },
    {
      "src": "returns: returns [35185,35192]",
      "dest": "returns: returns [40951,40958]"
    },
    {
      "src": "user_defined_type [25760,25772]",
      "dest": "user_defined_type [3898,3910]"
    },
    {
      "src": "identifier: c [16365,16366]",
      "dest": "identifier: c [10107,10108]"
    },
    {
      "src": "expression_statement [51745,51801]",
      "dest": "expression_statement [28445,28511]"
    },
    {
      "src": "string_literal [48100,48122]",
      "dest": "string_literal [37867,37932]"
    },
    {
      "src": "expression_statement [52362,52418]",
      "dest": "expression_statement [28523,28573]"
    },
    {
      "src": "(: ( [55251,55252]",
      "dest": "(: ( [42886,42887]"
    },
    {
      "src": "): ) [5593,5594]",
      "dest": "): ) [7892,7893]"
    },
    {
      "src": "\": \" [16744,16745]",
      "dest": "\": \" [10494,10495]"
    },
    {
      "src": "type_name [66481,66488]",
      "dest": "type_name [24730,24737]"
    },
    {
      "src": "memory: memory [17164,17170]",
      "dest": "memory: memory [10880,10886]"
    },
    {
      "src": "internal: internal [36802,36810]",
      "dest": "internal: internal [31008,31016]"
    },
    {
      "src": "contract_body [22667,25453]",
      "dest": "contract_body [757,3617]"
    },
    {
      "src": "}: } [25452,25453]",
      "dest": "}: } [3616,3617]"
    },
    {
      "src": "type_name [86169,86176]",
      "dest": "type_name [26096,26103]"
    },
    {
      "src": "bool: bool [86256,86260]",
      "dest": "bool: bool [26157,26161]"
    },
    {
      "src": "primitive_type [52021,52028]",
      "dest": "primitive_type [29265,29272]"
    },
    {
      "src": "identifier: amount [60606,60612]",
      "dest": "identifier: amount [24298,24304]"
    },
    {
      "src": ",: , [53977,53978]",
      "dest": ",: , [34433,34434]"
    },
    {
      "src": "primitive_type [29222,29229]",
      "dest": "primitive_type [27749,27756]"
    },
    {
      "src": "primitive_type [3466,3473]",
      "dest": "primitive_type [5765,5772]"
    },
    {
      "src": "identifier: _burnAllArgs [37410,37422]",
      "dest": "identifier: _mint [28378,28383]"
    },
    {
      "src": "call_expression [68428,68508]",
      "dest": "call_expression [19750,19810]"
    },
    {
      "src": "(: ( [16250,16251]",
      "dest": "(: ( [9992,9993]"
    },
    {
      "src": "identifier: div [18589,18592]",
      "dest": "identifier: div [12321,12324]"
    },
    {
      "src": "user_defined_type [27554,27560]",
      "dest": "user_defined_type [31742,31748]"
    },
    {
      "src": "identifier: c [17305,17306]",
      "dest": "identifier: c [11021,11022]"
    },
    {
      "src": "string [9703,9705]",
      "dest": "string [29349,29385]"
    },
    {
      "src": "call_expression [38381,38431]",
      "dest": "call_expression [37208,37280]"
    },
    {
      "src": "): ) [53415,53416]",
      "dest": "): ) [29125,29126]"
    },
    {
      "src": "primitive_type [22846,22853]",
      "dest": "primitive_type [924,931]"
    },
    {
      "src": "identifier: value [65558,65563]",
      "dest": "identifier: value [18956,18961]"
    },
    {
      "src": "variable_declaration_statement [75361,75401]",
      "dest": "variable_declaration_statement [16903,16958]"
    },
    {
      "src": "identifier: amount [61683,61689]",
      "dest": "identifier: amount [40003,40009]"
    },
    {
      "src": "=: = [19388,19389]",
      "dest": "=: = [13019,13020]"
    },
    {
      "src": "type_name [11040,11047]",
      "dest": "type_name [23718,23725]"
    },
    {
      "src": "(: ( [75571,75572]",
      "dest": "(: ( [19438,19439]"
    },
    {
      "src": "): ) [77290,77291]",
      "dest": "): ) [30138,30139]"
    },
    {
      "src": "type_name [21367,21374]",
      "dest": "type_name [38864,38871]"
    },
    {
      "src": "call_argument [38469,38493]",
      "dest": "call_argument [37330,37377]"
    },
    {
      "src": "function: function [16649,16657]",
      "dest": "function: function [10399,10407]"
    },
    {
      "src": "{: { [26752,26753]",
      "dest": "{: { [5076,5077]"
    },
    {
      "src": "number_literal: 20 [54752,54754]",
      "dest": "number_literal: 20 [42934,42936]"
    },
    {
      "src": "type_name [16251,16258]",
      "dest": "type_name [9993,10000]"
    },
    {
      "src": "indexed: indexed [5568,5575]",
      "dest": "indexed: indexed [7867,7874]"
    },
    {
      "src": "pure: pure [17194,17198]",
      "dest": "pure: pure [10910,10914]"
    },
    {
      "src": "event_definition [25782,25891]",
      "dest": "event_definition [4099,4183]"
    },
    {
      "src": "parameter [21083,21096]",
      "dest": "parameter [18820,18834]"
    },
    {
      "src": "identifier: mod [20053,20056]",
      "dest": "identifier: mod [13692,13695]"
    },
    {
      "src": "false: false [22908,22913]",
      "dest": "false: false [986,991]"
    },
    {
      "src": "primitive_type [3781,3788]",
      "dest": "primitive_type [6080,6087]"
    },
    {
      "src": "(: ( [38449,38450]",
      "dest": "(: ( [37298,37299]"
    },
    {
      "src": "): ) [27397,27398]",
      "dest": "): ) [31490,31491]"
    },
    {
      "src": "identifier: account [61281,61288]",
      "dest": "identifier: account [34426,34433]"
    },
    {
      "src": "(: ( [4178,4179]",
      "dest": "(: ( [6477,6478]"
    },
    {
      "src": "call_argument [34176,34184]",
      "dest": "call_argument [24287,24296]"
    },
    {
      "src": "primitive_type [54024,54028]",
      "dest": "primitive_type [38331,38335]"
    },
    {
      "src": "type_name [5306,5313]",
      "dest": "type_name [7605,7612]"
    },
    {
      "src": "pure: pure [55939,55943]",
      "dest": "pure: pure [40946,40950]"
    },
    {
      "src": "bool: bool [22875,22879]",
      "dest": "bool: bool [953,957]"
    },
    {
      "src": "): ) [26913,26914]",
      "dest": "): ) [5239,5240]"
    },
    {
      "src": "internal: internal [20003,20011]",
      "dest": "internal: internal [13642,13650]"
    },
    {
      "src": "): ) [16226,16227]",
      "dest": "): ) [9968,9969]"
    },
    {
      "src": "=: = [17933,17934]",
      "dest": "=: = [11657,11658]"
    },
    {
      "src": "function_body [26260,26333]",
      "dest": "function_body [4557,4630]"
    },
    {
      "src": "call_argument [54915,54928]",
      "dest": "call_argument [27761,27798]"
    },
    {
      "src": "(: ( [38523,38524]",
      "dest": "(: ( [37394,37395]"
    },
    {
      "src": "internal: internal [55723,55731]",
      "dest": "internal: internal [29127,29135]"
    },
    {
      "src": "comment: // check if to address is enabled [75318,75351]",
      "dest": "comment: // solhint-disable-next-line avoid-low-level-calls, avoid-call-value [16825,16893]"
    },
    {
      "src": "primitive_type [66007,66014]",
      "dest": "primitive_type [24197,24204]"
    },
    {
      "src": ",: , [4889,4890]",
      "dest": ",: , [7188,7189]"
    },
    {
      "src": "uint8: uint8 [86982,86987]",
      "dest": "uint8: uint8 [43320,43325]"
    },
    {
      "src": "identifier: recipient [5295,5304]",
      "dest": "identifier: recipient [7594,7603]"
    },
    {
      "src": "address: address [21367,21374]",
      "dest": "address: address [38864,38871]"
    },
    {
      "src": "(: ( [37723,37724]",
      "dest": "(: ( [28616,28617]"
    },
    {
      "src": "identifier: b [16741,16742]",
      "dest": "identifier: b [10491,10492]"
    },
    {
      "src": "call_argument [53638,53646]",
      "dest": "call_argument [29429,29435]"
    },
    {
      "src": "comment: /**      * @dev Moves `amount` tokens from `sender` to `recipient` using the      * allowance mechanism. `amount` is then deducted from the caller's      * allowance.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * Emits a {Transfer} event.      */ [4939,5243]",
      "dest": "comment: /**      * @dev Moves `amount` tokens from `sender` to `recipient` using the      * allowance mechanism. `amount` is then deducted from the caller's      * allowance.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * Emits a {Transfer} event.      */ [7238,7542]"
    },
    {
      "src": "visibility [21256,21262]",
      "dest": "visibility [22653,22659]"
    },
    {
      "src": "call_expression [27629,27659]",
      "dest": "call_expression [31817,31847]"
    },
    {
      "src": "identifier: div [19175,19178]",
      "dest": "identifier: div [12873,12876]"
    },
    {
      "src": "parameter [11040,11047]",
      "dest": "parameter [23718,23725]"
    },
    {
      "src": "primitive_type [18528,18535]",
      "dest": "primitive_type [12260,12267]"
    },
    {
      "src": "{: { [86501,86502]",
      "dest": "{: { [26889,26890]"
    },
    {
      "src": "internal: internal [16684,16692]",
      "dest": "internal: internal [10434,10442]"
    },
    {
      "src": "function: function [86369,86377]",
      "dest": "function: function [26790,26798]"
    },
    {
      "src": "address: address [52398,52405]",
      "dest": "address: address [28544,28551]"
    },
    {
      "src": "returns: returns [87323,87330]",
      "dest": "returns: returns [43688,43695]"
    },
    {
      "src": "binary_expression [55757,55795]",
      "dest": "binary_expression [29163,29184]"
    },
    {
      "src": "call_argument [27685,27688]",
      "dest": "call_argument [31873,31876]"
    },
    {
      "src": "identifier: maxRewardProportion [23861,23880]",
      "dest": "identifier: maxRewardProportion_Deprecated [1920,1950]"
    },
    {
      "src": "call_expression [27363,27398]",
      "dest": "call_expression [31456,31491]"
    },
    {
      "src": "visibility [22880,22887]",
      "dest": "visibility [958,965]"
    },
    {
      "src": "identifier: _addr [21233,21238]",
      "dest": "identifier: target [18248,18254]"
    },
    {
      "src": "primitive_type [64455,64462]",
      "dest": "primitive_type [852,859]"
    },
    {
      "src": "identifier: a [16312,16313]",
      "dest": "identifier: a [10054,10055]"
    },
    {
      "src": "!=: != [20733,20735]",
      "dest": "!=: != [14338,14340]"
    },
    {
      "src": "call_argument [62259,62265]",
      "dest": "call_argument [28022,28028]"
    },
    {
      "src": "identifier: a [17241,17242]",
      "dest": "identifier: a [10957,10958]"
    },
    {
      "src": "primitive_type [23068,23074]",
      "dest": "primitive_type [1149,1155]"
    },
    {
      "src": "call_argument [54744,54747]",
      "dest": "call_argument [42915,42929]"
    },
    {
      "src": "state_mutability [87318,87322]",
      "dest": "state_mutability [43683,43687]"
    },
    {
      "src": "return_statement [33266,33278]",
      "dest": "return_statement [25641,25653]"
    },
    {
      "src": "call_argument [55635,55666]",
      "dest": "call_argument [28476,28509]"
    },
    {
      "src": "): ) [55810,55811]",
      "dest": "): ) [29221,29222]"
    },
    {
      "src": "identifier: DECIMALS [87084,87092]",
      "dest": "identifier: DECIMALS [43431,43439]"
    },
    {
      "src": "\": \" [54915,54916]",
      "dest": "\": \" [27761,27762]"
    },
    {
      "src": "expression_statement [68630,68726]",
      "dest": "expression_statement [16968,17047]"
    },
    {
      "src": "identifier: sender [67850,67856]",
      "dest": "identifier: sender [28054,28060]"
    },
    {
      "src": ",: , [61836,61837]",
      "dest": ",: , [34720,34721]"
    },
    {
      "src": "identifier: sender [5279,5285]",
      "dest": "identifier: sender [7578,7584]"
    },
    {
      "src": "call_expression [27670,27698]",
      "dest": "call_expression [31858,31886]"
    },
    {
      "src": "identifier: value [5831,5836]",
      "dest": "identifier: value [8130,8135]"
    },
    {
      "src": "uint256: uint256 [20026,20033]",
      "dest": "uint256: uint256 [13665,13672]"
    },
    {
      "src": "-: - [17282,17283]",
      "dest": "-: - [10998,10999]"
    },
    {
      "src": "function: function [33126,33134]",
      "dest": "function: function [33185,33193]"
    },
    {
      "src": "function: function [38306,38314]",
      "dest": "function: function [37131,37139]"
    },
    {
      "src": "type_name [85589,85596]",
      "dest": "type_name [24432,24439]"
    },
    {
      "src": "identifier: require [48073,48080]",
      "dest": "identifier: require [37813,37820]"
    },
    {
      "src": "uint256: uint256 [8253,8260]",
      "dest": "uint256: uint256 [26834,26841]"
    },
    {
      "src": "call_argument [68639,68688]",
      "dest": "call_argument [16976,16983]"
    },
    {
      "src": "call_expression [67369,67465]",
      "dest": "call_expression [19423,19504]"
    },
    {
      "src": "}: } [33284,33285]",
      "dest": "}: } [33267,33268]"
    },
    {
      "src": "primitive_type [59021,59028]",
      "dest": "primitive_type [38892,38899]"
    },
    {
      "src": "(: ( [86402,86403]",
      "dest": "(: ( [26816,26817]"
    },
    {
      "src": "primitive_type [10203,10207]",
      "dest": "primitive_type [24779,24783]"
    },
    {
      "src": "visibility [28674,28682]",
      "dest": "visibility [8736,8744]"
    },
    {
      "src": "(: ( [47285,47286]",
      "dest": "(: ( [39872,39873]"
    },
    {
      "src": "identifier: a [17280,17281]",
      "dest": "identifier: a [10996,10997]"
    },
    {
      "src": "expression_statement [55376,55438]",
      "dest": "expression_statement [30031,30100]"
    },
    {
      "src": "identifier: _spender [22234,22242]",
      "dest": "identifier: target [19635,19641]"
    },
    {
      "src": "call_argument [16315,16344]",
      "dest": "call_argument [10057,10086]"
    },
    {
      "src": "primitive_type [86982,86987]",
      "dest": "primitive_type [43320,43325]"
    },
    {
      "src": "}: } [53768,53769]",
      "dest": "}: } [29496,29497]"
    },
    {
      "src": "}: } [27705,27706]",
      "dest": "}: } [31893,31894]"
    },
    {
      "src": "primitive_type [57834,57841]",
      "dest": "primitive_type [29174,29181]"
    },
    {
      "src": "call_argument [60803,60810]",
      "dest": "call_argument [37395,37402]"
    },
    {
      "src": "type_name [81849,81856]",
      "dest": "type_name [19898,19903]"
    },
    {
      "src": "}: } [39199,39200]",
      "dest": "}: } [34739,34740]"
    },
    {
      "src": "identifier: a [20770,20771]",
      "dest": "identifier: a [14375,14376]"
    },
    {
      "src": "identifier: ReclaimerToken [45817,45831]",
      "dest": "identifier: ReclaimerToken [32229,32243]"
    },
    {
      "src": "type_name [34128,34132]",
      "dest": "type_name [24246,24250]"
    },
    {
      "src": "identifier: sender [14680,14686]",
      "dest": "identifier: sender [4790,4796]"
    },
    {
      "src": "identifier: account [59631,59638]",
      "dest": "identifier: account [28556,28563]"
    },
    {
      "src": "type_name [17589,17596]",
      "dest": "type_name [11313,11320]"
    },
    {
      "src": ">>: >> [55257,55259]",
      "dest": ">>: >> [42898,42900]"
    },
    {
      "src": "identifier: hasAttribute [10135,10147]",
      "dest": "identifier: approve [24705,24712]"
    },
    {
      "src": "internal: internal [19229,19237]",
      "dest": "internal: internal [12927,12935]"
    },
    {
      "src": "function: function [27290,27298]",
      "dest": "function: function [31383,31391]"
    },
    {
      "src": "primitive_type [14055,14062]",
      "dest": "primitive_type [27665,27672]"
    },
    {
      "src": "identifier: hasHook [83031,83038]",
      "dest": "identifier: success [16909,16916]"
    },
    {
      "src": "visibility [7971,7979]",
      "dest": "visibility [15140,15148]"
    },
    {
      "src": "bool: bool [33193,33197]",
      "dest": "bool: bool [15163,15167]"
    },
    {
      "src": "call_expression [55748,55811]",
      "dest": "call_expression [29155,29222]"
    },
    {
      "src": ",: , [39018,39019]",
      "dest": ",: , [33891,33892]"
    },
    {
      "src": "struct_member [6113,6127]",
      "dest": "struct_member [1780,1799]"
    },
    {
      "src": "return_type_definition [10701,10718]",
      "dest": "return_type_definition [23885,23902]"
    },
    {
      "src": "uint256: uint256 [18528,18535]",
      "dest": "uint256: uint256 [12260,12267]"
    },
    {
      "src": "type_name [61299,61306]",
      "dest": "type_name [34435,34442]"
    },
    {
      "src": "function_definition [34028,34240]",
      "dest": "function_definition [24160,24335]"
    },
    {
      "src": "type_name [21691,21740]",
      "dest": "type_name [1411,1458]"
    },
    {
      "src": "): ) [23439,23440]",
      "dest": "): ) [1522,1523]"
    },
    {
      "src": "{: { [26260,26261]",
      "dest": "{: { [4557,4558]"
    },
    {
      "src": "=>: => [23579,23581]",
      "dest": "=>: => [1642,1644]"
    },
    {
      "src": "internal: internal [68344,68352]",
      "dest": "internal: internal [38914,38922]"
    },
    {
      "src": "(: ( [68638,68639]",
      "dest": "(: ( [16975,16976]"
    },
    {
      "src": "identifier: _min [39119,39123]",
      "dest": "identifier: _min [34017,34021]"
    },
    {
      "src": "{: { [27199,27200]",
      "dest": "{: { [31239,31240]"
    },
    {
      "src": "type_name [58403,58410]",
      "dest": "type_name [37745,37752]"
    },
    {
      "src": "call_argument [67601,67607]",
      "dest": "call_argument [25491,25497]"
    },
    {
      "src": "type_name [27611,27618]",
      "dest": "type_name [31799,31806]"
    },
    {
      "src": "public: public [21256,21262]",
      "dest": "public: public [22653,22659]"
    },
    {
      "src": "mapping: mapping [21009,21016]",
      "dest": "mapping: mapping [1367,1374]"
    },
    {
      "src": "(: ( [14062,14063]",
      "dest": "(: ( [27672,27673]"
    },
    {
      "src": "contract_declaration [22645,25453]",
      "dest": "contract_declaration [735,3617]"
    },
    {
      "src": "): ) [75288,75289]",
      "dest": "): ) [16717,16718]"
    },
    {
      "src": "returns: returns [19243,19250]",
      "dest": "returns: returns [12941,12948]"
    },
    {
      "src": ",: , [55421,55422]",
      "dest": ",: , [30058,30059]"
    },
    {
      "src": "parameter [4925,4929]",
      "dest": "parameter [7224,7228]"
    },
    {
      "src": "call_argument [54642,54655]",
      "dest": "call_argument [27677,27716]"
    },
    {
      "src": "identifier: msg [33244,33247]",
      "dest": "identifier: msg [33241,33244]"
    },
    {
      "src": "internal: internal [47106,47114]",
      "dest": "internal: internal [39750,39758]"
    },
    {
      "src": "}: } [86360,86361]",
      "dest": "}: } [26286,26287]"
    },
    {
      "src": "(: ( [20056,20057]",
      "dest": "(: ( [13695,13696]"
    },
    {
      "src": "uint256: uint256 [62933,62940]",
      "dest": "uint256: uint256 [33199,33206]"
    },
    {
      "src": "identifier: _max [39080,39084]",
      "dest": "identifier: _max [33953,33957]"
    },
    {
      "src": "identifier: onlyOwner [21405,21414]",
      "dest": "identifier: onlyOwner [37187,37196]"
    },
    {
      "src": "call_expression [53621,53647]",
      "dest": "call_expression [29412,29436]"
    },
    {
      "src": "memory: memory [87339,87345]",
      "dest": "memory: memory [43704,43710]"
    },
    {
      "src": "public: public [87038,87044]",
      "dest": "public: public [43376,43382]"
    },
    {
      "src": "\": \" [18599,18600]",
      "dest": "\": \" [12331,12332]"
    },
    {
      "src": "external: external [39034,39042]",
      "dest": "external: external [33907,33915]"
    },
    {
      "src": "): ) [26139,26140]",
      "dest": "): ) [4434,4435]"
    },
    {
      "src": "primitive_type [17923,17930]",
      "dest": "primitive_type [11647,11654]"
    },
    {
      "src": "): ) [54302,54303]",
      "dest": "): ) [34650,34651]"
    },
    {
      "src": "primitive_type [23432,23439]",
      "dest": "primitive_type [1515,1522]"
    },
    {
      "src": ",: , [5578,5579]",
      "dest": ",: , [7877,7878]"
    },
    {
      "src": "): ) [75688,75689]",
      "dest": "): ) [16759,16760]"
    },
    {
      "src": "\": \" [47244,47245]",
      "dest": "\": \" [39067,39068]"
    },
    {
      "src": "type_name [18517,18524]",
      "dest": "type_name [12249,12256]"
    },
    {
      "src": "solidity: solidity [15341,15349]",
      "dest": "solidity: solidity [14402,14410]"
    },
    {
      "src": "identifier: b [17154,17155]",
      "dest": "identifier: b [10870,10871]"
    },
    {
      "src": "primitive_type [71304,71311]",
      "dest": "primitive_type [886,893]"
    },
    {
      "src": "using_directive [32209,32236]",
      "dest": "using_directive [22508,22535]"
    },
    {
      "src": "function_definition [87198,87285]",
      "dest": "function_definition [43545,43641]"
    },
    {
      "src": "}: } [20782,20783]",
      "dest": "}: } [14387,14388]"
    },
    {
      "src": "contract: contract [22645,22653]",
      "dest": "contract: contract [735,743]"
    },
    {
      "src": "function_definition [62098,62274]",
      "dest": "function_definition [40211,40407]"
    },
    {
      "src": "(: ( [3761,3762]",
      "dest": "(: ( [6060,6061]"
    },
    {
      "src": "(: ( [27383,27384]",
      "dest": "(: ( [31476,31477]"
    },
    {
      "src": ",: , [5558,5559]",
      "dest": ",: , [7857,7858]"
    },
    {
      "src": "visibility [77217,77225]",
      "dest": "visibility [30003,30011]"
    },
    {
      "src": "): ) [51799,51800]",
      "dest": "): ) [28509,28510]"
    },
    {
      "src": "type_name [60257,60264]",
      "dest": "type_name [37162,37169]"
    },
    {
      "src": "identifier: a [20057,20058]",
      "dest": "identifier: a [13696,13697]"
    },
    {
      "src": "call_argument [9703,9705]",
      "dest": "call_argument [29349,29385]"
    },
    {
      "src": "parameter [18562,18569]",
      "dest": "parameter [12294,12301]"
    },
    {
      "src": ",: , [10160,10161]",
      "dest": ",: , [24728,24729]"
    },
    {
      "src": "primitive_type [17135,17142]",
      "dest": "primitive_type [10851,10858]"
    },
    {
      "src": "identifier: _to [27685,27688]",
      "dest": "identifier: _to [31873,31876]"
    },
    {
      "src": "uint256: uint256 [38282,38289]",
      "dest": "uint256: uint256 [32761,32768]"
    },
    {
      "src": "identifier: transfer [27676,27684]",
      "dest": "identifier: transfer [31864,31872]"
    },
    {
      "src": "state_variable_declaration [37246,37279]",
      "dest": "state_variable_declaration [36214,36245]"
    },
    {
      "src": "comment: /* Defines the storage layout of the token implementation contract. Any newly declared state variables in future upgrades should be appended to the bottom. Never remove state variables from this list  */ [22436,22643]",
      "dest": "comment: /**  * @dev Contract that prevents addresses that were previously using autosweep addresses from  * making transfers on them.  *  * In older versions TrueCurrencies had a feature called Autosweep.  * Given a single deposit address, it was possible to generate 16^5-1 autosweep addresses.  * E.g. having deposit address 0xc257274276a4e539741ca11b590b9447b26a8051, you could generate  * - 0xc257274276a4e539741ca11b590b9447b2600000  * - 0xc257274276a4e539741ca11b590b9447b2600001  * - ...  * - 0xc257274276a4e539741ca11b590b9447b26fffff  * Every transfer to an autosweep address resulted as a transfer to deposit address.  * This feature got deprecated, but there were 4 addresses that still actively using the feature.  *  * This contract will reject a transfer to these 4*(16^5-1) addresses to prevent accidental token freeze.  */ [41094,41939]"
    },
    {
      "src": "uint256: uint256 [59021,59028]",
      "dest": "uint256: uint256 [38892,38899]"
    },
    {
      "src": "identifier: redemptionAddressCount_Deprecated [23184,23217]",
      "dest": "identifier: redemptionAddressCount_Deprecated [1268,1301]"
    },
    {
      "src": "visibility [3483,3491]",
      "dest": "visibility [5782,5790]"
    },
    {
      "src": "\": \" [67463,67464]",
      "dest": "\": \" [19502,19503]"
    },
    {
      "src": "modifier: modifier [14629,14637]",
      "dest": "modifier: modifier [4739,4747]"
    },
    {
      "src": "returns: returns [86247,86254]",
      "dest": "returns: returns [26148,26155]"
    },
    {
      "src": "primitive_type [3350,3357]",
      "dest": "primitive_type [5649,5656]"
    },
    {
      "src": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [26156,26233]",
      "dest": "comment: /**      * @dev sets the original `owner` of the contract to the sender      * at construction. Must then be reinitialized      */ [4191,4324]"
    },
    {
      "src": "inheritance_specifier [45848,45871]",
      "dest": "inheritance_specifier [36183,36206]"
    },
    {
      "src": "identifier: account [3474,3481]",
      "dest": "identifier: account [5773,5780]"
    },
    {
      "src": "function_definition [26690,26794]",
      "dest": "function_definition [5014,5118]"
    },
    {
      "src": "identifier: _spender [22027,22035]",
      "dest": "identifier: recipient [42076,42085]"
    },
    {
      "src": "uint256: uint256 [23432,23439]",
      "dest": "uint256: uint256 [1515,1522]"
    },
    {
      "src": "type_name [5271,5278]",
      "dest": "type_name [7570,7577]"
    },
    {
      "src": "): ) [26131,26132]",
      "dest": "): ) [4426,4427]"
    },
    {
      "src": "address: address [57834,57841]",
      "dest": "address: address [29174,29181]"
    },
    {
      "src": "string_literal [68471,68507]",
      "dest": "string_literal [19778,19809]"
    },
    {
      "src": "comment: /**      * @dev Emitted when the allowance of a `spender` for an `owner` is set by      * a call to {approve}. `value` is the new allowance.      */ [5603,5754]",
      "dest": "comment: /**      * @dev Emitted when the allowance of a `spender` for an `owner` is set by      * a call to {approve}. `value` is the new allowance.      */ [7902,8053]"
    },
    {
      "src": "expression_statement [39064,39099]",
      "dest": "expression_statement [33937,33997]"
    },
    {
      "src": "type_name [23766,23773]",
      "dest": "type_name [1809,1816]"
    },
    {
      "src": "call_argument [14043,14065]",
      "dest": "call_argument [27655,27675]"
    },
    {
      "src": "(: ( [38388,38389]",
      "dest": "(: ( [37215,37216]"
    },
    {
      "src": "identifier: amount [5314,5320]",
      "dest": "identifier: amount [7613,7619]"
    },
    {
      "src": "modifier_invocation [21405,21414]",
      "dest": "modifier_invocation [37187,37196]"
    },
    {
      "src": "public: public [11019,11025]",
      "dest": "public: public [23688,23694]"
    },
    {
      "src": ",: , [38467,38468]",
      "dest": ",: , [37328,37329]"
    },
    {
      "src": "(: ( [39177,39178]",
      "dest": "(: ( [34075,34076]"
    },
    {
      "src": "call_argument [39086,39097]",
      "dest": "call_argument [33959,33995]"
    },
    {
      "src": ",: , [38531,38532]",
      "dest": ",: , [37402,37403]"
    },
    {
      "src": "primitive_type [21790,21797]",
      "dest": "primitive_type [42783,42790]"
    },
    {
      "src": "state_mutability [20689,20693]",
      "dest": "state_mutability [14294,14298]"
    },
    {
      "src": "identifier: _from [81902,81907]",
      "dest": "identifier: data [19956,19960]"
    },
    {
      "src": "number_literal: 0 [19351,19352]",
      "dest": "number_literal: 0 [12982,12983]"
    },
    {
      "src": "call_argument [27376,27397]",
      "dest": "call_argument [31469,31490]"
    },
    {
      "src": "\": \" [48100,48101]",
      "dest": "\": \" [37867,37868]"
    },
    {
      "src": "returns: returns [86486,86493]",
      "dest": "returns: returns [26874,26881]"
    },
    {
      "src": "): ) [47266,47267]",
      "dest": "): ) [39107,39108]"
    },
    {
      "src": "(: ( [34054,34055]",
      "dest": "(: ( [24177,24178]"
    },
    {
      "src": "address: address [5798,5805]",
      "dest": "address: address [8097,8104]"
    },
    {
      "src": "solidity: solidity [14232,14240]",
      "dest": "solidity: solidity [31042,31050]"
    },
    {
      "src": "primitive_type [66481,66488]",
      "dest": "primitive_type [24730,24737]"
    },
    {
      "src": "type_name [142,149]",
      "dest": "type_name [30966,30973]"
    },
    {
      "src": "identifier: _addr [21091,21096]",
      "dest": "identifier: target [18828,18834]"
    },
    {
      "src": "emit_statement [26950,26997]",
      "dest": "emit_statement [5276,5323]"
    },
    {
      "src": "identifier: newOwner [25875,25883]",
      "dest": "identifier: newOwner [4173,4181]"
    },
    {
      "src": "identifier: _addRewardBalance [62107,62124]",
      "dest": "identifier: _burn [40220,40225]"
    },
    {
      "src": "uint8: uint8 [87059,87064]",
      "dest": "uint8: uint8 [43406,43411]"
    },
    {
      "src": "call_argument [60890,60897]",
      "dest": "call_argument [38011,38018]"
    },
    {
      "src": "solidity_version: 0.5.13 [5918,5924]",
      "dest": "solidity_version: 0.6.0 [9085,9090]"
    },
    {
      "src": "primitive_type [19378,19385]",
      "dest": "primitive_type [13009,13016]"
    },
    {
      "src": "call_argument [53730,53738]",
      "dest": "call_argument [29461,29468]"
    },
    {
      "src": "type_cast_expression [55244,55256]",
      "dest": "type_cast_expression [42879,42897]"
    },
    {
      "src": "(: ( [81848,81849]",
      "dest": "(: ( [19883,19884]"
    },
    {
      "src": "(: ( [39005,39006]",
      "dest": "(: ( [33878,33879]"
    },
    {
      "src": "binary_expression [26279,26298]",
      "dest": "binary_expression [4576,4595]"
    },
    {
      "src": "solidity_pragma_token [15341,15356]",
      "dest": "solidity_pragma_token [14402,14417]"
    },
    {
      "src": "expression_statement [68428,68509]",
      "dest": "expression_statement [19750,19811]"
    },
    {
      "src": "uint256: uint256 [65483,65490]",
      "dest": "uint256: uint256 [19337,19344]"
    },
    {
      "src": ">=: >= [48088,48090]",
      "dest": ">=: >= [37838,37840]"
    },
    {
      "src": "identifier: to [37221,37223]",
      "dest": "identifier: to [36662,36664]"
    },
    {
      "src": "visibility [17600,17608]",
      "dest": "visibility [11324,11332]"
    },
    {
      "src": "identifier: _min [39014,39018]",
      "dest": "identifier: _min [33887,33891]"
    },
    {
      "src": "function_body [26939,27071]",
      "dest": "function_body [5265,5397]"
    },
    {
      "src": "): ) [20033,20034]",
      "dest": "): ) [13672,13673]"
    },
    {
      "src": "{: { [85636,85637]",
      "dest": "{: { [24496,24497]"
    },
    {
      "src": "parameter [19981,19990]",
      "dest": "parameter [13620,13629]"
    },
    {
      "src": "external: external [5322,5330]",
      "dest": "external: external [7621,7629]"
    },
    {
      "src": "type_name [23224,23231]",
      "dest": "type_name [1308,1315]"
    },
    {
      "src": "primitive_type [21083,21090]",
      "dest": "primitive_type [18820,18827]"
    },
    {
      "src": "(: ( [51767,51768]",
      "dest": "(: ( [28471,28472]"
    },
    {
      "src": "call_argument [17236,17242]",
      "dest": "call_argument [10952,10958]"
    },
    {
      "src": "identifier: require [55376,55383]",
      "dest": "identifier: require [30031,30038]"
    },
    {
      "src": "type_name [37149,37156]",
      "dest": "type_name [32454,32461]"
    },
    {
      "src": "if_statement [17864,17911]",
      "dest": "if_statement [11588,11635]"
    },
    {
      "src": "parameter [54024,54028]",
      "dest": "parameter [38331,38344]"
    },
    {
      "src": "visibility [55723,55731]",
      "dest": "visibility [29127,29135]"
    },
    {
      "src": ",: , [37436,37437]",
      "dest": ",: , [28399,28400]"
    },
    {
      "src": "identifier: token [27561,27566]",
      "dest": "identifier: token [31749,31754]"
    },
    {
      "src": "\": \" [73714,73715]",
      "dest": "\": \" [18963,18964]"
    },
    {
      "src": "identifier: onlyOwner [26248,26257]",
      "dest": "identifier: onlyOwner [4545,4554]"
    },
    {
      "src": "struct_declaration [23723,23782]",
      "dest": "struct_declaration [1745,1830]"
    },
    {
      "src": "parameter [17589,17598]",
      "dest": "parameter [11313,11322]"
    },
    {
      "src": "): ) [5320,5321]",
      "dest": "): ) [7619,7620]"
    },
    {
      "src": "identifier: SwapTokenForReward [67831,67849]",
      "dest": "identifier: Transfer [28045,28053]"
    },
    {
      "src": "identifier: b [19347,19348]",
      "dest": "identifier: b [12978,12979]"
    },
    {
      "src": "bool: bool [55158,55162]",
      "dest": "bool: bool [36432,36436]"
    },
    {
      "src": ",: , [47303,47304]",
      "dest": ",: , [39911,39912]"
    },
    {
      "src": "primitive_type [9005,9012]",
      "dest": "primitive_type [26113,26120]"
    },
    {
      "src": "{: { [86262,86263]",
      "dest": "{: { [26163,26164]"
    },
    {
      "src": "identifier: b [20731,20732]",
      "dest": "identifier: b [14336,14337]"
    },
    {
      "src": "): ) [33197,33198]",
      "dest": "): ) [15167,15168]"
    },
    {
      "src": "event_paramater [5560,5578]",
      "dest": "event_paramater [7859,7877]"
    },
    {
      "src": "type_name [66007,66014]",
      "dest": "type_name [24197,24204]"
    },
    {
      "src": "identifier: newOwner [13997,14005]",
      "dest": "identifier: recipient [24186,24195]"
    },
    {
      "src": "pure: pure [87221,87225]",
      "dest": "pure: pure [43577,43581]"
    },
    {
      "src": "address: address [8219,8226]",
      "dest": "address: address [25377,25384]"
    },
    {
      "src": "identifier: totalSupply_ [22854,22866]",
      "dest": "identifier: _totalSupply [932,944]"
    },
    {
      "src": "\": \" [9704,9705]",
      "dest": "\": \" [29384,29385]"
    },
    {
      "src": "^:  ^ [3039,3041]",
      "dest": "^:  ^ [5419,5421]"
    },
    {
      "src": "(: ( [10984,10985]",
      "dest": "(: ( [23685,23686]"
    },
    {
      "src": "\": \" [39086,39087]",
      "dest": "\": \" [33959,33960]"
    },
    {
      "src": "identifier: from [150,154]",
      "dest": "identifier: from [30974,30978]"
    },
    {
      "src": "primitive_type [21812,21819]",
      "dest": "primitive_type [42802,42809]"
    },
    {
      "src": ".: . [28736,28737]",
      "dest": ".: . [8805,8806]"
    },
    {
      "src": "bool: bool [53842,53846]",
      "dest": "bool: bool [37762,37766]"
    },
    {
      "src": "(: ( [52487,52488]",
      "dest": "(: ( [36406,36407]"
    },
    {
      "src": "): ) [18569,18570]",
      "dest": "): ) [12301,12302]"
    },
    {
      "src": "(: ( [62124,62125]",
      "dest": "(: ( [40225,40226]"
    },
    {
      "src": "primitive_type [20630,20637]",
      "dest": "primitive_type [14235,14242]"
    },
    {
      "src": "string [87268,87277]",
      "dest": "string [43624,43633]"
    },
    {
      "src": "string [54363,54376]",
      "dest": "string [34515,34562]"
    },
    {
      "src": "member_expression [33244,33254]",
      "dest": "member_expression [33241,33251]"
    },
    {
      "src": "identifier: HasOwner [27190,27198]",
      "dest": "identifier: ERC20 [31233,31238]"
    },
    {
      "src": "function_definition [87293,87379]",
      "dest": "function_definition [43649,43744]"
    },
    {
      "src": "pragma: pragma [20857,20863]",
      "dest": "pragma: pragma [31901,31907]"
    },
    {
      "src": "solidity: solidity [65,73]",
      "dest": "solidity: solidity [409,417]"
    },
    {
      "src": "yul_evm_builtin [41812,41815]",
      "dest": "yul_evm_builtin [20424,20427]"
    },
    {
      "src": "identifier: _tokenHolder [21798,21810]",
      "dest": "identifier: recipient [42791,42800]"
    },
    {
      "src": "parameter [5271,5285]",
      "dest": "parameter [7570,7584]"
    },
    {
      "src": "): ) [23440,23441]",
      "dest": "): ) [1523,1524]"
    },
    {
      "src": "state_variable_declaration [46031,46084]",
      "dest": "state_variable_declaration [36251,36304]"
    },
    {
      "src": "identifier: value [37233,37238]",
      "dest": "identifier: value [36674,36679]"
    },
    {
      "src": "type_cast_expression [14055,14065]",
      "dest": "type_cast_expression [27665,27675]"
    },
    {
      "src": "function_body [11049,11113]",
      "dest": "function_body [23727,23765]"
    },
    {
      "src": "address: address [3466,3473]",
      "dest": "address: address [5765,5772]"
    },
    {
      "src": "constant: constant [37254,37262]",
      "dest": "constant: constant [36222,36230]"
    },
    {
      "src": "\": \" [48184,48185]",
      "dest": "\": \" [39019,39020]"
    },
    {
      "src": "call_argument [17971,18006]",
      "dest": "call_argument [11695,11730]"
    },
    {
      "src": "return_statement [19495,19504]",
      "dest": "return_statement [13126,13135]"
    },
    {
      "src": "return: return [86586,86592]",
      "dest": "return: return [27040,27046]"
    },
    {
      "src": "type_name [21812,21819]",
      "dest": "type_name [42802,42809]"
    },
    {
      "src": "): ) [18627,18628]",
      "dest": "): ) [12359,12360]"
    },
    {
      "src": "return_type_definition [34119,34133]",
      "dest": "return_type_definition [24237,24251]"
    },
    {
      "src": "{: { [17876,17877]",
      "dest": "{: { [11600,11601]"
    },
    {
      "src": "identifier: TrueRewardBackedToken [86903,86924]",
      "dest": "identifier: TrueCurrencyWithLegacyAutosweep [43246,43277]"
    },
    {
      "src": "type_name [21711,21739]",
      "dest": "type_name [1430,1457]"
    },
    {
      "src": "solidity: solidity [25514,25522]",
      "dest": "solidity: solidity [43015,43023]"
    },
    {
      "src": "type_cast_expression [27376,27389]",
      "dest": "type_cast_expression [31469,31482]"
    },
    {
      "src": "parameter [3466,3481]",
      "dest": "parameter [5765,5780]"
    },
    {
      "src": "(: ( [18592,18593]",
      "dest": "(: ( [12324,12325]"
    },
    {
      "src": "identifier: burnMax [39134,39141]",
      "dest": "identifier: burnMax [34032,34039]"
    },
    {
      "src": "address: address [51760,51767]",
      "dest": "address: address [28464,28471]"
    },
    {
      "src": "call_argument [62669,62675]",
      "dest": "call_argument [27914,27920]"
    },
    {
      "src": "primitive_type [13989,13996]",
      "dest": "primitive_type [24178,24185]"
    },
    {
      "src": "visibility [23008,23014]",
      "dest": "visibility [1086,1092]"
    },
    {
      "src": "uint256: uint256 [19190,19197]",
      "dest": "uint256: uint256 [12888,12895]"
    },
    {
      "src": "mapping: mapping [23788,23795]",
      "dest": "mapping: mapping [1836,1843]"
    },
    {
      "src": "string: string [23097,23103]",
      "dest": "string: string [1178,1184]"
    },
    {
      "src": "state_mutability [85613,85617]",
      "dest": "state_mutability [24456,24460]"
    },
    {
      "src": "address: address [10655,10662]",
      "dest": "address: address [23847,23854]"
    },
    {
      "src": "state_variable_declaration [23168,23218]",
      "dest": "state_variable_declaration [1252,1302]"
    },
    {
      "src": ",: , [19199,19200]",
      "dest": ",: , [12897,12898]"
    },
    {
      "src": "primitive_type [23401,23408]",
      "dest": "primitive_type [1485,1492]"
    },
    {
      "src": "return_statement [87261,87278]",
      "dest": "return_statement [43617,43634]"
    },
    {
      "src": "identifier: b [17968,17969]",
      "dest": "identifier: b [11692,11693]"
    },
    {
      "src": "parameter [65471,65481]",
      "dest": "parameter [30980,30990]"
    },
    {
      "src": "solidity_version: 0.5.0 [3041,3046]",
      "dest": "solidity_version: 0.6.0 [5421,5426]"
    },
    {
      "src": "call_argument [59419,59426]",
      "dest": "call_argument [28723,28730]"
    },
    {
      "src": "primitive_type [18562,18569]",
      "dest": "primitive_type [12294,12301]"
    },
    {
      "src": "identifier: balanceOf [21045,21054]",
      "dest": "identifier: _balances [1395,1404]"
    },
    {
      "src": "public: public [26915,26921]",
      "dest": "public: public [5241,5247]"
    },
    {
      "src": "address: address [60231,60238]",
      "dest": "address: address [37145,37152]"
    },
    {
      "src": "internal: internal [62173,62181]",
      "dest": "internal: internal [40259,40267]"
    },
    {
      "src": "primitive_type [21225,21232]",
      "dest": "primitive_type [18240,18247]"
    },
    {
      "src": "parameter [5990,6002]",
      "dest": "parameter [17837,17851]"
    },
    {
      "src": "state_variable_declaration [23788,23847]",
      "dest": "state_variable_declaration [1836,1906]"
    },
    {
      "src": "identifier: Burn [37144,37148]",
      "dest": "identifier: Burn [32449,32453]"
    },
    {
      "src": "(: ( [17577,17578]",
      "dest": "(: ( [11301,11302]"
    },
    {
      "src": "visibility [87214,87220]",
      "dest": "visibility [43561,43567]"
    },
    {
      "src": "variable_declaration [81849,81864]",
      "dest": "variable_declaration [19898,19921]"
    },
    {
      "src": "parameter [8253,8267]",
      "dest": "parameter [26834,26857]"
    },
    {
      "src": "visibility [27895,27903]",
      "dest": "visibility [37178,37186]"
    },
    {
      "src": "identifier: amount [66489,66495]",
      "dest": "identifier: amount [24738,24744]"
    },
    {
      "src": "call_argument [27645,27658]",
      "dest": "call_argument [31833,31846]"
    },
    {
      "src": "binary_expression [14043,14065]",
      "dest": "binary_expression [27655,27675]"
    },
    {
      "src": "inheritance_specifier [27190,27198]",
      "dest": "inheritance_specifier [31233,31238]"
    },
    {
      "src": "call_argument [60452,60481]",
      "dest": "call_argument [25586,25628]"
    },
    {
      "src": "visibility [11019,11025]",
      "dest": "visibility [23688,23694]"
    },
    {
      "src": "type_name [26717,26724]",
      "dest": "type_name [5041,5048]"
    },
    {
      "src": "\": \" [47305,47306]",
      "dest": "\": \" [39913,39914]"
    },
    {
      "src": "identifier: _addr [21375,21380]",
      "dest": "identifier: recipient [38872,38881]"
    },
    {
      "src": "identifier: Transfer [37782,37790]",
      "dest": "identifier: Transfer [28702,28710]"
    },
    {
      "src": "comment: /**      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * IMPORTANT: Beware that changing an allowance with this method brings the risk      * that someone may use both the old and the new allowance by unfortunate      * transaction ordering. One possible solution to mitigate this race      * condition is to first reduce the spender's allowance to 0 and set the      * desired value afterwards:      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729      *      * Emits an {Approval} event.      */ [4196,4851]",
      "dest": "comment: /**      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * IMPORTANT: Beware that changing an allowance with this method brings the risk      * that someone may use both the old and the new allowance by unfortunate      * transaction ordering. One possible solution to mitigate this race      * condition is to first reduce the spender's allowance to 0 and set the      * desired value afterwards:      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729      *      * Emits an {Approval} event.      */ [6495,7150]"
    },
    {
      "src": "number_literal: 0 [77289,77290]",
      "dest": "number_literal: 0 [30137,30138]"
    },
    {
      "src": "type_name [5798,5805]",
      "dest": "type_name [8097,8104]"
    },
    {
      "src": "): ) [55255,55256]",
      "dest": "): ) [42896,42897]"
    },
    {
      "src": "type_name [21009,21037]",
      "dest": "type_name [1367,1394]"
    },
    {
      "src": "event_paramater [37149,37171]",
      "dest": "event_paramater [32454,32476]"
    },
    {
      "src": "identifier: b [16287,16288]",
      "dest": "identifier: b [10029,10030]"
    },
    {
      "src": "=: = [26073,26074]",
      "dest": "=: = [4368,4369]"
    },
    {
      "src": "type_name [64455,64462]",
      "dest": "type_name [852,859]"
    },
    {
      "src": "type_name [22204,22211]",
      "dest": "type_name [19302,19309]"
    },
    {
      "src": "call_argument [53453,53477]",
      "dest": "call_argument [40296,40312]"
    },
    {
      "src": "string [38469,38493]",
      "dest": "string [37330,37377]"
    },
    {
      "src": "number_literal: 0 [23025,23026]",
      "dest": "number_literal: 0 [1103,1104]"
    },
    {
      "src": "identifier: msg [28733,28736]",
      "dest": "identifier: msg [8802,8805]"
    },
    {
      "src": "identifier: require [38442,38449]",
      "dest": "identifier: require [37291,37298]"
    },
    {
      "src": "function_definition [3447,3515]",
      "dest": "function_definition [5746,5814]"
    },
    {
      "src": "call_argument [26976,26981]",
      "dest": "call_argument [5302,5307]"
    },
    {
      "src": "modifier_invocation [26922,26938]",
      "dest": "modifier_invocation [5248,5264]"
    },
    {
      "src": "): ) [4929,4930]",
      "dest": "): ) [7228,7229]"
    },
    {
      "src": "type_name [22674,22681]",
      "dest": "type_name [764,771]"
    },
    {
      "src": "primitive_type [22674,22681]",
      "dest": "primitive_type [764,771]"
    },
    {
      "src": "string_literal [53479,53508]",
      "dest": "string_literal [40314,40359]"
    },
    {
      "src": "call_argument [39072,39084]",
      "dest": "call_argument [33945,33957]"
    },
    {
      "src": "identifier: require [74476,74483]",
      "dest": "identifier: functionCall [17920,17932]"
    },
    {
      "src": "expression_statement [67369,67466]",
      "dest": "expression_statement [19423,19505]"
    },
    {
      "src": "call_argument [60597,60604]",
      "dest": "call_argument [29256,29263]"
    },
    {
      "src": "string_literal [81735,81755]",
      "dest": "string_literal [16954,16956]"
    },
    {
      "src": "(: ( [14675,14676]",
      "dest": "(: ( [4785,4786]"
    },
    {
      "src": "type_name [7935,7942]",
      "dest": "type_name [15452,15459]"
    },
    {
      "src": "uint256: uint256 [62142,62149]",
      "dest": "uint256: uint256 [40243,40250]"
    },
    {
      "src": "identifier: c [19386,19387]",
      "dest": "identifier: c [13017,13018]"
    },
    {
      "src": "member_expression [26279,26289]",
      "dest": "member_expression [4576,4586]"
    },
    {
      "src": "number_literal: 0 [37806,37807]",
      "dest": "number_literal: 0 [28719,28720]"
    },
    {
      "src": "user_defined_type [45817,45831]",
      "dest": "user_defined_type [32229,32243]"
    },
    {
      "src": "): ) [16344,16345]",
      "dest": "): ) [10086,10087]"
    },
    {
      "src": "parameter [85952,85967]",
      "dest": "parameter [39702,39717]"
    },
    {
      "src": "expression_statement [39109,39124]",
      "dest": "expression_statement [34007,34022]"
    },
    {
      "src": "type_name [66953,66960]",
      "dest": "type_name [42043,42050]"
    },
    {
      "src": "true [35299,35303]",
      "dest": "true [24323,24327]"
    },
    {
      "src": "string_literal [55797,55810]",
      "dest": "string_literal [29186,29221]"
    },
    {
      "src": "call_argument [53748,53749]",
      "dest": "call_argument [29478,29479]"
    },
    {
      "src": "\": \" [67429,67430]",
      "dest": "\": \" [19463,19464]"
    },
    {
      "src": "parameter [60257,60271]",
      "dest": "parameter [37162,37176]"
    },
    {
      "src": "identifier: _spender [34176,34184]",
      "dest": "identifier: recipient [24287,24296]"
    },
    {
      "src": "function: function [10628,10636]",
      "dest": "function: function [23828,23836]"
    },
    {
      "src": "identifier: subtractedValue [86547,86562]",
      "dest": "identifier: subtractedValue [26971,26986]"
    },
    {
      "src": "(: ( [21017,21018]",
      "dest": "(: ( [1374,1375]"
    },
    {
      "src": "}: } [39196,39197]",
      "dest": "}: } [34094,34095]"
    },
    {
      "src": "bytes32: bytes32 [7935,7942]",
      "dest": "bytes32: bytes32 [15452,15459]"
    },
    {
      "src": "solidity_version:  0.5.13 [21550,21557]",
      "dest": "solidity_version:  0.6.10 [34759,34766]"
    },
    {
      "src": "address: address [86169,86176]",
      "dest": "address: address [26096,26103]"
    },
    {
      "src": "primitive_type [23631,23638]",
      "dest": "primitive_type [1705,1712]"
    },
    {
      "src": "uint256: uint256 [39020,39027]",
      "dest": "uint256: uint256 [33893,33900]"
    },
    {
      "src": "type_name [18528,18535]",
      "dest": "type_name [12260,12267]"
    },
    {
      "src": "type_name [5775,5782]",
      "dest": "type_name [8074,8081]"
    },
    {
      "src": "primitive_type [23620,23627]",
      "dest": "primitive_type [1694,1701]"
    },
    {
      "src": "event_paramater [37173,37186]",
      "dest": "event_paramater [32478,32491]"
    },
    {
      "src": "primitive_type [58995,59002]",
      "dest": "primitive_type [38314,38321]"
    },
    {
      "src": "identifier: errorMessage [19215,19227]",
      "dest": "identifier: errorMessage [12913,12925]"
    },
    {
      "src": "comment: /**  * @dev Interface of the ERC20 standard as defined in the EIP. Does not include  * the optional functions; to access them see {ERC20Detailed}.  */ [3051,3204]",
      "dest": "comment: /*  * @dev Provides information about the current execution context, including the  * sender of the transaction and its data. While these are generally available  * via msg.sender and msg.data, they should not be accessed in such a direct  * manner, since when dealing with GSN meta-transactions the account sending and  * paying for execution may not be the actual sender (as far as an application  * is concerned).  *  * This contract is only required for intermediate, library-like contracts.  */ [8171,8679]"
    },
    {
      "src": "return_type_definition [87050,87065]",
      "dest": "return_type_definition [43397,43412]"
    },
    {
      "src": "call_argument [66085,66091]",
      "dest": "call_argument [34685,34691]"
    },
    {
      "src": ",: , [16739,16740]",
      "dest": ",: , [10489,10490]"
    },
    {
      "src": "identifier: amount [67314,67320]",
      "dest": "identifier: amount [28565,28571]"
    },
    {
      "src": "call_argument [16741,16742]",
      "dest": "call_argument [10491,10492]"
    },
    {
      "src": "): ) [52030,52031]",
      "dest": "): ) [29274,29275]"
    },
    {
      "src": "external: external [4156,4164]",
      "dest": "external: external [6455,6463]"
    },
    {
      "src": ",: , [38343,38344]",
      "dest": ",: , [37160,37161]"
    },
    {
      "src": "identifier: _to [27363,27366]",
      "dest": "identifier: _to [31456,31459]"
    },
    {
      "src": "identifier: delegateIncreaseApproval [86144,86168]",
      "dest": "identifier: increaseAllowance [26078,26095]"
    },
    {
      "src": "type_name [6024,6031]",
      "dest": "type_name [19662,19669]"
    },
    {
      "src": "{: { [23747,23748]",
      "dest": "{: { [1769,1770]"
    },
    {
      "src": "return: return [18020,18026]",
      "dest": "return: return [11744,11750]"
    },
    {
      "src": "primitive_type [23582,23589]",
      "dest": "primitive_type [1645,1652]"
    },
    {
      "src": "pragma: pragma [21535,21541]",
      "dest": "pragma: pragma [34744,34750]"
    },
    {
      "src": "type_name [20641,20648]",
      "dest": "type_name [14246,14253]"
    },
    {
      "src": "call_expression [20053,20090]",
      "dest": "call_expression [13692,13729]"
    },
    {
      "src": "\": \" [9703,9704]",
      "dest": "\": \" [29349,29350]"
    },
    {
      "src": "): ) [38493,38494]",
      "dest": "): ) [37377,37378]"
    },
    {
      "src": "primitive_type [17146,17153]",
      "dest": "primitive_type [10862,10869]"
    },
    {
      "src": "): ) [17215,17216]",
      "dest": "): ) [10931,10932]"
    },
    {
      "src": "type_name [35194,35198]",
      "dest": "type_name [40960,40964]"
    },
    {
      "src": "uint256: uint256 [17923,17930]",
      "dest": "uint256: uint256 [11647,11654]"
    },
    {
      "src": "return_type_definition [20017,20034]",
      "dest": "return_type_definition [13656,13673]"
    },
    {
      "src": "identifier: _spender [21820,21828]",
      "dest": "identifier: depositAddress [42810,42824]"
    },
    {
      "src": "parameter [37423,37436]",
      "dest": "parameter [28384,28399]"
    },
    {
      "src": "(: ( [26975,26976]",
      "dest": "(: ( [5301,5302]"
    },
    {
      "src": "comment: //Change the minimum and maximum amount that can be burned at once. Burning [38556,38631]",
      "dest": "comment: /**      * @dev Emitted when `value` tokens are burnt from one account (`burner`)      * @param burner address which burned tokens      * @param value amount of tokens burned      */ [32251,32437]"
    },
    {
      "src": "(: ( [16737,16738]",
      "dest": "(: ( [10487,10488]"
    },
    {
      "src": "parameter [156,169]",
      "dest": "parameter [18855,18868]"
    },
    {
      "src": "pure: pure [16693,16697]",
      "dest": "pure: pure [10443,10447]"
    },
    {
      "src": ",: , [4137,4138]",
      "dest": ",: , [6436,6437]"
    },
    {
      "src": "call_argument [54251,54287]",
      "dest": "call_argument [34582,34599]"
    },
    {
      "src": "pure: pure [20689,20693]",
      "dest": "pure: pure [14294,14298]"
    },
    {
      "src": "pure: pure [87415,87419]",
      "dest": "pure: pure [23551,23555]"
    },
    {
      "src": "identifier: onlyPendingOwner [14638,14654]",
      "dest": "identifier: onlyPendingOwner [4748,4764]"
    },
    {
      "src": "identifier: msg [26279,26282]",
      "dest": "identifier: msg [4576,4579]"
    },
    {
      "src": "public: public [34103,34109]",
      "dest": "public: public [24213,24219]"
    },
    {
      "src": "identifier: spender [4882,4889]",
      "dest": "identifier: spender [7181,7188]"
    },
    {
      "src": "address: address [65471,65478]",
      "dest": "address: address [30980,30987]"
    },
    {
      "src": "assignment_expression [39134,39148]",
      "dest": "assignment_expression [34032,34046]"
    },
    {
      "src": "expression_statement [27363,27399]",
      "dest": "expression_statement [31456,31492]"
    },
    {
      "src": "identifier: require [47278,47285]",
      "dest": "identifier: require [39865,39872]"
    },
    {
      "src": "call_argument [68812,68818]",
      "dest": "call_argument [25518,25524]"
    },
    {
      "src": "identifier: DECIMALS [86962,86970]",
      "dest": "identifier: DECIMALS [43300,43308]"
    },
    {
      "src": "variable_declaration_statement [17268,17286]",
      "dest": "variable_declaration_statement [10984,11002]"
    },
    {
      "src": "call_argument [52406,52407]",
      "dest": "call_argument [28552,28553]"
    },
    {
      "src": "(: ( [19980,19981]",
      "dest": "(: ( [13619,13620]"
    },
    {
      "src": "state_variable_declaration [22967,22994]",
      "dest": "state_variable_declaration [1045,1072]"
    },
    {
      "src": "identifier: spender [85960,85967]",
      "dest": "identifier: spender [39710,39717]"
    },
    {
      "src": "function: function [5249,5257]",
      "dest": "function: function [7548,7556]"
    },
    {
      "src": "function_definition [86135,86361]",
      "dest": "function_definition [26069,26287]"
    },
    {
      "src": "type_name [53842,53846]",
      "dest": "type_name [37762,37766]"
    },
    {
      "src": "visibility [87128,87134]",
      "dest": "visibility [43475,43481]"
    },
    {
      "src": "identifier: balance [27690,27697]",
      "dest": "identifier: balance [31878,31885]"
    },
    {
      "src": "{: { [11049,11050]",
      "dest": "{: { [23727,23728]"
    },
    {
      "src": "function_body [20712,20783]",
      "dest": "function_body [14317,14388]"
    },
    {
      "src": "address: address [37423,37430]",
      "dest": "address: address [28384,28391]"
    },
    {
      "src": "function: function [86135,86143]",
      "dest": "function: function [26069,26077]"
    },
    {
      "src": "primitive_type [21731,21738]",
      "dest": "primitive_type [1449,1456]"
    },
    {
      "src": "): ) [37816,37817]",
      "dest": "): ) [28738,28739]"
    },
    {
      "src": "call_argument [61576,61583]",
      "dest": "call_argument [40992,40999]"
    },
    {
      "src": "identifier: opportunity_ [71319,71331]",
      "dest": "identifier: allowances_Deprecated [894,915]"
    },
    {
      "src": "(: ( [52405,52406]",
      "dest": "(: ( [28551,28552]"
    },
    {
      "src": "identifier: onlyPendingOwner [26922,26938]",
      "dest": "identifier: onlyPendingOwner [5248,5264]"
    },
    {
      "src": "parameter [26717,26733]",
      "dest": "parameter [5041,5057]"
    },
    {
      "src": "primitive_type [52398,52405]",
      "dest": "primitive_type [28544,28551]"
    },
    {
      "src": "call_expression [39064,39098]",
      "dest": "call_expression [33937,33996]"
    },
    {
      "src": "identifier: newMin [38274,38280]",
      "dest": "identifier: newMin [32753,32759]"
    },
    {
      "src": "type_cast_expression [52398,52408]",
      "dest": "type_cast_expression [28544,28554]"
    },
    {
      "src": "return: return [85647,85653]",
      "dest": "return: return [24507,24513]"
    },
    {
      "src": "identifier: newOwner [14043,14051]",
      "dest": "identifier: sender [27655,27661]"
    },
    {
      "src": "type_name [17208,17215]",
      "dest": "type_name [10924,10931]"
    },
    {
      "src": "return: return [17891,17897]",
      "dest": "return: return [11615,11621]"
    },
    {
      "src": "=: = [53619,53620]",
      "dest": "=: = [29410,29411]"
    },
    {
      "src": "type_name [22875,22879]",
      "dest": "type_name [953,957]"
    },
    {
      "src": "type_name [10203,10207]",
      "dest": "type_name [24779,24783]"
    },
    {
      "src": "identifier: pendingOwner [26983,26995]",
      "dest": "identifier: pendingOwner [5309,5321]"
    },
    {
      "src": "identifier: _to [27576,27579]",
      "dest": "identifier: _to [31764,31767]"
    },
    {
      "src": "call_expression [51745,51800]",
      "dest": "call_expression [28445,28510]"
    },
    {
      "src": "(: ( [17235,17236]",
      "dest": "(: ( [10951,10952]"
    },
    {
      "src": "type_name [60231,60238]",
      "dest": "type_name [37145,37152]"
    },
    {
      "src": "expression_statement [14668,14704]",
      "dest": "expression_statement [4778,4836]"
    },
    {
      "src": "}: } [75833,75834]",
      "dest": "}: } [17053,17054]"
    },
    {
      "src": "string_literal [26300,26312]",
      "dest": "string_literal [4597,4609]"
    },
    {
      "src": "(: ( [10654,10655]",
      "dest": "(: ( [23846,23847]"
    },
    {
      "src": ",: , [37223,37224]",
      "dest": ",: , [36664,36665]"
    },
    {
      "src": "address: address [23421,23428]",
      "dest": "address: address [1504,1511]"
    },
    {
      "src": "type_name [33193,33197]",
      "dest": "type_name [15163,15167]"
    },
    {
      "src": "identifier: OwnershipTransferred [25788,25808]",
      "dest": "identifier: OwnershipTransferred [4105,4125]"
    },
    {
      "src": "comment: /**     *@dev send all token balance of an arbitary erc20 token     in the contract to another address     */ [27414,27526]",
      "dest": "comment: /**      * @dev send all token balance of an arbitrary erc20 token      * in the contract to another address      * @param token token to reclaim      * @param _to address to send eth balance to      */ [31507,31714]"
    },
    {
      "src": "(: ( [23551,23552]",
      "dest": "(: ( [1614,1615]"
    },
    {
      "src": "call_argument [55866,55897]",
      "dest": "call_argument [30141,30177]"
    },
    {
      "src": "using: using [32209,32214]",
      "dest": "using: using [22508,22513]"
    },
    {
      "src": "primitive_type [6113,6120]",
      "dest": "primitive_type [1780,1787]"
    },
    {
      "src": "return_statement [85647,85684]",
      "dest": "return_statement [24507,24542]"
    },
    {
      "src": "(: ( [25808,25809]",
      "dest": "(: ( [4125,4126]"
    },
    {
      "src": "contract_body [3223,5841]",
      "dest": "contract_body [5522,8140]"
    },
    {
      "src": "comment: // reward token storage [23461,23484]",
      "dest": "comment: /* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.      *******************************************************************************************************      ** length     input                                                         usage      *******************************************************************************************************      ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner      ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation      ** 32         uint256(11)                                                   gasRefundPool_Deprecated      ** 64         uint256(address),uint256(14)                                  balanceOf      ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance      ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes      **/ [2059,3614]"
    },
    {
      "src": "type_name [19190,19197]",
      "dest": "type_name [12888,12895]"
    },
    {
      "src": "binary_expression [17236,17242]",
      "dest": "binary_expression [10952,10958]"
    },
    {
      "src": "primitive_type [6848,6855]",
      "dest": "primitive_type [1563,1570]"
    },
    {
      "src": "}: } [34239,34240]",
      "dest": "}: } [24334,24335]"
    },
    {
      "src": "}: } [16784,16785]",
      "dest": "}: } [10534,10535]"
    },
    {
      "src": "visibility [39034,39042]",
      "dest": "visibility [33907,33915]"
    },
    {
      "src": "identifier: configured [28367,28377]",
      "dest": "identifier: isBlacklisted [1991,2004]"
    },
    {
      "src": "primitive_type [37423,37430]",
      "dest": "primitive_type [28384,28391]"
    },
    {
      "src": "pragma_directive [20857,20880]",
      "dest": "pragma_directive [31901,31924]"
    },
    {
      "src": "{: { [15955,15956]",
      "dest": "{: { [9689,9690]"
    },
    {
      "src": "call_argument [20057,20058]",
      "dest": "call_argument [13696,13697]"
    },
    {
      "src": "visibility [22682,22688]",
      "dest": "visibility [772,778]"
    },
    {
      "src": "primitive_type [27312,27327]",
      "dest": "primitive_type [31405,31420]"
    },
    {
      "src": "}: } [18635,18636]",
      "dest": "}: } [12367,12368]"
    },
    {
      "src": "contract_declaration [25739,27074]",
      "dest": "contract_declaration [3869,5400]"
    },
    {
      "src": "=: = [39117,39118]",
      "dest": "=: = [34015,34016]"
    },
    {
      "src": "): ) [27388,27389]",
      "dest": "): ) [31481,31482]"
    },
    {
      "src": "(: ( [3324,3325]",
      "dest": "(: ( [5623,5624]"
    },
    {
      "src": "type_name [16662,16669]",
      "dest": "type_name [10412,10419]"
    },
    {
      "src": "state_variable_declaration [32364,32469]",
      "dest": "state_variable_declaration [1211,1246]"
    },
    {
      "src": "): ) [16258,16259]",
      "dest": "): ) [10000,10001]"
    },
    {
      "src": "\": \" [54642,54643]",
      "dest": "\": \" [27677,27678]"
    },
    {
      "src": "identifier: require [14035,14042]",
      "dest": "identifier: require [27647,27654]"
    },
    {
      "src": "returns: returns [17614,17621]",
      "dest": "returns: returns [11338,11345]"
    },
    {
      "src": "): ) [29232,29233]",
      "dest": "): ) [27798,27799]"
    },
    {
      "src": "call_argument [52021,52031]",
      "dest": "call_argument [29265,29275]"
    },
    {
      "src": "returns: returns [17199,17206]",
      "dest": "returns: returns [10915,10922]"
    },
    {
      "src": "type_name [7994,7998]",
      "dest": "type_name [25445,25449]"
    },
    {
      "src": ",: , [37808,37809]",
      "dest": ",: , [28730,28731]"
    },
    {
      "src": "bool: bool [3815,3819]",
      "dest": "bool: bool [6114,6118]"
    },
    {
      "src": "function: function [19968,19976]",
      "dest": "function: function [13607,13615]"
    },
    {
      "src": "identifier: getAttributeValue [10637,10654]",
      "dest": "identifier: balanceOf [23837,23846]"
    },
    {
      "src": "solidity: solidity [21542,21550]",
      "dest": "solidity: solidity [34751,34759]"
    },
    {
      "src": "call_argument [86079,86084]",
      "dest": "call_argument [19559,19564]"
    },
    {
      "src": "type_name [16673,16680]",
      "dest": "type_name [10423,10430]"
    },
    {
      "src": "identifier: this [27653,27657]",
      "dest": "identifier: this [31841,31845]"
    },
    {
      "src": "}: } [62273,62274]",
      "dest": "}: } [40406,40407]"
    },
    {
      "src": "primitive_type [4179,4186]",
      "dest": "primitive_type [6478,6485]"
    },
    {
      "src": "call_argument [59631,59638]",
      "dest": "call_argument [28556,28563]"
    },
    {
      "src": "type_cast_expression [52021,52031]",
      "dest": "type_cast_expression [29265,29275]"
    },
    {
      "src": "returns: returns [87226,87233]",
      "dest": "returns: returns [43582,43589]"
    },
    {
      "src": "bool: bool [22737,22741]",
      "dest": "bool: bool [827,831]"
    },
    {
      "src": "function_definition [16649,16785]",
      "dest": "function_definition [10399,10535]"
    },
    {
      "src": "): ) [52407,52408]",
      "dest": "): ) [28553,28554]"
    },
    {
      "src": "string_literal [55635,55666]",
      "dest": "string_literal [28476,28509]"
    },
    {
      "src": "call_argument [66557,66563]",
      "dest": "call_argument [33253,33259]"
    },
    {
      "src": "primitive_type [60231,60238]",
      "dest": "primitive_type [37145,37152]"
    },
    {
      "src": "): ) [53646,53647]",
      "dest": "): ) [29435,29436]"
    },
    {
      "src": "function_body [17217,17314]",
      "dest": "function_body [10933,11030]"
    },
    {
      "src": ",: , [68469,68470]",
      "dest": ",: , [19776,19777]"
    },
    {
      "src": "(: ( [86494,86495]",
      "dest": "(: ( [26882,26883]"
    },
    {
      "src": "identifier: require [68630,68637]",
      "dest": "identifier: require [16968,16975]"
    },
    {
      "src": "interface_declaration [3206,5841]",
      "dest": "interface_declaration [5505,8140]"
    },
    {
      "src": "return_statement [87167,87183]",
      "dest": "return_statement [43514,43530]"
    },
    {
      "src": "contract: contract [25739,25747]",
      "dest": "contract: contract [3869,3877]"
    },
    {
      "src": "call_argument [18596,18597]",
      "dest": "call_argument [12328,12329]"
    },
    {
      "src": "visibility [26915,26921]",
      "dest": "visibility [5241,5247]"
    },
    {
      "src": "bool: bool [28362,28366]",
      "dest": "bool: bool [1985,1989]"
    },
    {
      "src": "comment: /**  * @title HasOwner  * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin.  and provides basic authorization control functions. Inherits storage layout of  ProxyStorage.  */ [25536,25737]",
      "dest": "comment: /**  * @title TrueUSD  * @dev This is the top-level ERC20 contract, but most of the interesting functionality is  * inherited - see the documentation on the corresponding contracts.  */ [43035,43224]"
    },
    {
      "src": "function_definition [27532,27706]",
      "dest": "function_definition [31720,31894]"
    },
    {
      "src": "return_type_definition [17199,17216]",
      "dest": "return_type_definition [10915,10932]"
    },
    {
      "src": "function_definition [38983,39197]",
      "dest": "function_definition [33856,34095]"
    },
    {
      "src": "uint256: uint256 [3350,3357]",
      "dest": "uint256: uint256 [5649,5656]"
    },
    {
      "src": "primitive_type [22701,22708]",
      "dest": "primitive_type [791,798]"
    },
    {
      "src": "variable_declaration_statement [81848,81914]",
      "dest": "variable_declaration_statement [19883,19962]"
    },
    {
      "src": "string: string [20652,20658]",
      "dest": "string: string [14257,14263]"
    },
    {
      "src": ">: > [19349,19350]",
      "dest": ">: > [12980,12981]"
    },
    {
      "src": "): ) [37238,37239]",
      "dest": "): ) [36679,36680]"
    },
    {
      "src": "solidity: solidity [253,261]",
      "dest": "solidity: solidity [3628,3636]"
    },
    {
      "src": "): ) [16682,16683]",
      "dest": "): ) [10432,10433]"
    },
    {
      "src": "returns: returns [18553,18560]",
      "dest": "returns: returns [12285,12292]"
    },
    {
      "src": "\": \" [87370,87371]",
      "dest": "\": \" [43735,43736]"
    },
    {
      "src": "identifier: RewardAllocation [23807,23823]",
      "dest": "identifier: RewardAllocation [1855,1871]"
    },
    {
      "src": "visibility [5322,5330]",
      "dest": "visibility [7621,7629]"
    },
    {
      "src": "identifier: onlyOwner [22267,22276]",
      "dest": "identifier: onlyOwner [38355,38364]"
    },
    {
      "src": "identifier: _value [8261,8267]",
      "dest": "identifier: subtractedValue [26842,26857]"
    },
    {
      "src": "address: address [85952,85959]",
      "dest": "address: address [39702,39709]"
    },
    {
      "src": "primitive_type [38282,38289]",
      "dest": "primitive_type [32761,32768]"
    },
    {
      "src": "): ) [50542,50543]",
      "dest": "): ) [41046,41047]"
    },
    {
      "src": "number_literal: 0x100000 [46075,46083]",
      "dest": "number_literal: 0x100000 [36295,36303]"
    },
    {
      "src": "(: ( [29229,29230]",
      "dest": "(: ( [27756,27757]"
    },
    {
      "src": "internal: internal [37454,37462]",
      "dest": "internal: internal [28417,28425]"
    },
    {
      "src": "contract_body [15955,20786]",
      "dest": "contract_body [9689,14391]"
    },
    {
      "src": "binary_expression [16283,16288]",
      "dest": "binary_expression [10025,10030]"
    },
    {
      "src": "{: { [87156,87157]",
      "dest": "{: { [43503,43504]"
    },
    {
      "src": "call_argument [26279,26298]",
      "dest": "call_argument [4576,4595]"
    },
    {
      "src": "type_name [75261,75268]",
      "dest": "type_name [16676,16691]"
    },
    {
      "src": "(: ( [17867,17868]",
      "dest": "(: ( [11591,11592]"
    },
    {
      "src": "parameter [4124,4137]",
      "dest": "parameter [6423,6436]"
    },
    {
      "src": "parameter [19179,19188]",
      "dest": "parameter [12877,12886]"
    },
    {
      "src": "{: { [22667,22668]",
      "dest": "{: { [757,758]"
    },
    {
      "src": "identifier: onlyOwner [39043,39052]",
      "dest": "identifier: onlyOwner [33916,33925]"
    },
    {
      "src": "visibility [10182,10188]",
      "dest": "visibility [24746,24752]"
    },
    {
      "src": "return_statement [86342,86354]",
      "dest": "return_statement [26268,26280]"
    },
    {
      "src": "string [17971,18006]",
      "dest": "string [11695,11730]"
    },
    {
      "src": "(: ( [7993,7994]",
      "dest": "(: ( [25444,25445]"
    },
    {
      "src": "visibility [14007,14013]",
      "dest": "visibility [23536,23542]"
    },
    {
      "src": "type_name [23807,23823]",
      "dest": "type_name [1855,1871]"
    },
    {
      "src": "primitive_type [87332,87338]",
      "dest": "primitive_type [43697,43703]"
    },
    {
      "src": ",: , [75689,75690]",
      "dest": ",: , [16778,16779]"
    },
    {
      "src": "type_name [32228,32235]",
      "dest": "type_name [22527,22534]"
    },
    {
      "src": "call_argument [60606,60612]",
      "dest": "call_argument [24298,24304]"
    },
    {
      "src": ",: , [47242,47243]",
      "dest": ",: , [39065,39066]"
    },
    {
      "src": "type_name [87332,87338]",
      "dest": "type_name [43697,43703]"
    },
    {
      "src": "call_expression [81882,81913]",
      "dest": "call_expression [19925,19961]"
    },
    {
      "src": "identifier: _increaseAllowanceAllArgs [34150,34175]",
      "dest": "identifier: _transfer [24263,24272]"
    },
    {
      "src": "identifier: token [27629,27634]",
      "dest": "identifier: token [31817,31822]"
    },
    {
      "src": "identifier: finOp [23774,23779]",
      "dest": "identifier: finOp [1817,1822]"
    },
    {
      "src": "function_body [86262,86361]",
      "dest": "function_body [26163,26287]"
    },
    {
      "src": "return_statement [18020,18029]",
      "dest": "return_statement [11744,11753]"
    },
    {
      "src": "identifier: ROUNDING [86997,87005]",
      "dest": "identifier: ROUNDING [43335,43343]"
    },
    {
      "src": "): ) [20678,20679]",
      "dest": "): ) [14283,14284]"
    },
    {
      "src": "address: address [66953,66960]",
      "dest": "address: address [42043,42050]"
    },
    {
      "src": "identifier: amount [61838,61844]",
      "dest": "identifier: amount [34722,34728]"
    },
    {
      "src": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      *      * _Available since v2.4.0._      */ [18644,19160]",
      "dest": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [12376,12858]"
    },
    {
      "src": "string_literal [87365,87371]",
      "dest": "string_literal [43730,43736]"
    },
    {
      "src": "return_type_definition [18553,18570]",
      "dest": "return_type_definition [12285,12302]"
    },
    {
      "src": "): ) [17630,17631]",
      "dest": "): ) [11354,11355]"
    },
    {
      "src": "contract_body [25773,27074]",
      "dest": "contract_body [3911,5400]"
    },
    {
      "src": "type_name [22920,22927]",
      "dest": "type_name [998,1005]"
    },
    {
      "src": "visibility [81335,81343]",
      "dest": "visibility [16719,16727]"
    },
    {
      "src": "\": \" [38408,38409]",
      "dest": "\": \" [37241,37242]"
    },
    {
      "src": "): ) [3481,3482]",
      "dest": "): ) [5780,5781]"
    },
    {
      "src": "function: function [87108,87116]",
      "dest": "function: function [43455,43463]"
    },
    {
      "src": "number_literal: 0 [53748,53749]",
      "dest": "number_literal: 0 [29478,29479]"
    },
    {
      "src": "): ) [85604,85605]",
      "dest": "): ) [24447,24448]"
    },
    {
      "src": "event_paramater [5798,5821]",
      "dest": "event_paramater [8097,8120]"
    },
    {
      "src": "comment: /**  * @title InstantiatableOwnable  * @dev The InstantiatableOwnable contract has an owner address, and provides basic authorization control  * functions, this simplifies the implementation of \"user permissions\".  */ [13005,13226]",
      "dest": "comment: /**  * @dev Implementation of the {IERC20} interface.  *  * This implementation is agnostic to the way tokens are created. This means  * that a supply mechanism has to be added in a derived contract using {_mint}.  * For a generic mechanism see {ERC20PresetMinterPauser}.  *  * TIP: For a detailed writeup see our guide  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How  * to implement supply mechanisms].  *  * We have followed general OpenZeppelin guidelines: functions revert instead  * of returning `false` on failure. This behavior is nonetheless conventional  * and does not conflict with the expectations of ERC20 applications.  *  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.  * This allows applications to reconstruct the allowance for all accounts just  * by listening to said events. Other implementations of the EIP may not emit  * these events, as it isn't required by the specification.  *  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}  * functions have been added to mitigate the well-known issues around setting  * allowances. See {IERC20-approve}.  */ [21253,22438]"
    },
    {
      "src": "(: ( [37204,37205]",
      "dest": "(: ( [36645,36646]"
    },
    {
      "src": "parameter [85589,85604]",
      "dest": "parameter [24432,24447]"
    },
    {
      "src": "primitive_type [3815,3819]",
      "dest": "primitive_type [6114,6118]"
    },
    {
      "src": "identifier: a [19989,19990]",
      "dest": "identifier: a [13628,13629]"
    },
    {
      "src": "type_name [87235,87241]",
      "dest": "type_name [43591,43597]"
    },
    {
      "src": "identifier: amount [66557,66563]",
      "dest": "identifier: amount [33253,33259]"
    },
    {
      "src": "(: ( [75260,75261]",
      "dest": "(: ( [16675,16676]"
    },
    {
      "src": "identifier: increaseAllowance [34037,34054]",
      "dest": "identifier: transfer [24169,24177]"
    },
    {
      "src": "uint256: uint256 [17268,17275]",
      "dest": "uint256: uint256 [10984,10991]"
    },
    {
      "src": "\": \" [60452,60453]",
      "dest": "\": \" [25586,25587]"
    },
    {
      "src": "solidity_version_comparison_operator [15349,15351]",
      "dest": "solidity_version_comparison_operator [14410,14412]"
    },
    {
      "src": "primitive_type [75274,75281]",
      "dest": "primitive_type [16703,16710]"
    },
    {
      "src": "{: { [86940,86941]",
      "dest": "{: { [43278,43279]"
    },
    {
      "src": "number_literal: 0 [17898,17899]",
      "dest": "number_literal: 0 [11622,11623]"
    },
    {
      "src": "(: ( [14042,14043]",
      "dest": "(: ( [27654,27655]"
    },
    {
      "src": "indexed: indexed [5546,5553]",
      "dest": "indexed: indexed [7845,7852]"
    },
    {
      "src": "visibility [20003,20011]",
      "dest": "visibility [13642,13650]"
    },
    {
      "src": "(: ( [3814,3815]",
      "dest": "(: ( [6113,6114]"
    },
    {
      "src": "(: ( [16706,16707]",
      "dest": "(: ( [10456,10457]"
    },
    {
      "src": "\": \" [18626,18627]",
      "dest": "\": \" [12358,12359]"
    },
    {
      "src": "primitive_type [81849,81856]",
      "dest": "primitive_type [19898,19903]"
    },
    {
      "src": "variable_declaration [16271,16280]",
      "dest": "variable_declaration [10013,10022]"
    },
    {
      "src": "function_body [27600,27706]",
      "dest": "function_body [31788,31894]"
    },
    {
      "src": "function: function [34028,34036]",
      "dest": "function: function [24160,24168]"
    },
    {
      "src": "visibility [19229,19237]",
      "dest": "visibility [12927,12935]"
    },
    {
      "src": "primitive_type [32228,32235]",
      "dest": "primitive_type [22527,22534]"
    },
    {
      "src": "uint8: uint8 [87149,87154]",
      "dest": "uint8: uint8 [43496,43501]"
    },
    {
      "src": "): ) [86330,86331]",
      "dest": "): ) [26256,26257]"
    },
    {
      "src": "visibility [61354,61362]",
      "dest": "visibility [34451,34459]"
    },
    {
      "src": "binary_expression [20731,20737]",
      "dest": "binary_expression [14336,14342]"
    },
    {
      "src": "identifier: owner [27007,27012]",
      "dest": "identifier: owner [5333,5338]"
    },
    {
      "src": "primitive_type [19981,19988]",
      "dest": "primitive_type [13620,13627]"
    },
    {
      "src": "mapping: mapping [21691,21698]",
      "dest": "mapping: mapping [1411,1418]"
    },
    {
      "src": "primitive_type [9426,9433]",
      "dest": "primitive_type [24487,24494]"
    },
    {
      "src": "identifier: owner [4132,4137]",
      "dest": "identifier: owner [6431,6436]"
    },
    {
      "src": "{: { [38237,38238]",
      "dest": "{: { [32244,32245]"
    },
    {
      "src": "call_expression [16299,16345]",
      "dest": "call_expression [10041,10087]"
    },
    {
      "src": "identifier: amount [62560,62566]",
      "dest": "identifier: amount [39736,39742]"
    },
    {
      "src": "pure: pure [46176,46180]",
      "dest": "pure: pure [42835,42839]"
    },
    {
      "src": "identifier: amount [67601,67607]",
      "dest": "identifier: amount [25491,25497]"
    },
    {
      "src": "(: ( [3465,3466]",
      "dest": "(: ( [5764,5765]"
    },
    {
      "src": "parameter [4179,4186]",
      "dest": "parameter [6478,6485]"
    },
    {
      "src": "emit: emit [26096,26100]",
      "dest": "emit: emit [4391,4395]"
    },
    {
      "src": "identifier: c [17959,17960]",
      "dest": "identifier: c [11683,11684]"
    },
    {
      "src": "primitive_type [5340,5344]",
      "dest": "primitive_type [7639,7643]"
    },
    {
      "src": "mapping: mapping [23392,23399]",
      "dest": "mapping: mapping [1477,1484]"
    },
    {
      "src": "primitive_type [37798,37805]",
      "dest": "primitive_type [28711,28718]"
    },
    {
      "src": "address: address [21812,21819]",
      "dest": "address: address [42802,42809]"
    },
    {
      "src": "function_body [38370,38548]",
      "dest": "function_body [37197,37456]"
    },
    {
      "src": ",: , [68688,68689]",
      "dest": ",: , [16983,16984]"
    },
    {
      "src": "emit: emit [39159,39163]",
      "dest": "emit: emit [34057,34061]"
    },
    {
      "src": "parameter [19252,19259]",
      "dest": "parameter [12950,12957]"
    },
    {
      "src": ".: . [53633,53634]",
      "dest": ".: . [29424,29425]"
    },
    {
      "src": "identifier: a [16738,16739]",
      "dest": "identifier: a [10488,10489]"
    },
    {
      "src": "type_name [28362,28366]",
      "dest": "type_name [1985,1989]"
    },
    {
      "src": "call_argument [16744,16776]",
      "dest": "call_argument [10494,10526]"
    },
    {
      "src": "primitive_type [20652,20658]",
      "dest": "primitive_type [14257,14263]"
    },
    {
      "src": "comment: /**      * @dev Returns the amount of tokens owned by `account`.      */ [3367,3441]",
      "dest": "comment: /**      * @dev Returns the amount of tokens owned by `account`.      */ [5666,5740]"
    },
    {
      "src": "binary_expression [47286,47303]",
      "dest": "binary_expression [39873,39911]"
    },
    {
      "src": "is: is [38213,38215]",
      "dest": "is: is [32226,32228]"
    },
    {
      "src": "identifier: amount [4899,4905]",
      "dest": "identifier: amount [7198,7204]"
    },
    {
      "src": "identifier: burner [37165,37171]",
      "dest": "identifier: burner [32470,32476]"
    },
    {
      "src": "identifier: a [17586,17587]",
      "dest": "identifier: a [11310,11311]"
    },
    {
      "src": "function: function [87293,87301]",
      "dest": "function: function [43649,43657]"
    },
    {
      "src": "indexed: indexed [37157,37164]",
      "dest": "indexed: indexed [32462,32469]"
    },
    {
      "src": "parameter [86495,86499]",
      "dest": "parameter [26883,26887]"
    },
    {
      "src": "visibility [47106,47114]",
      "dest": "visibility [39750,39758]"
    },
    {
      "src": "call_expression [54242,54303]",
      "dest": "call_expression [34574,34651]"
    },
    {
      "src": "primitive_type [27376,27383]",
      "dest": "primitive_type [31469,31476]"
    },
    {
      "src": "address: address [7955,7962]",
      "dest": "address: address [27584,27591]"
    },
    {
      "src": "primitive_type [19190,19197]",
      "dest": "primitive_type [12888,12895]"
    },
    {
      "src": "call_argument [27952,27957]",
      "dest": "call_argument [39987,39992]"
    },
    {
      "src": "primitive_type [20703,20710]",
      "dest": "primitive_type [14308,14315]"
    },
    {
      "src": "call_argument [47305,47329]",
      "dest": "call_argument [39913,39958]"
    },
    {
      "src": ",: , [51770,51771]",
      "dest": ",: , [28474,28475]"
    },
    {
      "src": "(: ( [4123,4124]",
      "dest": "(: ( [6422,6423]"
    },
    {
      "src": "external: external [27333,27341]",
      "dest": "external: external [31426,31434]"
    },
    {
      "src": "primitive_type [19252,19259]",
      "dest": "primitive_type [12950,12957]"
    },
    {
      "src": "primitive_type [5775,5782]",
      "dest": "primitive_type [8074,8081]"
    },
    {
      "src": "return: return [20763,20769]",
      "dest": "return: return [14368,14374]"
    },
    {
      "src": "uint256: uint256 [17623,17630]",
      "dest": "uint256: uint256 [11347,11354]"
    },
    {
      "src": "): ) [86499,86500]",
      "dest": "): ) [26887,26888]"
    },
    {
      "src": "modifier: modifier [26239,26247]",
      "dest": "modifier: modifier [4536,4544]"
    },
    {
      "src": "type_cast_expression [50531,50543]",
      "dest": "type_cast_expression [41031,41047]"
    },
    {
      "src": "identifier: reclaimEther [27299,27311]",
      "dest": "identifier: reclaimEther [31392,31404]"
    },
    {
      "src": "identifier: c [18027,18028]",
      "dest": "identifier: c [11751,11752]"
    },
    {
      "src": "identifier: _value [37446,37452]",
      "dest": "identifier: amount [28409,28415]"
    },
    {
      "src": "primitive_type [4124,4131]",
      "dest": "primitive_type [6423,6430]"
    },
    {
      "src": "): ) [19366,19367]",
      "dest": "): ) [12997,12998]"
    },
    {
      "src": "\": \" [38469,38470]",
      "dest": "\": \" [37330,37331]"
    },
    {
      "src": "string [48100,48122]",
      "dest": "string [37867,37932]"
    },
    {
      "src": ",: , [67856,67857]",
      "dest": ",: , [28060,28061]"
    },
    {
      "src": "uint256: uint256 [27611,27618]",
      "dest": "uint256: uint256 [31799,31806]"
    },
    {
      "src": "primitive_type [25819,25826]",
      "dest": "primitive_type [4126,4133]"
    },
    {
      "src": "returns: returns [4170,4177]",
      "dest": "returns: returns [6469,6476]"
    },
    {
      "src": "string_literal [68690,68724]",
      "dest": "string_literal [16985,17045]"
    },
    {
      "src": "call_argument [48142,48159]",
      "dest": "call_argument [38959,38981]"
    },
    {
      "src": "pragma_directive [5901,5925]",
      "dest": "pragma_directive [9068,9091]"
    },
    {
      "src": "identifier: _admin [7963,7969]",
      "dest": "identifier: recipient [27592,27601]"
    },
    {
      "src": "identifier: WipeBlacklistedAccount [52465,52487]",
      "dest": "identifier: Blacklisted [36395,36406]"
    },
    {
      "src": "call_argument [37798,37808]",
      "dest": "call_argument [28711,28721]"
    },
    {
      "src": "binary_expression [29210,29232]",
      "dest": "binary_expression [27736,27759]"
    },
    {
      "src": "visibility [16684,16692]",
      "dest": "visibility [10434,10442]"
    },
    {
      "src": "call_argument [61683,61689]",
      "dest": "call_argument [40003,40009]"
    },
    {
      "src": "(: ( [55384,55385]",
      "dest": "(: ( [30038,30039]"
    },
    {
      "src": "(: ( [55756,55757]",
      "dest": "(: ( [29162,29163]"
    },
    {
      "src": "internal: internal [18539,18547]",
      "dest": "internal: internal [12271,12279]"
    },
    {
      "src": "expression_statement [27038,27064]",
      "dest": "expression_statement [5364,5390]"
    },
    {
      "src": "return_statement [17298,17307]",
      "dest": "return_statement [11014,11023]"
    },
    {
      "src": "call_argument [17959,17969]",
      "dest": "call_argument [11683,11693]"
    },
    {
      "src": "): ) [27657,27658]",
      "dest": "): ) [31845,31846]"
    },
    {
      "src": "type_name [3815,3819]",
      "dest": "type_name [6114,6118]"
    },
    {
      "src": "comment: /**     * @dev sets the original `owner` of the contract to the sender     * at construction. Must then be reinitialized     */ [25899,26029]",
      "dest": "comment: /**      * @dev emitted when ownership is transferred      * @param previousOwner previous owner of this contract      * @param newOwner new owner of this contract      */ [3918,4093]"
    },
    {
      "src": "address: address [14055,14062]",
      "dest": "address: address [27665,27672]"
    },
    {
      "src": "inheritance_specifier [86903,86924]",
      "dest": "inheritance_specifier [43246,43277]"
    },
    {
      "src": "binary_expression [55244,55262]",
      "dest": "binary_expression [42879,42903]"
    },
    {
      "src": "primitive_type [85952,85959]",
      "dest": "primitive_type [39702,39709]"
    },
    {
      "src": "type_name [21731,21738]",
      "dest": "type_name [1449,1456]"
    },
    {
      "src": "identifier: amount [61765,61771]",
      "dest": "identifier: amount [40392,40398]"
    },
    {
      "src": "): ) [10180,10181]",
      "dest": "): ) [24744,24745]"
    },
    {
      "src": "identifier: errorMessage [17244,17256]",
      "dest": "identifier: errorMessage [10960,10972]"
    },
    {
      "src": "internal: internal [62583,62591]",
      "dest": "internal: internal [40937,40945]"
    },
    {
      "src": "function: function [10954,10962]",
      "dest": "function: function [23665,23673]"
    },
    {
      "src": "true [34228,34232]",
      "dest": "true [24853,24857]"
    },
    {
      "src": "type_cast_expression [37798,37808]",
      "dest": "type_cast_expression [28711,28721]"
    },
    {
      "src": "identifier: symbol [87302,87308]",
      "dest": "identifier: symbol [43658,43664]"
    },
    {
      "src": "identifier: amount [62941,62947]",
      "dest": "identifier: amount [33207,33213]"
    },
    {
      "src": "function: function [3447,3455]",
      "dest": "function: function [5746,5754]"
    },
    {
      "src": "(: ( [26912,26913]",
      "dest": "(: ( [5238,5239]"
    },
    {
      "src": "call_argument [54363,54376]",
      "dest": "call_argument [34515,34562]"
    },
    {
      "src": "\": \" [67176,67177]",
      "dest": "\": \" [42969,42970]"
    },
    {
      "src": "identifier: account [59419,59426]",
      "dest": "identifier: account [28723,28730]"
    },
    {
      "src": "variable_declaration [19378,19387]",
      "dest": "variable_declaration [13009,13018]"
    },
    {
      "src": "uint256: uint256 [11040,11047]",
      "dest": "uint256: uint256 [23718,23725]"
    },
    {
      "src": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [26802,26883]",
      "dest": "comment: /**      * @dev Allows the current owner to set the pendingOwner address.      * @param newOwner The address to transfer ownership to.      */ [4863,5008]"
    },
    {
      "src": "): ) [52528,52529]",
      "dest": "): ) [36450,36451]"
    },
    {
      "src": ",: , [20061,20062]",
      "dest": ",: , [13700,13701]"
    },
    {
      "src": "): ) [86221,86222]",
      "dest": "): ) [26131,26132]"
    },
    {
      "src": "function: function [37401,37409]",
      "dest": "function: function [28369,28377]"
    },
    {
      "src": "source_file [0,87476]",
      "dest": "source_file [0,43747]"
    },
    {
      "src": "visibility [10689,10695]",
      "dest": "visibility [23864,23870]"
    },
    {
      "src": "identifier: SafeMath [15946,15954]",
      "dest": "identifier: SafeMath [9680,9688]"
    },
    {
      "src": "{: { [20035,20036]",
      "dest": "{: { [13674,13675]"
    },
    {
      "src": "uint256: uint256 [23582,23589]",
      "dest": "uint256: uint256 [1645,1652]"
    },
    {
      "src": "address: address [10148,10155]",
      "dest": "address: address [24713,24720]"
    },
    {
      "src": "call_argument [27690,27697]",
      "dest": "call_argument [31878,31885]"
    },
    {
      "src": "public: public [52781,52787]",
      "dest": "public: public [2036,2042]"
    },
    {
      "src": "=: = [37268,37269]",
      "dest": "=: = [36236,36237]"
    },
    {
      "src": "): ) [14065,14066]",
      "dest": "): ) [27716,27717]"
    },
    {
      "src": "identifier: c [17276,17277]",
      "dest": "identifier: c [10992,10993]"
    },
    {
      "src": "parameter [8219,8231]",
      "dest": "parameter [25377,25394]"
    },
    {
      "src": "call_argument [61838,61844]",
      "dest": "call_argument [34722,34728]"
    },
    {
      "src": "private: private [22880,22887]",
      "dest": "private: private [958,965]"
    },
    {
      "src": "primitive_type [19201,19207]",
      "dest": "primitive_type [12899,12905]"
    },
    {
      "src": "emit: emit [61808,61812]",
      "dest": "emit: emit [34703,34707]"
    },
    {
      "src": "type_name [16271,16278]",
      "dest": "type_name [10013,10020]"
    },
    {
      "src": "public: public [10689,10695]",
      "dest": "public: public [23864,23870]"
    },
    {
      "src": "uint256: uint256 [66481,66488]",
      "dest": "uint256: uint256 [24730,24737]"
    },
    {
      "src": "memory: memory [87242,87248]",
      "dest": "memory: memory [43598,43604]"
    },
    {
      "src": "\": \" [38492,38493]",
      "dest": "\": \" [37376,37377]"
    },
    {
      "src": "identifier: SafeMath [32215,32223]",
      "dest": "identifier: SafeMath [22514,22522]"
    },
    {
      "src": "parameter [62142,62156]",
      "dest": "parameter [40243,40257]"
    },
    {
      "src": "(: ( [9425,9426]",
      "dest": "(: ( [24486,24487]"
    },
    {
      "src": "(: ( [87211,87212]",
      "dest": "(: ( [43558,43559]"
    },
    {
      "src": "event: event [38246,38251]",
      "dest": "event: event [32725,32730]"
    },
    {
      "src": "call_argument [59186,59193]",
      "dest": "call_argument [37829,37836]"
    },
    {
      "src": "visibility [37454,37462]",
      "dest": "visibility [28417,28425]"
    },
    {
      "src": "{: { [54030,54031]",
      "dest": "{: { [34477,34478]"
    },
    {
      "src": "address: address [4139,4146]",
      "dest": "address: address [6438,6445]"
    },
    {
      "src": "visibility [16228,16236]",
      "dest": "visibility [9970,9978]"
    },
    {
      "src": "public: public [14007,14013]",
      "dest": "public: public [23536,23542]"
    },
    {
      "src": "type_name [3466,3473]",
      "dest": "type_name [5765,5772]"
    },
    {
      "src": "{: { [87066,87067]",
      "dest": "{: { [43413,43414]"
    },
    {
      "src": "visibility [35454,35462]",
      "dest": "visibility [19380,19388]"
    },
    {
      "src": "): ) [16714,16715]",
      "dest": "): ) [10464,10465]"
    },
    {
      "src": "\": \" [81754,81755]",
      "dest": "\": \" [16955,16956]"
    },
    {
      "src": "identifier: Mint [37200,37204]",
      "dest": "identifier: Mint [36641,36645]"
    },
    {
      "src": "(: ( [37790,37791]",
      "dest": "(: ( [28710,28711]"
    },
    {
      "src": "): ) [18006,18007]",
      "dest": "): ) [11730,11731]"
    },
    {
      "src": "identifier: div [18513,18516]",
      "dest": "identifier: div [12245,12248]"
    },
    {
      "src": "function_body [16260,16374]",
      "dest": "function_body [10002,10116]"
    },
    {
      "src": "call_argument [60425,60432]",
      "dest": "call_argument [37320,37327]"
    },
    {
      "src": "function_body [62182,62274]",
      "dest": "function_body [40277,40407]"
    },
    {
      "src": ",: , [34184,34185]",
      "dest": ",: , [24285,24286]"
    },
    {
      "src": "call_argument [27384,27388]",
      "dest": "call_argument [31477,31481]"
    },
    {
      "src": "address: address [5990,5997]",
      "dest": "address: address [17837,17844]"
    },
    {
      "src": "call_argument [86538,86545]",
      "dest": "call_argument [26923,26930]"
    },
    {
      "src": "true: true [35299,35303]",
      "dest": "true: true [24323,24327]"
    },
    {
      "src": "state_mutability [19238,19242]",
      "dest": "state_mutability [12936,12940]"
    },
    {
      "src": "returns: returns [7985,7992]",
      "dest": "returns: returns [25436,25443]"
    },
    {
      "src": "type_name [86403,86410]",
      "dest": "type_name [26817,26824]"
    },
    {
      "src": "(: ( [52028,52029]",
      "dest": "(: ( [29272,29273]"
    },
    {
      "src": "identifier: require [47217,47224]",
      "dest": "identifier: require [39032,39039]"
    },
    {
      "src": "primitive_type [156,163]",
      "dest": "primitive_type [18855,18862]"
    },
    {
      "src": "string_literal [54363,54376]",
      "dest": "string_literal [34515,34562]"
    },
    {
      "src": "\": \" [16315,16316]",
      "dest": "\": \" [10057,10058]"
    },
    {
      "src": "): ) [87345,87346]",
      "dest": "): ) [43710,43711]"
    },
    {
      "src": "call_argument [74515,74544]",
      "dest": "call_argument [17947,17979]"
    },
    {
      "src": "call_argument [67850,67856]",
      "dest": "call_argument [28054,28060]"
    },
    {
      "src": "identifier: c [17931,17932]",
      "dest": "identifier: c [11655,11656]"
    },
    {
      "src": "public: public [22709,22715]",
      "dest": "public: public [799,805]"
    },
    {
      "src": "pragma: pragma [5901,5907]",
      "dest": "pragma: pragma [9068,9074]"
    },
    {
      "src": "primitive_type [142,149]",
      "dest": "primitive_type [30966,30973]"
    },
    {
      "src": "external: external [3483,3491]",
      "dest": "external: external [5782,5790]"
    },
    {
      "src": "visibility [4156,4164]",
      "dest": "visibility [6455,6463]"
    },
    {
      "src": "identifier: OwnershipTransferred [26955,26975]",
      "dest": "identifier: OwnershipTransferred [5281,5301]"
    },
    {
      "src": "identifier: account [52504,52511]",
      "dest": "identifier: account [36423,36430]"
    },
    {
      "src": "type_name [25859,25866]",
      "dest": "type_name [4157,4164]"
    },
    {
      "src": "type_name [10655,10662]",
      "dest": "type_name [23847,23854]"
    },
    {
      "src": "call_argument [57842,57843]",
      "dest": "call_argument [29182,29183]"
    },
    {
      "src": "type_name [23097,23103]",
      "dest": "type_name [1178,1184]"
    },
    {
      "src": "modifier_invocation [21263,21272]",
      "dest": "modifier_invocation [37792,37801]"
    },
    {
      "src": "expression_statement [54940,55004]",
      "dest": "expression_statement [27872,27964]"
    },
    {
      "src": "(: ( [11039,11040]",
      "dest": "(: ( [23717,23718]"
    },
    {
      "src": "identifier: amount [61307,61313]",
      "dest": "identifier: amount [34443,34449]"
    },
    {
      "src": "string [54989,55002]",
      "dest": "string [27922,27962]"
    },
    {
      "src": "identifier: account [60803,60810]",
      "dest": "identifier: account [37395,37402]"
    },
    {
      "src": "event: event [5523,5528]",
      "dest": "event: event [7822,7827]"
    },
    {
      "src": "identifier: sender [69099,69105]",
      "dest": "identifier: sender [39346,39352]"
    },
    {
      "src": "boolean_literal [86593,86597]",
      "dest": "boolean_literal [27047,27051]"
    },
    {
      "src": "uint256: uint256 [22967,22974]",
      "dest": "uint256: uint256 [1045,1052]"
    },
    {
      "src": "type_cast_expression [48627,48639]",
      "dest": "type_cast_expression [40984,41000]"
    },
    {
      "src": "}: } [16373,16374]",
      "dest": "}: } [10115,10116]"
    },
    {
      "src": "primitive_type [54573,54577]",
      "dest": "primitive_type [2030,2034]"
    },
    {
      "src": "uint256: uint256 [16271,16278]",
      "dest": "uint256: uint256 [10013,10020]"
    },
    {
      "src": "function_body [33199,33285]",
      "dest": "function_body [33224,33268]"
    },
    {
      "src": "pragma: pragma [246,252]",
      "dest": "pragma: pragma [3621,3627]"
    },
    {
      "src": "function: function [4857,4865]",
      "dest": "function: function [7156,7164]"
    },
    {
      "src": "address: address [22226,22233]",
      "dest": "address: address [19627,19634]"
    },
    {
      "src": "identifier: _approveAllArgs [33210,33225]",
      "dest": "identifier: _burn [33235,33240]"
    },
    {
      "src": "(: ( [10147,10148]",
      "dest": "(: ( [24712,24713]"
    },
    {
      "src": "state_variable_declaration [64455,64532]",
      "dest": "state_variable_declaration [852,880]"
    },
    {
      "src": "identifier: burnMin [39109,39116]",
      "dest": "identifier: burnMin [34007,34014]"
    },
    {
      "src": "string_literal [16315,16344]",
      "dest": "string_literal [10057,10086]"
    },
    {
      "src": "(: ( [37148,37149]",
      "dest": "(: ( [32453,32454]"
    },
    {
      "src": "primitive_type [21029,21036]",
      "dest": "primitive_type [1386,1393]"
    },
    {
      "src": "parameter [7994,7998]",
      "dest": "parameter [25445,25449]"
    },
    {
      "src": "visibility [68344,68352]",
      "dest": "visibility [38914,38922]"
    },
    {
      "src": "state_variable_declaration [22875,22914]",
      "dest": "state_variable_declaration [953,992]"
    },
    {
      "src": "bool: bool [54573,54577]",
      "dest": "bool: bool [2030,2034]"
    },
    {
      "src": "{: { [37463,37464]",
      "dest": "{: { [28434,28435]"
    },
    {
      "src": "call_argument [51753,51770]",
      "dest": "call_argument [28453,28474]"
    },
    {
      "src": "internal: internal [35454,35462]",
      "dest": "internal: internal [19380,19388]"
    },
    {
      "src": "): ) [38430,38431]",
      "dest": "): ) [37279,37280]"
    },
    {
      "src": "emit: emit [37777,37781]",
      "dest": "emit: emit [28697,28701]"
    },
    {
      "src": "type_name [23563,23590]",
      "dest": "type_name [1626,1653]"
    },
    {
      "src": "(: ( [10202,10203]",
      "dest": "(: ( [24778,24779]"
    },
    {
      "src": ",: , [16742,16743]",
      "dest": ",: , [10492,10493]"
    },
    {
      "src": "expression_statement [55748,55812]",
      "dest": "expression_statement [29155,29223]"
    },
    {
      "src": "primitive_type [37173,37180]",
      "dest": "primitive_type [32478,32485]"
    },
    {
      "src": "primitive_type [83026,83030]",
      "dest": "primitive_type [16904,16908]"
    },
    {
      "src": "identifier: b [17284,17285]",
      "dest": "identifier: b [11000,11001]"
    },
    {
      "src": "emit: emit [67826,67830]",
      "dest": "emit: emit [28040,28044]"
    },
    {
      "src": "pragma_directive [14225,14248]",
      "dest": "pragma_directive [31035,31058]"
    },
    {
      "src": ",: , [27566,27567]",
      "dest": ",: , [31754,31755]"
    },
    {
      "src": "internal: internal [28674,28682]",
      "dest": "internal: internal [8736,8744]"
    },
    {
      "src": "string_literal [54915,54928]",
      "dest": "string_literal [27761,27798]"
    },
    {
      "src": "identifier: amount [59320,59326]",
      "dest": "identifier: amount [42552,42558]"
    },
    {
      "src": "}: } [17910,17911]",
      "dest": "}: } [11634,11635]"
    },
    {
      "src": "parameter [3781,3795]",
      "dest": "parameter [6080,6094]"
    },
    {
      "src": "function_body [10719,10779]",
      "dest": "function_body [23903,23947]"
    },
    {
      "src": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      * - Multiplication cannot overflow.      */ [17322,17559]",
      "dest": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */ [11038,11283]"
    },
    {
      "src": ",: , [74513,74514]",
      "dest": ",: , [17939,17940]"
    },
    {
      "src": "(: ( [17134,17135]",
      "dest": "(: ( [10850,10851]"
    },
    {
      "src": "\": \" [54927,54928]",
      "dest": "\": \" [27797,27798]"
    },
    {
      "src": "call_argument [81735,81755]",
      "dest": "call_argument [16954,16956]"
    },
    {
      "src": "contract_body [38237,39200]",
      "dest": "contract_body [32244,34740]"
    },
    {
      "src": "is: is [86900,86902]",
      "dest": "is: is [43243,43245]"
    },
    {
      "src": "identifier: a [17143,17144]",
      "dest": "identifier: a [10859,10860]"
    },
    {
      "src": "type_name [21225,21232]",
      "dest": "type_name [18240,18247]"
    },
    {
      "src": "private: private [23176,23183]",
      "dest": "private: private [1260,1267]"
    },
    {
      "src": "call_expression [54940,55003]",
      "dest": "call_expression [27892,27963]"
    },
    {
      "src": "return: return [86342,86348]",
      "dest": "return: return [26268,26274]"
    },
    {
      "src": "state_variable_declaration [22701,22729]",
      "dest": "state_variable_declaration [791,819]"
    },
    {
      "src": "pure: pure [18548,18552]",
      "dest": "pure: pure [12280,12284]"
    },
    {
      "src": "constructor_definition [26035,26148]",
      "dest": "constructor_definition [4330,4443]"
    },
    {
      "src": "(: ( [34127,34128]",
      "dest": "(: ( [24245,24246]"
    },
    {
      "src": "identifier: b [20060,20061]",
      "dest": "identifier: b [13699,13700]"
    },
    {
      "src": "address: address [27645,27652]",
      "dest": "address: address [31833,31840]"
    },
    {
      "src": "primitive_type [28362,28366]",
      "dest": "primitive_type [1985,1989]"
    },
    {
      "src": "): ) [34092,34093]",
      "dest": "): ) [24211,24212]"
    },
    {
      "src": "address: address [86403,86410]",
      "dest": "address: address [26817,26824]"
    },
    {
      "src": "type_name [7955,7962]",
      "dest": "type_name [27584,27591]"
    },
    {
      "src": "comment: // benefit is lost if 'b' is also tested. [17732,17773]",
      "dest": "comment: // benefit is lost if 'b' is also tested. [11456,11497]"
    },
    {
      "src": "parameter [66481,66495]",
      "dest": "parameter [24730,24744]"
    },
    {
      "src": "identifier: allowanceOf [21748,21759]",
      "dest": "identifier: _allowances [1459,1470]"
    },
    {
      "src": "address: address [27312,27319]",
      "dest": "address: address [31405,31412]"
    },
    {
      "src": "number_literal: 1000 [23883,23887]",
      "dest": "number_literal: 1000 [1953,1957]"
    },
    {
      "src": "}: } [20785,20786]",
      "dest": "}: } [14390,14391]"
    },
    {
      "src": "call_argument [67377,67427]",
      "dest": "call_argument [19431,19461]"
    },
    {
      "src": "primitive_type [26122,26129]",
      "dest": "primitive_type [4417,4424]"
    },
    {
      "src": "type_name [19378,19385]",
      "dest": "type_name [13009,13016]"
    },
    {
      "src": "function_definition [85547,85691]",
      "dest": "function_definition [24398,24549]"
    },
    {
      "src": "{: { [14657,14658]",
      "dest": "{: { [4767,4768]"
    },
    {
      "src": "identifier: finalTo [81857,81864]",
      "dest": "identifier: returndata [19911,19921]"
    },
    {
      "src": "{: { [16716,16717]",
      "dest": "{: { [10466,10467]"
    },
    {
      "src": "solidity_version: 0.5.0 [15351,15356]",
      "dest": "solidity_version: 0.6.2 [14412,14417]"
    },
    {
      "src": "call_argument [20731,20737]",
      "dest": "call_argument [14336,14342]"
    },
    {
      "src": "address: address [4124,4131]",
      "dest": "address: address [6423,6430]"
    },
    {
      "src": "call_argument [73619,73662]",
      "dest": "call_argument [16780,16811]"
    },
    {
      "src": "primitive_type [5990,5997]",
      "dest": "primitive_type [17837,17844]"
    },
    {
      "src": "primitive_type [37438,37445]",
      "dest": "primitive_type [28401,28408]"
    },
    {
      "src": ",: , [26981,26982]",
      "dest": ",: , [5307,5308]"
    },
    {
      "src": "): ) [54121,54122]",
      "dest": "): ) [37836,37837]"
    },
    {
      "src": "return_type_definition [33184,33198]",
      "dest": "return_type_definition [15154,15168]"
    },
    {
      "src": "primitive_type [75676,75683]",
      "dest": "primitive_type [16747,16754]"
    },
    {
      "src": "parameter [7955,7969]",
      "dest": "parameter [27584,27601]"
    },
    {
      "src": ",: , [17587,17588]",
      "dest": ",: , [11311,11312]"
    },
    {
      "src": ",: , [85587,85588]",
      "dest": ",: , [24430,24431]"
    },
    {
      "src": "\": \" [87276,87277]",
      "dest": "\": \" [43632,43633]"
    },
    {
      "src": "type_name [23412,23440]",
      "dest": "type_name [1496,1523]"
    },
    {
      "src": "\": \" [68506,68507]",
      "dest": "\": \" [19808,19809]"
    },
    {
      "src": "call_argument [65558,65563]",
      "dest": "call_argument [18956,18961]"
    },
    {
      "src": "parameter [3350,3357]",
      "dest": "parameter [5649,5656]"
    },
    {
      "src": "type_name [3762,3769]",
      "dest": "type_name [6061,6068]"
    },
    {
      "src": "call_argument [26300,26312]",
      "dest": "call_argument [4597,4609]"
    },
    {
      "src": "type_name [17135,17142]",
      "dest": "type_name [10851,10858]"
    },
    {
      "src": "identifier: owner [26293,26298]",
      "dest": "identifier: owner [4590,4595]"
    },
    {
      "src": "member_expression [37707,37723]",
      "dest": "member_expression [28600,28616]"
    },
    {
      "src": "identifier: require [48134,48141]",
      "dest": "identifier: require [38951,38958]"
    },
    {
      "src": "identifier: b [16681,16682]",
      "dest": "identifier: b [10431,10432]"
    },
    {
      "src": "identifier: approve [33135,33142]",
      "dest": "identifier: burn [33194,33198]"
    },
    {
      "src": "binary_expression [77264,77291]",
      "dest": "binary_expression [30118,30139]"
    },
    {
      "src": "returns: returns [5331,5338]",
      "dest": "returns: returns [7630,7637]"
    },
    {
      "src": "return_type_definition [10194,10208]",
      "dest": "return_type_definition [24770,24784]"
    },
    {
      "src": "uint256: uint256 [20641,20648]",
      "dest": "uint256: uint256 [14246,14253]"
    },
    {
      "src": "function_definition [4857,4931]",
      "dest": "function_definition [7156,7230]"
    },
    {
      "src": "(: ( [26257,26258]",
      "dest": "(: ( [4554,4555]"
    },
    {
      "src": "): ) [48638,48639]",
      "dest": "): ) [40999,41000]"
    },
    {
      "src": "visibility [52781,52787]",
      "dest": "visibility [2036,2042]"
    },
    {
      "src": "call_expression [48134,48186]",
      "dest": "call_expression [38951,39021]"
    },
    {
      "src": "=: = [23023,23024]",
      "dest": "=: = [1101,1102]"
    },
    {
      "src": "call_argument [29210,29232]",
      "dest": "call_argument [27736,27759]"
    },
    {
      "src": ",: , [20737,20738]",
      "dest": ",: , [14342,14343]"
    },
    {
      "src": "identifier: finOpSupply [23640,23651]",
      "dest": "identifier: finOpSupply_Deprecated [1714,1736]"
    },
    {
      "src": "identifier: totalSupply_ [37692,37704]",
      "dest": "identifier: _totalSupply [28585,28597]"
    },
    {
      "src": "call_argument [53593,53594]",
      "dest": "call_argument [18390,18391]"
    },
    {
      "src": "\": \" [51772,51773]",
      "dest": "\": \" [39810,39811]"
    },
    {
      "src": "\": \" [57866,57867]",
      "dest": "\": \" [4833,4834]"
    },
    {
      "src": "identifier: onlyOwner [21263,21272]",
      "dest": "identifier: onlyOwner [37792,37801]"
    },
    {
      "src": "primitive_type [3506,3513]",
      "dest": "primitive_type [5805,5812]"
    },
    {
      "src": "identifier: a [16283,16284]",
      "dest": "identifier: a [10025,10026]"
    },
    {
      "src": "return_type_definition [4170,4187]",
      "dest": "return_type_definition [6469,6486]"
    },
    {
      "src": "event: event [52459,52464]",
      "dest": "event: event [36389,36394]"
    },
    {
      "src": "bool: bool [34128,34132]",
      "dest": "bool: bool [24246,24250]"
    },
    {
      "src": "parameter [53842,53858]",
      "dest": "parameter [37762,37781]"
    },
    {
      "src": "\": \" [53507,53508]",
      "dest": "\": \" [40358,40359]"
    },
    {
      "src": "view: view [7980,7984]",
      "dest": "view: view [15149,15153]"
    },
    {
      "src": "type_cast_expression [54110,54122]",
      "dest": "type_cast_expression [37821,37837]"
    },
    {
      "src": "emit_statement [67826,67883]",
      "dest": "emit_statement [28040,28081]"
    },
    {
      "src": "call_argument [67314,67320]",
      "dest": "call_argument [28565,28571]"
    },
    {
      "src": "primitive_type [16271,16278]",
      "dest": "primitive_type [10013,10020]"
    },
    {
      "src": "call_argument [54289,54302]",
      "dest": "call_argument [34601,34650]"
    },
    {
      "src": "identifier: account [60597,60604]",
      "dest": "identifier: account [29256,29263]"
    },
    {
      "src": ",: , [26298,26299]",
      "dest": ",: , [4595,4596]"
    },
    {
      "src": "uint256: uint256 [17146,17153]",
      "dest": "uint256: uint256 [10862,10869]"
    },
    {
      "src": "event_paramater [52488,52511]",
      "dest": "event_paramater [36407,36430]"
    },
    {
      "src": "comment: /**      * @dev Emitted when `value` tokens are moved from one account (`from`) to      * another (`to`).      *      * Note that `value` may be zero.      */ [5354,5517]",
      "dest": "comment: /**      * @dev Emitted when `value` tokens are moved from one account (`from`) to      * another (`to`).      *      * Note that `value` may be zero.      */ [7653,7816]"
    },
    {
      "src": "parameter [19992,20001]",
      "dest": "parameter [13631,13640]"
    },
    {
      "src": "\": \" [67197,67198]",
      "dest": "\": \" [42991,42992]"
    },
    {
      "src": "pragma: pragma [25507,25513]",
      "dest": "pragma: pragma [43008,43014]"
    },
    {
      "src": "pure: pure [87135,87139]",
      "dest": "pure: pure [43482,43486]"
    },
    {
      "src": "emit_statement [61808,61853]",
      "dest": "emit_statement [34703,34730]"
    },
    {
      "src": "state_variable_declaration [22737,22754]",
      "dest": "state_variable_declaration [827,844]"
    },
    {
      "src": "identifier: require [16299,16306]",
      "dest": "identifier: require [10041,10048]"
    },
    {
      "src": "(: ( [53398,53399]",
      "dest": "(: ( [29093,29094]"
    },
    {
      "src": "identifier: setBurnBounds [38992,39005]",
      "dest": "identifier: setBurnBounds [33865,33878]"
    },
    {
      "src": "string_literal [48161,48185]",
      "dest": "string_literal [38983,39020]"
    },
    {
      "src": ",: , [9701,9702]",
      "dest": ",: , [29347,29348]"
    },
    {
      "src": "function_definition [87018,87100]",
      "dest": "function_definition [43356,43447]"
    },
    {
      "src": "view: view [3492,3496]",
      "dest": "view: view [5791,5795]"
    },
    {
      "src": "): ) [14702,14703]",
      "dest": "): ) [4834,4835]"
    },
    {
      "src": "type_name [3350,3357]",
      "dest": "type_name [5649,5656]"
    },
    {
      "src": "call_argument [59722,59729]",
      "dest": "call_argument [37432,37439]"
    },
    {
      "src": "string_literal [87268,87277]",
      "dest": "string_literal [43624,43633]"
    },
    {
      "src": "identifier: owner [27952,27957]",
      "dest": "identifier: owner [39987,39992]"
    },
    {
      "src": "identifier: amount [67868,67874]",
      "dest": "identifier: amount [28073,28079]"
    },
    {
      "src": ",: , [81864,81865]",
      "dest": ",: , [19896,19897]"
    },
    {
      "src": "solidity_pragma_token [3031,3046]",
      "dest": "solidity_pragma_token [5411,5426]"
    },
    {
      "src": "state_variable_declaration [21691,21760]",
      "dest": "state_variable_declaration [1411,1471]"
    },
    {
      "src": ".: . [27675,27676]",
      "dest": ".: . [31863,31864]"
    },
    {
      "src": "call_argument [59320,59326]",
      "dest": "call_argument [42552,42558]"
    },
    {
      "src": ".: . [26078,26079]",
      "dest": ".: . [4373,4374]"
    },
    {
      "src": "primitive_type [62552,62559]",
      "dest": "primitive_type [39728,39735]"
    },
    {
      "src": "): ) [23589,23590]",
      "dest": "): ) [1652,1653]"
    },
    {
      "src": "identifier: a [20638,20639]",
      "dest": "identifier: a [14243,14244]"
    },
    {
      "src": "return: return [87077,87083]",
      "dest": "return: return [43424,43430]"
    },
    {
      "src": "event_definition [5760,5838]",
      "dest": "event_definition [8059,8137]"
    },
    {
      "src": "parameter [19190,19199]",
      "dest": "parameter [12888,12897]"
    },
    {
      "src": "parameter [62535,62550]",
      "dest": "parameter [40920,40935]"
    },
    {
      "src": "identifier: INFINITE_ALLOWANCE [32381,32399]",
      "dest": "identifier: gasRefundPool_Deprecated [1221,1245]"
    },
    {
      "src": "function_definition [19166,19511]",
      "dest": "function_definition [12864,13142]"
    },
    {
      "src": "primitive_type [58403,58410]",
      "dest": "primitive_type [37745,37752]"
    },
    {
      "src": "): ) [17183,17184]",
      "dest": "): ) [10899,10900]"
    },
    {
      "src": "identifier: RewardAllocation [23730,23746]",
      "dest": "identifier: RewardAllocation [1752,1768]"
    },
    {
      "src": "identifier: a [17963,17964]",
      "dest": "identifier: a [11687,11688]"
    },
    {
      "src": "identifier: name [87207,87211]",
      "dest": "identifier: name [43554,43558]"
    },
    {
      "src": "return_type_definition [35185,35199]",
      "dest": "return_type_definition [40951,40965]"
    },
    {
      "src": "^:  ^ [5916,5918]",
      "dest": "^:  ^ [9083,9085]"
    },
    {
      "src": "primitive_type [4139,4146]",
      "dest": "primitive_type [6438,6445]"
    },
    {
      "src": "modifier_invocation [39043,39052]",
      "dest": "modifier_invocation [33916,33925]"
    },
    {
      "src": "type_name [62535,62542]",
      "dest": "type_name [40920,40927]"
    },
    {
      "src": ",: , [34071,34072]",
      "dest": ",: , [24195,24196]"
    },
    {
      "src": "(: ( [53452,53453]",
      "dest": "(: ( [40295,40296]"
    },
    {
      "src": "number_literal: 0 [17873,17874]",
      "dest": "number_literal: 0 [11597,11598]"
    },
    {
      "src": "type_name [53399,53406]",
      "dest": "type_name [29094,29101]"
    },
    {
      "src": "address: address [22674,22681]",
      "dest": "address: address [764,771]"
    },
    {
      "src": "internal: internal [31321,31329]",
      "dest": "internal: internal [17872,17880]"
    },
    {
      "src": "call_expression [47217,47267]",
      "dest": "call_expression [39032,39108]"
    },
    {
      "src": "string_literal [51772,51799]",
      "dest": "string_literal [39810,39853]"
    },
    {
      "src": "): ) [27658,27659]",
      "dest": "): ) [31846,31847]"
    },
    {
      "src": "parameter [53399,53415]",
      "dest": "parameter [29094,29109]"
    },
    {
      "src": "primitive_type [16662,16669]",
      "dest": "primitive_type [10412,10419]"
    },
    {
      "src": "pragma: pragma [3024,3030]",
      "dest": "pragma: pragma [5404,5410]"
    },
    {
      "src": "type_name [20703,20710]",
      "dest": "type_name [14308,14315]"
    },
    {
      "src": "(: ( [83008,83009]",
      "dest": "(: ( [16903,16904]"
    },
    {
      "src": "identifier: sender [68812,68818]",
      "dest": "identifier: sender [25518,25524]"
    },
    {
      "src": "{: { [27352,27353]",
      "dest": "{: { [31445,31446]"
    },
    {
      "src": "function_body [10209,10274]",
      "dest": "function_body [24785,24865]"
    },
    {
      "src": "}: } [27968,27969]",
      "dest": "}: } [31896,31897]"
    },
    {
      "src": "\": \" [73661,73662]",
      "dest": "\": \" [16810,16811]"
    },
    {
      "src": "identifier: account [61576,61583]",
      "dest": "identifier: account [40992,40999]"
    },
    {
      "src": "parameter [39006,39018]",
      "dest": "parameter [33879,33891]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      * - Subtraction cannot overflow.      *      * _Available since v2.4.0._      */ [16793,17116]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [10543,10832]"
    },
    {
      "src": "identifier: totalSupply_ [37707,37719]",
      "dest": "identifier: _totalSupply [28600,28612]"
    },
    {
      "src": "uint256: uint256 [38266,38273]",
      "dest": "uint256: uint256 [32745,32752]"
    },
    {
      "src": "modifier_definition [26239,26333]",
      "dest": "modifier_definition [4536,4630]"
    },
    {
      "src": "parameter [58403,58418]",
      "dest": "parameter [37745,37760]"
    },
    {
      "src": "identifier: DELEGATE_FROM [84949,84962]",
      "dest": "identifier: registry_Deprecated [1121,1140]"
    },
    {
      "src": "type_name [86982,86987]",
      "dest": "type_name [43320,43325]"
    },
    {
      "src": "parameter [34128,34132]",
      "dest": "parameter [24246,24250]"
    },
    {
      "src": "string [68471,68507]",
      "dest": "string [19778,19809]"
    },
    {
      "src": "call_argument [26983,26995]",
      "dest": "call_argument [5309,5321]"
    },
    {
      "src": "call_argument [20063,20089]",
      "dest": "call_argument [13702,13728]"
    },
    {
      "src": "return: return [87261,87267]",
      "dest": "return: return [43617,43623]"
    },
    {
      "src": "): ) [67464,67465]",
      "dest": "): ) [19503,19504]"
    },
    {
      "src": "comment: // File: @trusttoken/registry/contracts/Registry.sol [5845,5897]",
      "dest": "comment: /**  * @dev Collection of functions related to the address type  */ [14422,14491]"
    },
    {
      "src": "identifier: to [65479,65481]",
      "dest": "identifier: to [30988,30990]"
    },
    {
      "src": "=: = [16281,16282]",
      "dest": "=: = [10023,10024]"
    },
    {
      "src": "public: public [23008,23014]",
      "dest": "public: public [1086,1092]"
    },
    {
      "src": "(: ( [68435,68436]",
      "dest": "(: ( [19757,19758]"
    },
    {
      "src": "string_literal [55423,55436]",
      "dest": "string_literal [30060,30098]"
    },
    {
      "src": "identifier: token [27670,27675]",
      "dest": "identifier: token [31858,31863]"
    },
    {
      "src": "identifier: balance [52521,52528]",
      "dest": "identifier: isBlacklisted [36437,36450]"
    },
    {
      "src": "): ) [87154,87155]",
      "dest": "): ) [43501,43502]"
    },
    {
      "src": "event_definition [37194,37240]",
      "dest": "event_definition [36635,36681]"
    },
    {
      "src": "state_variable_declaration [71304,71332]",
      "dest": "state_variable_declaration [886,916]"
    },
    {
      "src": "primitive_type [5560,5567]",
      "dest": "primitive_type [7859,7866]"
    },
    {
      "src": "\": \" [54301,54302]",
      "dest": "\": \" [34649,34650]"
    },
    {
      "src": "call_expression [38442,38494]",
      "dest": "call_expression [37291,37378]"
    },
    {
      "src": "identifier: owner [5791,5796]",
      "dest": "identifier: owner [8090,8095]"
    },
    {
      "src": "primitive_type [60257,60264]",
      "dest": "primitive_type [37162,37169]"
    },
    {
      "src": "call_argument [86070,86077]",
      "dest": "call_argument [39994,40001]"
    },
    {
      "src": "}: } [37824,37825]",
      "dest": "}: } [28746,28747]"
    },
    {
      "src": "function_body [37463,37825]",
      "dest": "function_body [28434,28747]"
    },
    {
      "src": "{: { [17217,17218]",
      "dest": "{: { [10933,10934]"
    },
    {
      "src": ",: , [73712,73713]",
      "dest": ",: , [18948,18949]"
    },
    {
      "src": "address: address [13989,13996]",
      "dest": "address: address [24178,24185]"
    },
    {
      "src": "identifier: require [68428,68435]",
      "dest": "identifier: require [19750,19757]"
    },
    {
      "src": "solidity_version:  0.5.13 [25522,25529]",
      "dest": "solidity_version:  0.6.10 [43023,43030]"
    },
    {
      "src": "uint256: uint256 [66007,66014]",
      "dest": "uint256: uint256 [24197,24204]"
    },
    {
      "src": "uint256: uint256 [19179,19186]",
      "dest": "uint256: uint256 [12877,12884]"
    },
    {
      "src": "call_argument [67868,67874]",
      "dest": "call_argument [28073,28079]"
    },
    {
      "src": "): ) [34132,34133]",
      "dest": "): ) [24250,24251]"
    },
    {
      "src": "identifier: account [61674,61681]",
      "dest": "identifier: account [40383,40390]"
    },
    {
      "src": "call_expression [18589,18628]",
      "dest": "call_expression [12321,12360]"
    },
    {
      "src": "constant: constant [86953,86961]",
      "dest": "constant: constant [43291,43299]"
    },
    {
      "src": "address: address [27568,27575]",
      "dest": "address: address [31756,31763]"
    },
    {
      "src": "binary_expression [67377,67427]",
      "dest": "binary_expression [19431,19461]"
    },
    {
      "src": "}: } [87475,87476]",
      "dest": "}: } [43746,43747]"
    },
    {
      "src": "identifier: allowance [4114,4123]",
      "dest": "identifier: allowance [6413,6422]"
    },
    {
      "src": "primitive_type [19992,19999]",
      "dest": "primitive_type [13631,13638]"
    },
    {
      "src": "address: address [22920,22927]",
      "dest": "address: address [998,1005]"
    },
    {
      "src": "uint256: uint256 [23853,23860]",
      "dest": "uint256: uint256 [1912,1919]"
    },
    {
      "src": "parameter [9426,9433]",
      "dest": "parameter [24487,24494]"
    },
    {
      "src": "): ) [68724,68725]",
      "dest": "): ) [17045,17046]"
    },
    {
      "src": "string_literal [18599,18627]",
      "dest": "string_literal [12331,12359]"
    },
    {
      "src": "): ) [19259,19260]",
      "dest": "): ) [12957,12958]"
    },
    {
      "src": "string_literal [17971,18006]",
      "dest": "string_literal [11695,11730]"
    },
    {
      "src": "type_name [62125,62132]",
      "dest": "type_name [40226,40233]"
    },
    {
      "src": "type_name [8253,8260]",
      "dest": "type_name [26834,26841]"
    },
    {
      "src": "{: { [33199,33200]",
      "dest": "{: { [33224,33225]"
    },
    {
      "src": "uint256: uint256 [18517,18524]",
      "dest": "uint256: uint256 [12249,12256]"
    },
    {
      "src": "(: ( [17622,17623]",
      "dest": "(: ( [11346,11347]"
    },
    {
      "src": "type_name [17157,17163]",
      "dest": "type_name [10873,10879]"
    },
    {
      "src": "(: ( [26129,26130]",
      "dest": "(: ( [4424,4425]"
    },
    {
      "src": "\": \" [48161,48162]",
      "dest": "\": \" [38983,38984]"
    },
    {
      "src": "expression_statement [14714,14716]",
      "dest": "expression_statement [4846,4848]"
    },
    {
      "src": "parameter [22204,22224]",
      "dest": "parameter [19302,19316]"
    },
    {
      "src": "identifier: addedValue [86308,86318]",
      "dest": "identifier: addedValue [26245,26255]"
    },
    {
      "src": "solidity_version:  0.5.13 [261,268]",
      "dest": "solidity_version:  0.6.10 [3636,3643]"
    },
    {
      "src": "parameter [19201,19227]",
      "dest": "parameter [12899,12925]"
    },
    {
      "src": "(: ( [10709,10710]",
      "dest": "(: ( [23893,23894]"
    },
    {
      "src": "string [55423,55436]",
      "dest": "string [30060,30098]"
    },
    {
      "src": "): ) [11047,11048]",
      "dest": "): ) [23725,23726]"
    },
    {
      "src": "expression_statement [26763,26787]",
      "dest": "expression_statement [5087,5111]"
    },
    {
      "src": "==: == [17870,17872]",
      "dest": "==: == [11594,11596]"
    },
    {
      "src": "identifier: sender [68658,68664]",
      "dest": "identifier: sender [25472,25478]"
    },
    {
      "src": "solidity: solidity [20864,20872]",
      "dest": "solidity: solidity [31908,31916]"
    },
    {
      "src": ",: , [17144,17145]",
      "dest": ",: , [10860,10861]"
    },
    {
      "src": "uint256: uint256 [23631,23638]",
      "dest": "uint256: uint256 [1705,1712]"
    },
    {
      "src": "primitive_type [62125,62132]",
      "dest": "primitive_type [40226,40233]"
    },
    {
      "src": "type_name [23544,23591]",
      "dest": "type_name [1607,1654]"
    },
    {
      "src": ",: , [75272,75273]",
      "dest": ",: , [16701,16702]"
    },
    {
      "src": "type_name [22967,22974]",
      "dest": "type_name [1045,1052]"
    },
    {
      "src": "identifier: _who [5998,6002]",
      "dest": "identifier: target [17845,17851]"
    },
    {
      "src": "identifier: transfer [3753,3761]",
      "dest": "identifier: transfer [6052,6060]"
    },
    {
      "src": "uint256: uint256 [19981,19988]",
      "dest": "uint256: uint256 [13620,13627]"
    },
    {
      "src": "binary_expression [17935,17940]",
      "dest": "binary_expression [11659,11664]"
    },
    {
      "src": ",: , [3779,3780]",
      "dest": ",: , [6078,6079]"
    },
    {
      "src": "function_definition [17122,17314]",
      "dest": "function_definition [10838,11030]"
    },
    {
      "src": ",: , [38406,38407]",
      "dest": ",: , [37239,37240]"
    },
    {
      "src": "return_statement [20763,20776]",
      "dest": "return_statement [14368,14381]"
    },
    {
      "src": "memory: memory [19208,19214]",
      "dest": "memory: memory [12906,12912]"
    },
    {
      "src": "(: ( [73681,73682]",
      "dest": "(: ( [18941,18942]"
    },
    {
      "src": "type_cast_expression [51760,51770]",
      "dest": "type_cast_expression [28464,28474]"
    },
    {
      "src": "function: function [16193,16201]",
      "dest": "function: function [9935,9943]"
    },
    {
      "src": ",: , [20650,20651]",
      "dest": ",: , [14255,14256]"
    },
    {
      "src": "{: { [87347,87348]",
      "dest": "{: { [43712,43713]"
    },
    {
      "src": "identifier: mod [20626,20629]",
      "dest": "identifier: mod [14231,14234]"
    },
    {
      "src": "binary_expression [19347,19352]",
      "dest": "binary_expression [12978,12983]"
    },
    {
      "src": "type_name [62142,62149]",
      "dest": "type_name [40243,40250]"
    },
    {
      "src": "address: address [52488,52495]",
      "dest": "address: address [36407,36414]"
    },
    {
      "src": "primitive_type [5580,5587]",
      "dest": "primitive_type [7879,7886]"
    },
    {
      "src": "(: ( [48141,48142]",
      "dest": "(: ( [38958,38959]"
    },
    {
      "src": "internal: internal [16228,16236]",
      "dest": "internal: internal [9970,9978]"
    },
    {
      "src": "address: address [21018,21025]",
      "dest": "address: address [1375,1382]"
    },
    {
      "src": "): ) [26995,26996]",
      "dest": "): ) [5321,5322]"
    },
    {
      "src": "visibility [86223,86229]",
      "dest": "visibility [26133,26139]"
    },
    {
      "src": "): ) [11017,11018]",
      "dest": "): ) [23686,23687]"
    },
    {
      "src": "external: external [9021,9029]",
      "dest": "external: external [37783,37791]"
    },
    {
      "src": "identifier: c [16279,16280]",
      "dest": "identifier: c [10021,10022]"
    },
    {
      "src": "type_name [37423,37430]",
      "dest": "type_name [28384,28391]"
    },
    {
      "src": "identifier: amount [67562,67568]",
      "dest": "identifier: amount [24828,24834]"
    },
    {
      "src": "function: function [85547,85555]",
      "dest": "function: function [24398,24406]"
    },
    {
      "src": "type_cast_expression [75676,75689]",
      "dest": "type_cast_expression [16747,16760]"
    },
    {
      "src": "\": \" [68690,68691]",
      "dest": "\": \" [16985,16986]"
    },
    {
      "src": "identifier: SetBurnBounds [39164,39177]",
      "dest": "identifier: SetBurnBounds [34062,34075]"
    },
    {
      "src": "function_body [87347,87379]",
      "dest": "function_body [43712,43744]"
    },
    {
      "src": "event_paramater [5823,5836]",
      "dest": "event_paramater [8122,8135]"
    },
    {
      "src": "pure: pure [20012,20016]",
      "dest": "pure: pure [13651,13655]"
    },
    {
      "src": "type_name [3781,3788]",
      "dest": "type_name [6080,6087]"
    },
    {
      "src": "function: function [75247,75255]",
      "dest": "function: function [16657,16665]"
    },
    {
      "src": "call_expression [53445,53509]",
      "dest": "call_expression [40288,40360]"
    },
    {
      "src": "address: address [3762,3769]",
      "dest": "address: address [6061,6068]"
    },
    {
      "src": ".: . [26282,26283]",
      "dest": ".: . [4579,4580]"
    },
    {
      "src": ",: , [26132,26133]",
      "dest": ",: , [4427,4428]"
    },
    {
      "src": "type_name [22846,22853]",
      "dest": "type_name [924,931]"
    },
    {
      "src": "call_argument [48081,48098]",
      "dest": "call_argument [37821,37865]"
    },
    {
      "src": "emit_statement [37777,37818]",
      "dest": "emit_statement [28697,28740]"
    },
    {
      "src": "parameter [5306,5320]",
      "dest": "parameter [7605,7619]"
    },
    {
      "src": "): ) [57843,57844]",
      "dest": "): ) [29183,29184]"
    },
    {
      "src": "binary_expression [50531,50570]",
      "dest": "binary_expression [41031,41052]"
    },
    {
      "src": "type_name [85574,85581]",
      "dest": "type_name [24417,24424]"
    },
    {
      "src": "assignment_expression [9650,9735]",
      "dest": "assignment_expression [29297,29386]"
    },
    {
      "src": "call_expression [54314,54377]",
      "dest": "call_expression [34488,34563]"
    },
    {
      "src": "=>: => [23409,23411]",
      "dest": "=>: => [1493,1495]"
    },
    {
      "src": "**: ** [37273,37275]",
      "dest": "**: ** [36240,36242]"
    },
    {
      "src": "address: address [27376,27383]",
      "dest": "address: address [31469,31476]"
    },
    {
      "src": "=: = [39142,39143]",
      "dest": "=: = [34040,34041]"
    },
    {
      "src": "state_mutability [10189,10193]",
      "dest": "state_mutability [8745,8749]"
    },
    {
      "src": "state_mutability [17194,17198]",
      "dest": "state_mutability [10910,10914]"
    },
    {
      "src": ",: , [86418,86419]",
      "dest": ",: , [26832,26833]"
    },
    {
      "src": "primitive_type [21018,21025]",
      "dest": "primitive_type [1375,1382]"
    },
    {
      "src": "type_name [5287,5294]",
      "dest": "type_name [7586,7593]"
    },
    {
      "src": "type_name [4139,4146]",
      "dest": "type_name [6438,6445]"
    },
    {
      "src": "parameter [87059,87064]",
      "dest": "parameter [43406,43411]"
    },
    {
      "src": "address: address [37798,37805]",
      "dest": "address: address [28711,28718]"
    },
    {
      "src": "function: function [19166,19174]",
      "dest": "function: function [12864,12872]"
    },
    {
      "src": "identifier: _to [54744,54747]",
      "dest": "identifier: depositAddress [42915,42929]"
    },
    {
      "src": "}: } [10778,10779]",
      "dest": "}: } [23946,23947]"
    },
    {
      "src": "identifier: _rewardDistribution [23827,23846]",
      "dest": "identifier: _rewardDistribution_Deprecated [1875,1905]"
    },
    {
      "src": "returns: returns [16242,16249]",
      "dest": "returns: returns [9984,9991]"
    },
    {
      "src": "expression_statement [39134,39149]",
      "dest": "expression_statement [34032,34047]"
    },
    {
      "src": "function_body [87250,87285]",
      "dest": "function_body [43606,43641]"
    },
    {
      "src": "): ) [4905,4906]",
      "dest": "): ) [7204,7205]"
    },
    {
      "src": "type_name [22226,22233]",
      "dest": "type_name [19627,19634]"
    },
    {
      "src": "array_access [9650,9678]",
      "dest": "array_access [29297,29315]"
    },
    {
      "src": "}: } [54453,54454]",
      "dest": "}: } [34736,34737]"
    },
    {
      "src": "function_definition [3304,3359]",
      "dest": "function_definition [5603,5658]"
    },
    {
      "src": "): ) [26047,26048]",
      "dest": "): ) [4342,4343]"
    },
    {
      "src": "primitive_type [86256,86260]",
      "dest": "primitive_type [26157,26161]"
    },
    {
      "src": "identifier: b [17597,17598]",
      "dest": "identifier: b [11321,11322]"
    },
    {
      "src": "variable_declaration_statement [27611,27660]",
      "dest": "variable_declaration_statement [31799,31848]"
    },
    {
      "src": "primitive_type [62535,62542]",
      "dest": "primitive_type [40920,40927]"
    },
    {
      "src": "variable_declaration_statement [16271,16289]",
      "dest": "variable_declaration_statement [10013,10031]"
    },
    {
      "src": "(: ( [16205,16206]",
      "dest": "(: ( [9947,9948]"
    },
    {
      "src": "primitive_type [87059,87064]",
      "dest": "primitive_type [43406,43411]"
    },
    {
      "src": "type_cast_expression [75564,75577]",
      "dest": "type_cast_expression [19431,19444]"
    },
    {
      "src": "binary_expression [55385,55421]",
      "dest": "binary_expression [30039,30058]"
    },
    {
      "src": "identifier: c [19502,19503]",
      "dest": "identifier: c [13133,13134]"
    },
    {
      "src": ",: , [5304,5305]",
      "dest": ",: , [7603,7604]"
    },
    {
      "src": "identifier: sub [53634,53637]",
      "dest": "identifier: sub [29425,29428]"
    },
    {
      "src": "expression_statement [62193,62267]",
      "dest": "expression_statement [40371,40400]"
    },
    {
      "src": "): ) [26312,26313]",
      "dest": "): ) [4609,4610]"
    },
    {
      "src": "parameter [16707,16714]",
      "dest": "parameter [10457,10464]"
    },
    {
      "src": "primitive_type [22204,22211]",
      "dest": "primitive_type [19302,19309]"
    },
    {
      "src": "expression_statement [33210,33256]",
      "dest": "expression_statement [33235,33261]"
    },
    {
      "src": "uint256: uint256 [20630,20637]",
      "dest": "uint256: uint256 [14235,14242]"
    },
    {
      "src": "(: ( [86537,86538]",
      "dest": "(: ( [26908,26909]"
    },
    {
      "src": "(: ( [54743,54744]",
      "dest": "(: ( [42914,42915]"
    },
    {
      "src": "returns: returns [3341,3348]",
      "dest": "returns: returns [5640,5647]"
    },
    {
      "src": "uint8: uint8 [86947,86952]",
      "dest": "uint8: uint8 [43285,43290]"
    },
    {
      "src": "{: { [17632,17633]",
      "dest": "{: { [11356,11357]"
    },
    {
      "src": "assignment_expression [26067,26085]",
      "dest": "assignment_expression [4362,4380]"
    },
    {
      "src": "parameter [86169,86184]",
      "dest": "parameter [26096,26111]"
    },
    {
      "src": "identifier: _who [10663,10667]",
      "dest": "identifier: account [23855,23862]"
    },
    {
      "src": "string: string [19201,19207]",
      "dest": "string: string [12899,12905]"
    },
    {
      "src": "identifier: amount [62259,62265]",
      "dest": "identifier: amount [28022,28028]"
    },
    {
      "src": "(: ( [27684,27685]",
      "dest": "(: ( [31872,31873]"
    },
    {
      "src": "(: ( [14654,14655]",
      "dest": "(: ( [4764,4765]"
    },
    {
      "src": "identifier: b [19394,19395]",
      "dest": "identifier: b [13025,13026]"
    },
    {
      "src": "bytes32: bytes32 [23401,23408]",
      "dest": "bytes32: bytes32 [1485,1492]"
    },
    {
      "src": "type_name [39020,39027]",
      "dest": "type_name [33893,33900]"
    },
    {
      "src": "call_argument [16738,16739]",
      "dest": "call_argument [10488,10489]"
    },
    {
      "src": "address: address [61273,61280]",
      "dest": "address: address [34418,34425]"
    },
    {
      "src": "address: address [84932,84939]",
      "dest": "address: address [1113,1120]"
    },
    {
      "src": "address: address [5538,5545]",
      "dest": "address: address [7837,7844]"
    },
    {
      "src": "}: } [17313,17314]",
      "dest": "}: } [11029,11030]"
    },
    {
      "src": "primitive_type [81866,81870]",
      "dest": "primitive_type [19884,19888]"
    },
    {
      "src": "identifier: BurnRewardToken [61813,61828]",
      "dest": "identifier: Burn [34708,34712]"
    },
    {
      "src": "primitive_type [33193,33197]",
      "dest": "primitive_type [15163,15167]"
    },
    {
      "src": "binary_expression [51753,51770]",
      "dest": "binary_expression [28453,28474]"
    },
    {
      "src": "identifier: a [19390,19391]",
      "dest": "identifier: a [13021,13022]"
    },
    {
      "src": "identifier: msg [14676,14679]",
      "dest": "identifier: msg [4786,4789]"
    },
    {
      "src": "[: [ [23823,23824]",
      "dest": "[: [ [1871,1872]"
    },
    {
      "src": "call_argument [81902,81907]",
      "dest": "call_argument [19956,19960]"
    },
    {
      "src": "public: public [87311,87317]",
      "dest": "public: public [43667,43673]"
    },
    {
      "src": "visibility [86462,86468]",
      "dest": "visibility [26859,26865]"
    },
    {
      "src": "identifier: require [38381,38388]",
      "dest": "identifier: require [37208,37215]"
    },
    {
      "src": "): ) [73742,73743]",
      "dest": "): ) [19006,19007]"
    },
    {
      "src": "call_argument [27061,27062]",
      "dest": "call_argument [5387,5388]"
    },
    {
      "src": "view: view [10696,10700]",
      "dest": "view: view [23871,23875]"
    },
    {
      "src": "address: address [75261,75268]",
      "dest": "address: address [16676,16683]"
    },
    {
      "src": "function_body [75307,75834]",
      "dest": "function_body [16728,17054]"
    },
    {
      "src": "type_name [27312,27327]",
      "dest": "type_name [31405,31420]"
    },
    {
      "src": "primitive_type [62142,62149]",
      "dest": "primitive_type [40243,40250]"
    },
    {
      "src": "pragma_directive [25507,25530]",
      "dest": "pragma_directive [43008,43031]"
    },
    {
      "src": "state_mutability [87415,87419]",
      "dest": "state_mutability [23551,23555]"
    },
    {
      "src": "(: ( [86298,86299]",
      "dest": "(: ( [26182,26183]"
    },
    {
      "src": "identifier: hasHook [81871,81878]",
      "dest": "identifier: success [19889,19896]"
    },
    {
      "src": "bool: bool [86495,86499]",
      "dest": "bool: bool [26883,26887]"
    },
    {
      "src": "identifier: _value [9695,9701]",
      "dest": "identifier: amount [29341,29347]"
    },
    {
      "src": "string_literal [55866,55897]",
      "dest": "string_literal [30141,30177]"
    },
    {
      "src": ",: , [37796,37797]",
      "dest": ",: , [28721,28722]"
    },
    {
      "src": "primitive_type [23421,23428]",
      "dest": "primitive_type [1504,1511]"
    },
    {
      "src": "identifier: spender [86177,86184]",
      "dest": "identifier: spender [26104,26111]"
    },
    {
      "src": "uint256: uint256 [55244,55251]",
      "dest": "uint256: uint256 [42879,42886]"
    },
    {
      "src": "type_name [3506,3513]",
      "dest": "type_name [5805,5812]"
    },
    {
      "src": "return_statement [87358,87372]",
      "dest": "return_statement [43723,43737]"
    },
    {
      "src": "\": \" [54654,54655]",
      "dest": "\": \" [27715,27716]"
    },
    {
      "src": "parameter [17623,17630]",
      "dest": "parameter [11347,11354]"
    },
    {
      "src": "external: external [3327,3335]",
      "dest": "external: external [5626,5634]"
    },
    {
      "src": "uint256: uint256 [16206,16213]",
      "dest": "uint256: uint256 [9948,9955]"
    },
    {
      "src": "parameter [37438,37452]",
      "dest": "parameter [28401,28415]"
    },
    {
      "src": "type_name [86495,86499]",
      "dest": "type_name [26883,26887]"
    },
    {
      "src": "): ) [3357,3358]",
      "dest": "): ) [5656,5657]"
    },
    {
      "src": "uint256: uint256 [5580,5587]",
      "dest": "uint256: uint256 [7879,7886]"
    },
    {
      "src": "type_name [4179,4186]",
      "dest": "type_name [6478,6485]"
    },
    {
      "src": "identifier: totalSupply_ [53621,53633]",
      "dest": "identifier: _totalSupply [29412,29424]"
    },
    {
      "src": "solidity: solidity [22408,22416]",
      "dest": "solidity: solidity [41074,41082]"
    },
    {
      "src": ",: , [38280,38281]",
      "dest": ",: , [32759,32760]"
    },
    {
      "src": "parameter [58995,59010]",
      "dest": "parameter [38314,38329]"
    },
    {
      "src": "identifier: _min [39178,39182]",
      "dest": "identifier: _min [34076,34080]"
    },
    {
      "src": "return_type_definition [3806,3820]",
      "dest": "return_type_definition [6105,6119]"
    },
    {
      "src": "(: ( [38327,38328]",
      "dest": "(: ( [37144,37145]"
    },
    {
      "src": "primitive_type [5823,5830]",
      "dest": "primitive_type [8122,8129]"
    },
    {
      "src": "identifier: SetBurnBounds [38252,38265]",
      "dest": "identifier: SetBurnBounds [32731,32744]"
    },
    {
      "src": "=: = [22906,22907]",
      "dest": "=: = [984,985]"
    },
    {
      "src": "identifier: sender [67157,67163]",
      "dest": "identifier: sender [27833,27839]"
    },
    {
      "src": "(: ( [54250,54251]",
      "dest": "(: ( [34581,34582]"
    },
    {
      "src": "address: address [53399,53406]",
      "dest": "address: address [29094,29101]"
    },
    {
      "src": "=: = [81880,81881]",
      "dest": "=: = [19923,19924]"
    },
    {
      "src": "(: ( [54948,54949]",
      "dest": "(: ( [27913,27914]"
    },
    {
      "src": "public: public [21398,21404]",
      "dest": "public: public [22834,22840]"
    },
    {
      "src": "primitive_type [5538,5545]",
      "dest": "primitive_type [7837,7844]"
    },
    {
      "src": "returns: returns [9417,9424]",
      "dest": "returns: returns [24478,24485]"
    },
    {
      "src": "identifier: REDEMPTION_ADDRESS_COUNT [48642,48666]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [41003,41027]"
    },
    {
      "src": "(: ( [61828,61829]",
      "dest": "(: ( [34712,34713]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol [2957,3020]",
      "dest": "comment: /**  * @dev Interface of the ERC20 standard as defined in the EIP.  */ [5431,5503]"
    },
    {
      "src": "solidity_pragma_token [12983,12998]",
      "dest": "solidity_pragma_token [21233,21248]"
    },
    {
      "src": "parameter [22019,22035]",
      "dest": "parameter [42068,42085]"
    },
    {
      "src": "view: view [10189,10193]",
      "dest": "view: view [8745,8749]"
    },
    {
      "src": "): ) [4186,4187]",
      "dest": "): ) [6485,6486]"
    },
    {
      "src": "member_expression [27629,27644]",
      "dest": "member_expression [31817,31832]"
    },
    {
      "src": "bool: bool [54024,54028]",
      "dest": "bool: bool [38331,38335]"
    },
    {
      "src": "solidity: solidity [3031,3039]",
      "dest": "solidity: solidity [5411,5419]"
    },
    {
      "src": "type_name [23788,23826]",
      "dest": "type_name [1836,1874]"
    },
    {
      "src": "identifier: _from [37431,37436]",
      "dest": "identifier: account [28392,28399]"
    },
    {
      "src": "identifier: balanceOf [3456,3465]",
      "dest": "identifier: balanceOf [5755,5764]"
    },
    {
      "src": "primitive_type [23766,23773]",
      "dest": "primitive_type [1809,1816]"
    },
    {
      "src": "identifier: previousOwner [25835,25848]",
      "dest": "identifier: previousOwner [4142,4155]"
    },
    {
      "src": "identifier: account [60239,60246]",
      "dest": "identifier: account [37153,37160]"
    },
    {
      "src": "parameter [17578,17587]",
      "dest": "parameter [11302,11311]"
    },
    {
      "src": "(: ( [19178,19179]",
      "dest": "(: ( [12876,12877]"
    },
    {
      "src": "): ) [81912,81913]",
      "dest": "): ) [19960,19961]"
    },
    {
      "src": "state_variable_declaration [22674,22695]",
      "dest": "state_variable_declaration [764,785]"
    },
    {
      "src": "): ) [17256,17257]",
      "dest": "): ) [10972,10973]"
    },
    {
      "src": "type_cast_expression [27645,27658]",
      "dest": "type_cast_expression [31833,31846]"
    },
    {
      "src": "function_body [53434,53769]",
      "dest": "function_body [29144,29497]"
    },
    {
      "src": "identifier: _account [53407,53415]",
      "dest": "identifier: account [29102,29109]"
    },
    {
      "src": "call_expression [48073,48123]",
      "dest": "call_expression [37813,37933]"
    },
    {
      "src": "type_name [84932,84939]",
      "dest": "type_name [1113,1120]"
    },
    {
      "src": "primitive_type [11040,11047]",
      "dest": "primitive_type [23718,23725]"
    },
    {
      "src": "identifier: spender [85675,85682]",
      "dest": "identifier: spender [24819,24826]"
    },
    {
      "src": "pragma: pragma [58,64]",
      "dest": "pragma: pragma [402,408]"
    },
    {
      "src": "internal: internal [81335,81343]",
      "dest": "internal: internal [16719,16727]"
    },
    {
      "src": "function_definition [17565,18036]",
      "dest": "function_definition [11289,11760]"
    },
    {
      "src": "solidity_version_comparison_operator [5916,5918]",
      "dest": "solidity_version_comparison_operator [9083,9085]"
    },
    {
      "src": "expression_statement [20723,20753]",
      "dest": "expression_statement [14328,14358]"
    },
    {
      "src": "(: ( [21699,21700]",
      "dest": "(: ( [1418,1419]"
    },
    {
      "src": "parameter [66007,66021]",
      "dest": "parameter [24197,24211]"
    },
    {
      "src": ",: , [5285,5286]",
      "dest": ",: , [7584,7585]"
    },
    {
      "src": "): ) [18537,18538]",
      "dest": "): ) [12269,12270]"
    },
    {
      "src": "(: ( [3505,3506]",
      "dest": "(: ( [5804,5805]"
    },
    {
      "src": "identifier: account [61829,61836]",
      "dest": "identifier: account [34713,34720]"
    },
    {
      "src": "): ) [26733,26734]",
      "dest": "): ) [5057,5058]"
    },
    {
      "src": "identifier: amount [3789,3795]",
      "dest": "identifier: amount [6088,6094]"
    },
    {
      "src": "binary_expression [17868,17874]",
      "dest": "binary_expression [11592,11598]"
    },
    {
      "src": "\": \" [73619,73620]",
      "dest": "\": \" [16780,16781]"
    },
    {
      "src": "call_argument [60716,60722]",
      "dest": "call_argument [28679,28685]"
    },
    {
      "src": "call_argument [55797,55810]",
      "dest": "call_argument [29186,29221]"
    },
    {
      "src": "modifier_invocation [26742,26751]",
      "dest": "modifier_invocation [5066,5075]"
    },
    {
      "src": "internal: internal [31524,31532]",
      "dest": "internal: internal [18303,18311]"
    },
    {
      "src": "true: true [86593,86597]",
      "dest": "true: true [27047,27051]"
    },
    {
      "src": "identifier: b [20649,20650]",
      "dest": "identifier: b [14254,14255]"
    },
    {
      "src": "(: ( [51752,51753]",
      "dest": "(: ( [28452,28453]"
    },
    {
      "src": "\": \" [17971,17972]",
      "dest": "\": \" [11695,11696]"
    },
    {
      "src": "return_type_definition [17614,17631]",
      "dest": "return_type_definition [11338,11355]"
    },
    {
      "src": "identifier: account [60425,60432]",
      "dest": "identifier: account [37320,37327]"
    },
    {
      "src": "uint256: uint256 [37438,37445]",
      "dest": "uint256: uint256 [28401,28408]"
    },
    {
      "src": "primitive_type [23498,23505]",
      "dest": "primitive_type [1974,1981]"
    },
    {
      "src": "\": \" [18005,18006]",
      "dest": "\": \" [11729,11730]"
    },
    {
      "src": "primitive_type [4925,4929]",
      "dest": "primitive_type [7224,7228]"
    },
    {
      "src": "number_literal: 10 [37270,37272]",
      "dest": "number_literal: 10 [36238,36240]"
    },
    {
      "src": "state_variable_declaration [28362,28386]",
      "dest": "state_variable_declaration [1966,2005]"
    },
    {
      "src": "call_argument [33244,33254]",
      "dest": "call_argument [33241,33251]"
    },
    {
      "src": "type_name [23392,23441]",
      "dest": "type_name [1477,1524]"
    },
    {
      "src": ",: , [20639,20640]",
      "dest": ",: , [14244,14245]"
    },
    {
      "src": "\": \" [54363,54364]",
      "dest": "\": \" [34515,34516]"
    },
    {
      "src": "state_variable_declaration [22920,22959]",
      "dest": "state_variable_declaration [998,1037]"
    },
    {
      "src": "type_name [23631,23638]",
      "dest": "type_name [1705,1712]"
    },
    {
      "src": "bool: bool [83026,83030]",
      "dest": "bool: bool [16904,16908]"
    },
    {
      "src": "indexed: indexed [37213,37220]",
      "dest": "indexed: indexed [36654,36661]"
    },
    {
      "src": "primitive_type [21367,21374]",
      "dest": "primitive_type [38864,38871]"
    },
    {
      "src": "identifier: sender [28737,28743]",
      "dest": "identifier: sender [8806,8812]"
    },
    {
      "src": "=>: => [23628,23630]",
      "dest": "=>: => [1702,1704]"
    },
    {
      "src": "=: = [9679,9680]",
      "dest": "=: = [29316,29317]"
    },
    {
      "src": "type_name [85952,85959]",
      "dest": "type_name [39702,39709]"
    },
    {
      "src": "bytes32: bytes32 [6004,6011]",
      "dest": "bytes32: bytes32 [15425,15432]"
    },
    {
      "src": "=: = [17278,17279]",
      "dest": "=: = [10994,10995]"
    },
    {
      "src": "variable_declaration [27611,27626]",
      "dest": "variable_declaration [31799,31814]"
    },
    {
      "src": "\": \" [54375,54376]",
      "dest": "\": \" [34561,34562]"
    },
    {
      "src": "user_defined_type [23807,23823]",
      "dest": "user_defined_type [1855,1871]"
    },
    {
      "src": "true: true [86349,86353]",
      "dest": "true: true [26275,26279]"
    },
    {
      "src": "identifier: sub [37720,37723]",
      "dest": "identifier: add [28613,28616]"
    },
    {
      "src": "identifier: msg [26075,26078]",
      "dest": "identifier: msg [4370,4373]"
    },
    {
      "src": "function: function [62098,62106]",
      "dest": "function: function [40211,40219]"
    },
    {
      "src": "primitive_type [5271,5278]",
      "dest": "primitive_type [7570,7577]"
    },
    {
      "src": "return_statement [34221,34233]",
      "dest": "return_statement [24846,24858]"
    },
    {
      "src": "primitive_type [65483,65490]",
      "dest": "primitive_type [19337,19344]"
    },
    {
      "src": "type_name [59021,59028]",
      "dest": "type_name [38892,38899]"
    },
    {
      "src": "parameter [4891,4905]",
      "dest": "parameter [7190,7204]"
    },
    {
      "src": "\": \" [39096,39097]",
      "dest": "\": \" [33994,33995]"
    },
    {
      "src": ",: , [17155,17156]",
      "dest": ",: , [10871,10872]"
    },
    {
      "src": "emit_statement [59701,59746]",
      "dest": "emit_statement [37422,37449]"
    },
    {
      "src": "identifier: sub [16734,16737]",
      "dest": "identifier: sub [10484,10487]"
    },
    {
      "src": "string [60452,60481]",
      "dest": "string [25586,25628]"
    },
    {
      "src": "identifier: sender [67554,67560]",
      "dest": "identifier: sender [42533,42539]"
    },
    {
      "src": "(: ( [48080,48081]",
      "dest": "(: ( [37820,37821]"
    },
    {
      "src": "): ) [27062,27063]",
      "dest": "): ) [5388,5389]"
    },
    {
      "src": "): ) [87064,87065]",
      "dest": "): ) [43411,43412]"
    },
    {
      "src": "primitive_type [22967,22974]",
      "dest": "primitive_type [1045,1052]"
    },
    {
      "src": "identifier: require [14668,14675]",
      "dest": "identifier: require [4778,4785]"
    },
    {
      "src": "\": \" [54289,54290]",
      "dest": "\": \" [34601,34602]"
    },
    {
      "src": "return: return [19495,19501]",
      "dest": "return: return [13126,13132]"
    },
    {
      "src": "address: address [75676,75683]",
      "dest": "address: address [16747,16754]"
    },
    {
      "src": "primitive_type [54736,54743]",
      "dest": "primitive_type [42907,42914]"
    },
    {
      "src": "parameter [3815,3819]",
      "dest": "parameter [6114,6118]"
    },
    {
      "src": "return_statement [16727,16778]",
      "dest": "return_statement [10477,10528]"
    },
    {
      "src": "emit_statement [53716,53762]",
      "dest": "emit_statement [29447,29490]"
    },
    {
      "src": "{: { [19261,19262]",
      "dest": "{: { [12959,12960]"
    },
    {
      "src": "identifier: RESERVE [64479,64486]",
      "dest": "identifier: balances_Deprecated [860,879]"
    },
    {
      "src": "address: address [21700,21707]",
      "dest": "address: address [1419,1426]"
    },
    {
      "src": "call_argument [55252,55255]",
      "dest": "call_argument [42887,42896]"
    },
    {
      "src": "primitive_type [18517,18524]",
      "dest": "primitive_type [12249,12256]"
    },
    {
      "src": "function_definition [27290,27406]",
      "dest": "function_definition [31383,31499]"
    },
    {
      "src": "function_body [85636,85691]",
      "dest": "function_body [24496,24549]"
    },
    {
      "src": "uint256: uint256 [6113,6120]",
      "dest": "uint256: uint256 [1780,1787]"
    },
    {
      "src": "<=: <= [17238,17240]",
      "dest": "<=: <= [10954,10956]"
    },
    {
      "src": "visibility [33177,33183]",
      "dest": "visibility [25412,25418]"
    },
    {
      "src": "state_mutability [3336,3340]",
      "dest": "state_mutability [5635,5639]"
    },
    {
      "src": "indexed: indexed [25867,25874]",
      "dest": "indexed: indexed [4165,4172]"
    },
    {
      "src": "returns: returns [4916,4923]",
      "dest": "returns: returns [7215,7222]"
    },
    {
      "src": "}: } [20097,20098]",
      "dest": "}: } [13736,13737]"
    },
    {
      "src": "function: function [87198,87206]",
      "dest": "function: function [43545,43553]"
    },
    {
      "src": "string [47305,47329]",
      "dest": "string [39913,39958]"
    },
    {
      "src": "comment: // A wrapper around the allowanceOf mapping. [21566,21610]",
      "dest": "comment: /**  * @title TrueCurrency  * @dev TrueCurrency is an ERC20 with blacklist & redemption addresses  *  * TrueCurrency is a compliant stablecoin with blacklist and redemption  * addresses. Only the owner can blacklist accounts. Redemption addresses  * are assigned automatically to the first 0x100000 addresses. Sending  * tokens to the redemption address will trigger a burn operation. Only  * the owner can mint or blacklist accounts.  *  * This contract is owned by the TokenController, which manages token  * minting & admin functionality. See TokenController.sol  *  * See also: BurnableTokenWithBounds.sol  *  * ~~~~ Features ~~~~  *  * Redemption Addresses  * - The first 0x100000 addresses are redemption addresses  * - Tokens sent to redemption addresses are burned  * - Redemptions are tracked off-chain  * - Cannot mint tokens to redemption addresses  *  * Blacklist  * - Owner can blacklist accounts in accordance with local regulatory bodies  * - Only a court order will merit a blacklist; blacklisting is extremely rare  *  * Burn Bounds & CanBurn  * - Owner can set min & max burn amounts  * - Only accounts flagged in canBurn are allowed to burn tokens  * - canBurn prevents tokens from being sent to the incorrect address  *  * Reclaimer Token  * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner  */ [34771,36147]"
    },
    {
      "src": "identifier: b [18596,18597]",
      "dest": "identifier: b [12328,12329]"
    },
    {
      "src": "(: ( [33225,33226]",
      "dest": "(: ( [33240,33241]"
    },
    {
      "src": "primitive_type [46031,46038]",
      "dest": "primitive_type [36251,36258]"
    },
    {
      "src": "expression_statement [38505,38541]",
      "dest": "expression_statement [37389,37412]"
    },
    {
      "src": "pure: pure [87045,87049]",
      "dest": "pure: pure [43392,43396]"
    },
    {
      "src": "call_argument [38450,38467]",
      "dest": "call_argument [37299,37328]"
    },
    {
      "src": "): ) [53990,53991]",
      "dest": "): ) [34449,34450]"
    },
    {
      "src": "type_name [22019,22026]",
      "dest": "type_name [42068,42075]"
    },
    {
      "src": "(: ( [54117,54118]",
      "dest": "(: ( [37828,37829]"
    },
    {
      "src": "call_expression [75378,75400]",
      "dest": "call_expression [16922,16957]"
    },
    {
      "src": "address: address [23620,23627]",
      "dest": "address: address [1694,1701]"
    },
    {
      "src": "identifier: transfer [27367,27375]",
      "dest": "identifier: transfer [31460,31468]"
    },
    {
      "src": "): ) [83038,83039]",
      "dest": "): ) [16918,16919]"
    },
    {
      "src": "primitive_type [52857,52864]",
      "dest": "primitive_type [2019,2026]"
    },
    {
      "src": "(: ( [20702,20703]",
      "dest": "(: ( [14307,14308]"
    },
    {
      "src": "string_literal [20063,20089]",
      "dest": "string_literal [13702,13728]"
    },
    {
      "src": "number_literal: 18 [86973,86975]",
      "dest": "number_literal: 18 [43311,43313]"
    },
    {
      "src": "{: { [18571,18572]",
      "dest": "{: { [12303,12304]"
    },
    {
      "src": "call_argument [60812,60818]",
      "dest": "call_argument [37404,37410]"
    },
    {
      "src": "function_body [16716,16785]",
      "dest": "function_body [10466,10535]"
    },
    {
      "src": "identifier: require [51745,51752]",
      "dest": "identifier: require [28445,28452]"
    },
    {
      "src": "return_type_definition [86486,86500]",
      "dest": "return_type_definition [26874,26888]"
    },
    {
      "src": "function_body [87066,87100]",
      "dest": "function_body [43413,43447]"
    },
    {
      "src": "public: public [85606,85612]",
      "dest": "public: public [24449,24455]"
    },
    {
      "src": "state_mutability [7980,7984]",
      "dest": "state_mutability [15149,15153]"
    },
    {
      "src": "primitive_type [11185,11192]",
      "dest": "primitive_type [1574,1581]"
    },
    {
      "src": "call_expression [33210,33255]",
      "dest": "call_expression [33235,33260]"
    },
    {
      "src": "): ) [53760,53761]",
      "dest": "): ) [29488,29489]"
    },
    {
      "src": ",: , [39182,39183]",
      "dest": ",: , [34080,34081]"
    },
    {
      "src": "parameter [21812,21828]",
      "dest": "parameter [42802,42824]"
    },
    {
      "src": "call_expression [86512,86575]",
      "dest": "call_expression [26900,27029]"
    },
    {
      "src": "pragma_directive [246,269]",
      "dest": "pragma_directive [3621,3644]"
    },
    {
      "src": "type_name [37173,37180]",
      "dest": "type_name [32478,32485]"
    },
    {
      "src": "block_statement [17876,17911]",
      "dest": "block_statement [11600,11635]"
    },
    {
      "src": "primitive_type [4891,4898]",
      "dest": "primitive_type [7190,7197]"
    },
    {
      "src": "parameter [17146,17155]",
      "dest": "parameter [10862,10871]"
    },
    {
      "src": "identifier: amount [66015,66021]",
      "dest": "identifier: amount [24205,24211]"
    },
    {
      "src": ",: , [19352,19353]",
      "dest": ",: , [12983,12984]"
    },
    {
      "src": "(: ( [50538,50539]",
      "dest": "(: ( [41038,41039]"
    },
    {
      "src": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [17783,17854]",
      "dest": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [11507,11578]"
    },
    {
      "src": "expression_statement [53606,53648]",
      "dest": "expression_statement [29397,29437]"
    },
    {
      "src": "): ) [3795,3796]",
      "dest": "): ) [6094,6095]"
    },
    {
      "src": "assignment_expression [26763,26786]",
      "dest": "assignment_expression [5087,5110]"
    },
    {
      "src": "identifier: account [60890,60897]",
      "dest": "identifier: account [38011,38018]"
    },
    {
      "src": "parameter [68241,68255]",
      "dest": "parameter [38839,38853]"
    },
    {
      "src": "state_variable_declaration [23544,23606]",
      "dest": "state_variable_declaration [1607,1680]"
    },
    {
      "src": "primitive_type [67005,67012]",
      "dest": "primitive_type [42096,42103]"
    },
    {
      "src": "): ) [20751,20752]",
      "dest": "): ) [14356,14357]"
    },
    {
      "src": ">=: >= [67412,67414]",
      "dest": ">=: >= [19453,19455]"
    },
    {
      "src": "call_expression [19339,19367]",
      "dest": "call_expression [12970,12998]"
    },
    {
      "src": "call_argument [68658,68664]",
      "dest": "call_argument [25472,25478]"
    },
    {
      "src": "expression_statement [38381,38432]",
      "dest": "expression_statement [37208,37281]"
    },
    {
      "src": "type_cast_expression [53740,53750]",
      "dest": "type_cast_expression [29470,29480]"
    },
    {
      "src": "type_name [37225,37232]",
      "dest": "type_name [36666,36673]"
    },
    {
      "src": "identifier: _who [8227,8231]",
      "dest": "identifier: recipient [25385,25394]"
    },
    {
      "src": "(: ( [53729,53730]",
      "dest": "(: ( [29460,29461]"
    },
    {
      "src": "call_expression [47278,47330]",
      "dest": "call_expression [39865,39959]"
    },
    {
      "src": "internal: internal [77217,77225]",
      "dest": "internal: internal [30003,30011]"
    },
    {
      "src": "return: return [87167,87173]",
      "dest": "return: return [43514,43520]"
    },
    {
      "src": "(: ( [20629,20630]",
      "dest": "(: ( [14234,14235]"
    },
    {
      "src": "type_name [5580,5587]",
      "dest": "type_name [7879,7886]"
    },
    {
      "src": "call_expression [17228,17257]",
      "dest": "call_expression [10944,10973]"
    },
    {
      "src": "identifier: newOwner [26725,26733]",
      "dest": "identifier: newOwner [5049,5057]"
    },
    {
      "src": "comment: /**     *@dev send all eth balance in the contract to another address     */ [27206,27284]",
      "dest": "comment: /**      * @dev send all eth balance in the contract to another address      * @param _to address to send eth balance to      */ [31246,31377]"
    },
    {
      "src": "expression_statement [86273,86332]",
      "dest": "expression_statement [26174,26258]"
    },
    {
      "src": ",: , [18526,18527]",
      "dest": ",: , [12258,12259]"
    },
    {
      "src": ",: , [34197,34198]",
      "dest": ",: , [24296,24297]"
    },
    {
      "src": "identifier: decimals [87027,87035]",
      "dest": "identifier: decimals [43365,43373]"
    },
    {
      "src": "(: ( [23570,23571]",
      "dest": "(: ( [1633,1634]"
    },
    {
      "src": "function: function [38983,38991]",
      "dest": "function: function [33856,33864]"
    },
    {
      "src": "constructor: constructor [26035,26046]",
      "dest": "constructor: constructor [4330,4341]"
    },
    {
      "src": "call_argument [47286,47303]",
      "dest": "call_argument [39873,39911]"
    },
    {
      "src": "pure: pure [17609,17613]",
      "dest": "pure: pure [11333,11337]"
    },
    {
      "src": "identifier: _ [26324,26325]",
      "dest": "identifier: _ [4621,4622]"
    },
    {
      "src": "parameter [87235,87248]",
      "dest": "parameter [43591,43604]"
    },
    {
      "src": "true [86349,86353]",
      "dest": "true [26275,26279]"
    },
    {
      "src": "call_argument [61829,61836]",
      "dest": "call_argument [34713,34720]"
    },
    {
      "src": "function_definition [38306,38548]",
      "dest": "function_definition [37131,37456]"
    },
    {
      "src": "identifier: amount [59428,59434]",
      "dest": "identifier: amount [27852,27858]"
    },
    {
      "src": "parameter [86256,86260]",
      "dest": "parameter [26157,26161]"
    },
    {
      "src": "identifier: claimOwnership [26898,26912]",
      "dest": "identifier: claimOwnership [5224,5238]"
    },
    {
      "src": "binary_expression [54251,54287]",
      "dest": "binary_expression [34582,34599]"
    },
    {
      "src": "(: ( [23420,23421]",
      "dest": "(: ( [1503,1504]"
    },
    {
      "src": ",: , [17242,17243]",
      "dest": ",: , [10958,10959]"
    },
    {
      "src": "parameter [62552,62566]",
      "dest": "parameter [39728,39742]"
    },
    {
      "src": "boolean_literal [35299,35303]",
      "dest": "boolean_literal [24323,24327]"
    },
    {
      "src": "}: } [87099,87100]",
      "dest": "}: } [43446,43447]"
    },
    {
      "src": "type_name [4891,4898]",
      "dest": "type_name [7190,7197]"
    },
    {
      "src": "primitive_type [16217,16224]",
      "dest": "primitive_type [9959,9966]"
    },
    {
      "src": "returns: returns [87140,87147]",
      "dest": "returns: returns [43487,43494]"
    },
    {
      "src": "call_expression [14035,14066]",
      "dest": "call_expression [27647,27717]"
    },
    {
      "src": "address: address [52857,52864]",
      "dest": "address: address [2019,2026]"
    },
    {
      "src": "expression_statement [34150,34211]",
      "dest": "expression_statement [24263,24306]"
    },
    {
      "src": "identifier: _tokenHolder [22212,22224]",
      "dest": "identifier: target [19310,19316]"
    },
    {
      "src": ",: , [18597,18598]",
      "dest": ",: , [12329,12330]"
    },
    {
      "src": "state_mutability [4165,4169]",
      "dest": "state_mutability [6464,6468]"
    },
    {
      "src": "call_argument [51768,51769]",
      "dest": "call_argument [28472,28473]"
    },
    {
      "src": "address: address [21083,21090]",
      "dest": "address: address [18820,18827]"
    },
    {
      "src": "string_literal [74515,74544]",
      "dest": "string_literal [17947,17979]"
    },
    {
      "src": "parameter [59021,59035]",
      "dest": "parameter [38892,38906]"
    },
    {
      "src": "private: private [22928,22935]",
      "dest": "private: private [1006,1013]"
    },
    {
      "src": "return_type_definition [16242,16259]",
      "dest": "return_type_definition [9984,10001]"
    },
    {
      "src": "primitive_type [51760,51767]",
      "dest": "primitive_type [28464,28471]"
    },
    {
      "src": "type_name [11185,11194]",
      "dest": "type_name [1555,1582]"
    },
    {
      "src": "(: ( [26278,26279]",
      "dest": "(: ( [4575,4576]"
    },
    {
      "src": "return: return [35292,35298]",
      "dest": "return: return [24316,24322]"
    },
    {
      "src": "parameter [27568,27579]",
      "dest": "parameter [31756,31767]"
    },
    {
      "src": "call_argument [39178,39182]",
      "dest": "call_argument [34076,34080]"
    },
    {
      "src": ",: , [86318,86319]",
      "dest": ",: , [26204,26205]"
    },
    {
      "src": "\": \" [26300,26301]",
      "dest": "\": \" [4597,4598]"
    },
    {
      "src": "): ) [21036,21037]",
      "dest": "): ) [1393,1394]"
    },
    {
      "src": "return_type_definition [87226,87249]",
      "dest": "return_type_definition [43582,43605]"
    },
    {
      "src": "parameter [13989,14005]",
      "dest": "parameter [24178,24195]"
    },
    {
      "src": "string [16744,16776]",
      "dest": "string [10494,10526]"
    },
    {
      "src": "primitive_type [17208,17215]",
      "dest": "primitive_type [10924,10931]"
    },
    {
      "src": "string [81735,81755]",
      "dest": "string [16954,16956]"
    },
    {
      "src": "expression_statement [38442,38495]",
      "dest": "expression_statement [37291,37379]"
    },
    {
      "src": "expression_statement [53445,53510]",
      "dest": "expression_statement [40288,40361]"
    },
    {
      "src": "identifier: MintRewardToken [59706,59721]",
      "dest": "identifier: Mint [37427,37431]"
    },
    {
      "src": "identifier: sub [17131,17134]",
      "dest": "identifier: sub [10847,10850]"
    },
    {
      "src": "function_definition [37401,37825]",
      "dest": "function_definition [28369,28747]"
    },
    {
      "src": "type_name [17578,17585]",
      "dest": "type_name [11302,11309]"
    },
    {
      "src": "add: add [41812,41815]",
      "dest": "add: add [20424,20427]"
    },
    {
      "src": "view: view [85613,85617]",
      "dest": "view: view [24456,24460]"
    },
    {
      "src": "parameter [18528,18537]",
      "dest": "parameter [12260,12269]"
    },
    {
      "src": "uint256: uint256 [17578,17585]",
      "dest": "uint256: uint256 [11302,11309]"
    },
    {
      "src": "): ) [86260,86261]",
      "dest": "): ) [26161,26162]"
    },
    {
      "src": "type_name [23582,23589]",
      "dest": "type_name [1645,1652]"
    },
    {
      "src": "state_variable_declaration [86947,86976]",
      "dest": "state_variable_declaration [43285,43314]"
    },
    {
      "src": "expression_statement [75659,75704]",
      "dest": "expression_statement [16739,16813]"
    },
    {
      "src": "primitive_type [27611,27618]",
      "dest": "primitive_type [31799,31806]"
    },
    {
      "src": "call_argument [14676,14702]",
      "dest": "call_argument [4786,4812]"
    },
    {
      "src": "identifier: from [5554,5558]",
      "dest": "identifier: from [7853,7857]"
    },
    {
      "src": "(: ( [37422,37423]",
      "dest": "(: ( [28383,28384]"
    },
    {
      "src": "identifier: _ [14714,14715]",
      "dest": "identifier: _ [4846,4847]"
    },
    {
      "src": "function_body [87156,87190]",
      "dest": "function_body [43503,43537]"
    },
    {
      "src": "=: = [86971,86972]",
      "dest": "=: = [43309,43310]"
    },
    {
      "src": "if: if [17864,17866]",
      "dest": "if: if [11588,11590]"
    },
    {
      "src": "type_name [5340,5344]",
      "dest": "type_name [7639,7643]"
    },
    {
      "src": "identifier: value [65491,65496]",
      "dest": "identifier: value [19345,19350]"
    },
    {
      "src": "identifier: account [62133,62140]",
      "dest": "identifier: account [40234,40241]"
    },
    {
      "src": "return_statement [20046,20091]",
      "dest": "return_statement [13685,13730]"
    },
    {
      "src": "(: ( [87331,87332]",
      "dest": "(: ( [43696,43697]"
    },
    {
      "src": "string [16315,16344]",
      "dest": "string [10057,10086]"
    },
    {
      "src": "variable_declaration [83026,83038]",
      "dest": "variable_declaration [16904,16916]"
    },
    {
      "src": "primitive_type [23097,23103]",
      "dest": "primitive_type [1178,1184]"
    },
    {
      "src": "identifier: oldValue [53638,53646]",
      "dest": "identifier: amount [29429,29435]"
    },
    {
      "src": "(: ( [67376,67377]",
      "dest": "(: ( [19430,19431]"
    },
    {
      "src": "call_argument [52029,52030]",
      "dest": "call_argument [29273,29274]"
    },
    {
      "src": "parameter [61299,61313]",
      "dest": "parameter [34435,34449]"
    },
    {
      "src": "state_mutability [17609,17613]",
      "dest": "state_mutability [11333,11337]"
    },
    {
      "src": "call_argument [59428,59434]",
      "dest": "call_argument [27852,27858]"
    },
    {
      "src": "): ) [38359,38360]",
      "dest": "): ) [37176,37177]"
    },
    {
      "src": "call_argument [18599,18627]",
      "dest": "call_argument [12331,12359]"
    },
    {
      "src": "identifier: errorMessage [20666,20678]",
      "dest": "identifier: errorMessage [14271,14283]"
    },
    {
      "src": "identifier: _to [51753,51756]",
      "dest": "identifier: account [28453,28460]"
    },
    {
      "src": "call_argument [53479,53508]",
      "dest": "call_argument [40314,40359]"
    },
    {
      "src": "): ) [52416,52417]",
      "dest": "): ) [28571,28572]"
    },
    {
      "src": "(: ( [16661,16662]",
      "dest": "(: ( [10411,10412]"
    },
    {
      "src": "): ) [86574,86575]",
      "dest": "): ) [27028,27029]"
    },
    {
      "src": "identifier: value [5588,5593]",
      "dest": "identifier: value [7887,7892]"
    },
    {
      "src": "public: public [10182,10188]",
      "dest": "public: public [24746,24752]"
    },
    {
      "src": "{: { [16260,16261]",
      "dest": "{: { [10002,10003]"
    },
    {
      "src": "event_paramater [25859,25883]",
      "dest": "event_paramater [4157,4181]"
    },
    {
      "src": "parameter [75261,75272]",
      "dest": "parameter [16676,16701]"
    },
    {
      "src": "identifier: sender [26079,26085]",
      "dest": "identifier: sender [4374,4380]"
    },
    {
      "src": "uint256: uint256 [60257,60264]",
      "dest": "uint256: uint256 [37162,37169]"
    },
    {
      "src": "parameter [67005,67019]",
      "dest": "parameter [42096,42110]"
    },
    {
      "src": "(: ( [5339,5340]",
      "dest": "(: ( [7638,7639]"
    },
    {
      "src": "number_literal: 0 [14063,14064]",
      "dest": "number_literal: 0 [27673,27674]"
    },
    {
      "src": "parameter [27554,27566]",
      "dest": "parameter [31742,31754]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      *      * _Available since v2.4.0._      */ [20106,20611]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [13745,14216]"
    },
    {
      "src": "): ) [20089,20090]",
      "dest": "): ) [13728,13729]"
    },
    {
      "src": "visibility [27333,27341]",
      "dest": "visibility [31426,31434]"
    },
    {
      "src": "identifier: pendingOwner [14690,14702]",
      "dest": "identifier: pendingOwner [4800,4812]"
    },
    {
      "src": "pragma: pragma [22401,22407]",
      "dest": "pragma: pragma [41067,41073]"
    },
    {
      "src": "\": \" [55435,55436]",
      "dest": "\": \" [30097,30098]"
    },
    {
      "src": "primitive_type [17623,17630]",
      "dest": "primitive_type [11347,11354]"
    },
    {
      "src": "uint256: uint256 [54110,54117]",
      "dest": "uint256: uint256 [37821,37828]"
    },
    {
      "src": "view: view [3336,3340]",
      "dest": "view: view [5635,5639]"
    },
    {
      "src": "\": \" [48121,48122]",
      "dest": "\": \" [37931,37932]"
    },
    {
      "src": "expression_statement [86512,86576]",
      "dest": "expression_statement [26900,27030]"
    },
    {
      "src": "primitive_type [21700,21707]",
      "dest": "primitive_type [1419,1426]"
    },
    {
      "src": "uint256: uint256 [22846,22853]",
      "dest": "uint256: uint256 [924,931]"
    },
    {
      "src": "identifier: a [17935,17936]",
      "dest": "identifier: a [11659,11660]"
    },
    {
      "src": "}: } [10273,10274]",
      "dest": "}: } [24864,24865]"
    },
    {
      "src": "call_expression [37707,37731]",
      "dest": "call_expression [28600,28624]"
    },
    {
      "src": "primitive_type [6024,6031]",
      "dest": "primitive_type [19662,19669]"
    },
    {
      "src": "): ) [5836,5837]",
      "dest": "): ) [8135,8136]"
    },
    {
      "src": "string_literal [67429,67464]",
      "dest": "string_literal [19463,19503]"
    },
    {
      "src": "): ) [9433,9434]",
      "dest": "): ) [24494,24495]"
    },
    {
      "src": "parameter [21367,21380]",
      "dest": "parameter [38864,38881]"
    },
    {
      "src": "return_statement [18582,18629]",
      "dest": "return_statement [12314,12361]"
    },
    {
      "src": "pragma: pragma [14225,14231]",
      "dest": "pragma: pragma [31035,31041]"
    },
    {
      "src": "primitive_type [75564,75571]",
      "dest": "primitive_type [19431,19438]"
    },
    {
      "src": "pragma_directive [3024,3047]",
      "dest": "pragma_directive [5404,5427]"
    },
    {
      "src": "function_body [14657,14723]",
      "dest": "function_body [4767,4855]"
    },
    {
      "src": "primitive_type [22226,22233]",
      "dest": "primitive_type [19627,19634]"
    },
    {
      "src": "uint256: uint256 [19992,19999]",
      "dest": "uint256: uint256 [13631,13638]"
    },
    {
      "src": "primitive_type [68241,68248]",
      "dest": "primitive_type [38839,38846]"
    },
    {
      "src": "primitive_type [17268,17275]",
      "dest": "primitive_type [10984,10991]"
    },
    {
      "src": "payable: payable [27320,27327]",
      "dest": "payable: payable [31413,31420]"
    },
    {
      "src": "return: return [10730,10736]",
      "dest": "return: return [23914,23920]"
    },
    {
      "src": "string_literal [73714,73742]",
      "dest": "string_literal [18963,19006]"
    },
    {
      "src": "call_argument [59731,59737]",
      "dest": "call_argument [37441,37447]"
    },
    {
      "src": "=: = [46073,46074]",
      "dest": "=: = [36293,36294]"
    },
    {
      "src": "call_argument [54989,55002]",
      "dest": "call_argument [27922,27962]"
    },
    {
      "src": "string: string [23068,23074]",
      "dest": "string: string [1149,1155]"
    },
    {
      "src": "\": \" [38429,38430]",
      "dest": "\": \" [37278,37279]"
    },
    {
      "src": "(: ( [59721,59722]",
      "dest": "(: ( [37431,37432]"
    },
    {
      "src": "primitive_type [61273,61280]",
      "dest": "primitive_type [34418,34425]"
    },
    {
      "src": "visibility [172,180]",
      "dest": "visibility [33215,33223]"
    },
    {
      "src": "event_paramater [5580,5593]",
      "dest": "event_paramater [7879,7892]"
    },
    {
      "src": "\": \" [47265,47266]",
      "dest": "\": \" [39106,39107]"
    },
    {
      "src": "(: ( [9694,9695]",
      "dest": "(: ( [29340,29341]"
    },
    {
      "src": "parameter [4139,4154]",
      "dest": "parameter [6438,6453]"
    },
    {
      "src": "): ) [29231,29232]",
      "dest": "): ) [27758,27759]"
    },
    {
      "src": "): ) [87309,87310]",
      "dest": "): ) [43665,43666]"
    },
    {
      "src": "\": \" [16343,16344]",
      "dest": "\": \" [10085,10086]"
    },
    {
      "src": "): ) [87126,87127]",
      "dest": "): ) [43473,43474]"
    },
    {
      "src": "call_argument [17244,17256]",
      "dest": "call_argument [10960,10972]"
    },
    {
      "src": "string_literal [47244,47266]",
      "dest": "string_literal [39067,39107]"
    },
    {
      "src": "return: return [20046,20052]",
      "dest": "return: return [13685,13691]"
    },
    {
      "src": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [19406,19483]",
      "dest": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [13037,13114]"
    },
    {
      "src": "identifier: _value [37724,37730]",
      "dest": "identifier: amount [28617,28623]"
    },
    {
      "src": "primitive_type [5287,5294]",
      "dest": "primitive_type [7586,7593]"
    },
    {
      "src": "identifier: owner [26067,26072]",
      "dest": "identifier: owner [4362,4367]"
    },
    {
      "src": "): ) [10717,10718]",
      "dest": "): ) [23901,23902]"
    },
    {
      "src": "uint256: uint256 [67005,67012]",
      "dest": "uint256: uint256 [42096,42103]"
    },
    {
      "src": "call_expression [29202,29233]",
      "dest": "call_expression [27728,27799]"
    },
    {
      "src": "\": \" [57846,57847]",
      "dest": "\": \" [4814,4815]"
    },
    {
      "src": "true [33273,33277]",
      "dest": "true [25648,25652]"
    },
    {
      "src": "): ) [37807,37808]",
      "dest": "): ) [28720,28721]"
    },
    {
      "src": "state_variable_declaration [23392,23453]",
      "dest": "state_variable_declaration [1477,1547]"
    },
    {
      "src": "visibility [20680,20688]",
      "dest": "visibility [14285,14293]"
    },
    {
      "src": "primitive_type [53399,53406]",
      "dest": "primitive_type [29094,29101]"
    },
    {
      "src": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [26341,26434]",
      "dest": "comment: /**      * @dev Throws if called by any account other than the owner.      */ [4451,4530]"
    },
    {
      "src": "primitive_type [16206,16213]",
      "dest": "primitive_type [9948,9955]"
    },
    {
      "src": "bool: bool [5340,5344]",
      "dest": "bool: bool [7639,7643]"
    },
    {
      "src": "parameter [16206,16215]",
      "dest": "parameter [9948,9957]"
    },
    {
      "src": "identifier: require [17951,17958]",
      "dest": "identifier: require [11675,11682]"
    },
    {
      "src": "assignment_expression [37692,37731]",
      "dest": "assignment_expression [28585,28624]"
    },
    {
      "src": "}: } [19510,19511]",
      "dest": "}: } [13141,13142]"
    },
    {
      "src": "address: address [62535,62542]",
      "dest": "address: address [40920,40927]"
    },
    {
      "src": "parameter [20703,20710]",
      "dest": "parameter [14308,14315]"
    },
    {
      "src": "identifier: sender [26283,26289]",
      "dest": "identifier: sender [4580,4586]"
    },
    {
      "src": "type_cast_expression [29222,29232]",
      "dest": "type_cast_expression [27749,27759]"
    },
    {
      "src": "identifier: REDEMPTION_ADDRESS_COUNT [46048,46072]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [36268,36292]"
    },
    {
      "src": "comment: /**      * @dev Returns the remaining number of tokens that `spender` will be      * allowed to spend on behalf of `owner` through {transferFrom}. This is      * zero by default.      *      * This value changes when {approve} or {transferFrom} are called.      */ [3829,4099]",
      "dest": "comment: /**      * @dev Returns the remaining number of tokens that `spender` will be      * allowed to spend on behalf of `owner` through {transferFrom}. This is      * zero by default.      *      * This value changes when {approve} or {transferFrom} are called.      */ [6128,6398]"
    },
    {
      "src": "uint256: uint256 [21731,21738]",
      "dest": "uint256: uint256 [1449,1456]"
    },
    {
      "src": "(: ( [53963,53964]",
      "dest": "(: ( [34417,34418]"
    },
    {
      "src": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [26542,26684]",
      "dest": "comment: /**      * @dev Modifier throws if called by any account other than the pendingOwner.      */ [4638,4733]"
    },
    {
      "src": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [18044,18498]",
      "dest": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [11768,12230]"
    },
    {
      "src": "uint256: uint256 [20703,20710]",
      "dest": "uint256: uint256 [14308,14315]"
    },
    {
      "src": "visibility [3327,3335]",
      "dest": "visibility [5626,5634]"
    },
    {
      "src": "identifier: onlyOwner [26742,26751]",
      "dest": "identifier: onlyOwner [5066,5075]"
    },
    {
      "src": "true: true [33273,33277]",
      "dest": "true: true [25648,25652]"
    },
    {
      "src": "(: ( [26716,26717]",
      "dest": "(: ( [5040,5041]"
    },
    {
      "src": "call_argument [67176,67198]",
      "dest": "call_argument [42969,42992]"
    },
    {
      "src": "identifier: _who [10156,10160]",
      "dest": "identifier: spender [24721,24728]"
    },
    {
      "src": "identifier: _max [39184,39188]",
      "dest": "identifier: _max [34082,34086]"
    },
    {
      "src": "identifier: require [55748,55755]",
      "dest": "identifier: require [29155,29162]"
    },
    {
      "src": "identifier: Transfer [5529,5537]",
      "dest": "identifier: Transfer [7828,7836]"
    },
    {
      "src": "identifier: name_Deprecated [23075,23090]",
      "dest": "identifier: name_Deprecated [1156,1171]"
    },
    {
      "src": "uint256: uint256 [16217,16224]",
      "dest": "uint256: uint256 [9959,9966]"
    },
    {
      "src": "+: + [16285,16286]",
      "dest": "+: + [10027,10028]"
    },
    {
      "src": "\": \" [87268,87269]",
      "dest": "\": \" [43624,43625]"
    },
    {
      "src": "primitive_type [85589,85596]",
      "dest": "primitive_type [24432,24439]"
    },
    {
      "src": "parameter [65483,65496]",
      "dest": "parameter [19337,19350]"
    },
    {
      "src": "call_argument [68690,68724]",
      "dest": "call_argument [16985,17045]"
    },
    {
      "src": "contract_declaration [38180,39200]",
      "dest": "contract_declaration [32184,34740]"
    },
    {
      "src": "address: address [5287,5294]",
      "dest": "address: address [7586,7593]"
    },
    {
      "src": "identifier: _max [39028,39032]",
      "dest": "identifier: _max [33901,33905]"
    },
    {
      "src": "): ) [26258,26259]",
      "dest": "): ) [4555,4556]"
    },
    {
      "src": "(: ( [48634,48635]",
      "dest": "(: ( [40991,40992]"
    },
    {
      "src": "address: address [25819,25826]",
      "dest": "address: address [4126,4133]"
    },
    {
      "src": "call_argument [57846,57867]",
      "dest": "call_argument [4814,4834]"
    },
    {
      "src": "parameter [22226,22242]",
      "dest": "parameter [19627,19641]"
    },
    {
      "src": "primitive_type [86947,86952]",
      "dest": "primitive_type [43285,43290]"
    },
    {
      "src": "type_cast_expression [54736,54748]",
      "dest": "type_cast_expression [42907,42930]"
    },
    {
      "src": "identifier: delegateDecreaseApproval [86378,86402]",
      "dest": "identifier: decreaseAllowance [26799,26816]"
    },
    {
      "src": "(: ( [18561,18562]",
      "dest": "(: ( [12293,12294]"
    },
    {
      "src": "external: external [4907,4915]",
      "dest": "external: external [7206,7214]"
    },
    {
      "src": "=>: => [23429,23431]",
      "dest": "=>: => [1512,1514]"
    },
    {
      "src": ",: , [25848,25849]",
      "dest": ",: , [4155,4156]"
    },
    {
      "src": "}: } [26793,26794]",
      "dest": "}: } [5117,5118]"
    },
    {
      "src": "type_name [23612,23639]",
      "dest": "type_name [1686,1713]"
    },
    {
      "src": ",: , [5796,5797]",
      "dest": ",: , [8095,8096]"
    },
    {
      "src": "public: public [22682,22688]",
      "dest": "public: public [772,778]"
    },
    {
      "src": "address: address [6848,6855]",
      "dest": "address: address [1563,1570]"
    },
    {
      "src": "function_body [26056,26148]",
      "dest": "function_body [4351,4443]"
    },
    {
      "src": "call_argument [63496,63502]",
      "dest": "call_argument [25578,25584]"
    },
    {
      "src": "identifier: require [17228,17235]",
      "dest": "identifier: require [10944,10951]"
    },
    {
      "src": "state_variable_declaration [23853,23888]",
      "dest": "state_variable_declaration [1912,1958]"
    },
    {
      "src": "constant: constant [46039,46047]",
      "dest": "constant: constant [36259,36267]"
    },
    {
      "src": "{: { [53434,53435]",
      "dest": "{: { [29144,29145]"
    },
    {
      "src": ",: , [33234,33235]",
      "dest": ",: , [33251,33252]"
    },
    {
      "src": "string [48161,48185]",
      "dest": "string [38983,39020]"
    },
    {
      "src": "event: event [25782,25787]",
      "dest": "event: event [4099,4104]"
    },
    {
      "src": ",: , [59729,59730]",
      "dest": ",: , [37439,37440]"
    },
    {
      "src": "primitive_type [8253,8260]",
      "dest": "primitive_type [26834,26841]"
    },
    {
      "src": "view: view [11026,11030]",
      "dest": "view: view [23695,23699]"
    },
    {
      "src": "function: function [20617,20625]",
      "dest": "function: function [14222,14230]"
    },
    {
      "src": "binary_expression [16307,16313]",
      "dest": "binary_expression [10049,10055]"
    },
    {
      "src": "string: string [87332,87338]",
      "dest": "string: string [43697,43703]"
    },
    {
      "src": "external: external [172,180]",
      "dest": "external: external [33215,33223]"
    },
    {
      "src": "{: { [26056,26057]",
      "dest": "{: { [4351,4352]"
    },
    {
      "src": "return: return [11060,11066]",
      "dest": "return: return [23738,23744]"
    },
    {
      "src": "comment: // File: contracts/TrueCurrencies/modularERC20/InstantiatableOwnable.sol [12900,12972]",
      "dest": "comment: /**  * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.  * Removing state variables has been necessary due to proxy pattern usage.  * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:  * - Remove state variables _name, _symbol, _decimals  * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage  * - Remove constructor  * - Solidity version changed from ^0.6.0 to 0.6.10  * - Contract made abstract  *  * See also: ClaimableOwnable.sol and ProxyStorage.sol  */ [20579,21222]"
    },
    {
      "src": "identifier: balanceOf [27635,27644]",
      "dest": "identifier: balanceOf [31823,31832]"
    },
    {
      "src": "primitive_type [86403,86410]",
      "dest": "primitive_type [26817,26824]"
    },
    {
      "src": "call_argument [59206,59234]",
      "dest": "call_argument [26988,27027]"
    },
    {
      "src": ",: , [52511,52512]",
      "dest": ",: , [36430,36431]"
    },
    {
      "src": "visibility [4907,4915]",
      "dest": "visibility [7206,7214]"
    },
    {
      "src": "visibility [31524,31532]",
      "dest": "visibility [18303,18311]"
    },
    {
      "src": "}: } [14722,14723]",
      "dest": "}: } [4854,4855]"
    },
    {
      "src": "primitive_type [5306,5313]",
      "dest": "primitive_type [7605,7612]"
    },
    {
      "src": "call_argument [47244,47266]",
      "dest": "call_argument [39067,39107]"
    },
    {
      "src": "identifier: Approval [5766,5774]",
      "dest": "identifier: Approval [8065,8073]"
    },
    {
      "src": "identifier: errorMessage [17171,17183]",
      "dest": "identifier: errorMessage [10887,10899]"
    },
    {
      "src": "{: { [20712,20713]",
      "dest": "{: { [14317,14318]"
    },
    {
      "src": "comment: //flexibility since burning could also be as good as disabled [38798,38859]",
      "dest": "comment: /**      * @dev Change the minimum and maximum amount that can be burned at once.      * Burning may be disabled by setting both to 0 (this will not be done      * under normal operation, but we can't add checks to disallow it without      * losing a lot of flexibility since burning could also be as good as disabled      * by setting the minimum extremely high, and we don't want to lock      * in any particular cap for the minimum)      * @param _min minimum amount that can be burned at once      * @param _max maximum amount that can be burned at once      */ [33276,33850]"
    },
    {
      "src": "visibility [18539,18547]",
      "dest": "visibility [12271,12279]"
    },
    {
      "src": "\": \" [55896,55897]",
      "dest": "\": \" [30176,30177]"
    },
    {
      "src": "identifier: _burnAllArgs [38315,38327]",
      "dest": "identifier: mint [37140,37144]"
    },
    {
      "src": "string_literal [67176,67198]",
      "dest": "string_literal [42969,42992]"
    },
    {
      "src": "parameter [35194,35198]",
      "dest": "parameter [40960,40964]"
    },
    {
      "src": "type_name [5990,5997]",
      "dest": "type_name [17837,17844]"
    },
    {
      "src": "parameter [20641,20650]",
      "dest": "parameter [14246,14255]"
    },
    {
      "src": "address: address [58995,59002]",
      "dest": "address: address [38314,38321]"
    },
    {
      "src": "visibility [8827,8835]",
      "dest": "visibility [38346,38354]"
    },
    {
      "src": "identifier: owner [14103,14108]",
      "dest": "identifier: owner [30252,30257]"
    },
    {
      "src": "type_name [17146,17153]",
      "dest": "type_name [10862,10869]"
    },
    {
      "src": "event_definition [52459,52530]",
      "dest": "event_definition [36389,36452]"
    },
    {
      "src": "public: public [87214,87220]",
      "dest": "public: public [43561,43567]"
    },
    {
      "src": "binary_expression [17959,17964]",
      "dest": "binary_expression [11683,11688]"
    },
    {
      "src": "number_literal: 0 [51768,51769]",
      "dest": "number_literal: 0 [28472,28473]"
    },
    {
      "src": "identifier: amount [60716,60722]",
      "dest": "identifier: amount [28679,28685]"
    },
    {
      "src": ",: , [16215,16216]",
      "dest": ",: , [9957,9958]"
    },
    {
      "src": "string_literal [9703,9705]",
      "dest": "string_literal [29349,29385]"
    },
    {
      "src": ",: , [39084,39085]",
      "dest": ",: , [33957,33958]"
    },
    {
      "src": "function_definition [75247,75834]",
      "dest": "function_definition [16657,17054]"
    },
    {
      "src": "identifier: value [164,169]",
      "dest": "identifier: value [18863,18868]"
    },
    {
      "src": "): ) [5344,5345]",
      "dest": "): ) [7643,7644]"
    },
    {
      "src": "string_literal [16744,16776]",
      "dest": "string_literal [10494,10526]"
    },
    {
      "src": "primitive_type [27053,27060]",
      "dest": "primitive_type [5379,5386]"
    },
    {
      "src": "true: true [34228,34232]",
      "dest": "true: true [24853,24857]"
    },
    {
      "src": "uint256: uint256 [37225,37232]",
      "dest": "uint256: uint256 [36666,36673]"
    },
    {
      "src": "type_name [4925,4929]",
      "dest": "type_name [7224,7228]"
    },
    {
      "src": "(: ( [27311,27312]",
      "dest": "(: ( [31404,31405]"
    },
    {
      "src": "parameter [62125,62140]",
      "dest": "parameter [40226,40241]"
    },
    {
      "src": "identifier: mint [75256,75260]",
      "dest": "identifier: sendValue [16666,16675]"
    },
    {
      "src": "identifier: require [39064,39071]",
      "dest": "identifier: require [33937,33944]"
    },
    {
      "src": "string_literal [59206,59234]",
      "dest": "string_literal [26988,27027]"
    },
    {
      "src": "(: ( [5537,5538]",
      "dest": "(: ( [7836,7837]"
    },
    {
      "src": "parameter [62933,62947]",
      "dest": "parameter [33199,33213]"
    },
    {
      "src": "visibility [23176,23183]",
      "dest": "visibility [1260,1267]"
    },
    {
      "src": "primitive_type [23552,23559]",
      "dest": "primitive_type [1615,1622]"
    },
    {
      "src": "string_literal [54289,54302]",
      "dest": "string_literal [34601,34650]"
    },
    {
      "src": "view: view [9412,9416]",
      "dest": "view: view [8857,8861]"
    },
    {
      "src": "): ) [48185,48186]",
      "dest": "): ) [39020,39021]"
    },
    {
      "src": "): ) [33175,33176]",
      "dest": "): ) [33213,33214]"
    },
    {
      "src": ",: , [48098,48099]",
      "dest": ",: , [37865,37866]"
    },
    {
      "src": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [15361,15936]",
      "dest": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [9095,9670]"
    },
    {
      "src": "return_statement [35292,35304]",
      "dest": "return_statement [24316,24328]"
    },
    {
      "src": "{: { [62182,62183]",
      "dest": "{: { [40277,40278]"
    },
    {
      "src": "uint256: uint256 [39006,39013]",
      "dest": "uint256: uint256 [33879,33886]"
    },
    {
      "src": "=: = [27051,27052]",
      "dest": "=: = [5377,5378]"
    },
    {
      "src": "uint256: uint256 [19378,19385]",
      "dest": "uint256: uint256 [13009,13016]"
    },
    {
      "src": "(: ( [17958,17959]",
      "dest": "(: ( [11682,11683]"
    },
    {
      "src": "string [74515,74544]",
      "dest": "string [17947,17979]"
    },
    {
      "src": "): ) [47329,47330]",
      "dest": "): ) [39958,39959]"
    },
    {
      "src": "address: address [29222,29229]",
      "dest": "address: address [27749,27756]"
    },
    {
      "src": "type_name [21790,21797]",
      "dest": "type_name [42783,42790]"
    },
    {
      "src": "primitive_type [16707,16714]",
      "dest": "primitive_type [10457,10464]"
    },
    {
      "src": "parameter [20630,20639]",
      "dest": "parameter [14235,14244]"
    },
    {
      "src": "function: function [26889,26897]",
      "dest": "function: function [5215,5223]"
    },
    {
      "src": "identifier: sub [16658,16661]",
      "dest": "identifier: sub [10408,10411]"
    },
    {
      "src": "number_literal: 0 [27061,27062]",
      "dest": "number_literal: 0 [5387,5388]"
    },
    {
      "src": "identifier: transferFrom [5258,5270]",
      "dest": "identifier: transferFrom [7557,7569]"
    },
    {
      "src": "function: function [3744,3752]",
      "dest": "function: function [6043,6051]"
    },
    {
      "src": "function_body [54030,54454]",
      "dest": "function_body [34477,34737]"
    },
    {
      "src": "address: address [85589,85596]",
      "dest": "address: address [24432,24439]"
    },
    {
      "src": "address: address [5560,5567]",
      "dest": "address: address [7859,7866]"
    },
    {
      "src": "function_definition [5249,5346]",
      "dest": "function_definition [7548,7645]"
    },
    {
      "src": "returns: returns [20694,20701]",
      "dest": "returns: returns [14299,14306]"
    },
    {
      "src": "primitive_type [7994,7998]",
      "dest": "primitive_type [25445,25449]"
    },
    {
      "src": "identifier: spender [86538,86545]",
      "dest": "identifier: spender [26923,26930]"
    },
    {
      "src": "call_argument [37724,37730]",
      "dest": "call_argument [28617,28623]"
    },
    {
      "src": "pragma_directive [15334,15357]",
      "dest": "pragma_directive [14395,14418]"
    },
    {
      "src": "number_literal: 20 [55260,55262]",
      "dest": "number_literal: 20 [42901,42903]"
    },
    {
      "src": "address: address [64455,64462]",
      "dest": "address: address [852,859]"
    },
    {
      "src": "state_mutability [87045,87049]",
      "dest": "state_mutability [43392,43396]"
    },
    {
      "src": "address: address [68241,68248]",
      "dest": "address: address [38839,38846]"
    },
    {
      "src": "primitive_type [53740,53747]",
      "dest": "primitive_type [29470,29477]"
    },
    {
      "src": "call_argument [54736,54754]",
      "dest": "call_argument [42879,42967]"
    },
    {
      "src": "type_name [19252,19259]",
      "dest": "type_name [12950,12957]"
    },
    {
      "src": "view: view [4165,4169]",
      "dest": "view: view [6464,6468]"
    },
    {
      "src": "(: ( [19346,19347]",
      "dest": "(: ( [12977,12978]"
    },
    {
      "src": "call_argument [68436,68469]",
      "dest": "call_argument [19758,19776]"
    },
    {
      "src": "]: ] [23824,23825]",
      "dest": "]: ] [1872,1873]"
    },
    {
      "src": "event_paramater [38266,38280]",
      "dest": "event_paramater [32745,32759]"
    },
    {
      "src": "solidity_pragma_token [14232,14247]",
      "dest": "solidity_pragma_token [31042,31057]"
    },
    {
      "src": "): ) [27331,27332]",
      "dest": "): ) [31424,31425]"
    },
    {
      "src": "event_definition [5523,5595]",
      "dest": "event_definition [7822,7894]"
    },
    {
      "src": "identifier: _attribute [9667,9677]",
      "dest": "identifier: _balances [29297,29306]"
    },
    {
      "src": "(: ( [75395,75396]",
      "dest": "(: ( [16953,16954]"
    },
    {
      "src": ",: , [86545,86546]",
      "dest": ",: , [26921,26922]"
    },
    {
      "src": "state_mutability [87221,87225]",
      "dest": "state_mutability [43577,43581]"
    },
    {
      "src": "\": \" [60480,60481]",
      "dest": "\": \" [25627,25628]"
    },
    {
      "src": "primitive_type [66953,66960]",
      "dest": "primitive_type [42043,42050]"
    },
    {
      "src": "identifier: BurnableTokenWithBounds [38189,38212]",
      "dest": "identifier: BurnableTokenWithBounds [32202,32225]"
    },
    {
      "src": "identifier: require [29202,29209]",
      "dest": "identifier: require [27728,27735]"
    },
    {
      "src": "emit: emit [53716,53720]",
      "dest": "emit: emit [29447,29451]"
    },
    {
      "src": "primitive_type [7955,7962]",
      "dest": "primitive_type [27584,27591]"
    },
    {
      "src": "assignment_expression [39109,39123]",
      "dest": "assignment_expression [34007,34021]"
    },
    {
      "src": "identifier: spender [86299,86306]",
      "dest": "identifier: spender [26197,26204]"
    },
    {
      "src": "solidity_pragma_token [22408,22423]",
      "dest": "solidity_pragma_token [41074,41089]"
    },
    {
      "src": "visibility [21398,21404]",
      "dest": "visibility [22834,22840]"
    },
    {
      "src": "(: ( [47224,47225]",
      "dest": "(: ( [39039,39040]"
    },
    {
      "src": "parameter [5287,5304]",
      "dest": "parameter [7586,7603]"
    },
    {
      "src": "identifier: require [54314,54321]",
      "dest": "identifier: require [34488,34495]"
    },
    {
      "src": "primitive_type [38266,38273]",
      "dest": "primitive_type [32745,32752]"
    },
    {
      "src": "solidity_version:  0.5.13 [12991,12998]",
      "dest": "solidity_version:  0.6.10 [21241,21248]"
    },
    {
      "src": "visibility [31321,31329]",
      "dest": "visibility [17872,17880]"
    },
    {
      "src": "call_argument [18593,18594]",
      "dest": "call_argument [12325,12326]"
    },
    {
      "src": "primitive_type [23000,23007]",
      "dest": "primitive_type [1078,1085]"
    },
    {
      "src": "): ) [34209,34210]",
      "dest": "): ) [24304,24305]"
    },
    {
      "src": "identifier: value [37181,37186]",
      "dest": "identifier: value [32486,32491]"
    },
    {
      "src": "!=: != [51757,51759]",
      "dest": "!=: != [28461,28463]"
    },
    {
      "src": "parameter [60231,60246]",
      "dest": "parameter [37145,37160]"
    },
    {
      "src": "internal: internal [17600,17608]",
      "dest": "internal: internal [11324,11332]"
    },
    {
      "src": "address: address [71304,71311]",
      "dest": "address: address [886,893]"
    },
    {
      "src": "\": \" [59206,59207]",
      "dest": "\": \" [26988,26989]"
    },
    {
      "src": "state_mutability [55939,55943]",
      "dest": "state_mutability [40946,40950]"
    },
    {
      "src": "type_name [23853,23860]",
      "dest": "type_name [1912,1919]"
    },
    {
      "src": "bool: bool [7994,7998]",
      "dest": "bool: bool [25445,25449]"
    },
    {
      "src": "): ) [75576,75577]",
      "dest": "): ) [19443,19444]"
    },
    {
      "src": "type_name [37205,37212]",
      "dest": "type_name [36646,36653]"
    },
    {
      "src": "library_declaration [15938,20786]",
      "dest": "library_declaration [9672,14391]"
    },
    {
      "src": "string [20063,20089]",
      "dest": "string [13702,13728]"
    },
    {
      "src": "address: address [21790,21797]",
      "dest": "address: address [42783,42790]"
    },
    {
      "src": "}: } [87189,87190]",
      "dest": "}: } [43536,43537]"
    },
    {
      "src": "identifier: burnMax [23015,23022]",
      "dest": "identifier: burnMax [1093,1100]"
    },
    {
      "src": "): ) [67881,67882]",
      "dest": "): ) [28079,28080]"
    },
    {
      "src": "primitive_type [37246,37253]",
      "dest": "primitive_type [36214,36221]"
    },
    {
      "src": "pragma: pragma [12976,12982]",
      "dest": "pragma: pragma [21226,21232]"
    },
    {
      "src": "variable_declaration [81866,81878]",
      "dest": "variable_declaration [19884,19896]"
    },
    {
      "src": "number_literal: 2 [87008,87009]",
      "dest": "number_literal: 2 [43346,43347]"
    },
    {
      "src": "{: { [26939,26940]",
      "dest": "{: { [5265,5266]"
    },
    {
      "src": "return_type_definition [4916,4930]",
      "dest": "return_type_definition [7215,7229]"
    },
    {
      "src": "identifier: symbol_Deprecated [23104,23121]",
      "dest": "identifier: symbol_Deprecated [1185,1202]"
    },
    {
      "src": "uint256: uint256 [5823,5830]",
      "dest": "uint256: uint256 [8122,8129]"
    },
    {
      "src": "type_name [62552,62559]",
      "dest": "type_name [39728,39735]"
    },
    {
      "src": "type_name [21083,21090]",
      "dest": "type_name [18820,18827]"
    },
    {
      "src": "identifier: newMax [38290,38296]",
      "dest": "identifier: newMax [32769,32775]"
    },
    {
      "src": "address: address [62125,62132]",
      "dest": "address: address [40226,40233]"
    },
    {
      "src": "solidity_pragma_token [25514,25529]",
      "dest": "solidity_pragma_token [43015,43030]"
    },
    {
      "src": "function_definition [19968,20098]",
      "dest": "function_definition [13607,13737]"
    },
    {
      "src": "expression_statement [16299,16346]",
      "dest": "expression_statement [10041,10088]"
    },
    {
      "src": "(: ( [27652,27653]",
      "dest": "(: ( [31840,31841]"
    },
    {
      "src": "function_definition [4105,4188]",
      "dest": "function_definition [6404,6487]"
    },
    {
      "src": "identifier: b [19198,19199]",
      "dest": "identifier: b [12896,12897]"
    },
    {
      "src": "): ) [10207,10208]",
      "dest": "): ) [24783,24784]"
    },
    {
      "src": ".: . [37719,37720]",
      "dest": ".: . [28612,28613]"
    },
    {
      "src": "visibility [3797,3805]",
      "dest": "visibility [6096,6104]"
    },
    {
      "src": "type_name [86947,86952]",
      "dest": "type_name [43285,43290]"
    },
    {
      "src": "internal: internal [67051,67059]",
      "dest": "internal: internal [42118,42126]"
    },
    {
      "src": "): ) [39032,39033]",
      "dest": "): ) [33905,33906]"
    },
    {
      "src": "type_name [65483,65490]",
      "dest": "type_name [19337,19344]"
    },
    {
      "src": "return_type_definition [3341,3358]",
      "dest": "return_type_definition [5640,5657]"
    },
    {
      "src": ".: . [27389,27390]",
      "dest": ".: . [31482,31483]"
    },
    {
      "src": "state_mutability [9412,9416]",
      "dest": "state_mutability [8857,8861]"
    },
    {
      "src": "event_paramater [38282,38296]",
      "dest": "event_paramater [32761,32775]"
    },
    {
      "src": "identifier: attributes [23442,23452]",
      "dest": "identifier: attributes_Deprecated [1525,1546]"
    },
    {
      "src": "function_definition [18504,18636]",
      "dest": "function_definition [12236,12368]"
    },
    {
      "src": "type_name [5538,5545]",
      "dest": "type_name [7837,7844]"
    },
    {
      "src": "identifier: ProxyStorage [25760,25772]",
      "dest": "identifier: ProxyStorage [3898,3910]"
    },
    {
      "src": "identifier: spender [86070,86077]",
      "dest": "identifier: spender [39994,40001]"
    },
    {
      "src": "uint256: uint256 [16707,16714]",
      "dest": "uint256: uint256 [10457,10464]"
    },
    {
      "src": "comment: //may be disabled by setting both to 0 (this will not be done under normal [38637,38711]",
      "dest": "comment: /**      * @dev Emitted when new burn bounds were set      * @param newMin new minimum burn amount      * @param newMax new maximum burn amount      * @notice `newMin` should never be greater than `newMax`      */ [32501,32719]"
    },
    {
      "src": "type_name [23432,23439]",
      "dest": "type_name [1515,1522]"
    },
    {
      "src": "\": \" [55635,55636]",
      "dest": "\": \" [28476,28477]"
    },
    {
      "src": "\": \" [20088,20089]",
      "dest": "\": \" [13727,13728]"
    },
    {
      "src": "string [38408,38430]",
      "dest": "string [37241,37279]"
    },
    {
      "src": "visibility [22975,22981]",
      "dest": "visibility [1053,1059]"
    },
    {
      "src": "parameter [61273,61288]",
      "dest": "parameter [34418,34433]"
    },
    {
      "src": "primitive_type [23853,23860]",
      "dest": "primitive_type [1912,1919]"
    },
    {
      "src": "): ) [39188,39189]",
      "dest": "): ) [34086,34087]"
    },
    {
      "src": "): ) [3325,3326]",
      "dest": "): ) [5624,5625]"
    },
    {
      "src": "uint256: uint256 [16662,16669]",
      "dest": "uint256: uint256 [10412,10419]"
    },
    {
      "src": "(: ( [57841,57842]",
      "dest": "(: ( [29181,29182]"
    },
    {
      "src": "expression_statement [17951,18008]",
      "dest": "expression_statement [11675,11732]"
    },
    {
      "src": "primitive_type [5798,5805]",
      "dest": "primitive_type [8097,8104]"
    },
    {
      "src": "type_name [10710,10717]",
      "dest": "type_name [23894,23901]"
    },
    {
      "src": "state_variable_declaration [23224,23271]",
      "dest": "state_variable_declaration [1308,1359]"
    },
    {
      "src": "primitive_type [10148,10155]",
      "dest": "primitive_type [24713,24720]"
    },
    {
      "src": ",: , [62140,62141]",
      "dest": ",: , [40241,40242]"
    },
    {
      "src": "call_expression [52362,52417]",
      "dest": "call_expression [28523,28572]"
    },
    {
      "src": "primitive_type [4874,4881]",
      "dest": "primitive_type [7173,7180]"
    },
    {
      "src": "address: address [75564,75571]",
      "dest": "address: address [19431,19438]"
    },
    {
      "src": "identifier: require [20723,20730]",
      "dest": "identifier: require [14328,14335]"
    },
    {
      "src": ",: , [86184,86185]",
      "dest": ",: , [26111,26112]"
    },
    {
      "src": "parameter [5340,5344]",
      "dest": "parameter [7639,7643]"
    },
    {
      "src": "!=: != [29219,29221]",
      "dest": "!=: != [27746,27748]"
    },
    {
      "src": "): ) [14064,14065]",
      "dest": "): ) [27674,27675]"
    },
    {
      "src": "primitive_type [75261,75268]",
      "dest": "primitive_type [16676,16691]"
    },
    {
      "src": "binary_expression [54736,54754]",
      "dest": "binary_expression [42907,42936]"
    },
    {
      "src": "): ) [17598,17599]",
      "dest": "): ) [11322,11323]"
    },
    {
      "src": "address: address [37149,37156]",
      "dest": "address: address [32454,32461]"
    },
    {
      "src": "address: address [23498,23505]",
      "dest": "address: address [1974,1981]"
    },
    {
      "src": "identifier: account [59304,59311]",
      "dest": "identifier: account [34676,34683]"
    },
    {
      "src": "parameter [10655,10667]",
      "dest": "parameter [23847,23862]"
    },
    {
      "src": "(: ( [33192,33193]",
      "dest": "(: ( [15162,15163]"
    },
    {
      "src": "type_name [32364,32371]",
      "dest": "type_name [1211,1218]"
    },
    {
      "src": "identifier: _increaseAllowanceAllArgs [86273,86298]",
      "dest": "identifier: _approve [26174,26182]"
    },
    {
      "src": "function_definition [10628,10779]",
      "dest": "function_definition [23828,23947]"
    },
    {
      "src": "(: ( [81901,81902]",
      "dest": "(: ( [19955,19956]"
    },
    {
      "src": "identifier: _to [27328,27331]",
      "dest": "identifier: _to [31421,31424]"
    },
    {
      "src": "type_name [20652,20658]",
      "dest": "type_name [14257,14263]"
    },
    {
      "src": "uint256: uint256 [10710,10717]",
      "dest": "uint256: uint256 [23894,23901]"
    },
    {
      "src": "call_expression [55376,55437]",
      "dest": "call_expression [30031,30099]"
    },
    {
      "src": "identifier: b [17939,17940]",
      "dest": "identifier: b [11663,11664]"
    },
    {
      "src": "type_name [17268,17275]",
      "dest": "type_name [10984,10991]"
    },
    {
      "src": "primitive_type [23571,23578]",
      "dest": "primitive_type [1634,1641]"
    },
    {
      "src": "\": \" [59233,59234]",
      "dest": "\": \" [27026,27027]"
    },
    {
      "src": "\": \" [68471,68472]",
      "dest": "\": \" [19778,19779]"
    },
    {
      "src": "): ) [87036,87037]",
      "dest": "): ) [43374,43375]"
    },
    {
      "src": "uint256: uint256 [37246,37253]",
      "dest": "uint256: uint256 [36214,36221]"
    },
    {
      "src": "primitive_type [85574,85581]",
      "dest": "primitive_type [24417,24424]"
    },
    {
      "src": "type_name [67005,67012]",
      "dest": "type_name [42096,42103]"
    },
    {
      "src": "visibility [22928,22935]",
      "dest": "visibility [1006,1013]"
    },
    {
      "src": "internal: internal [17185,17193]",
      "dest": "internal: internal [10901,10909]"
    },
    {
      "src": "parameter [10710,10717]",
      "dest": "parameter [23894,23901]"
    },
    {
      "src": "identifier: errorMessage [19354,19366]",
      "dest": "identifier: errorMessage [12985,12997]"
    },
    {
      "src": "identifier: mul [17574,17577]",
      "dest": "identifier: mul [11298,11301]"
    },
    {
      "src": "string [47244,47266]",
      "dest": "string [39067,39107]"
    },
    {
      "src": "comment: //operation, but we can't add checks to disallow it without losing a lot of [38717,38792]",
      "dest": "comment: /**      * @dev Destroys `amount` tokens from `msg.sender`, reducing the      * total supply.      * @param amount amount of tokens to burn      *      * Emits a {Transfer} event with `to` set to the zero address.      * Emits a {Burn} event with `burner` set to `msg.sender`      *      * Requirements      *      * - `msg.sender` must have at least `amount` tokens.      *      */ [32785,33179]"
    },
    {
      "src": "function: function [87018,87026]",
      "dest": "function: function [43356,43364]"
    },
    {
      "src": "indexed: indexed [52496,52503]",
      "dest": "indexed: indexed [36415,36422]"
    },
    {
      "src": "=: = [27627,27628]",
      "dest": "=: = [31815,31816]"
    },
    {
      "src": "primitive_type [6004,6011]",
      "dest": "primitive_type [15425,15432]"
    },
    {
      "src": "identifier: value [86079,86084]",
      "dest": "identifier: value [19559,19564]"
    },
    {
      "src": "indexed: indexed [5783,5790]",
      "dest": "indexed: indexed [8082,8089]"
    },
    {
      "src": "}: } [26332,26333]",
      "dest": "}: } [4629,4630]"
    },
    {
      "src": "function: function [27532,27540]",
      "dest": "function: function [31720,31728]"
    },
    {
      "src": "identifier: a [18593,18594]",
      "dest": "identifier: a [12325,12326]"
    },
    {
      "src": "): ) [3513,3514]",
      "dest": "): ) [5812,5813]"
    },
    {
      "src": "(: ( [26046,26047]",
      "dest": "(: ( [4341,4342]"
    },
    {
      "src": "parameter [10203,10207]",
      "dest": "parameter [24779,24783]"
    },
    {
      "src": "}: } [23781,23782]",
      "dest": "}: } [1829,1830]"
    },
    {
      "src": "type_name [68241,68248]",
      "dest": "type_name [38839,38846]"
    },
    {
      "src": "solidity_version:  0.5.13 [22416,22423]",
      "dest": "solidity_version:  0.6.10 [41082,41089]"
    },
    {
      "src": "struct: struct [23723,23729]",
      "dest": "struct: struct [1745,1751]"
    },
    {
      "src": "returns: returns [34119,34126]",
      "dest": "returns: returns [24237,24244]"
    },
    {
      "src": "\": \" [55809,55810]",
      "dest": "\": \" [29220,29221]"
    },
    {
      "src": "call_argument [37806,37807]",
      "dest": "call_argument [28719,28720]"
    },
    {
      "src": "): ) [37452,37453]",
      "dest": "): ) [28415,28416]"
    },
    {
      "src": ",: , [54361,54362]",
      "dest": ",: , [34513,34514]"
    },
    {
      "src": "state_mutability [20012,20016]",
      "dest": "state_mutability [13651,13655]"
    },
    {
      "src": "comment: /**      * @dev Moves `amount` tokens from the caller's account to `recipient`.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * Emits a {Transfer} event.      */ [3523,3738]",
      "dest": "comment: /**      * @dev Moves `amount` tokens from the caller's account to `recipient`.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * Emits a {Transfer} event.      */ [5822,6037]"
    },
    {
      "src": "type_name [46031,46038]",
      "dest": "type_name [36251,36258]"
    },
    {
      "src": "string [55797,55810]",
      "dest": "string [29186,29221]"
    },
    {
      "src": "call_argument [67554,67560]",
      "dest": "call_argument [42533,42539]"
    },
    {
      "src": "<: < [48640,48641]",
      "dest": "<: < [41001,41002]"
    },
    {
      "src": "member_expression [27363,27375]",
      "dest": "member_expression [31456,31468]"
    },
    {
      "src": "mapping: mapping [23612,23619]",
      "dest": "mapping: mapping [1686,1693]"
    },
    {
      "src": "false [22908,22913]",
      "dest": "false [986,991]"
    },
    {
      "src": "number_literal: 0 [53593,53594]",
      "dest": "number_literal: 0 [18390,18391]"
    },
    {
      "src": "return: return [87358,87364]",
      "dest": "return: return [43723,43729]"
    },
    {
      "src": "identifier: a [16214,16215]",
      "dest": "identifier: a [9956,9957]"
    },
    {
      "src": "address: address [58403,58410]",
      "dest": "address: address [37745,37752]"
    },
    {
      "src": "address: address [21720,21727]",
      "dest": "address: address [1438,1445]"
    },
    {
      "src": "state_variable_declaration [23097,23122]",
      "dest": "state_variable_declaration [1178,1203]"
    },
    {
      "src": "): ) [37186,37187]",
      "dest": "): ) [32491,32492]"
    },
    {
      "src": "): ) [3819,3820]",
      "dest": "): ) [6118,6119]"
    },
    {
      "src": "}: } [26147,26148]",
      "dest": "}: } [4442,4443]"
    },
    {
      "src": "internal: internal [31709,31717]",
      "dest": "internal: internal [18870,18878]"
    },
    {
      "src": "type_name [18562,18569]",
      "dest": "type_name [12294,12301]"
    },
    {
      "src": "(: ( [17207,17208]",
      "dest": "(: ( [10923,10924]"
    },
    {
      "src": "expression_statement [14035,14067]",
      "dest": "expression_statement [27647,27718]"
    },
    {
      "src": "string_literal [73619,73662]",
      "dest": "string_literal [16780,16811]"
    },
    {
      "src": "return_type_definition [19243,19260]",
      "dest": "return_type_definition [12941,12958]"
    },
    {
      "src": "identifier: totalSupply_ [53606,53618]",
      "dest": "identifier: _totalSupply [29397,29409]"
    },
    {
      "src": "type_name [5560,5567]",
      "dest": "type_name [7859,7866]"
    },
    {
      "src": "primitive_type [22019,22026]",
      "dest": "primitive_type [42068,42075]"
    },
    {
      "src": "variable_declaration_tuple [83008,83039]",
      "dest": "variable_declaration_tuple [16903,16919]"
    },
    {
      "src": "solidity_version:  0.5.13 [14240,14247]",
      "dest": "solidity_version:  0.6.10 [31050,31057]"
    },
    {
      "src": "expression_statement [48134,48187]",
      "dest": "expression_statement [38951,39022]"
    },
    {
      "src": "primitive_type [19179,19186]",
      "dest": "primitive_type [12877,12884]"
    },
    {
      "src": "type_name [71304,71311]",
      "dest": "type_name [886,893]"
    },
    {
      "src": "return_type_definition [20694,20711]",
      "dest": "return_type_definition [14299,14316]"
    },
    {
      "src": "string: string [17157,17163]",
      "dest": "string: string [10873,10879]"
    },
    {
      "src": "boolean_literal [34228,34232]",
      "dest": "boolean_literal [24853,24857]"
    },
    {
      "src": "(: ( [33142,33143]",
      "dest": "(: ( [33198,33199]"
    },
    {
      "src": "emit: emit [59701,59705]",
      "dest": "emit: emit [37422,37426]"
    },
    {
      "src": "address: address [77281,77288]",
      "dest": "address: address [30129,30136]"
    },
    {
      "src": "function_body [26752,26794]",
      "dest": "function_body [5076,5118]"
    },
    {
      "src": "return: return [16727,16733]",
      "dest": "return: return [10477,10483]"
    },
    {
      "src": "identifier: pendingOwner [22716,22728]",
      "dest": "identifier: pendingOwner [806,818]"
    },
    {
      "src": "state_mutability [16693,16697]",
      "dest": "state_mutability [10443,10447]"
    },
    {
      "src": "string [54915,54928]",
      "dest": "string [27761,27798]"
    },
    {
      "src": "type_cast_expression [57834,57844]",
      "dest": "type_cast_expression [29174,29184]"
    },
    {
      "src": "modifier_definition [14629,14723]",
      "dest": "modifier_definition [4739,4855]"
    },
    {
      "src": "parameter [39020,39032]",
      "dest": "parameter [33893,33905]"
    },
    {
      "src": "primitive_type [62933,62940]",
      "dest": "primitive_type [33199,33206]"
    },
    {
      "src": "visibility [85606,85612]",
      "dest": "visibility [24449,24455]"
    },
    {
      "src": "pragma_directive [58,81]",
      "dest": "pragma_directive [402,425]"
    },
    {
      "src": "identifier: amount [59731,59737]",
      "dest": "identifier: amount [37441,37447]"
    },
    {
      "src": "): ) [25889,25890]",
      "dest": "): ) [4181,4182]"
    },
    {
      "src": "assignment_expression [53606,53647]",
      "dest": "assignment_expression [29397,29436]"
    },
    {
      "src": "): ) [16776,16777]",
      "dest": "): ) [10526,10527]"
    },
    {
      "src": "state_mutability [46176,46180]",
      "dest": "state_mutability [42835,42839]"
    },
    {
      "src": "string [26300,26312]",
      "dest": "string [4597,4609]"
    },
    {
      "src": "(: ( [67849,67850]",
      "dest": "(: ( [28053,28054]"
    },
    {
      "src": "\": \" [73741,73742]",
      "dest": "\": \" [19005,19006]"
    },
    {
      "src": "uint256: uint256 [9005,9012]",
      "dest": "uint256: uint256 [26113,26120]"
    },
    {
      "src": "inheritance_specifier [25760,25772]",
      "dest": "inheritance_specifier [3898,3910]"
    },
    {
      "src": "event: event [37194,37199]",
      "dest": "event: event [36635,36640]"
    },
    {
      "src": "state_mutability [10696,10700]",
      "dest": "state_mutability [23871,23875]"
    },
    {
      "src": "type_name [9426,9433]",
      "dest": "type_name [24487,24494]"
    },
    {
      "src": "primitive_type [22920,22927]",
      "dest": "primitive_type [998,1005]"
    },
    {
      "src": "public: public [22975,22981]",
      "dest": "public: public [1053,1059]"
    },
    {
      "src": "primitive_type [32364,32371]",
      "dest": "primitive_type [1211,1218]"
    },
    {
      "src": "(: ( [38265,38266]",
      "dest": "(: ( [32744,32745]"
    },
    {
      "src": "(: ( [87308,87309]",
      "dest": "(: ( [43664,43665]"
    },
    {
      "src": "identifier: mod [19977,19980]",
      "dest": "identifier: mod [13616,13619]"
    },
    {
      "src": "returns: returns [33184,33191]",
      "dest": "returns: returns [15154,15161]"
    },
    {
      "src": "identifier: pendingOwner [26763,26775]",
      "dest": "identifier: pendingOwner [5087,5099]"
    },
    {
      "src": "uint256: uint256 [4891,4898]",
      "dest": "uint256: uint256 [7190,7197]"
    },
    {
      "src": "visibility [67051,67059]",
      "dest": "visibility [42118,42126]"
    },
    {
      "src": "function_definition [33126,33285]",
      "dest": "function_definition [33185,33268]"
    },
    {
      "src": "\": \" [55665,55666]",
      "dest": "\": \" [28508,28509]"
    },
    {
      "src": "string [55635,55666]",
      "dest": "string [28476,28509]"
    },
    {
      "src": "type_name [54024,54028]",
      "dest": "type_name [38331,38335]"
    },
    {
      "src": "visibility [62173,62181]",
      "dest": "visibility [40259,40267]"
    },
    {
      "src": "(: ( [53747,53748]",
      "dest": "(: ( [29477,29478]"
    },
    {
      "src": "comment: // File: contracts/TrueReward/FinancialOpportunity.sol [188,242]",
      "dest": "comment: /**  * Defines the storage layout of the token implementation contract. Any  * newly declared state variables in future upgrades should be appended  * to the bottom. Never remove state variables from this list, however variables  * can be renamed. Please add _Deprecated to deprecated variables.  */ [429,733]"
    },
    {
      "src": "type_name [16206,16213]",
      "dest": "type_name [9948,9955]"
    },
    {
      "src": "uint256: uint256 [3506,3513]",
      "dest": "uint256: uint256 [5805,5812]"
    },
    {
      "src": "identifier: sender [68249,68255]",
      "dest": "identifier: sender [38847,38853]"
    },
    {
      "src": "call_argument [27653,27657]",
      "dest": "call_argument [31841,31845]"
    },
    {
      "src": "comment: // A wrapper around the balanceOf mapping. [20888,20930]",
      "dest": "comment: /**  * @title BurnableTokenWithBounds  * @dev Burning functions as redeeming money from the system.  * The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */ [31928,32182]"
    },
    {
      "src": "boolean_literal [86349,86353]",
      "dest": "boolean_literal [26275,26279]"
    },
    {
      "src": "call_argument [9695,9701]",
      "dest": "call_argument [29341,29347]"
    },
    {
      "src": "primitive_type [20026,20033]",
      "dest": "primitive_type [13665,13672]"
    },
    {
      "src": "event_paramater [52513,52528]",
      "dest": "event_paramater [36432,36450]"
    },
    {
      "src": "library: library [15938,15945]",
      "dest": "library: library [9672,9679]"
    },
    {
      "src": "function: function [10126,10134]",
      "dest": "function: function [24696,24704]"
    },
    {
      "src": "address: address [22204,22211]",
      "dest": "address: address [19302,19309]"
    },
    {
      "src": "visibility [26735,26741]",
      "dest": "visibility [5059,5065]"
    },
    {
      "src": "): ) [87212,87213]",
      "dest": "): ) [43559,43560]"
    },
    {
      "src": "==: == [17965,17967]",
      "dest": "==: == [11689,11691]"
    },
    {
      "src": "call_argument [86308,86318]",
      "dest": "call_argument [26245,26255]"
    },
    {
      "src": "(: ( [54322,54323]",
      "dest": "(: ( [34495,34496]"
    },
    {
      "src": "return_statement [87077,87093]",
      "dest": "return_statement [43424,43440]"
    },
    {
      "src": "address: address [22019,22026]",
      "dest": "address: address [42068,42075]"
    },
    {
      "src": ".: . [33247,33248]",
      "dest": ".: . [33244,33245]"
    },
    {
      "src": "return: return [18582,18588]",
      "dest": "return: return [12314,12320]"
    },
    {
      "src": "identifier: amount [62669,62675]",
      "dest": "identifier: amount [27914,27920]"
    },
    {
      "src": "parameter [85574,85587]",
      "dest": "parameter [24417,24430]"
    },
    {
      "src": "uint256: uint256 [17135,17142]",
      "dest": "uint256: uint256 [10851,10858]"
    },
    {
      "src": "function_definition [26889,27071]",
      "dest": "function_definition [5215,5397]"
    },
    {
      "src": "primitive_type [39006,39013]",
      "dest": "primitive_type [33879,33886]"
    },
    {
      "src": "internal: internal [20680,20688]",
      "dest": "internal: internal [14285,14293]"
    },
    {
      "src": "number_literal: 0 [22992,22993]",
      "dest": "number_literal: 0 [1070,1071]"
    },
    {
      "src": "expression_statement [27670,27699]",
      "dest": "expression_statement [31858,31887]"
    },
    {
      "src": ",: , [55795,55796]",
      "dest": ",: , [29184,29185]"
    },
    {
      "src": "type_cast_expression [77281,77291]",
      "dest": "type_cast_expression [30129,30139]"
    },
    {
      "src": "return: return [33266,33272]",
      "dest": "return: return [25641,25647]"
    },
    {
      "src": "identifier: account [58411,58418]",
      "dest": "identifier: account [37753,37760]"
    },
    {
      "src": "parameter [87149,87154]",
      "dest": "parameter [43496,43501]"
    },
    {
      "src": "call_argument [61765,61771]",
      "dest": "call_argument [40392,40398]"
    },
    {
      "src": "primitive_type [23168,23175]",
      "dest": "primitive_type [1252,1259]"
    },
    {
      "src": "identifier: spender [4147,4154]",
      "dest": "identifier: spender [6446,6453]"
    },
    {
      "src": "event: event [37138,37143]",
      "dest": "event: event [32443,32448]"
    },
    {
      "src": "identifier: sender [66961,66967]",
      "dest": "identifier: sender [42051,42057]"
    },
    {
      "src": "identifier: BurnableTokenWithBounds [45848,45871]",
      "dest": "identifier: BurnableTokenWithBounds [36183,36206]"
    },
    {
      "src": "): ) [20001,20002]",
      "dest": "): ) [13640,13641]"
    },
    {
      "src": "call_argument [16307,16313]",
      "dest": "call_argument [10049,10055]"
    },
    {
      "src": "call_expression [86273,86331]",
      "dest": "call_expression [26174,26257]"
    },
    {
      "src": "identifier: _min [39072,39076]",
      "dest": "identifier: _min [33945,33949]"
    },
    {
      "src": "return_statement [86586,86598]",
      "dest": "return_statement [27040,27052]"
    },
    {
      "src": "public: public [86462,86468]",
      "dest": "public: public [26859,26865]"
    },
    {
      "src": "emit_statement [39159,39190]",
      "dest": "emit_statement [34057,34088]"
    },
    {
      "src": "binary_expression [20770,20775]",
      "dest": "binary_expression [14375,14380]"
    },
    {
      "src": "address: address [27053,27060]",
      "dest": "address: address [5379,5386]"
    },
    {
      "src": "identifier: b [20774,20775]",
      "dest": "identifier: b [14379,14380]"
    },
    {
      "src": "identifier: oldValue [53752,53760]",
      "dest": "identifier: amount [29482,29488]"
    },
    {
      "src": "call_argument [53752,53760]",
      "dest": "call_argument [29482,29488]"
    },
    {
      "src": "state_variable_declaration [84932,85008]",
      "dest": "state_variable_declaration [1113,1141]"
    },
    {
      "src": "type_name [39006,39013]",
      "dest": "type_name [33879,33886]"
    },
    {
      "src": "): ) [38296,38297]",
      "dest": "): ) [32775,32776]"
    },
    {
      "src": "uint256: uint256 [75274,75281]",
      "dest": "uint256: uint256 [16703,16710]"
    },
    {
      "src": "uint256: uint256 [32364,32371]",
      "dest": "uint256: uint256 [1211,1218]"
    },
    {
      "src": "identifier: _value [6032,6038]",
      "dest": "identifier: weiValue [19670,19678]"
    },
    {
      "src": "primitive_type [10655,10662]",
      "dest": "primitive_type [23847,23854]"
    },
    {
      "src": "call_argument [75572,75576]",
      "dest": "call_argument [19439,19443]"
    },
    {
      "src": "variable_declaration [17268,17277]",
      "dest": "variable_declaration [10984,10993]"
    },
    {
      "src": "expression_statement [19339,19368]",
      "dest": "expression_statement [12970,12999]"
    },
    {
      "src": "=>: => [21708,21710]",
      "dest": "=>: => [1427,1429]"
    },
    {
      "src": "return: return [16358,16364]",
      "dest": "return: return [10100,10106]"
    },
    {
      "src": "return_type_definition [3497,3514]",
      "dest": "return_type_definition [5796,5813]"
    },
    {
      "src": "expression_statement [26067,26086]",
      "dest": "expression_statement [4362,4381]"
    },
    {
      "src": "string [39086,39097]",
      "dest": "string [33959,33995]"
    },
    {
      "src": "contract: contract [86883,86891]",
      "dest": "contract: contract [43226,43234]"
    },
    {
      "src": "identifier: this [27384,27388]",
      "dest": "identifier: this [31477,31481]"
    },
    {
      "src": "string: string [87235,87241]",
      "dest": "string: string [43591,43597]"
    },
    {
      "src": "primitive_type [46842,46849]",
      "dest": "primitive_type [22559,22566]"
    },
    {
      "src": "): ) [62171,62172]",
      "dest": "): ) [40257,40258]"
    },
    {
      "src": "public: public [86223,86229]",
      "dest": "public: public [26133,26139]"
    },
    {
      "src": "identifier: b [17236,17237]",
      "dest": "identifier: b [10952,10953]"
    },
    {
      "src": "variable_declaration_statement [19378,19396]",
      "dest": "variable_declaration_statement [13009,13027]"
    },
    {
      "src": "expression_statement [26324,26326]",
      "dest": "expression_statement [4621,4623]"
    },
    {
      "src": "\": \" [68723,68724]",
      "dest": "\": \" [17044,17045]"
    },
    {
      "src": "identifier: _to [55252,55255]",
      "dest": "identifier: recipient [42887,42896]"
    },
    {
      "src": "{: { [39053,39054]",
      "dest": "{: { [33926,33927]"
    },
    {
      "src": "primitive_type [7935,7942]",
      "dest": "primitive_type [15452,15459]"
    },
    {
      "src": "parameter [75274,75288]",
      "dest": "parameter [16703,16717]"
    },
    {
      "src": "function_definition [20617,20783]",
      "dest": "function_definition [14222,14388]"
    },
    {
      "src": "function: function [26690,26698]",
      "dest": "function: function [5014,5022]"
    },
    {
      "src": "mapping: mapping [23563,23570]",
      "dest": "mapping: mapping [1626,1633]"
    },
    {
      "src": "mapping: mapping [23412,23419]",
      "dest": "mapping: mapping [1496,1503]"
    },
    {
      "src": "\": \" [51798,51799]",
      "dest": "\": \" [39852,39853]"
    },
    {
      "src": "emit_statement [26096,26141]",
      "dest": "emit_statement [4391,4436]"
    },
    {
      "src": "(: ( [27060,27061]",
      "dest": "(: ( [5386,5387]"
    },
    {
      "src": "(: ( [75683,75684]",
      "dest": "(: ( [16754,16755]"
    },
    {
      "src": "): ) [4154,4155]",
      "dest": "): ) [6453,6454]"
    },
    {
      "src": "number_literal: 0 [52029,52030]",
      "dest": "number_literal: 0 [29273,29274]"
    },
    {
      "src": "type_name [27568,27575]",
      "dest": "type_name [31756,31763]"
    },
    {
      "src": "number_literal: 0 [26130,26131]",
      "dest": "number_literal: 0 [4425,4426]"
    },
    {
      "src": "uint256: uint256 [156,163]",
      "dest": "uint256: uint256 [18855,18862]"
    },
    {
      "src": "primitive_type [10710,10717]",
      "dest": "primitive_type [23894,23901]"
    },
    {
      "src": "binary_expression [17280,17285]",
      "dest": "binary_expression [10996,11001]"
    },
    {
      "src": "parameter [6024,6038]",
      "dest": "parameter [19662,19678]"
    },
    {
      "src": "function_definition [16193,16374]",
      "dest": "function_definition [9935,10116]"
    },
    {
      "src": "event_definition [37138,37188]",
      "dest": "event_definition [32443,32493]"
    },
    {
      "src": "}: } [86604,86605]",
      "dest": "}: } [27058,27059]"
    },
    {
      "src": "=>: => [23804,23806]",
      "dest": "=>: => [1852,1854]"
    },
    {
      "src": "identifier: account [62543,62550]",
      "dest": "identifier: account [40928,40935]"
    },
    {
      "src": "call_argument [47225,47242]",
      "dest": "call_argument [39040,39065]"
    },
    {
      "src": "(: ( [27644,27645]",
      "dest": "(: ( [31832,31833]"
    },
    {
      "src": "user_defined_type [86903,86924]",
      "dest": "user_defined_type [43246,43277]"
    },
    {
      "src": "identifier: initialized [22742,22753]",
      "dest": "identifier: initialized [832,843]"
    },
    {
      "src": "(: ( [87148,87149]",
      "dest": "(: ( [43495,43496]"
    },
    {
      "src": "}: } [27073,27074]",
      "dest": "}: } [5399,5400]"
    },
    {
      "src": "modifier_invocation [27590,27599]",
      "dest": "modifier_invocation [31778,31787]"
    },
    {
      "src": "identifier: ReclaimerToken [27172,27186]",
      "dest": "identifier: ReclaimerToken [31215,31229]"
    },
    {
      "src": ">>: >> [54749,54751]",
      "dest": ">>: >> [42931,42933]"
    },
    {
      "src": "internal: internal [7971,7979]",
      "dest": "internal: internal [15140,15148]"
    },
    {
      "src": "solidity_pragma_token [65,80]",
      "dest": "solidity_pragma_token [409,424]"
    },
    {
      "src": "return: return [17298,17304]",
      "dest": "return: return [11014,11020]"
    },
    {
      "src": "identifier: Transfer [53721,53729]",
      "dest": "identifier: Transfer [29452,29460]"
    },
    {
      "src": "identifier: this [75684,75688]",
      "dest": "identifier: this [16755,16759]"
    },
    {
      "src": "}: } [11112,11113]",
      "dest": "}: } [23764,23765]"
    },
    {
      "src": "identifier: spender [86411,86418]",
      "dest": "identifier: spender [26825,26832]"
    },
    {
      "src": "\": \" [74515,74516]",
      "dest": "\": \" [17947,17948]"
    },
    {
      "src": "function_body [17632,18036]",
      "dest": "function_body [11356,11760]"
    },
    {
      "src": "): ) [21738,21739]",
      "dest": "): ) [1456,1457]"
    },
    {
      "src": "visibility [87311,87317]",
      "dest": "visibility [43667,43673]"
    },
    {
      "src": "(: ( [20025,20026]",
      "dest": "(: ( [13664,13665]"
    },
    {
      "src": "return_statement [10730,10772]",
      "dest": "return_statement [23914,23940]"
    },
    {
      "src": "identifier: balance [27390,27397]",
      "dest": "identifier: balance [31483,31490]"
    },
    {
      "src": "address: address [46842,46849]",
      "dest": "address: address [22559,22566]"
    },
    {
      "src": "\": \" [26311,26312]",
      "dest": "\": \" [4608,4609]"
    },
    {
      "src": "visibility [54541,54549]",
      "dest": "visibility [27619,27627]"
    },
    {
      "src": "}: } [5840,5841]",
      "dest": "}: } [8139,8140]"
    },
    {
      "src": "identifier: a [19187,19188]",
      "dest": "identifier: a [12885,12886]"
    },
    {
      "src": "function_body [27352,27406]",
      "dest": "function_body [31445,31499]"
    },
    {
      "src": "returns: returns [10194,10201]",
      "dest": "returns: returns [24770,24777]"
    },
    {
      "src": "): ) [55002,55003]",
      "dest": "): ) [27962,27963]"
    },
    {
      "src": "address: address [26122,26129]",
      "dest": "address: address [4417,4424]"
    },
    {
      "src": "call_argument [26130,26131]",
      "dest": "call_argument [4425,4426]"
    },
    {
      "src": "function_definition [53367,53769]",
      "dest": "function_definition [29079,29497]"
    },
    {
      "src": "type_name [54573,54577]",
      "dest": "type_name [2030,2034]"
    },
    {
      "src": "uint256: uint256 [16251,16258]",
      "dest": "uint256: uint256 [9993,10000]"
    },
    {
      "src": "primitive_type [65471,65478]",
      "dest": "primitive_type [30980,30987]"
    },
    {
      "src": "pure: pure [87318,87322]",
      "dest": "pure: pure [43683,43687]"
    },
    {
      "src": "\": \" [87365,87366]",
      "dest": "\": \" [43730,43731]"
    },
    {
      "src": "pure: pure [19238,19242]",
      "dest": "pure: pure [12936,12940]"
    },
    {
      "src": "identifier: blacklisted [53847,53858]",
      "dest": "identifier: _isBlacklisted [37767,37781]"
    },
    {
      "src": "identifier: _from [37791,37796]",
      "dest": "identifier: amount [28732,28738]"
    },
    {
      "src": "=: = [37705,37706]",
      "dest": "=: = [28598,28599]"
    },
    {
      "src": "identifier: minimumGasPriceForFutureRefunds [23239,23270]",
      "dest": "identifier: minimumGasPriceForFutureRefunds_Deprecated [1316,1358]"
    },
    {
      "src": "function_definition [53935,54454]",
      "dest": "function_definition [34403,34737]"
    },
    {
      "src": "parameter [20026,20033]",
      "dest": "parameter [13665,13672]"
    },
    {
      "src": "%: % [20772,20773]",
      "dest": "%: % [14377,14378]"
    },
    {
      "src": "solidity_pragma_token [5908,5924]",
      "dest": "solidity_pragma_token [9075,9090]"
    },
    {
      "src": "identifier: account [59186,59193]",
      "dest": "identifier: account [37829,37836]"
    },
    {
      "src": "identifier: getAttributeTimestamp [10963,10984]",
      "dest": "identifier: totalSupply [23674,23685]"
    },
    {
      "src": "parameter [142,154]",
      "dest": "parameter [30966,30978]"
    },
    {
      "src": "call_expression [14668,14703]",
      "dest": "call_expression [4778,4835]"
    },
    {
      "src": "}: } [18035,18036]",
      "dest": "}: } [11759,11760]"
    },
    {
      "src": ".: . [14679,14680]",
      "dest": ".: . [4789,4790]"
    },
    {
      "src": "(: ( [16306,16307]",
      "dest": "(: ( [10048,10049]"
    },
    {
      "src": "(: ( [5270,5271]",
      "dest": "(: ( [7569,7570]"
    },
    {
      "src": "primitive_type [61299,61306]",
      "dest": "primitive_type [34435,34442]"
    },
    {
      "src": "uint256: uint256 [54736,54743]",
      "dest": "uint256: uint256 [42907,42914]"
    },
    {
      "src": "{: { [38370,38371]",
      "dest": "{: { [37197,37198]"
    },
    {
      "src": "string [51772,51799]",
      "dest": "string [39810,39853]"
    },
    {
      "src": "identifier: b [16225,16226]",
      "dest": "identifier: b [9967,9968]"
    },
    {
      "src": "{: { [87250,87251]",
      "dest": "{: { [43606,43607]"
    },
    {
      "src": "user_defined_type [27190,27198]",
      "dest": "user_defined_type [31233,31238]"
    },
    {
      "src": "visibility [31188,31196]",
      "dest": "visibility [8848,8856]"
    },
    {
      "src": "}: } [87378,87379]",
      "dest": "}: } [43743,43744]"
    },
    {
      "src": "primitive_type [27645,27652]",
      "dest": "primitive_type [31833,31840]"
    },
    {
      "src": "type_name [156,163]",
      "dest": "type_name [18855,18862]"
    },
    {
      "src": "parameter [33193,33197]",
      "dest": "parameter [15163,15167]"
    },
    {
      "src": ">=: >= [16309,16311]",
      "dest": ">=: >= [10051,10053]"
    },
    {
      "src": "uint256: uint256 [17208,17215]",
      "dest": "uint256: uint256 [10924,10931]"
    },
    {
      "src": "call_argument [26134,26139]",
      "dest": "call_argument [4429,4434]"
    },
    {
      "src": "return_type_definition [86247,86261]",
      "dest": "return_type_definition [26148,26162]"
    },
    {
      "src": "address: address [11185,11192]",
      "dest": "address: address [1574,1581]"
    },
    {
      "src": "primitive_type [53842,53846]",
      "dest": "primitive_type [37762,37766]"
    },
    {
      "src": "identifier: _value [75282,75288]",
      "dest": "identifier: amount [16711,16717]"
    },
    {
      "src": "identifier: sender [33248,33254]",
      "dest": "identifier: sender [33245,33251]"
    },
    {
      "src": "{: { [34139,34140]",
      "dest": "{: { [24252,24253]"
    },
    {
      "src": "(: ( [3349,3350]",
      "dest": "(: ( [5648,5649]"
    },
    {
      "src": "state_variable_declaration [23000,23027]",
      "dest": "state_variable_declaration [1078,1105]"
    },
    {
      "src": "event_paramater [37205,37223]",
      "dest": "event_paramater [36646,36664]"
    },
    {
      "src": "=: = [27013,27014]",
      "dest": "=: = [5339,5340]"
    },
    {
      "src": "identifier: rewardAmount [67415,67427]",
      "dest": "identifier: value [19456,19461]"
    },
    {
      "src": "identifier: amount [59029,59035]",
      "dest": "identifier: amount [38900,38906]"
    },
    {
      "src": "solidity_version:  0.5.13 [73,80]",
      "dest": "solidity_version:  0.6.10 [417,424]"
    },
    {
      "src": "expression_statement [27007,27028]",
      "dest": "expression_statement [5333,5354]"
    },
    {
      "src": "(: ( [35193,35194]",
      "dest": "(: ( [40959,40960]"
    },
    {
      "src": "pragma: pragma [15334,15340]",
      "dest": "pragma: pragma [14395,14401]"
    },
    {
      "src": "bool: bool [81866,81870]",
      "dest": "bool: bool [19884,19888]"
    },
    {
      "src": "call_expression [34150,34210]",
      "dest": "call_expression [24263,24305]"
    },
    {
      "src": ",: , [37171,37172]",
      "dest": ",: , [32476,32477]"
    },
    {
      "src": "identifier: account [59722,59729]",
      "dest": "identifier: account [37432,37439]"
    },
    {
      "src": "parameter [16217,16226]",
      "dest": "parameter [9959,9968]"
    },
    {
      "src": "(: ( [37805,37806]",
      "dest": "(: ( [28718,28719]"
    },
    {
      "src": "=: = [26776,26777]",
      "dest": "=: = [5100,5101]"
    },
    {
      "src": "primitive_type [27568,27575]",
      "dest": "primitive_type [31756,31763]"
    },
    {
      "src": "!=: != [14052,14054]",
      "dest": "!=: != [27662,27664]"
    },
    {
      "src": "type_name [20630,20637]",
      "dest": "type_name [14235,14242]"
    },
    {
      "src": "state_mutability [11026,11030]",
      "dest": "state_mutability [23695,23699]"
    },
    {
      "src": "contract_body [27199,27969]",
      "dest": "contract_body [31239,31897]"
    },
    {
      "src": "uint256: uint256 [18562,18569]",
      "dest": "uint256: uint256 [12294,12301]"
    },
    {
      "src": "): ) [20710,20711]",
      "dest": "): ) [14315,14316]"
    },
    {
      "src": "=>: => [23560,23562]",
      "dest": "=>: => [1623,1625]"
    },
    {
      "src": "{: { [75307,75308]",
      "dest": "{: { [16728,16729]"
    },
    {
      "src": "identifier: this [75572,75576]",
      "dest": "identifier: this [19439,19443]"
    },
    {
      "src": "indexed: indexed [25827,25834]",
      "dest": "indexed: indexed [4134,4141]"
    },
    {
      "src": "binary_expression [19390,19395]",
      "dest": "binary_expression [13021,13026]"
    },
    {
      "src": "identifier: b [18536,18537]",
      "dest": "identifier: b [12268,12269]"
    },
    {
      "src": "}: } [85690,85691]",
      "dest": "}: } [24548,24549]"
    },
    {
      "src": "identifier: pendingOwner [27015,27027]",
      "dest": "identifier: pendingOwner [5341,5353]"
    },
    {
      "src": "(: ( [26121,26122]",
      "dest": "(: ( [4416,4417]"
    },
    {
      "src": "number_literal: 16 [37276,37278]",
      "dest": "number_literal: 16 [36242,36244]"
    },
    {
      "src": "identifier: _decreaseAllowanceAllArgs [86512,86537]",
      "dest": "identifier: _approve [26900,26908]"
    },
    {
      "src": "identifier: a [18525,18526]",
      "dest": "identifier: a [12257,12258]"
    },
    {
      "src": "{: { [27600,27601]",
      "dest": "{: { [31788,31789]"
    },
    {
      "src": "primitive_type [17589,17596]",
      "dest": "primitive_type [11313,11320]"
    },
    {
      "src": "(: ( [29209,29210]",
      "dest": "(: ( [27735,27736]"
    },
    {
      "src": "mapping: mapping [23544,23551]",
      "dest": "mapping: mapping [1607,1614]"
    },
    {
      "src": "identifier: amount [60812,60818]",
      "dest": "identifier: amount [37404,37410]"
    },
    {
      "src": "visibility [34103,34109]",
      "dest": "visibility [24213,24219]"
    },
    {
      "src": "): ) [54376,54377]",
      "dest": "): ) [34562,34563]"
    },
    {
      "src": "identifier: onlyOwner [27342,27351]",
      "dest": "identifier: onlyOwner [31435,31444]"
    },
    {
      "src": "state_mutability [16237,16241]",
      "dest": "state_mutability [9979,9983]"
    },
    {
      "src": "type_alias [32215,32223]",
      "dest": "type_alias [22514,22522]"
    },
    {
      "src": "primitive_type [55244,55251]",
      "dest": "primitive_type [42879,42886]"
    },
    {
      "src": "visibility [27581,27589]",
      "dest": "visibility [31769,31777]"
    },
    {
      "src": "address: address [85574,85581]",
      "dest": "address: address [24417,24424]"
    },
    {
      "src": "identifier: _requireCanTransfer [53944,53963]",
      "dest": "identifier: _burn [34412,34417]"
    },
    {
      "src": "call_expression [20723,20752]",
      "dest": "call_expression [14328,14357]"
    },
    {
      "src": "internal: internal [54541,54549]",
      "dest": "internal: internal [27619,27627]"
    },
    {
      "src": "call_argument [54323,54361]",
      "dest": "call_argument [34496,34513]"
    },
    {
      "src": "(: ( [86168,86169]",
      "dest": "(: ( [26095,26096]"
    },
    {
      "src": "=>: => [21728,21730]",
      "dest": "=>: => [1446,1448]"
    },
    {
      "src": "call_argument [38408,38430]",
      "dest": "call_argument [37241,37279]"
    },
    {
      "src": "primitive_type [86169,86176]",
      "dest": "primitive_type [26096,26103]"
    },
    {
      "src": "string [54289,54302]",
      "dest": "string [34601,34650]"
    },
    {
      "src": "): ) [55436,55437]",
      "dest": "): ) [30098,30099]"
    },
    {
      "src": "call_argument [38389,38406]",
      "dest": "call_argument [37216,37239]"
    },
    {
      "src": "primitive_type [87149,87154]",
      "dest": "primitive_type [43496,43501]"
    },
    {
      "src": "type_name [61273,61280]",
      "dest": "type_name [34418,34425]"
    },
    {
      "src": "mapping: mapping [21711,21718]",
      "dest": "mapping: mapping [1430,1437]"
    },
    {
      "src": "visibility [22709,22715]",
      "dest": "visibility [799,805]"
    },
    {
      "src": "type_name [16217,16224]",
      "dest": "type_name [9959,9966]"
    },
    {
      "src": "string [53479,53508]",
      "dest": "string [40314,40359]"
    },
    {
      "src": "binary_expression [14676,14702]",
      "dest": "binary_expression [4786,4812]"
    },
    {
      "src": "identifier: recipient [3770,3779]",
      "dest": "identifier: recipient [6069,6078]"
    },
    {
      "src": "address: address [23552,23559]",
      "dest": "address: address [1615,1622]"
    },
    {
      "src": "==: == [26290,26292]",
      "dest": "==: == [4587,4589]"
    },
    {
      "src": "identifier: amount [62150,62156]",
      "dest": "identifier: amount [40251,40257]"
    },
    {
      "src": "type_name [16707,16714]",
      "dest": "type_name [10457,10464]"
    },
    {
      "src": "type_name [23168,23175]",
      "dest": "type_name [1252,1259]"
    },
    {
      "src": "string [55866,55897]",
      "dest": "string [30141,30177]"
    },
    {
      "src": "identifier: paused_Deprecated [22888,22905]",
      "dest": "identifier: paused_Deprecated [966,983]"
    },
    {
      "src": "type_name [38282,38289]",
      "dest": "type_name [32761,32768]"
    },
    {
      "src": "address: address [142,149]",
      "dest": "address: address [30966,30973]"
    },
    {
      "src": "string [87365,87371]",
      "dest": "string [43730,43736]"
    },
    {
      "src": "visibility [55126,55134]",
      "dest": "visibility [42826,42834]"
    },
    {
      "src": ",: , [17969,17970]",
      "dest": ",: , [11693,11694]"
    },
    {
      "src": "(: ( [27553,27554]",
      "dest": "(: ( [31741,31742]"
    },
    {
      "src": "(: ( [19251,19252]",
      "dest": "(: ( [12949,12950]"
    },
    {
      "src": "call_argument [61674,61681]",
      "dest": "call_argument [40383,40390]"
    },
    {
      "src": "uint256: uint256 [5306,5313]",
      "dest": "uint256: uint256 [7605,7612]"
    },
    {
      "src": ",: , [16313,16314]",
      "dest": ",: , [10055,10056]"
    },
    {
      "src": "string_literal [54989,55002]",
      "dest": "string_literal [27922,27962]"
    },
    {
      "src": "modifier_invocation [22267,22276]",
      "dest": "modifier_invocation [38355,38364]"
    },
    {
      "src": "\": \" [20063,20064]",
      "dest": "\": \" [13702,13703]"
    },
    {
      "src": "return_statement [16358,16367]",
      "dest": "return_statement [10100,10109]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      * - Subtraction cannot overflow.      */ [16382,16643]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [10124,10393]"
    },
    {
      "src": "address: address [4874,4881]",
      "dest": "address: address [7173,7180]"
    },
    {
      "src": "indexed: indexed [5806,5813]",
      "dest": "indexed: indexed [8105,8112]"
    },
    {
      "src": "identifier: amount [66085,66091]",
      "dest": "identifier: amount [34685,34691]"
    },
    {
      "src": "type_name [17923,17930]",
      "dest": "type_name [11647,11654]"
    },
    {
      "src": "): ) [51769,51770]",
      "dest": "): ) [28473,28474]"
    },
    {
      "src": "call_argument [14103,14108]",
      "dest": "call_argument [30252,30257]"
    },
    {
      "src": "<=: <= [39077,39079]",
      "dest": "<=: <= [33950,33952]"
    },
    {
      "src": "primitive_type [8219,8226]",
      "dest": "primitive_type [25377,25384]"
    },
    {
      "src": "returns: returns [87050,87057]",
      "dest": "returns: returns [43397,43404]"
    },
    {
      "src": "==: == [14687,14689]",
      "dest": "==: == [4797,4799]"
    },
    {
      "src": ",: , [67427,67428]",
      "dest": ",: , [19461,19462]"
    },
    {
      "src": "call_argument [69099,69105]",
      "dest": "call_argument [39346,39352]"
    },
    {
      "src": "identifier: globalPause_Deprecated [22936,22958]",
      "dest": "identifier: globalPause_Deprecated [1014,1036]"
    },
    {
      "src": "uint256: uint256 [50531,50538]",
      "dest": "uint256: uint256 [41031,41038]"
    },
    {
      "src": "\": \" [74543,74544]",
      "dest": "\": \" [17978,17979]"
    },
    {
      "src": "uint256: uint256 [62552,62559]",
      "dest": "uint256: uint256 [39728,39735]"
    },
    {
      "src": ",: , [53738,53739]",
      "dest": ",: , [29468,29469]"
    },
    {
      "src": "identifier: a [16670,16671]",
      "dest": "identifier: a [10420,10421]"
    },
    {
      "src": "call_expression [17951,18007]",
      "dest": "call_expression [11675,11731]"
    },
    {
      "src": "contract: contract [38180,38188]",
      "dest": "contract: contract [32193,32201]"
    },
    {
      "src": "identifier: add [16202,16205]",
      "dest": "identifier: add [9944,9947]"
    },
    {
      "src": "type_name [81866,81870]",
      "dest": "type_name [19884,19888]"
    },
    {
      "src": ",: , [19188,19189]",
      "dest": ",: , [12886,12887]"
    },
    {
      "src": "expression_statement [48073,48124]",
      "dest": "expression_statement [37813,37934]"
    },
    {
      "src": "): ) [61851,61852]",
      "dest": "): ) [34728,34729]"
    },
    {
      "src": "boolean_literal [33273,33277]",
      "dest": "boolean_literal [25648,25652]"
    },
    {
      "src": "inheritance_specifier [45817,45831]",
      "dest": "inheritance_specifier [32229,32243]"
    },
    {
      "src": "type_name [46842,46849]",
      "dest": "type_name [22559,22566]"
    },
    {
      "src": "user_defined_type [45848,45871]",
      "dest": "user_defined_type [36183,36206]"
    },
    {
      "src": "}: } [27070,27071]",
      "dest": "}: } [5396,5397]"
    },
    {
      "src": "string [68690,68724]",
      "dest": "string [16985,17045]"
    },
    {
      "src": "uint256: uint256 [46031,46038]",
      "dest": "uint256: uint256 [36251,36258]"
    },
    {
      "src": "is: is [27187,27189]",
      "dest": "is: is [31230,31232]"
    },
    {
      "src": "string_literal [57846,57867]",
      "dest": "string_literal [4814,4834]"
    },
    {
      "src": "call_expression [9681,9735]",
      "dest": "call_expression [29318,29386]"
    },
    {
      "src": "call_argument [77289,77290]",
      "dest": "call_argument [30137,30138]"
    },
    {
      "src": "address: address [26717,26724]",
      "dest": "address: address [5041,5048]"
    },
    {
      "src": "call_argument [67858,67866]",
      "dest": "call_argument [28062,28071]"
    },
    {
      "src": "identifier: receiver [67858,67866]",
      "dest": "identifier: recipient [28062,28071]"
    },
    {
      "src": "type_name [6113,6120]",
      "dest": "type_name [1780,1787]"
    },
    {
      "src": "parameter [3506,3513]",
      "dest": "parameter [5805,5812]"
    },
    {
      "src": "parameter [16673,16682]",
      "dest": "parameter [10423,10432]"
    },
    {
      "src": "): ) [39097,39098]",
      "dest": "): ) [33995,33996]"
    },
    {
      "src": "uint256: uint256 [9426,9433]",
      "dest": "uint256: uint256 [24487,24494]"
    },
    {
      "src": "primitive_type [39020,39027]",
      "dest": "primitive_type [33893,33900]"
    },
    {
      "src": "call_argument [20060,20061]",
      "dest": "call_argument [13699,13700]"
    },
    {
      "src": "): ) [38539,38540]",
      "dest": "): ) [37410,37411]"
    },
    {
      "src": "member_expression [27670,27684]",
      "dest": "member_expression [31858,31872]"
    },
    {
      "src": "identifier: ProxyStorage [22654,22666]",
      "dest": "identifier: ProxyStorage [744,756]"
    },
    {
      "src": "call_expression [74476,74545]",
      "dest": "call_expression [17920,17980]"
    },
    {
      "src": "identifier: a [17868,17869]",
      "dest": "identifier: a [11592,11593]"
    },
    {
      "src": "identifier: newOwner [26778,26786]",
      "dest": "identifier: newOwner [5102,5110]"
    },
    {
      "src": "type_name [13989,13996]",
      "dest": "type_name [24178,24185]"
    },
    {
      "src": ",: , [52408,52409]",
      "dest": ",: , [28554,28555]"
    },
    {
      "src": "state_variable_declaration [23068,23091]",
      "dest": "state_variable_declaration [1149,1172]"
    },
    {
      "src": "identifier: _max [39144,39148]",
      "dest": "identifier: _max [34042,34046]"
    },
    {
      "src": "type_name [38266,38273]",
      "dest": "type_name [32745,32752]"
    },
    {
      "src": "type_name [37246,37253]",
      "dest": "type_name [36214,36221]"
    },
    {
      "src": "expression_statement [29202,29234]",
      "dest": "expression_statement [27728,27800]"
    },
    {
      "src": "call_argument [29230,29231]",
      "dest": "call_argument [27757,27758]"
    },
    {
      "src": "call_argument [55423,55436]",
      "dest": "call_argument [30060,30098]"
    },
    {
      "src": "primitive_type [52488,52495]",
      "dest": "primitive_type [36407,36414]"
    },
    {
      "src": "call_expression [75659,75703]",
      "dest": "call_expression [16739,16812]"
    },
    {
      "src": "binary_expression [17959,17969]",
      "dest": "binary_expression [11683,11693]"
    },
    {
      "src": "identifier: owner [85582,85587]",
      "dest": "identifier: owner [24425,24430]"
    },
    {
      "src": "type_cast_expression [27053,27063]",
      "dest": "type_cast_expression [5379,5389]"
    },
    {
      "src": "): ) [53749,53750]",
      "dest": "): ) [29479,29480]"
    },
    {
      "src": "\": \" [55866,55867]",
      "dest": "\": \" [30141,30142]"
    },
    {
      "src": "assignment_expression [27007,27027]",
      "dest": "assignment_expression [5333,5353]"
    },
    {
      "src": "\": \" [55797,55798]",
      "dest": "\": \" [29186,29187]"
    },
    {
      "src": "expression_statement [54314,54378]",
      "dest": "expression_statement [34488,34564]"
    },
    {
      "src": "(: ( [53637,53638]",
      "dest": "(: ( [29428,29429]"
    },
    {
      "src": "type_name [22737,22741]",
      "dest": "type_name [827,831]"
    },
    {
      "src": "primitive_type [55158,55162]",
      "dest": "primitive_type [36432,36436]"
    },
    {
      "src": "member_expression [27376,27397]",
      "dest": "member_expression [31469,31490]"
    },
    {
      "src": "returns: returns [10701,10708]",
      "dest": "returns: returns [23885,23892]"
    },
    {
      "src": "identifier: _account [53730,53738]",
      "dest": "identifier: account [29461,29468]"
    },
    {
      "src": "call_expression [16734,16777]",
      "dest": "call_expression [10484,10527]"
    },
    {
      "src": "external: external [27895,27903]",
      "dest": "external: external [37178,37186]"
    },
    {
      "src": "function_definition [86369,86605]",
      "dest": "function_definition [26790,27059]"
    },
    {
      "src": "identifier: c [16307,16308]",
      "dest": "identifier: c [10049,10050]"
    },
    {
      "src": "variable_declaration_tuple [81848,81879]",
      "dest": "variable_declaration_tuple [19883,19922]"
    },
    {
      "src": "external: external [3797,3805]",
      "dest": "external: external [6096,6104]"
    },
    {
      "src": "string [57846,57867]",
      "dest": "string [4814,4834]"
    },
    {
      "src": "state_mutability [87135,87139]",
      "dest": "state_mutability [43482,43486]"
    },
    {
      "src": "return_type_definition [11031,11048]",
      "dest": "return_type_definition [23709,23726]"
    },
    {
      "src": "visibility [87038,87044]",
      "dest": "visibility [43376,43382]"
    },
    {
      "src": "state_mutability [3492,3496]",
      "dest": "state_mutability [5791,5795]"
    },
    {
      "src": "member_expression [14676,14686]",
      "dest": "member_expression [4786,4796]"
    },
    {
      "src": ".: . [27366,27367]",
      "dest": ".: . [31459,31460]"
    },
    {
      "src": "): ) [87248,87249]",
      "dest": "): ) [43604,43605]"
    },
    {
      "src": "primitive_type [23796,23803]",
      "dest": "primitive_type [1844,1851]"
    },
    {
      "src": "type_name [58995,59002]",
      "dest": "type_name [38314,38321]"
    },
    {
      "src": "identifier: account [59003,59010]",
      "dest": "identifier: account [38322,38329]"
    },
    {
      "src": "type_name [11185,11192]",
      "dest": "type_name [1574,1581]"
    },
    {
      "src": "]: ] [9677,9678]",
      "dest": "]: ] [29314,29315]"
    },
    {
      "src": "): ) [74544,74545]",
      "dest": "): ) [17979,17980]"
    },
    {
      "src": "parameter [20652,20678]",
      "dest": "parameter [14257,14283]"
    },
    {
      "src": "string [67176,67198]",
      "dest": "string [42969,42992]"
    },
    {
      "src": "string [54642,54655]",
      "dest": "string [27677,27716]"
    },
    {
      "src": "string [73619,73662]",
      "dest": "string [16780,16811]"
    },
    {
      "src": "identifier: amount [63496,63502]",
      "dest": "identifier: amount [25578,25584]"
    },
    {
      "src": "call_argument [37791,37796]",
      "dest": "call_argument [28732,28738]"
    },
    {
      "src": "parameter [16662,16671]",
      "dest": "parameter [10412,10421]"
    },
    {
      "src": "): ) [86460,86461]",
      "dest": "): ) [26857,26858]"
    },
    {
      "src": "uint256: uint256 [16673,16680]",
      "dest": "uint256: uint256 [10423,10430]"
    },
    {
      "src": "comment: // File: contracts/TrueCurrencies/TrueCoinReceiver.sol [0,54]",
      "dest": "comment: /**  *  ████████╗██████╗ ██╗   ██╗███████╗██╗   ██╗███████╗██████╗   *  ╚══██╔══╝██╔══██╗██║   ██║██╔════╝██║   ██║██╔════╝██╔══██╗  *     ██║   ██████╔╝██║   ██║█████╗  ██║   ██║███████╗██║  ██║  *     ██║   ██╔══██╗██║   ██║██╔══╝  ██║   ██║╚════██║██║  ██║  *     ██║   ██║  ██║╚██████╔╝███████╗╚██████╔╝███████║██████╔╝  *     ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚══════╝ ╚═════╝ ╚══════╝╚═════╝   */ [0,398]"
    },
    {
      "src": "number_literal: 0 [20736,20737]",
      "dest": "number_literal: 0 [14341,14342]"
    },
    {
      "src": "call_argument [67429,67464]",
      "dest": "call_argument [19463,19503]"
    },
    {
      "src": "state_variable_declaration [23612,23652]",
      "dest": "state_variable_declaration [1686,1737]"
    },
    {
      "src": "function_definition [10126,10274]",
      "dest": "function_definition [24696,24865]"
    },
    {
      "src": "pragma_directive [21535,21558]",
      "dest": "pragma_directive [34744,34767]"
    },
    {
      "src": "address: address [53740,53747]",
      "dest": "address: address [29470,29477]"
    },
    {
      "src": "internal: internal [61354,61362]",
      "dest": "internal: internal [34451,34459]"
    },
    {
      "src": "expression_statement [37692,37732]",
      "dest": "expression_statement [28585,28625]"
    },
    {
      "src": "identifier: reclaimToken [27541,27553]",
      "dest": "identifier: reclaimToken [31729,31741]"
    },
    {
      "src": "call_argument [53740,53750]",
      "dest": "call_argument [29470,29480]"
    },
    {
      "src": "visibility [62583,62591]",
      "dest": "visibility [40937,40945]"
    },
    {
      "src": "parameter [9005,9019]",
      "dest": "parameter [26113,26131]"
    },
    {
      "src": "type_name [75274,75281]",
      "dest": "type_name [16703,16710]"
    },
    {
      "src": "identifier: owner [26134,26139]",
      "dest": "identifier: owner [4429,4434]"
    },
    {
      "src": "pure: pure [16237,16241]",
      "dest": "pure: pure [9979,9983]"
    },
    {
      "src": "): ) [14655,14656]",
      "dest": "): ) [4765,4766]"
    },
    {
      "src": "identifier: require [53445,53452]",
      "dest": "identifier: require [40288,40295]"
    },
    {
      "src": "expression_statement [54242,54304]",
      "dest": "expression_statement [34574,34652]"
    },
    {
      "src": "): ) [27579,27580]",
      "dest": "): ) [31767,31768]"
    },
    {
      "src": "solidity_pragma_token [21542,21557]",
      "dest": "solidity_pragma_token [34751,34766]"
    },
    {
      "src": "type_name [62933,62940]",
      "dest": "type_name [33199,33206]"
    },
    {
      "src": "expression_statement [9650,9736]",
      "dest": "expression_statement [29297,29387]"
    },
    {
      "src": "(: ( [87125,87126]",
      "dest": "(: ( [43472,43473]"
    },
    {
      "src": "identifier: IERC20 [27554,27560]",
      "dest": "identifier: IERC20 [31742,31748]"
    },
    {
      "src": ",: , [67866,67867]",
      "dest": ",: , [28071,28072]"
    },
    {
      "src": "state_mutability [18548,18552]",
      "dest": "state_mutability [12280,12284]"
    },
    {
      "src": "call_argument [39184,39188]",
      "dest": "call_argument [34082,34086]"
    },
    {
      "src": "): ) [19227,19228]",
      "dest": "): ) [12925,12926]"
    },
    {
      "src": "type_name [4874,4881]",
      "dest": "type_name [7173,7180]"
    },
    {
      "src": "string_literal [39086,39097]",
      "dest": "string_literal [33959,33995]"
    },
    {
      "src": "return_type_definition [9417,9434]",
      "dest": "return_type_definition [24478,24495]"
    },
    {
      "src": "identifier: amount [60265,60271]",
      "dest": "identifier: amount [37170,37176]"
    },
    {
      "src": "type_name [20026,20033]",
      "dest": "type_name [13665,13672]"
    },
    {
      "src": "type_name [86256,86260]",
      "dest": "type_name [26157,26161]"
    },
    {
      "src": "function_body [19261,19511]",
      "dest": "function_body [12959,13142]"
    },
    {
      "src": "primitive_type [16673,16680]",
      "dest": "primitive_type [10423,10430]"
    },
    {
      "src": "}: } [27405,27406]",
      "dest": "}: } [31498,31499]"
    },
    {
      "src": "type_name [19179,19186]",
      "dest": "type_name [12877,12884]"
    },
    {
      "src": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      * - Addition cannot overflow.      */ [15962,16187]",
      "dest": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */ [9696,9929]"
    },
    {
      "src": "\": \" [55001,55002]",
      "dest": "\": \" [27961,27962]"
    },
    {
      "src": "*: * [17937,17938]",
      "dest": "*: * [11661,11662]"
    },
    {
      "src": "expression_statement [47278,47331]",
      "dest": "expression_statement [39865,39960]"
    },
    {
      "src": "uint256: uint256 [3781,3788]",
      "dest": "uint256: uint256 [6080,6087]"
    },
    {
      "src": "binary_expression [48627,48666]",
      "dest": "binary_expression [40984,41027]"
    },
    {
      "src": "identifier: require [67369,67376]",
      "dest": "identifier: require [19423,19430]"
    },
    {
      "src": "type_cast_expression [26122,26132]",
      "dest": "type_cast_expression [4417,4427]"
    },
    {
      "src": "comment: /**  * @title Claimable  * @dev Extension for the InstantiatableOwnable contract, where the ownership needs to be claimed.  * This allows the new owner to accept the transfer.  */ [14256,14439]",
      "dest": "comment: /**  * @title ReclaimerToken  * @dev ERC20 token which allows owner to reclaim ERC20 tokens  * or ether sent to this contract  */ [31062,31195]"
    },
    {
      "src": "contract_body [86940,87476]",
      "dest": "contract_body [43278,43747]"
    },
    {
      "src": "return: return [34221,34227]",
      "dest": "return: return [24846,24852]"
    },
    {
      "src": "identifier: _index [9013,9019]",
      "dest": "identifier: addedValue [26121,26131]"
    },
    {
      "src": "visibility [36802,36810]",
      "dest": "visibility [31008,31016]"
    },
    {
      "src": "primitive_type [35194,35198]",
      "dest": "primitive_type [40960,40964]"
    },
    {
      "src": "solidity: solidity [12983,12991]",
      "dest": "solidity: solidity [21233,21241]"
    },
    {
      "src": "call_expression [26271,26313]",
      "dest": "call_expression [4568,4610]"
    },
    {
      "src": "returns: returns [3806,3813]",
      "dest": "returns: returns [6105,6112]"
    },
    {
      "src": "parameter [86403,86418]",
      "dest": "parameter [26817,26832]"
    },
    {
      "src": "function_body [39053,39197]",
      "dest": "function_body [33926,34095]"
    },
    {
      "src": "solidity_pragma_token [253,268]",
      "dest": "solidity_pragma_token [3628,3643]"
    },
    {
      "src": "primitive_type [21720,21727]",
      "dest": "primitive_type [1438,1445]"
    },
    {
      "src": "pragma_directive [12976,12999]",
      "dest": "pragma_directive [21226,21249]"
    },
    {
      "src": "solidity_pragma_token [20864,20879]",
      "dest": "solidity_pragma_token [31908,31923]"
    },
    {
      "src": "visibility [31709,31717]",
      "dest": "visibility [18870,18878]"
    },
    {
      "src": "identifier: require [73674,73681]",
      "dest": "identifier: functionCallWithValue [18920,18941]"
    },
    {
      "src": "uint256: uint256 [23168,23175]",
      "dest": "uint256: uint256 [1252,1259]"
    },
    {
      "src": "address: address [23766,23773]",
      "dest": "address: address [1809,1816]"
    },
    {
      "src": "function_definition [87108,87190]",
      "dest": "function_definition [43455,43537]"
    },
    {
      "src": "(: ( [23619,23620]",
      "dest": "(: ( [1693,1694]"
    },
    {
      "src": ",: , [53477,53478]",
      "dest": ",: , [40312,40313]"
    },
    {
      "src": "): ) [75399,75400]",
      "dest": "): ) [16956,16957]"
    },
    {
      "src": "return_type_definition [16698,16715]",
      "dest": "return_type_definition [10448,10465]"
    },
    {
      "src": "string [73714,73742]",
      "dest": "string [18963,19006]"
    },
    {
      "src": "string [18599,18627]",
      "dest": "string [12331,12359]"
    },
    {
      "src": ",: , [86306,86307]",
      "dest": ",: , [26195,26196]"
    },
    {
      "src": "public: public [26049,26055]",
      "dest": "public: public [4344,4350]"
    },
    {
      "src": "=: = [23881,23882]",
      "dest": "=: = [1951,1952]"
    },
    {
      "src": "public: public [33177,33183]",
      "dest": "public: public [25412,25418]"
    },
    {
      "src": ",: , [54987,54988]",
      "dest": ",: , [27920,27921]"
    },
    {
      "src": "identifier: transferOwnership [26699,26716]",
      "dest": "identifier: transferOwnership [5023,5040]"
    },
    {
      "src": "parameter [66953,66967]",
      "dest": "parameter [42043,42057]"
    },
    {
      "src": "function_definition [10954,11113]",
      "dest": "function_definition [23665,23765]"
    },
    {
      "src": "primitive_type [86495,86499]",
      "dest": "primitive_type [26883,26887]"
    },
    {
      "src": "identifier: require [26271,26278]",
      "dest": "identifier: require [4568,4575]"
    },
    {
      "src": ".: . [27634,27635]",
      "dest": ".: . [31822,31823]"
    },
    {
      "src": "(: ( [34175,34176]",
      "dest": "(: ( [24272,24273]"
    },
    {
      "src": "): ) [35198,35199]",
      "dest": "): ) [40964,40965]"
    },
    {
      "src": "visibility [9021,9029]",
      "dest": "visibility [37783,37791]"
    },
    {
      "src": "/: / [19392,19393]",
      "dest": "/: / [13023,13024]"
    },
    {
      "src": "identifier: delegateAllowance [85556,85573]",
      "dest": "identifier: allowance [24407,24416]"
    },
    {
      "src": "returns: returns [16698,16705]",
      "dest": "returns: returns [10448,10455]"
    },
    {
      "src": "binary_expression [48081,48098]",
      "dest": "binary_expression [37821,37865]"
    },
    {
      "src": "): ) [81878,81879]",
      "dest": "): ) [19921,19922]"
    },
    {
      "src": "type_name [23000,23007]",
      "dest": "type_name [1078,1085]"
    },
    {
      "src": "type_name [9005,9012]",
      "dest": "type_name [26113,26120]"
    },
    {
      "src": "identifier: _value [48081,48087]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [37841,37865]"
    },
    {
      "src": "type_name [19201,19207]",
      "dest": "type_name [12899,12905]"
    },
    {
      "src": ",: , [48159,48160]",
      "dest": ",: , [38981,38982]"
    },
    {
      "src": ",: , [54287,54288]",
      "dest": ",: , [34599,34600]"
    },
    {
      "src": "type_name [4124,4131]",
      "dest": "type_name [6423,6430]"
    },
    {
      "src": "pragma_directive [22401,22424]",
      "dest": "pragma_directive [41067,41090]"
    },
    {
      "src": "type_name [87149,87154]",
      "dest": "type_name [43496,43501]"
    },
    {
      "src": "expression_statement [26271,26314]",
      "dest": "expression_statement [4568,4611]"
    },
    {
      "src": "uint256: uint256 [4179,4186]",
      "dest": "uint256: uint256 [6478,6485]"
    },
    {
      "src": "call_argument [85675,85682]",
      "dest": "call_argument [24819,24826]"
    },
    {
      "src": "identifier: approve [4866,4873]",
      "dest": "identifier: approve [7165,7172]"
    },
    {
      "src": "parameter [87332,87345]",
      "dest": "parameter [43697,43710]"
    },
    {
      "src": "identifier: _to [50539,50542]",
      "dest": "identifier: account [41039,41046]"
    },
    {
      "src": "identifier: TrueUSD [86892,86899]",
      "dest": "identifier: TrueUSD [43235,43242]"
    },
    {
      "src": "parameter [4874,4889]",
      "dest": "parameter [7173,7188]"
    },
    {
      "src": "member_expression [26075,26085]",
      "dest": "member_expression [4370,4380]"
    },
    {
      "src": "assignment_expression [27038,27063]",
      "dest": "assignment_expression [5364,5389]"
    },
    {
      "src": "call_argument [19354,19366]",
      "dest": "call_argument [12985,12997]"
    },
    {
      "src": "is: is [25757,25759]",
      "dest": "is: is [3895,3897]"
    },
    {
      "src": "public: public [87128,87134]",
      "dest": "public: public [43475,43481]"
    },
    {
      "src": "visibility [17185,17193]",
      "dest": "visibility [10901,10909]"
    },
    {
      "src": "parameter [3762,3779]",
      "dest": "parameter [6061,6078]"
    },
    {
      "src": "identifier: ROUNDING [87174,87182]",
      "dest": "identifier: ROUNDING [43521,43529]"
    },
    {
      "src": "/: / [17961,17962]",
      "dest": "/: / [11685,11686]"
    },
    {
      "src": "call_argument [75684,75688]",
      "dest": "call_argument [16755,16759]"
    },
    {
      "src": "bool: bool [4925,4929]",
      "dest": "bool: bool [7224,7228]"
    },
    {
      "src": "returns: returns [3497,3504]",
      "dest": "returns: returns [5796,5803]"
    },
    {
      "src": "\": \" [16775,16776]",
      "dest": "\": \" [10525,10526]"
    },
    {
      "src": "call_argument [52398,52408]",
      "dest": "call_argument [28544,28554]"
    },
    {
      "src": "{: { [25773,25774]",
      "dest": "{: { [3911,3912]"
    },
    {
      "src": "function: function [3304,3312]",
      "dest": "function: function [5603,5611]"
    },
    {
      "src": "uint256: uint256 [23000,23007]",
      "dest": "uint256: uint256 [1078,1085]"
    },
    {
      "src": "member_expression [53621,53637]",
      "dest": "member_expression [29412,29428]"
    },
    {
      "src": "(: ( [5774,5775]",
      "dest": "(: ( [8073,8074]"
    },
    {
      "src": "function: function [53935,53943]",
      "dest": "function: function [34403,34411]"
    },
    {
      "src": "uint256: uint256 [32228,32235]",
      "dest": "uint256: uint256 [22527,22534]"
    },
    {
      "src": "(: ( [21719,21720]",
      "dest": "(: ( [1437,1438]"
    },
    {
      "src": "type_name [6004,6011]",
      "dest": "type_name [15425,15432]"
    },
    {
      "src": "primitive_type [48627,48634]",
      "dest": "primitive_type [40984,40991]"
    },
    {
      "src": "(: ( [4873,4874]",
      "dest": "(: ( [7172,7173]"
    },
    {
      "src": "type_name [83026,83030]",
      "dest": "type_name [16904,16908]"
    },
    {
      "src": "solidity: solidity [5908,5916]",
      "dest": "solidity: solidity [9075,9083]"
    },
    {
      "src": "interface: interface [3206,3215]",
      "dest": "interface: interface [5505,5514]"
    },
    {
      "src": "type_name [23807,23825]",
      "dest": "type_name [1855,1873]"
    },
    {
      "src": "type_name [27554,27560]",
      "dest": "type_name [31742,31748]"
    },
    {
      "src": "): ) [10687,10688]",
      "dest": "): ) [23862,23863]"
    },
    {
      "src": "call_argument [73714,73742]",
      "dest": "call_argument [18963,19006]"
    },
    {
      "src": "function: function [17122,17130]",
      "dest": "function: function [10838,10846]"
    },
    {
      "src": "parameter [17208,17215]",
      "dest": "parameter [10924,10931]"
    },
    {
      "src": "function: function [18504,18512]",
      "dest": "function: function [12236,12244]"
    },
    {
      "src": "type_name [19981,19988]",
      "dest": "type_name [13620,13627]"
    },
    {
      "src": "(: ( [87234,87235]",
      "dest": "(: ( [43590,43591]"
    },
    {
      "src": ",: , [53750,53751]",
      "dest": ",: , [29480,29481]"
    },
    {
      "src": "parameter [17135,17144]",
      "dest": "parameter [10851,10860]"
    },
    {
      "src": "call_argument [86547,86562]",
      "dest": "call_argument [26971,26986]"
    },
    {
      "src": "): ) [21739,21740]",
      "dest": "): ) [1457,1458]"
    },
    {
      "src": "number_literal: 0 [29230,29231]",
      "dest": "number_literal: 0 [27757,27758]"
    },
    {
      "src": "): ) [68507,68508]",
      "dest": "): ) [19809,19810]"
    },
    {
      "src": "(: ( [4924,4925]",
      "dest": "(: ( [7223,7224]"
    },
    {
      "src": "call_expression [73674,73743]",
      "dest": "call_expression [18920,19007]"
    },
    {
      "src": "{: { [10209,10210]",
      "dest": "{: { [24785,24786]"
    },
    {
      "src": "contract_declaration [27163,27969]",
      "dest": "contract_declaration [31197,31897]"
    },
    {
      "src": "parameter [16251,16258]",
      "dest": "parameter [9993,10000]"
    },
    {
      "src": "type_name [52488,52495]",
      "dest": "type_name [36407,36414]"
    },
    {
      "src": "(: ( [75675,75676]",
      "dest": "(: ( [16746,16747]"
    },
    {
      "src": "(: ( [86255,86256]",
      "dest": "(: ( [26156,26157]"
    },
    {
      "src": "string_literal [54642,54655]",
      "dest": "string_literal [27677,27716]"
    },
    {
      "src": "struct_member [23766,23780]",
      "dest": "struct_member [1809,1823]"
    },
    {
      "src": "type_name [8219,8226]",
      "dest": "type_name [25377,25384]"
    },
    {
      "src": "): ) [9734,9735]",
      "dest": "): ) [29385,29386]"
    },
    {
      "src": "primitive_type [16251,16258]",
      "dest": "primitive_type [9993,10000]"
    },
    {
      "src": "string_literal [38408,38430]",
      "dest": "string_literal [37241,37279]"
    },
    {
      "src": "primitive_type [77281,77288]",
      "dest": "primitive_type [30129,30136]"
    },
    {
      "src": "identifier: OwnershipTransferred [26101,26121]",
      "dest": "identifier: OwnershipTransferred [4396,4416]"
    },
    {
      "src": "identifier: totalSupply [3313,3324]",
      "dest": "identifier: totalSupply [5612,5623]"
    },
    {
      "src": "expression_statement [17228,17258]",
      "dest": "expression_statement [10944,10974]"
    },
    {
      "src": ",: , [83024,83025]",
      "dest": ",: , [16916,16917]"
    },
    {
      "src": "identifier: burnMin [22982,22989]",
      "dest": "identifier: burnMin [1060,1067]"
    },
    {
      "src": "uint256: uint256 [17589,17596]",
      "dest": "uint256: uint256 [11313,11320]"
    },
    {
      "src": "): ) [23638,23639]",
      "dest": "): ) [1712,1713]"
    },
    {
      "src": "type_name [55158,55162]",
      "dest": "type_name [36432,36436]"
    },
    {
      "src": "primitive_type [37225,37232]",
      "dest": "primitive_type [36666,36673]"
    },
    {
      "src": "number_literal: 0 [52406,52407]",
      "dest": "number_literal: 0 [28552,28553]"
    },
    {
      "src": "type_name [87059,87064]",
      "dest": "type_name [43406,43411]"
    },
    {
      "src": "binary_expression [54323,54361]",
      "dest": "binary_expression [34496,34513]"
    },
    {
      "src": "(: ( [23795,23796]",
      "dest": "(: ( [1843,1844]"
    },
    {
      "src": "primitive_type [87235,87241]",
      "dest": "primitive_type [43591,43597]"
    },
    {
      "src": "string_literal [47305,47329]",
      "dest": "string_literal [39913,39958]"
    },
    {
      "src": "\": \" [54989,54990]",
      "dest": "\": \" [27922,27923]"
    },
    {
      "src": "address: address [37205,37212]",
      "dest": "address: address [36646,36653]"
    },
    {
      "src": "event_paramater [5538,5558]",
      "dest": "event_paramater [7837,7857]"
    },
    {
      "src": "function_body [18571,18636]",
      "dest": "function_body [12303,12368]"
    },
    {
      "src": "}: } [87284,87285]",
      "dest": "}: } [43640,43641]"
    },
    {
      "src": "string [59206,59234]",
      "dest": "string [26988,27027]"
    },
    {
      "src": "true [86593,86597]",
      "dest": "true [27047,27051]"
    },
    {
      "src": "identifier: require [54242,54249]",
      "dest": "identifier: require [34574,34581]"
    },
    {
      "src": "primitive_type [37205,37212]",
      "dest": "primitive_type [36646,36653]"
    },
    {
      "src": "uint256: uint256 [23224,23231]",
      "dest": "uint256: uint256 [1308,1315]"
    },
    {
      "src": ",: , [5821,5822]",
      "dest": ",: , [8120,8121]"
    },
    {
      "src": "primitive_type [50531,50538]",
      "dest": "primitive_type [41031,41038]"
    },
    {
      "src": "parameter [21790,21810]",
      "dest": "parameter [42783,42800]"
    },
    {
      "src": "identifier: wipeBlacklistedAccount [53376,53398]",
      "dest": "identifier: _burn [29088,29093]"
    },
    {
      "src": "(: ( [18516,18517]",
      "dest": "(: ( [12248,12249]"
    },
    {
      "src": "address: address [5775,5782]",
      "dest": "address: address [8074,8081]"
    },
    {
      "src": "=: = [87006,87007]",
      "dest": "=: = [43344,43345]"
    },
    {
      "src": "parameter [21225,21238]",
      "dest": "parameter [18240,18254]"
    }
  ],
  "actions": [
    {
      "action": "move-tree",
      "tree": "contract_declaration [22645,25453]",
      "parent": "source_file [0,43747]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [25739,27074]",
      "parent": "source_file [0,43747]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol [2957,3020]",
      "parent": "source_file [0,43747]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "comment: /**  * @dev Interface of the ERC20 standard as defined in the EIP. Does not include  * the optional functions; to access them see {ERC20Detailed}.  */ [3051,3204]",
      "parent": "source_file [0,43747]",
      "at": 12
    },
    {
      "action": "move-tree",
      "tree": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [15361,15936]",
      "parent": "source_file [0,43747]",
      "at": 15
    },
    {
      "action": "move-tree",
      "tree": "library_declaration [15938,20786]",
      "parent": "source_file [0,43747]",
      "at": 16
    },
    {
      "action": "move-tree",
      "tree": "pragma_directive [15334,15357]",
      "parent": "source_file [0,43747]",
      "at": 17
    },
    {
      "action": "move-tree",
      "tree": "comment: // File: @trusttoken/registry/contracts/Registry.sol [5845,5897]",
      "parent": "source_file [0,43747]",
      "at": 17
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [27163,27969]",
      "parent": "source_file [0,43747]",
      "at": 27
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [38180,39200]",
      "parent": "source_file [0,43747]",
      "at": 33
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/TrueCurrencies/TrueCoinReceiver.sol [0,54]",
      "label": "/**  *  ████████╗██████╗ ██╗   ██╗███████╗██╗   ██╗███████╗██████╗   *  ╚══██╔══╝██╔══██╗██║   ██║██╔════╝██║   ██║██╔════╝██╔══██╗  *     ██║   ██████╔╝██║   ██║█████╗  ██║   ██║███████╗██║  ██║  *     ██║   ██╔══██╗██║   ██║██╔══╝  ██║   ██║╚════██║██║  ██║  *     ██║   ██║  ██║╚██████╔╝███████╗╚██████╔╝███████║██████╔╝  *     ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚══════╝ ╚═════╝ ╚══════╝╚═════╝   */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/TrueReward/FinancialOpportunity.sol [188,242]",
      "label": "/**  * Defines the storage layout of the token implementation contract. Any  * newly declared state variables in future upgrades should be appended  * to the bottom. Never remove state variables from this list, however variables  * can be renamed. Please add _Deprecated to deprecated variables.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title FinancialOpportunity  * @dev Interface for third parties to implement financial opportunities  *  * -- Overview --  * The goal of this contract is to allow anyone to create an opportunity  * to earn interest on TUSD. deposit() \"mints\" yTUSD whcih is redeemable  * for some amount of TUSD. TrueUSD wraps this contractwith TrustToken  * Assurance, which provides protection from bugs and system design flaws  * TUSD is a compliant stablecoin, therefore we do not allow transfers of  * yTUSD, thus there are no transfer functions  *  * -- tokenValue() --  * This function returns the value in TUSD of 1 yTUSD  * This value should never decrease  *  * -- TUSD vs yTUSD --  * yTUSD represents a fixed value which is redeemable for some amount of TUSD  * Think of yTUSD like cTUSD, where cTokens are minted and increase in value versus  * the underlying asset as interest is accrued  *  * -- totalSupply() --  * This function returns the total supply of yTUSD issued by this contract  * It is important to track this value accuratley and add/deduct the correct  * amount on deposit/redemptions  *  * -- Assumptions --  * - tokenValue can never decrease  * - total TUSD owed to depositors = tokenValue() * totalSupply()  */ [273,1532]",
      "label": "/**  * @title ClamableOwnable  * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.  * and provides basic authorization control functions. Inherits storage layout of  * ProxyStorage.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol [2957,3020]",
      "label": "/**  * @dev Interface of the ERC20 standard as defined in the EIP.  */"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [8144,8167]",
      "parent": "source_file [0,43747]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @dev Interface of the ERC20 standard as defined in the EIP. Does not include  * the optional functions; to access them see {ERC20Detailed}.  */ [3051,3204]",
      "label": "/*  * @dev Provides information about the current execution context, including the  * sender of the transaction and its data. While these are generally available  * via msg.sender and msg.data, they should not be accessed in such a direct  * manner, since when dealing with GSN meta-transactions the account sending and  * paying for execution may not be the actual sender (as far as an application  * is concerned).  *  * This contract is only required for intermediate, library-like contracts.  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [8681,9064]",
      "parent": "source_file [0,43747]",
      "at": 12
    },
    {
      "action": "update-node",
      "tree": "comment: // File: @trusttoken/registry/contracts/Registry.sol [5845,5897]",
      "label": "/**  * @dev Collection of functions related to the address type  */"
    },
    {
      "action": "insert-node",
      "tree": "library_declaration [14493,20577]",
      "parent": "source_file [0,43747]",
      "at": 18
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/InstantiatableOwnable.sol [12900,12972]",
      "label": "/**  * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.  * Removing state variables has been necessary due to proxy pattern usage.  * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:  * - Remove state variables _name, _symbol, _decimals  * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage  * - Remove constructor  * - Solidity version changed from ^0.6.0 to 0.6.10  * - Contract made abstract  *  * See also: ClaimableOwnable.sol and ProxyStorage.sol  */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title InstantiatableOwnable  * @dev The InstantiatableOwnable contract has an owner address, and provides basic authorization control  * functions, this simplifies the implementation of \"user permissions\".  */ [13005,13226]",
      "label": "/**  * @dev Implementation of the {IERC20} interface.  *  * This implementation is agnostic to the way tokens are created. This means  * that a supply mechanism has to be added in a derived contract using {_mint}.  * For a generic mechanism see {ERC20PresetMinterPauser}.  *  * TIP: For a detailed writeup see our guide  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How  * to implement supply mechanisms].  *  * We have followed general OpenZeppelin guidelines: functions revert instead  * of returning `false` on failure. This behavior is nonetheless conventional  * and does not conflict with the expectations of ERC20 applications.  *  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.  * This allows applications to reconstruct the allowance for all accounts just  * by listening to said events. Other implementations of the EIP may not emit  * these events, as it isn't required by the specification.  *  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}  * functions have been added to mitigate the well-known issues around setting  * allowances. See {IERC20-approve}.  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [22440,31031]",
      "parent": "source_file [0,43747]",
      "at": 22
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Claimable  * @dev Extension for the InstantiatableOwnable contract, where the ownership needs to be claimed.  * This allows the new owner to accept the transfer.  */ [14256,14439]",
      "label": "/**  * @title ReclaimerToken  * @dev ERC20 token which allows owner to reclaim ERC20 tokens  * or ether sent to this contract  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // A wrapper around the balanceOf mapping. [20888,20930]",
      "label": "/**  * @title BurnableTokenWithBounds  * @dev Burning functions as redeeming money from the system.  * The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // A wrapper around the allowanceOf mapping. [21566,21610]",
      "label": "/**  * @title TrueCurrency  * @dev TrueCurrency is an ERC20 with blacklist & redemption addresses  *  * TrueCurrency is a compliant stablecoin with blacklist and redemption  * addresses. Only the owner can blacklist accounts. Redemption addresses  * are assigned automatically to the first 0x100000 addresses. Sending  * tokens to the redemption address will trigger a burn operation. Only  * the owner can mint or blacklist accounts.  *  * This contract is owned by the TokenController, which manages token  * minting & admin functionality. See TokenController.sol  *  * See also: BurnableTokenWithBounds.sol  *  * ~~~~ Features ~~~~  *  * Redemption Addresses  * - The first 0x100000 addresses are redemption addresses  * - Tokens sent to redemption addresses are burned  * - Redemptions are tracked off-chain  * - Cannot mint tokens to redemption addresses  *  * Blacklist  * - Owner can blacklist accounts in accordance with local regulatory bodies  * - Only a court order will merit a blacklist; blacklisting is extremely rare  *  * Burn Bounds & CanBurn  * - Owner can set min & max burn amounts  * - Only accounts flagged in canBurn are allowed to burn tokens  * - canBurn prevents tokens from being sent to the incorrect address  *  * Reclaimer Token  * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [36149,41063]",
      "parent": "source_file [0,43747]",
      "at": 31
    },
    {
      "action": "update-node",
      "tree": "comment: /* Defines the storage layout of the token implementation contract. Any newly declared state variables in future upgrades should be appended to the bottom. Never remove state variables from this list  */ [22436,22643]",
      "label": "/**  * @dev Contract that prevents addresses that were previously using autosweep addresses from  * making transfers on them.  *  * In older versions TrueCurrencies had a feature called Autosweep.  * Given a single deposit address, it was possible to generate 16^5-1 autosweep addresses.  * E.g. having deposit address 0xc257274276a4e539741ca11b590b9447b26a8051, you could generate  * - 0xc257274276a4e539741ca11b590b9447b2600000  * - 0xc257274276a4e539741ca11b590b9447b2600001  * - ...  * - 0xc257274276a4e539741ca11b590b9447b26fffff  * Every transfer to an autosweep address resulted as a transfer to deposit address.  * This feature got deprecated, but there were 4 addresses that still actively using the feature.  *  * This contract will reject a transfer to these 4*(16^5-1) addresses to prevent accidental token freeze.  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [41941,43004]",
      "parent": "source_file [0,43747]",
      "at": 34
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title HasOwner  * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin.  and provides basic authorization control functions. Inherits storage layout of  ProxyStorage.  */ [25536,25737]",
      "label": "/**  * @title TrueUSD  * @dev This is the top-level ERC20 contract, but most of the interesting functionality is  * inherited - see the documentation on the corresponding contracts.  */"
    },
    {
      "action": "move-tree",
      "tree": "comment: // reward token storage [23461,23484]",
      "parent": "contract_body [757,3617]",
      "at": 28
    },
    {
      "action": "update-node",
      "tree": "identifier: HasOwner [25748,25756]",
      "label": "ClaimableOwnable"
    },
    {
      "action": "move-tree",
      "tree": "event_definition [25782,25891]",
      "parent": "contract_body [3911,5400]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "constructor_definition [26035,26148]",
      "parent": "contract_body [3911,5400]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "modifier_definition [26239,26333]",
      "parent": "contract_body [3911,5400]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "function_definition [26690,26794]",
      "parent": "contract_body [3911,5400]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [8681,8689]",
      "parent": "contract_declaration [8681,9064]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [8690,8698]",
      "parent": "contract_declaration [8681,9064]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: Context [8699,8706]",
      "parent": "contract_declaration [8681,9064]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "contract_body [8707,9064]",
      "parent": "contract_declaration [8681,9064]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "library: library [14493,14500]",
      "parent": "library_declaration [14493,20577]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: Address [14501,14508]",
      "parent": "library_declaration [14493,20577]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "contract_body [14509,20577]",
      "parent": "library_declaration [14493,20577]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [22440,22448]",
      "parent": "contract_declaration [22440,31031]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [22449,22457]",
      "parent": "contract_declaration [22440,31031]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: ERC20 [22458,22463]",
      "parent": "contract_declaration [22440,31031]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "is: is [22464,22466]",
      "parent": "contract_declaration [22440,31031]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22467,22483]",
      "parent": "contract_declaration [22440,31031]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [22483,22484]",
      "parent": "contract_declaration [22440,31031]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22485,22492]",
      "parent": "contract_declaration [22440,31031]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [22492,22493]",
      "parent": "contract_declaration [22440,31031]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22494,22500]",
      "parent": "contract_declaration [22440,31031]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "contract_body [22501,31031]",
      "parent": "contract_declaration [22440,31031]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [31197,31205]",
      "parent": "contract_declaration [31197,31897]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [32184,32192]",
      "parent": "contract_declaration [32184,34740]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "inheritance_specifier [45817,45831]",
      "parent": "contract_declaration [32184,34740]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "event_definition [38246,38298]",
      "parent": "contract_body [32244,34740]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "comment: //by setting the minimum extremely high, and we don't want to lock [38865,38931]",
      "parent": "contract_body [32244,34740]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [36149,36157]",
      "parent": "contract_declaration [36149,41063]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [36158,36166]",
      "parent": "contract_declaration [36149,41063]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: TrueCurrency [36167,36179]",
      "parent": "contract_declaration [36149,41063]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "is: is [36180,36182]",
      "parent": "contract_declaration [36149,41063]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "inheritance_specifier [45848,45871]",
      "parent": "contract_declaration [36149,41063]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "contract_body [36207,41063]",
      "parent": "contract_declaration [36149,41063]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [41941,41949]",
      "parent": "contract_declaration [41941,43004]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [41950,41958]",
      "parent": "contract_declaration [41941,43004]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: TrueCurrencyWithLegacyAutosweep [41959,41990]",
      "parent": "contract_declaration [41941,43004]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "is: is [41991,41993]",
      "parent": "contract_declaration [41941,43004]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [41994,42006]",
      "parent": "contract_declaration [41941,43004]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "contract_body [42007,43004]",
      "parent": "contract_declaration [41941,43004]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "solidity_version:  0.5.13 [73,80]",
      "label": " 0.6.10"
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [64455,64532]",
      "parent": "contract_body [757,3617]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [71304,71332]",
      "parent": "contract_body [757,3617]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [84932,85008]",
      "parent": "contract_body [757,3617]",
      "at": 13
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [32364,32469]",
      "parent": "contract_body [757,3617]",
      "at": 17
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [21009,21055]",
      "parent": "contract_body [757,3617]",
      "at": 21
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [21691,21760]",
      "parent": "contract_body [757,3617]",
      "at": 22
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1555,1601]",
      "parent": "contract_body [757,3617]",
      "at": 20
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [28362,28386]",
      "parent": "contract_body [757,3617]",
      "at": 35
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [2011,2051]",
      "parent": "contract_body [757,3617]",
      "at": 27
    },
    {
      "action": "update-node",
      "tree": "comment: // reward token storage [23461,23484]",
      "label": "/* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.      *******************************************************************************************************      ** length     input                                                         usage      *******************************************************************************************************      ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner      ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation      ** 32         uint256(11)                                                   gasRefundPool_Deprecated      ** 64         uint256(address),uint256(14)                                  balanceOf      ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance      ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes      **/"
    },
    {
      "action": "update-node",
      "tree": "solidity_version:  0.5.13 [261,268]",
      "label": " 0.6.10"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev sets the original `owner` of the contract to the sender     * at construction. Must then be reinitialized     */ [25899,26029]",
      "label": "/**      * @dev emitted when ownership is transferred      * @param previousOwner previous owner of this contract      * @param newOwner new owner of this contract      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [26156,26233]",
      "label": "/**      * @dev sets the original `owner` of the contract to the sender      * at construction. Must then be reinitialized      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [26341,26434]",
      "label": "/**      * @dev Throws if called by any account other than the owner.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [26542,26684]",
      "label": "/**      * @dev Modifier throws if called by any account other than the pendingOwner.      */"
    },
    {
      "action": "move-tree",
      "tree": "modifier_definition [14629,14723]",
      "parent": "contract_body [3911,5400]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [26802,26883]",
      "label": "/**      * @dev Allows the current owner to set the pendingOwner address.      * @param newOwner The address to transfer ownership to.      */"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Allows the pendingOwner address to finalize the transfer.      */ [5126,5209]",
      "parent": "contract_body [3911,5400]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.5.0 [3041,3046]",
      "label": "0.6.0"
    },
    {
      "action": "insert-node",
      "tree": "{: { [8707,8708]",
      "parent": "contract_body [8707,9064]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "function_definition [8714,8820]",
      "parent": "contract_body [8707,9064]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "function_definition [8828,9061]",
      "parent": "contract_body [8707,9064]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [9063,9064]",
      "parent": "contract_body [8707,9064]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.5.13 [5918,5924]",
      "label": "0.6.0"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      * - Addition cannot overflow.      */ [15962,16187]",
      "label": "/**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      * - Subtraction cannot overflow.      */ [16382,16643]",
      "label": "/**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      * - Subtraction cannot overflow.      *      * _Available since v2.4.0._      */ [16793,17116]",
      "label": "/**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      * - Multiplication cannot overflow.      */ [17322,17559]",
      "label": "/**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [18044,18498]",
      "label": "/**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      *      * _Available since v2.4.0._      */ [18644,19160]",
      "label": "/**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      */ [19519,19962]",
      "label": "/**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      * - The divisor cannot be zero.      *      * _Available since v2.4.0._      */ [20106,20611]",
      "label": "/**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */"
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.5.0 [15351,15356]",
      "label": "0.6.2"
    },
    {
      "action": "insert-node",
      "tree": "{: { [14509,14510]",
      "parent": "contract_body [14509,20577]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns true if `account` is a contract.      *      * [IMPORTANT]      * ====      * It is unsafe to assume that an address for which this function returns      * false is an externally-owned account (EOA) and not a contract.      *      * Among others, `isContract` will return false for the following      * types of addresses:      *      *  - an externally-owned account      *  - a contract in construction      *  - an address where a contract will be created      *  - an address where a contract lived, but was destroyed      * ====      */ [14516,15097]",
      "parent": "contract_body [14509,20577]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "function_definition [15103,15722]",
      "parent": "contract_body [14509,20577]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to      * `recipient`, forwarding all available gas and reverting on errors.      *      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost      * of certain opcodes, possibly making contracts go over the 2300 gas limit      * imposed by `transfer`, making them unable to receive funds via      * `transfer`. {sendValue} removes this limitation.      *      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].      *      * IMPORTANT: because control is transferred to `recipient`, care must be      * taken to not create reentrancy vulnerabilities. Consider using      * {ReentrancyGuard} or the      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].      */ [15730,16651]",
      "parent": "contract_body [14509,20577]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "function_definition [75247,75834]",
      "parent": "contract_body [14509,20577]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Performs a Solidity function call using a low level `call`. A      * plain`call` is an unsafe replacement for a function call: use this      * function instead.      *      * If `target` reverts with a revert reason, it is bubbled up by this      * function (like regular Solidity function calls).      *      * Returns the raw returned data. To convert to the expected return value,      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].      *      * Requirements:      *      * - `target` must be a contract.      * - calling `target` with `data` must not revert.      *      * _Available since v3.1._      */ [17062,17809]",
      "parent": "contract_body [14509,20577]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "function_definition [17815,17988]",
      "parent": "contract_body [14509,20577]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with      * `errorMessage` as a fallback revert reason when `target` reverts.      *      * _Available since v3.1._      */ [17996,18212]",
      "parent": "contract_body [14509,20577]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_definition [18218,18414]",
      "parent": "contract_body [14509,20577]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],      * but also transferring `value` wei to `target`.      *      * Requirements:      *      * - the calling contract must have an ETH balance of at least `value`.      * - the called Solidity function must be `payable`.      *      * _Available since v3.1._      */ [18422,18783]",
      "parent": "contract_body [14509,20577]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [18789,19015]",
      "parent": "contract_body [14509,20577]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but      * with `errorMessage` as a fallback revert reason when `target` reverts.      *      * _Available since v3.1._      */ [19023,19265]",
      "parent": "contract_body [14509,20577]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function_definition [19271,19587]",
      "parent": "contract_body [14509,20577]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_definition [19595,20574]",
      "parent": "contract_body [14509,20577]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "}: } [20576,20577]",
      "parent": "contract_body [14509,20577]",
      "at": 14
    },
    {
      "action": "update-node",
      "tree": "solidity_version:  0.5.13 [12991,12998]",
      "label": " 0.6.10"
    },
    {
      "action": "insert-node",
      "tree": "{: { [22501,22502]",
      "parent": "contract_body [22501,31031]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "using_directive [32209,32236]",
      "parent": "contract_body [22501,31031]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "using_directive [22541,22567]",
      "parent": "contract_body [22501,31031]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the name of the token.      */ [22575,22631]",
      "parent": "contract_body [22501,31031]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function_definition [22637,22697]",
      "parent": "contract_body [22501,31031]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the symbol of the token, usually a shorter version of the      * name.      */ [22705,22810]",
      "parent": "contract_body [22501,31031]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "function_definition [22816,22878]",
      "parent": "contract_body [22501,31031]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the number of decimals used to get its user representation.      * For example, if `decimals` equals `2`, a balance of `505` tokens should      * be displayed to a user as `5,05` (`505 / 10 ** 2`).      *      * Tokens usually opt for a value of 18, imitating the relationship between      * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is      * called.      *      * NOTE: This information is only used for _display_ purposes: it in      * no way affects any of the arithmetic of the contract, including      * {IERC20-balanceOf} and {IERC20-transfer}.      */ [22886,23510]",
      "parent": "contract_body [22501,31031]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_definition [23516,23600]",
      "parent": "contract_body [22501,31031]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-totalSupply}.      */ [23608,23659]",
      "parent": "contract_body [22501,31031]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "function_definition [10954,11113]",
      "parent": "contract_body [22501,31031]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-balanceOf}.      */ [23773,23822]",
      "parent": "contract_body [22501,31031]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "function_definition [10628,10779]",
      "parent": "contract_body [22501,31031]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-transfer}.      *      * Requirements:      *      * - `recipient` cannot be the zero address.      * - the caller must have a balance of at least `amount`.      */ [23955,24154]",
      "parent": "contract_body [22501,31031]",
      "at": 13
    },
    {
      "action": "move-tree",
      "tree": "function_definition [34028,34240]",
      "parent": "contract_body [22501,31031]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-allowance}.      */ [24343,24392]",
      "parent": "contract_body [22501,31031]",
      "at": 15
    },
    {
      "action": "move-tree",
      "tree": "function_definition [85547,85691]",
      "parent": "contract_body [22501,31031]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-approve}.      *      * Requirements:      *      * - `spender` cannot be the zero address.      */ [24557,24690]",
      "parent": "contract_body [22501,31031]",
      "at": 17
    },
    {
      "action": "move-tree",
      "tree": "function_definition [10126,10274]",
      "parent": "contract_body [22501,31031]",
      "at": 18
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-transferFrom}.      *      * Emits an {Approval} event indicating the updated allowance. This is not      * required by the EIP. See the note at the beginning of {ERC20};      *      * Requirements:      * - `sender` and `recipient` cannot be the zero address.      * - `sender` must have a balance of at least `amount`.      * - the caller must have allowance for ``sender``'s tokens of at least      * `amount`.      */ [24873,25333]",
      "parent": "contract_body [22501,31031]",
      "at": 19
    },
    {
      "action": "insert-node",
      "tree": "function_definition [25339,25660]",
      "parent": "contract_body [22501,31031]",
      "at": 20
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Atomically increases the allowance granted to `spender` by the caller.      *      * This is an alternative to {approve} that can be used as a mitigation for      * problems described in {IERC20-approve}.      *      * Emits an {Approval} event indicating the updated allowance.      *      * Requirements:      *      * - `spender` cannot be the zero address.      */ [25668,26063]",
      "parent": "contract_body [22501,31031]",
      "at": 21
    },
    {
      "action": "move-tree",
      "tree": "function_definition [86135,86361]",
      "parent": "contract_body [22501,31031]",
      "at": 22
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Atomically decreases the allowance granted to `spender` by the caller.      *      * This is an alternative to {approve} that can be used as a mitigation for      * problems described in {IERC20-approve}.      *      * Emits an {Approval} event indicating the updated allowance.      *      * Requirements:      *      * - `spender` cannot be the zero address.      * - `spender` must have allowance for the caller of at least      * `subtractedValue`.      */ [26295,26784]",
      "parent": "contract_body [22501,31031]",
      "at": 23
    },
    {
      "action": "move-tree",
      "tree": "function_definition [86369,86605]",
      "parent": "contract_body [22501,31031]",
      "at": 24
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Moves tokens `amount` from `sender` to `recipient`.      *      * This is internal function is equivalent to {transfer}, and can be used to      * e.g. implement automatic token fees, slashing mechanisms, etc.      *      * Emits a {Transfer} event.      *      * Requirements:      *      * - `sender` cannot be the zero address.      * - `recipient` cannot be the zero address.      * - `sender` must have a balance of at least `amount`.      */ [27067,27543]",
      "parent": "contract_body [22501,31031]",
      "at": 25
    },
    {
      "action": "insert-node",
      "tree": "function_definition [27549,28088]",
      "parent": "contract_body [22501,31031]",
      "at": 26
    },
    {
      "action": "insert-node",
      "tree": "comment: /** @dev Creates `amount` tokens and assigns them to `account`, increasing      * the total supply.      *      * Emits a {Transfer} event with `from` set to the zero address.      *      * Requirements      *      * - `to` cannot be the zero address.      */ [28096,28363]",
      "parent": "contract_body [22501,31031]",
      "at": 27
    },
    {
      "action": "move-tree",
      "tree": "function_definition [37401,37825]",
      "parent": "contract_body [22501,31031]",
      "at": 28
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Destroys `amount` tokens from `account`, reducing the      * total supply.      *      * Emits a {Transfer} event with `to` set to the zero address.      *      * Requirements      *      * - `account` cannot be the zero address.      * - `account` must have at least `amount` tokens.      */ [28755,29073]",
      "parent": "contract_body [22501,31031]",
      "at": 29
    },
    {
      "action": "move-tree",
      "tree": "function_definition [53367,53769]",
      "parent": "contract_body [22501,31031]",
      "at": 30
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.      *      * This is internal function is equivalent to `approve`, and can be used to      * e.g. set automatic allowances for certain subsystems, etc.      *      * Emits an {Approval} event.      *      * Requirements:      *      * - `owner` cannot be the zero address.      * - `spender` cannot be the zero address.      */ [29505,29931]",
      "parent": "contract_body [22501,31031]",
      "at": 31
    },
    {
      "action": "insert-node",
      "tree": "function_definition [29937,30283]",
      "parent": "contract_body [22501,31031]",
      "at": 32
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Hook that is called before any transfer of tokens. This includes      * minting and burning.      *      * Calling conditions:      *      * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens      * will be to transferred to `to`.      * - when `from` is zero, `amount` tokens will be minted for `to`.      * - when `to` is zero, `amount` of ``from``'s tokens will be burned.      * - `from` and `to` are never both zero.      *      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].      */ [30291,30880]",
      "parent": "contract_body [22501,31031]",
      "at": 33
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-empty-blocks [30886,30930]",
      "parent": "contract_body [22501,31031]",
      "at": 34
    },
    {
      "action": "insert-node",
      "tree": "function_definition [30936,31028]",
      "parent": "contract_body [22501,31031]",
      "at": 35
    },
    {
      "action": "insert-node",
      "tree": "}: } [31030,31031]",
      "parent": "contract_body [22501,31031]",
      "at": 36
    },
    {
      "action": "update-node",
      "tree": "solidity_version:  0.5.13 [14240,14247]",
      "label": " 0.6.10"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     *@dev send all eth balance in the contract to another address     */ [27206,27284]",
      "label": "/**      * @dev send all eth balance in the contract to another address      * @param _to address to send eth balance to      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     *@dev send all token balance of an arbitary erc20 token     in the contract to another address     */ [27414,27526]",
      "label": "/**      * @dev send all token balance of an arbitrary erc20 token      * in the contract to another address      * @param token token to reclaim      * @param _to address to send eth balance to      */"
    },
    {
      "action": "update-node",
      "tree": "solidity_version:  0.5.13 [20872,20879]",
      "label": " 0.6.10"
    },
    {
      "action": "update-node",
      "tree": "comment: //Change the minimum and maximum amount that can be burned at once. Burning [38556,38631]",
      "label": "/**      * @dev Emitted when `value` tokens are burnt from one account (`burner`)      * @param burner address which burned tokens      * @param value amount of tokens burned      */"
    },
    {
      "action": "move-tree",
      "tree": "event_definition [37138,37188]",
      "parent": "contract_body [32244,34740]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "comment: //may be disabled by setting both to 0 (this will not be done under normal [38637,38711]",
      "label": "/**      * @dev Emitted when new burn bounds were set      * @param newMin new minimum burn amount      * @param newMax new maximum burn amount      * @notice `newMin` should never be greater than `newMax`      */"
    },
    {
      "action": "update-node",
      "tree": "comment: //operation, but we can't add checks to disallow it without losing a lot of [38717,38792]",
      "label": "/**      * @dev Destroys `amount` tokens from `msg.sender`, reducing the      * total supply.      * @param amount amount of tokens to burn      *      * Emits a {Transfer} event with `to` set to the zero address.      * Emits a {Burn} event with `burner` set to `msg.sender`      *      * Requirements      *      * - `msg.sender` must have at least `amount` tokens.      *      */"
    },
    {
      "action": "move-tree",
      "tree": "function_definition [33126,33285]",
      "parent": "contract_body [32244,34740]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "comment: //flexibility since burning could also be as good as disabled [38798,38859]",
      "label": "/**      * @dev Change the minimum and maximum amount that can be burned at once.      * Burning may be disabled by setting both to 0 (this will not be done      * under normal operation, but we can't add checks to disallow it without      * losing a lot of flexibility since burning could also be as good as disabled      * by setting the minimum extremely high, and we don't want to lock      * in any particular cap for the minimum)      * @param _min minimum amount that can be burned at once      * @param _max maximum amount that can be burned at once      */"
    },
    {
      "action": "update-node",
      "tree": "comment: //by setting the minimum extremely high, and we don't want to lock [38865,38931]",
      "label": "/**      * @dev Checks if amount is within allowed burn bounds and      * destroys `amount` tokens from `account`, reducing the      * total supply.      * @param account account to burn tokens for      * @param amount amount of tokens to burn      *      * Emits a {Burn} event      */"
    },
    {
      "action": "move-tree",
      "tree": "function_definition [53935,54454]",
      "parent": "contract_body [32244,34740]",
      "at": 12
    },
    {
      "action": "update-node",
      "tree": "solidity_version:  0.5.13 [21550,21557]",
      "label": " 0.6.10"
    },
    {
      "action": "insert-node",
      "tree": "{: { [36207,36208]",
      "parent": "contract_body [36207,41063]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [37246,37279]",
      "parent": "contract_body [36207,41063]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [46031,46084]",
      "parent": "contract_body [36207,41063]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when account blacklist status changes      */ [36312,36383]",
      "parent": "contract_body [36207,41063]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "event_definition [52459,52530]",
      "parent": "contract_body [36207,41063]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when `value` tokens are minted for `to`      * @param to address to mint tokens for      * @param value amount of tokens to be minted      */ [36460,36629]",
      "parent": "contract_body [36207,41063]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "event_definition [37194,37240]",
      "parent": "contract_body [36207,41063]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Creates `amount` tokens and assigns them to `account`, increasing      * the total supply.      * @param account address to mint tokens for      * @param amount amount of tokens to be minted      *      * Emits a {Mint} event      *      * Requirements      *      * - `account` cannot be the zero address.      * - `account` cannot be blacklisted.      * - `account` cannot be a redemption address.      */ [36689,37125]",
      "parent": "contract_body [36207,41063]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "function_definition [38306,38548]",
      "parent": "contract_body [36207,41063]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Set blacklisted status for the account.      * @param account address to set blacklist flag for      * @param _isBlacklisted blacklist flag value      *      * Requirements:      *      * - `msg.sender` should be owner.      */ [37464,37715]",
      "parent": "contract_body [36207,41063]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [37721,38043]",
      "parent": "contract_body [36207,41063]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Set canBurn status for the account.      * @param account address to set canBurn flag for      * @param _canBurn canBurn flag value      *      * Requirements:      *      * - `msg.sender` should be owner.      */ [38051,38288]",
      "parent": "contract_body [36207,41063]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function_definition [38294,38411]",
      "parent": "contract_body [36207,41063]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Check if neither account is blacklisted before performing transfer      * If transfer recipient is a redemption address, burns tokens      * @notice Transfer to redemption address will burn tokens with a 1 cent precision      * @param sender address of sender      * @param recipient address of recipient      * @param amount amount of tokens to transfer      */ [38419,38804]",
      "parent": "contract_body [36207,41063]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function_definition [38810,39391]",
      "parent": "contract_body [36207,41063]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Requere neither accounts to be blacklisted before approval      * @param owner address of owner giving approval      * @param spender address of spender to approve for      * @param amount amount of tokens to approve      */ [39399,39644]",
      "parent": "contract_body [36207,41063]",
      "at": 15
    },
    {
      "action": "insert-node",
      "tree": "function_definition [39650,40018]",
      "parent": "contract_body [36207,41063]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Check if tokens can be burned at address before burning      * @param account account to burn tokens from      * @param amount amount of tokens to burn      */ [40026,40205]",
      "parent": "contract_body [36207,41063]",
      "at": 17
    },
    {
      "action": "move-tree",
      "tree": "function_definition [62098,62274]",
      "parent": "contract_body [36207,41063]",
      "at": 18
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev First 0x100000-1 addresses (0x0000000000000000000000000000000000000001       * to 0x00000000000000000000000000000000000fffff) are redemption addresses.      * @param account address to check is a redemption address      *      * All transfers to redemption address will trigger token burn.      *      * @notice For transfer to succeed, canBurn must be true for redemption address      *      * @return is `account` a redemption address      */ [40415,40885]",
      "parent": "contract_body [36207,41063]",
      "at": 19
    },
    {
      "action": "insert-node",
      "tree": "function_definition [40891,41060]",
      "parent": "contract_body [36207,41063]",
      "at": 20
    },
    {
      "action": "insert-node",
      "tree": "}: } [41062,41063]",
      "parent": "contract_body [36207,41063]",
      "at": 21
    },
    {
      "action": "update-node",
      "tree": "solidity_version:  0.5.13 [22416,22423]",
      "label": " 0.6.10"
    },
    {
      "action": "insert-node",
      "tree": "{: { [42007,42008]",
      "parent": "contract_body [42007,43004]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "function_definition [42014,42567]",
      "parent": "contract_body [42007,43004]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev return false if address is autosweep address      * @param recipient transfer recipient      * @param depositAddress address to deposit to      */ [42575,42741]",
      "parent": "contract_body [42007,43004]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "function_definition [42747,43001]",
      "parent": "contract_body [42007,43004]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [43003,43004]",
      "parent": "contract_body [42007,43004]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "solidity_version:  0.5.13 [25522,25529]",
      "label": " 0.6.10"
    },
    {
      "action": "update-node",
      "tree": "identifier: RESERVE [64479,64486]",
      "label": "balances_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: opportunity_ [71319,71331]",
      "label": "allowances_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [22854,22866]",
      "label": "_totalSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: DELEGATE_FROM [84949,84962]",
      "label": "registry_Deprecated"
    },
    {
      "action": "insert-node",
      "tree": "type_name [1211,1220]",
      "parent": "state_variable_declaration [1211,1246]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: INFINITE_ALLOWANCE [32381,32399]",
      "label": "gasRefundPool_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: minimumGasPriceForFutureRefunds [23239,23270]",
      "label": "minimumGasPriceForFutureRefunds_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: balanceOf [21045,21054]",
      "label": "_balances"
    },
    {
      "action": "update-node",
      "tree": "identifier: allowanceOf [21748,21759]",
      "label": "_allowances"
    },
    {
      "action": "update-node",
      "tree": "identifier: attributes [23442,23452]",
      "label": "attributes_Deprecated"
    },
    {
      "action": "move-tree",
      "tree": "type_name [11185,11194]",
      "parent": "state_variable_declaration [1555,1601]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: finOps_Deprecated [1583,1600]",
      "parent": "state_variable_declaration [1555,1601]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: finOpBalances [23592,23605]",
      "label": "finOpBalances_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: finOpSupply [23640,23651]",
      "label": "finOpSupply_Deprecated"
    },
    {
      "action": "move-tree",
      "tree": "struct_member [6113,6127]",
      "parent": "struct_declaration [1745,1830]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _rewardDistribution [23827,23846]",
      "label": "_rewardDistribution_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: maxRewardProportion [23861,23880]",
      "label": "maxRewardProportion_Deprecated"
    },
    {
      "action": "insert-node",
      "tree": "type_name [1966,1990]",
      "parent": "state_variable_declaration [1966,2005]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: configured [28367,28377]",
      "label": "isBlacklisted"
    },
    {
      "action": "insert-node",
      "tree": "type_name [2011,2035]",
      "parent": "state_variable_declaration [2011,2051]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "visibility [52781,52787]",
      "parent": "state_variable_declaration [2011,2051]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: canBurn [2043,2050]",
      "parent": "state_variable_declaration [2011,2051]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "function: function [8714,8722]",
      "parent": "function_definition [8714,8820]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _msgSender [8723,8733]",
      "parent": "function_definition [8714,8820]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [8733,8734]",
      "parent": "function_definition [8714,8820]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [8734,8735]",
      "parent": "function_definition [8714,8820]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [28674,28682]",
      "parent": "function_definition [8714,8820]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [10189,10193]",
      "parent": "function_definition [8714,8820]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [8750,8757]",
      "parent": "function_definition [8714,8820]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [8758,8783]",
      "parent": "function_definition [8714,8820]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [8784,8820]",
      "parent": "function_definition [8714,8820]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [8828,8836]",
      "parent": "function_definition [8828,9061]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _msgData [8837,8845]",
      "parent": "function_definition [8828,9061]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [8845,8846]",
      "parent": "function_definition [8828,9061]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [8846,8847]",
      "parent": "function_definition [8828,9061]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [31188,31196]",
      "parent": "function_definition [8828,9061]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [9412,9416]",
      "parent": "function_definition [8828,9061]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [8862,8869]",
      "parent": "function_definition [8828,9061]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [8870,8892]",
      "parent": "function_definition [8828,9061]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "function_body [8893,9061]",
      "parent": "function_definition [8828,9061]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [15103,15111]",
      "parent": "function_definition [15103,15722]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: isContract [15112,15122]",
      "parent": "function_definition [15103,15722]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [15122,15123]",
      "parent": "function_definition [15103,15722]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [15123,15138]",
      "parent": "function_definition [15103,15722]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [15138,15139]",
      "parent": "function_definition [15103,15722]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [7971,7979]",
      "parent": "function_definition [15103,15722]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [7980,7984]",
      "parent": "function_definition [15103,15722]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [33184,33198]",
      "parent": "function_definition [15103,15722]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [15169,15722]",
      "parent": "function_definition [15103,15722]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: mint [75256,75260]",
      "label": "sendValue"
    },
    {
      "action": "move-tree",
      "tree": "visibility [81335,81343]",
      "parent": "function_definition [16657,17054]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [17815,17823]",
      "parent": "function_definition [17815,17988]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCall [17824,17836]",
      "parent": "function_definition [17815,17988]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [17836,17837]",
      "parent": "function_definition [17815,17988]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [5990,6002]",
      "parent": "function_definition [17815,17988]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [17851,17852]",
      "parent": "function_definition [17815,17988]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [17853,17870]",
      "parent": "function_definition [17815,17988]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [17870,17871]",
      "parent": "function_definition [17815,17988]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [31321,31329]",
      "parent": "function_definition [17815,17988]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [17881,17903]",
      "parent": "function_definition [17815,17988]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [17904,17988]",
      "parent": "function_definition [17815,17988]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [18218,18226]",
      "parent": "function_definition [18218,18414]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCall [18227,18239]",
      "parent": "function_definition [18218,18414]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18239,18240]",
      "parent": "function_definition [18218,18414]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [21225,21238]",
      "parent": "function_definition [18218,18414]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [18254,18255]",
      "parent": "function_definition [18218,18414]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18256,18273]",
      "parent": "function_definition [18218,18414]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [18273,18274]",
      "parent": "function_definition [18218,18414]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18275,18301]",
      "parent": "function_definition [18218,18414]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [18301,18302]",
      "parent": "function_definition [18218,18414]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [31524,31532]",
      "parent": "function_definition [18218,18414]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [18312,18334]",
      "parent": "function_definition [18218,18414]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [18335,18414]",
      "parent": "function_definition [18218,18414]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [18789,18797]",
      "parent": "function_definition [18789,19015]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCallWithValue [18798,18819]",
      "parent": "function_definition [18789,19015]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18819,18820]",
      "parent": "function_definition [18789,19015]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [21083,21096]",
      "parent": "function_definition [18789,19015]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [18834,18835]",
      "parent": "function_definition [18789,19015]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18836,18853]",
      "parent": "function_definition [18789,19015]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [18853,18854]",
      "parent": "function_definition [18789,19015]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [156,169]",
      "parent": "function_definition [18789,19015]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [18868,18869]",
      "parent": "function_definition [18789,19015]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [31709,31717]",
      "parent": "function_definition [18789,19015]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [18879,18901]",
      "parent": "function_definition [18789,19015]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [18902,19015]",
      "parent": "function_definition [18789,19015]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [19271,19279]",
      "parent": "function_definition [19271,19587]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCallWithValue [19280,19301]",
      "parent": "function_definition [19271,19587]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19301,19302]",
      "parent": "function_definition [19271,19587]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [22204,22224]",
      "parent": "function_definition [19271,19587]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [19316,19317]",
      "parent": "function_definition [19271,19587]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19318,19335]",
      "parent": "function_definition [19271,19587]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [19335,19336]",
      "parent": "function_definition [19271,19587]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [65483,65496]",
      "parent": "function_definition [19271,19587]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [19350,19351]",
      "parent": "function_definition [19271,19587]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19352,19378]",
      "parent": "function_definition [19271,19587]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "): ) [19378,19379]",
      "parent": "function_definition [19271,19587]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "visibility [35454,35462]",
      "parent": "function_definition [19271,19587]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [19389,19411]",
      "parent": "function_definition [19271,19587]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_body [19412,19587]",
      "parent": "function_definition [19271,19587]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function: function [19595,19603]",
      "parent": "function_definition [19595,20574]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _functionCallWithValue [19604,19626]",
      "parent": "function_definition [19595,20574]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19626,19627]",
      "parent": "function_definition [19595,20574]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [22226,22242]",
      "parent": "function_definition [19595,20574]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [19641,19642]",
      "parent": "function_definition [19595,20574]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19643,19660]",
      "parent": "function_definition [19595,20574]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [19660,19661]",
      "parent": "function_definition [19595,20574]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [6024,6038]",
      "parent": "function_definition [19595,20574]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [19678,19679]",
      "parent": "function_definition [19595,20574]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19680,19706]",
      "parent": "function_definition [19595,20574]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "): ) [19706,19707]",
      "parent": "function_definition [19595,20574]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "visibility [19708,19715]",
      "parent": "function_definition [19595,20574]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [19716,19738]",
      "parent": "function_definition [19595,20574]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_body [19739,20574]",
      "parent": "function_definition [19595,20574]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "using: using [22541,22546]",
      "parent": "using_directive [22541,22567]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "type_alias [22547,22554]",
      "parent": "using_directive [22541,22567]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "for: for [22555,22558]",
      "parent": "using_directive [22541,22567]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_name [46842,46849]",
      "parent": "using_directive [22541,22567]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function: function [22637,22645]",
      "parent": "function_definition [22637,22697]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: name [22646,22650]",
      "parent": "function_definition [22637,22697]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [22650,22651]",
      "parent": "function_definition [22637,22697]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [22651,22652]",
      "parent": "function_definition [22637,22697]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [21256,21262]",
      "parent": "function_definition [22637,22697]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [22660,22667]",
      "parent": "function_definition [22637,22697]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [22668,22672]",
      "parent": "function_definition [22637,22697]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [22673,22696]",
      "parent": "function_definition [22637,22697]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [22816,22824]",
      "parent": "function_definition [22816,22878]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: symbol [22825,22831]",
      "parent": "function_definition [22816,22878]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [22831,22832]",
      "parent": "function_definition [22816,22878]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [22832,22833]",
      "parent": "function_definition [22816,22878]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [21398,21404]",
      "parent": "function_definition [22816,22878]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [22841,22848]",
      "parent": "function_definition [22816,22878]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [22849,22853]",
      "parent": "function_definition [22816,22878]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [22854,22877]",
      "parent": "function_definition [22816,22878]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [23516,23524]",
      "parent": "function_definition [23516,23600]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: decimals [23525,23533]",
      "parent": "function_definition [23516,23600]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [23533,23534]",
      "parent": "function_definition [23516,23600]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [23534,23535]",
      "parent": "function_definition [23516,23600]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [14007,14013]",
      "parent": "function_definition [23516,23600]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [23543,23550]",
      "parent": "function_definition [23516,23600]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [87415,87419]",
      "parent": "function_definition [23516,23600]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [23556,23571]",
      "parent": "function_definition [23516,23600]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "function_body [23572,23600]",
      "parent": "function_definition [23516,23600]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: getAttributeTimestamp [10963,10984]",
      "label": "totalSupply"
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [23700,23708]",
      "parent": "function_definition [23665,23765]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: getAttributeValue [10637,10654]",
      "label": "balanceOf"
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [23876,23884]",
      "parent": "function_definition [23828,23947]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: increaseAllowance [34037,34054]",
      "label": "transfer"
    },
    {
      "action": "move-tree",
      "tree": "parameter [13989,14005]",
      "parent": "function_definition [24160,24335]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [66007,66021]",
      "parent": "function_definition [24160,24335]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24220,24227]",
      "parent": "function_definition [24160,24335]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24228,24236]",
      "parent": "function_definition [24160,24335]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: delegateAllowance [85556,85573]",
      "label": "allowance"
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24461,24468]",
      "parent": "function_definition [24398,24549]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24469,24477]",
      "parent": "function_definition [24398,24549]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [9417,9434]",
      "parent": "function_definition [24398,24549]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: hasAttribute [10135,10147]",
      "label": "approve"
    },
    {
      "action": "move-tree",
      "tree": "parameter [66481,66495]",
      "parent": "function_definition [24696,24865]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24753,24760]",
      "parent": "function_definition [24696,24865]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24761,24769]",
      "parent": "function_definition [24696,24865]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [25339,25347]",
      "parent": "function_definition [25339,25660]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: transferFrom [25348,25360]",
      "parent": "function_definition [25339,25660]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [25360,25361]",
      "parent": "function_definition [25339,25660]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [25361,25375]",
      "parent": "function_definition [25339,25660]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [25375,25376]",
      "parent": "function_definition [25339,25660]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [8219,8231]",
      "parent": "function_definition [25339,25660]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [25394,25395]",
      "parent": "function_definition [25339,25660]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [25396,25410]",
      "parent": "function_definition [25339,25660]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [25410,25411]",
      "parent": "function_definition [25339,25660]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [33177,33183]",
      "parent": "function_definition [25339,25660]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [25419,25426]",
      "parent": "function_definition [25339,25660]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [25427,25435]",
      "parent": "function_definition [25339,25660]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [7985,7999]",
      "parent": "function_definition [25339,25660]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_body [25451,25660]",
      "parent": "function_definition [25339,25660]",
      "at": 13
    },
    {
      "action": "update-node",
      "tree": "identifier: delegateIncreaseApproval [86144,86168]",
      "label": "increaseAllowance"
    },
    {
      "action": "move-tree",
      "tree": "parameter [9005,9019]",
      "parent": "function_definition [26069,26287]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [26140,26147]",
      "parent": "function_definition [26069,26287]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: delegateDecreaseApproval [86378,86402]",
      "label": "decreaseAllowance"
    },
    {
      "action": "move-tree",
      "tree": "parameter [8253,8267]",
      "parent": "function_definition [26790,27059]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [26866,26873]",
      "parent": "function_definition [26790,27059]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [27549,27557]",
      "parent": "function_definition [27549,28088]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _transfer [27558,27567]",
      "parent": "function_definition [27549,28088]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [27567,27568]",
      "parent": "function_definition [27549,28088]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [27568,27582]",
      "parent": "function_definition [27549,28088]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [27582,27583]",
      "parent": "function_definition [27549,28088]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [7955,7969]",
      "parent": "function_definition [27549,28088]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [27601,27602]",
      "parent": "function_definition [27549,28088]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [27603,27617]",
      "parent": "function_definition [27549,28088]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [27617,27618]",
      "parent": "function_definition [27549,28088]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [54541,54549]",
      "parent": "function_definition [27549,28088]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [27628,27635]",
      "parent": "function_definition [27549,28088]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [27636,28088]",
      "parent": "function_definition [27549,28088]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: _burnAllArgs [37410,37422]",
      "label": "_mint"
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [28426,28433]",
      "parent": "function_definition [28369,28747]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: wipeBlacklistedAccount [53376,53398]",
      "label": "_burn"
    },
    {
      "action": "insert-node",
      "tree": ",: , [29109,29110]",
      "parent": "function_definition [29079,29497]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [29111,29125]",
      "parent": "function_definition [29079,29497]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "visibility [55723,55731]",
      "parent": "function_definition [29079,29497]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [29136,29143]",
      "parent": "function_definition [29079,29497]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [29937,29945]",
      "parent": "function_definition [29937,30283]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [29946,29954]",
      "parent": "function_definition [29937,30283]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [29954,29955]",
      "parent": "function_definition [29937,30283]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [29955,29968]",
      "parent": "function_definition [29937,30283]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [29968,29969]",
      "parent": "function_definition [29937,30283]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [29970,29985]",
      "parent": "function_definition [29937,30283]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [29985,29986]",
      "parent": "function_definition [29937,30283]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [29987,30001]",
      "parent": "function_definition [29937,30283]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [30001,30002]",
      "parent": "function_definition [29937,30283]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [77217,77225]",
      "parent": "function_definition [29937,30283]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [30012,30019]",
      "parent": "function_definition [29937,30283]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [30020,30283]",
      "parent": "function_definition [29937,30283]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [30936,30944]",
      "parent": "function_definition [30936,31028]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _beforeTokenTransfer [30945,30965]",
      "parent": "function_definition [30936,31028]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30965,30966]",
      "parent": "function_definition [30936,31028]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [142,154]",
      "parent": "function_definition [30936,31028]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [30978,30979]",
      "parent": "function_definition [30936,31028]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [65471,65481]",
      "parent": "function_definition [30936,31028]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [30990,30991]",
      "parent": "function_definition [30936,31028]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [30992,31006]",
      "parent": "function_definition [30936,31028]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [31006,31007]",
      "parent": "function_definition [30936,31028]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [36802,36810]",
      "parent": "function_definition [30936,31028]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [31017,31024]",
      "parent": "function_definition [30936,31028]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "function_body [31025,31028]",
      "parent": "function_definition [30936,31028]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: HasOwner [27190,27198]",
      "label": "ERC20"
    },
    {
      "action": "update-node",
      "tree": "identifier: approve [33135,33142]",
      "label": "burn"
    },
    {
      "action": "move-tree",
      "tree": "parameter [62933,62947]",
      "parent": "function_definition [33185,33268]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [172,180]",
      "parent": "function_definition [33185,33268]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: _requireCanTransfer [53944,53963]",
      "label": "_burn"
    },
    {
      "action": "move-tree",
      "tree": "parameter [61273,61288]",
      "parent": "function_definition [34403,34737]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [61299,61313]",
      "parent": "function_definition [34403,34737]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [61354,61362]",
      "parent": "function_definition [34403,34737]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [34460,34467]",
      "parent": "function_definition [34403,34737]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [34468,34476]",
      "parent": "function_definition [34403,34737]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [54242,54304]",
      "parent": "function_body [34477,34737]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: WipeBlacklistedAccount [52465,52487]",
      "label": "Blacklisted"
    },
    {
      "action": "update-node",
      "tree": "identifier: _burnAllArgs [38315,38327]",
      "label": "mint"
    },
    {
      "action": "move-tree",
      "tree": "parameter [60231,60246]",
      "parent": "function_definition [37131,37456]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [60257,60271]",
      "parent": "function_definition [37131,37456]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [27895,27903]",
      "parent": "function_definition [37131,37456]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [21405,21414]",
      "parent": "function_definition [37131,37456]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [37721,37729]",
      "parent": "function_definition [37721,38043]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setBlacklisted [37730,37744]",
      "parent": "function_definition [37721,38043]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [37744,37745]",
      "parent": "function_definition [37721,38043]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [58403,58418]",
      "parent": "function_definition [37721,38043]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [37760,37761]",
      "parent": "function_definition [37721,38043]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [53842,53858]",
      "parent": "function_definition [37721,38043]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [37781,37782]",
      "parent": "function_definition [37721,38043]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [9021,9029]",
      "parent": "function_definition [37721,38043]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [21263,21272]",
      "parent": "function_definition [37721,38043]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [37802,38043]",
      "parent": "function_definition [37721,38043]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [38294,38302]",
      "parent": "function_definition [38294,38411]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setCanBurn [38303,38313]",
      "parent": "function_definition [38294,38411]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38313,38314]",
      "parent": "function_definition [38294,38411]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [58995,59010]",
      "parent": "function_definition [38294,38411]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [38329,38330]",
      "parent": "function_definition [38294,38411]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [54024,54028]",
      "parent": "function_definition [38294,38411]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [38344,38345]",
      "parent": "function_definition [38294,38411]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [8827,8835]",
      "parent": "function_definition [38294,38411]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [22267,22276]",
      "parent": "function_definition [38294,38411]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "function_body [38365,38411]",
      "parent": "function_definition [38294,38411]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [38810,38818]",
      "parent": "function_definition [38810,39391]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _transfer [38819,38828]",
      "parent": "function_definition [38810,39391]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38828,38829]",
      "parent": "function_definition [38810,39391]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [68241,68255]",
      "parent": "function_definition [38810,39391]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [38853,38854]",
      "parent": "function_definition [38810,39391]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [21367,21380]",
      "parent": "function_definition [38810,39391]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [38881,38882]",
      "parent": "function_definition [38810,39391]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [59021,59035]",
      "parent": "function_definition [38810,39391]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [38912,38913]",
      "parent": "function_definition [38810,39391]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [68344,68352]",
      "parent": "function_definition [38810,39391]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [38923,38930]",
      "parent": "function_definition [38810,39391]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [38931,38939]",
      "parent": "function_definition [38810,39391]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function_body [38940,39391]",
      "parent": "function_definition [38810,39391]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function: function [39650,39658]",
      "parent": "function_definition [39650,40018]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [39659,39667]",
      "parent": "function_definition [39650,40018]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [39667,39668]",
      "parent": "function_definition [39650,40018]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [39678,39691]",
      "parent": "function_definition [39650,40018]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [39691,39692]",
      "parent": "function_definition [39650,40018]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [85952,85967]",
      "parent": "function_definition [39650,40018]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [39717,39718]",
      "parent": "function_definition [39650,40018]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [62552,62566]",
      "parent": "function_definition [39650,40018]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [39748,39749]",
      "parent": "function_definition [39650,40018]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [47106,47114]",
      "parent": "function_definition [39650,40018]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [39759,39767]",
      "parent": "function_definition [39650,40018]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [39768,40018]",
      "parent": "function_definition [39650,40018]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: _addRewardBalance [62107,62124]",
      "label": "_burn"
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [40268,40276]",
      "parent": "function_definition [40211,40407]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [40891,40899]",
      "parent": "function_definition [40891,41060]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: isRedemptionAddress [40900,40919]",
      "parent": "function_definition [40891,41060]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [40919,40920]",
      "parent": "function_definition [40891,41060]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [62535,62550]",
      "parent": "function_definition [40891,41060]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [40935,40936]",
      "parent": "function_definition [40891,41060]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [62583,62591]",
      "parent": "function_definition [40891,41060]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [55939,55943]",
      "parent": "function_definition [40891,41060]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [35185,35199]",
      "parent": "function_definition [40891,41060]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [40966,41060]",
      "parent": "function_definition [40891,41060]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [42014,42022]",
      "parent": "function_definition [42014,42567]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _transfer [42023,42032]",
      "parent": "function_definition [42014,42567]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [42032,42033]",
      "parent": "function_definition [42014,42567]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [66953,66967]",
      "parent": "function_definition [42014,42567]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [42057,42058]",
      "parent": "function_definition [42014,42567]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [22019,22035]",
      "parent": "function_definition [42014,42567]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [42085,42086]",
      "parent": "function_definition [42014,42567]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [67005,67019]",
      "parent": "function_definition [42014,42567]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [42116,42117]",
      "parent": "function_definition [42014,42567]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [67051,67059]",
      "parent": "function_definition [42014,42567]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [42127,42135]",
      "parent": "function_definition [42014,42567]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [42136,42567]",
      "parent": "function_definition [42014,42567]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [42747,42755]",
      "parent": "function_definition [42747,43001]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: requireNotAutosweepAddress [42756,42782]",
      "parent": "function_definition [42747,43001]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [42782,42783]",
      "parent": "function_definition [42747,43001]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [21790,21810]",
      "parent": "function_definition [42747,43001]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [42800,42801]",
      "parent": "function_definition [42747,43001]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [21812,21828]",
      "parent": "function_definition [42747,43001]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [42824,42825]",
      "parent": "function_definition [42747,43001]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [55126,55134]",
      "parent": "function_definition [42747,43001]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [46176,46180]",
      "parent": "function_definition [42747,43001]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [42840,43001]",
      "parent": "function_definition [42747,43001]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: TrueRewardBackedToken [86903,86924]",
      "label": "TrueCurrencyWithLegacyAutosweep"
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [43383,43391]",
      "parent": "function_definition [43356,43447]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [43568,43576]",
      "parent": "function_definition [43545,43641]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [43674,43682]",
      "parent": "function_definition [43649,43744]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "type_name [32364,32371]",
      "parent": "type_name [1211,1220]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "[: [ [1218,1219]",
      "parent": "type_name [1211,1220]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "]: ] [1219,1220]",
      "parent": "type_name [1211,1220]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1555,1562]",
      "parent": "type_name [1555,1582]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1562,1563]",
      "parent": "type_name [1555,1582]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [6848,6855]",
      "parent": "type_name [1555,1582]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1571,1573]",
      "parent": "type_name [1555,1582]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [1581,1582]",
      "parent": "type_name [1555,1582]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: value [6121,6126]",
      "label": "proportion"
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1966,1973]",
      "parent": "type_name [1966,1990]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1973,1974]",
      "parent": "type_name [1966,1990]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [23498,23505]",
      "parent": "type_name [1966,1990]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1982,1984]",
      "parent": "type_name [1966,1990]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [28362,28366]",
      "parent": "type_name [1966,1990]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [1989,1990]",
      "parent": "type_name [1966,1990]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [2011,2018]",
      "parent": "type_name [2011,2035]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2018,2019]",
      "parent": "type_name [2011,2035]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [52857,52864]",
      "parent": "type_name [2011,2035]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [2027,2029]",
      "parent": "type_name [2011,2035]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [54573,54577]",
      "parent": "type_name [2011,2035]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [2034,2035]",
      "parent": "type_name [2011,2035]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "{: { [8784,8785]",
      "parent": "function_body [8784,8820]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [8795,8813]",
      "parent": "function_body [8784,8820]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [8819,8820]",
      "parent": "function_body [8784,8820]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "{: { [15169,15170]",
      "parent": "function_body [15169,15722]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // According to EIP-1052, 0x0 is the value returned for not-yet created accounts [15180,15260]",
      "parent": "function_body [15169,15722]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned [15270,15355]",
      "parent": "function_body [15169,15722]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // for accounts without code, i.e. `keccak256('')` [15365,15415]",
      "parent": "function_body [15169,15722]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [15425,15442]",
      "parent": "function_body [15169,15722]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [15452,15541]",
      "parent": "function_body [15169,15722]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-inline-assembly [15551,15598]",
      "parent": "function_body [15169,15722]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "assembly_statement [15608,15653]",
      "parent": "function_body [15169,15722]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [15663,15715]",
      "parent": "function_body [15169,15722]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "}: } [15721,15722]",
      "parent": "function_body [15169,15722]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [75269,75272]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [75282,75288]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [75659,75704]",
      "parent": "function_body [16728,17054]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "comment: // check if to address is enabled [75318,75351]",
      "label": "// solhint-disable-next-line avoid-low-level-calls, avoid-call-value"
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [68630,68726]",
      "parent": "function_body [16728,17054]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [5998,6002]",
      "label": "target"
    },
    {
      "action": "insert-node",
      "tree": "{: { [17904,17905]",
      "parent": "function_body [17904,17988]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [17913,17981]",
      "parent": "function_body [17904,17988]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [17987,17988]",
      "parent": "function_body [17904,17988]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [21233,21238]",
      "label": "target"
    },
    {
      "action": "insert-node",
      "tree": "{: { [18335,18336]",
      "parent": "function_body [18335,18414]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [18346,18407]",
      "parent": "function_body [18335,18414]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [18413,18414]",
      "parent": "function_body [18335,18414]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [21091,21096]",
      "label": "target"
    },
    {
      "action": "insert-node",
      "tree": "{: { [18902,18903]",
      "parent": "function_body [18902,19015]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [18913,19008]",
      "parent": "function_body [18902,19015]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [19014,19015]",
      "parent": "function_body [18902,19015]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _tokenHolder [22212,22224]",
      "label": "target"
    },
    {
      "action": "insert-node",
      "tree": "{: { [19412,19413]",
      "parent": "function_body [19412,19587]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [67369,67466]",
      "parent": "function_body [19412,19587]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "return_statement [19515,19580]",
      "parent": "function_body [19412,19587]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [19586,19587]",
      "parent": "function_body [19412,19587]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [22234,22242]",
      "label": "target"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [6032,6038]",
      "label": "weiValue"
    },
    {
      "action": "insert-node",
      "tree": "{: { [19739,19740]",
      "parent": "function_body [19739,20574]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [68428,68509]",
      "parent": "function_body [19739,20574]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line avoid-low-level-calls [19823,19873]",
      "parent": "function_body [19739,20574]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [81848,81914]",
      "parent": "function_body [19739,20574]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "if_statement [19972,20567]",
      "parent": "function_body [19739,20574]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [20573,20574]",
      "parent": "function_body [19739,20574]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [10663,10667]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [13997,14005]",
      "label": "recipient"
    },
    {
      "action": "move-tree",
      "tree": "return_statement [35292,35304]",
      "parent": "function_body [24252,24335]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [10156,10160]",
      "label": "spender"
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [24796,24836]",
      "parent": "function_body [24785,24865]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "return_statement [34221,34233]",
      "parent": "function_body [24785,24865]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [8227,8231]",
      "label": "recipient"
    },
    {
      "action": "insert-node",
      "tree": "{: { [25451,25452]",
      "parent": "function_body [25451,25660]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [25462,25499]",
      "parent": "function_body [25451,25660]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [25509,25631]",
      "parent": "function_body [25451,25660]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "return_statement [33266,33278]",
      "parent": "function_body [25451,25660]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [25659,25660]",
      "parent": "function_body [25451,25660]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _index [9013,9019]",
      "label": "addedValue"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [8261,8267]",
      "label": "subtractedValue"
    },
    {
      "action": "update-node",
      "tree": "identifier: _admin [7963,7969]",
      "label": "recipient"
    },
    {
      "action": "insert-node",
      "tree": "{: { [27636,27637]",
      "parent": "function_body [27636,28088]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [14035,14067]",
      "parent": "function_body [27636,28088]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [29202,29234]",
      "parent": "function_body [27636,28088]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [27812,27860]",
      "parent": "function_body [27636,28088]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [54940,55004]",
      "parent": "function_body [27636,28088]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [27974,28030]",
      "parent": "function_body [27636,28088]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "emit_statement [67826,67883]",
      "parent": "function_body [27636,28088]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "}: } [28087,28088]",
      "parent": "function_body [27636,28088]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: _from [37431,37436]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [37446,37452]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [51745,51801]",
      "parent": "function_body [28434,28747]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [52362,52418]",
      "parent": "function_body [28434,28747]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [28635,28687]",
      "parent": "function_body [28434,28747]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": ",: , [37796,37797]",
      "parent": "emit_statement [28697,28740]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [37791,37796]",
      "parent": "emit_statement [28697,28740]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: _account [53407,53415]",
      "label": "account"
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [55748,55812]",
      "parent": "function_body [29144,29497]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [29235,29285]",
      "parent": "function_body [29144,29497]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [9650,9736]",
      "parent": "function_body [29144,29497]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "{: { [30020,30021]",
      "parent": "function_body [30020,30283]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [55376,55438]",
      "parent": "function_body [30020,30283]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [30110,30179]",
      "parent": "function_body [30020,30283]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [30191,30228]",
      "parent": "function_body [30020,30283]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "emit_statement [30238,30276]",
      "parent": "function_body [30020,30283]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [30282,30283]",
      "parent": "function_body [30020,30283]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [34664,34693]",
      "parent": "function_body [34477,34737]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "emit_statement [61808,61853]",
      "parent": "function_body [34477,34737]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "type_name [55158,55162]",
      "parent": "event_paramater [36432,36450]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: balance [52521,52528]",
      "label": "isBlacklisted"
    },
    {
      "action": "move-tree",
      "tree": "emit_statement [59701,59746]",
      "parent": "function_body [37197,37456]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: blacklisted [53847,53858]",
      "label": "_isBlacklisted"
    },
    {
      "action": "insert-node",
      "tree": "{: { [37802,37803]",
      "parent": "function_body [37802,38043]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [48073,48124]",
      "parent": "function_body [37802,38043]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [37944,37984]",
      "parent": "function_body [37802,38043]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "emit_statement [37994,38036]",
      "parent": "function_body [37802,38043]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [38042,38043]",
      "parent": "function_body [37802,38043]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "identifier: _canBurn [38336,38344]",
      "parent": "parameter [38331,38344]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [21375,21380]",
      "label": "recipient"
    },
    {
      "action": "insert-node",
      "tree": "{: { [38940,38941]",
      "parent": "function_body [38940,39391]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [48134,48187]",
      "parent": "function_body [38940,39391]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [47217,47268]",
      "parent": "function_body [38940,39391]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "if_statement [39121,39384]",
      "parent": "function_body [38940,39391]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [39390,39391]",
      "parent": "function_body [38940,39391]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [39768,39769]",
      "parent": "function_body [39768,40018]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [39779,39855]",
      "parent": "function_body [39768,40018]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [47278,47331]",
      "parent": "function_body [39768,40018]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [39972,40011]",
      "parent": "function_body [39768,40018]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [40017,40018]",
      "parent": "function_body [39768,40018]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [53445,53510]",
      "parent": "function_body [40277,40407]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "{: { [40966,40967]",
      "parent": "function_body [40966,41060]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [40977,41053]",
      "parent": "function_body [40966,41060]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [41059,41060]",
      "parent": "function_body [40966,41060]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [22027,22035]",
      "label": "recipient"
    },
    {
      "action": "insert-node",
      "tree": "{: { [42136,42137]",
      "parent": "function_body [42136,42567]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [42147,42229]",
      "parent": "function_body [42136,42567]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [42239,42321]",
      "parent": "function_body [42136,42567]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [42331,42413]",
      "parent": "function_body [42136,42567]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [42423,42505]",
      "parent": "function_body [42136,42567]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [42517,42560]",
      "parent": "function_body [42136,42567]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "}: } [42566,42567]",
      "parent": "function_body [42136,42567]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: _tokenHolder [21798,21810]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [21820,21828]",
      "label": "depositAddress"
    },
    {
      "action": "insert-node",
      "tree": "{: { [42840,42841]",
      "parent": "function_body [42840,43001]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [42851,42994]",
      "parent": "function_body [42840,43001]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [43000,43001]",
      "parent": "function_body [42840,43001]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "return: return [8795,8801]",
      "parent": "return_statement [8795,8813]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "member_expression [28733,28743]",
      "parent": "return_statement [8795,8813]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [15425,15441]",
      "parent": "variable_declaration_statement [15425,15442]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [15452,15471]",
      "parent": "variable_declaration_statement [15452,15541]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [15472,15473]",
      "parent": "variable_declaration_statement [15452,15541]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 [15474,15540]",
      "parent": "variable_declaration_statement [15452,15541]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_tuple [83008,83039]",
      "parent": "variable_declaration_statement [16903,16958]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": ",: , [83024,83025]",
      "parent": "variable_declaration_tuple [16903,16919]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "return: return [17913,17919]",
      "parent": "return_statement [17913,17981]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_expression [74476,74545]",
      "parent": "return_statement [17913,17981]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "return: return [18346,18352]",
      "parent": "return_statement [18346,18407]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [18353,18406]",
      "parent": "return_statement [18346,18407]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "return: return [18913,18919]",
      "parent": "return_statement [18913,19008]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_expression [73674,73743]",
      "parent": "return_statement [18913,19008]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "return: return [19515,19521]",
      "parent": "return_statement [19515,19580]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [19522,19579]",
      "parent": "return_statement [19515,19580]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": ",: , [81864,81865]",
      "parent": "variable_declaration_tuple [19883,19922]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [81849,81864]",
      "parent": "variable_declaration_tuple [19883,19922]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "if: if [19972,19974]",
      "parent": "if_statement [19972,20567]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19975,19976]",
      "parent": "if_statement [19972,20567]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: success [19976,19983]",
      "parent": "if_statement [19972,20567]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [19983,19984]",
      "parent": "if_statement [19972,20567]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [19985,20029]",
      "parent": "if_statement [19972,20567]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [20030,20034]",
      "parent": "if_statement [19972,20567]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "block_statement [20035,20567]",
      "parent": "if_statement [19972,20567]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "identifier: _totalSupply [23745,23757]",
      "parent": "return_statement [23738,23758]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "array_access [23921,23939]",
      "parent": "return_statement [23914,23940]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [34176,34184]",
      "parent": "call_expression [24263,24305]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "array_access [24514,24541]",
      "parent": "return_statement [24507,24542]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_expression [24796,24835]",
      "parent": "expression_statement [24796,24836]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [25462,25498]",
      "parent": "expression_statement [25462,25499]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [25509,25630]",
      "parent": "expression_statement [25509,25631]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_argument [86299,86306]",
      "parent": "call_expression [26174,26257]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [86538,86545]",
      "parent": "call_expression [26900,27029]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "call_expression [27812,27859]",
      "parent": "expression_statement [27812,27860]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assignment_expression [27872,27963]",
      "parent": "expression_statement [27872,27964]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assignment_expression [27974,28029]",
      "parent": "expression_statement [27974,28030]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: SwapTokenForReward [67831,67849]",
      "label": "Transfer"
    },
    {
      "action": "insert-node",
      "tree": "assignment_expression [28635,28686]",
      "parent": "expression_statement [28635,28687]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_argument [59419,59426]",
      "parent": "emit_statement [28697,28740]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "call_expression [29235,29284]",
      "parent": "expression_statement [29235,29285]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [30110,30178]",
      "parent": "expression_statement [30110,30179]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "emit: emit [30238,30242]",
      "parent": "emit_statement [30238,30276]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: Approval [30243,30251]",
      "parent": "emit_statement [30238,30276]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30251,30252]",
      "parent": "emit_statement [30238,30276]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [14103,14108]",
      "parent": "emit_statement [30238,30276]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [30257,30258]",
      "parent": "emit_statement [30238,30276]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [30259,30266]",
      "parent": "emit_statement [30238,30276]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [30266,30267]",
      "parent": "emit_statement [30238,30276]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [30268,30274]",
      "parent": "emit_statement [30238,30276]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [30274,30275]",
      "parent": "emit_statement [30238,30276]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": ",: , [33234,33235]",
      "parent": "call_expression [33235,33260]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "call_expression [34664,34692]",
      "parent": "expression_statement [34664,34693]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: BurnRewardToken [61813,61828]",
      "label": "Burn"
    },
    {
      "action": "update-node",
      "tree": "identifier: MintRewardToken [59706,59721]",
      "label": "Mint"
    },
    {
      "action": "insert-node",
      "tree": "emit: emit [37994,37998]",
      "parent": "emit_statement [37994,38036]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: Blacklisted [37999,38010]",
      "parent": "emit_statement [37994,38036]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38010,38011]",
      "parent": "emit_statement [37994,38036]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [60890,60897]",
      "parent": "emit_statement [37994,38036]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [38018,38019]",
      "parent": "emit_statement [37994,38036]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [38020,38034]",
      "parent": "emit_statement [37994,38036]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [38034,38035]",
      "parent": "emit_statement [37994,38036]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "if: if [39121,39123]",
      "parent": "if_statement [39121,39384]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [39124,39125]",
      "parent": "if_statement [39121,39384]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [39125,39155]",
      "parent": "if_statement [39121,39384]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [39155,39156]",
      "parent": "if_statement [39121,39384]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [39157,39309]",
      "parent": "if_statement [39121,39384]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [39310,39314]",
      "parent": "if_statement [39121,39384]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "block_statement [39315,39384]",
      "parent": "if_statement [39121,39384]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "call_expression [39779,39854]",
      "parent": "expression_statement [39779,39855]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [39972,40010]",
      "parent": "expression_statement [39972,40011]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [40371,40399]",
      "parent": "expression_statement [40371,40400]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return: return [40977,40983]",
      "parent": "return_statement [40977,41053]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [40984,41052]",
      "parent": "return_statement [40977,41053]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_expression [42517,42559]",
      "parent": "expression_statement [42517,42560]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return: return [42851,42857]",
      "parent": "return_statement [42851,42994]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [42871,42993]",
      "parent": "return_statement [42851,42994]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ",: , [4812,4813]",
      "parent": "call_expression [4778,4835]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [57846,57867]",
      "parent": "call_expression [4778,4835]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "type_name [6004,6011]",
      "parent": "variable_declaration [15425,15441]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: codehash [15433,15441]",
      "parent": "variable_declaration [15425,15441]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [7935,7942]",
      "parent": "variable_declaration [15452,15471]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: accountHash [15460,15471]",
      "parent": "variable_declaration [15452,15471]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "payable: payable [16684,16691]",
      "parent": "primitive_type [16676,16691]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: _transferAllArgs [75659,75675]",
      "label": "require"
    },
    {
      "action": "move-tree",
      "tree": "call_argument [73619,73662]",
      "parent": "call_expression [16739,16812]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "struct_expression [16922,16953]",
      "parent": "call_expression [16922,16957]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_argument [81735,81755]",
      "parent": "call_expression [16922,16957]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: require [74476,74483]",
      "label": "functionCall"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [17933,17939]",
      "parent": "call_expression [17920,17980]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [17941,17945]",
      "parent": "call_expression [17920,17980]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [17945,17946]",
      "parent": "call_expression [17920,17980]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "identifier: _functionCallWithValue [18353,18375]",
      "parent": "call_expression [18353,18406]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18375,18376]",
      "parent": "call_expression [18353,18406]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18376,18382]",
      "parent": "call_expression [18353,18406]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [18382,18383]",
      "parent": "call_expression [18353,18406]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18384,18388]",
      "parent": "call_expression [18353,18406]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [18388,18389]",
      "parent": "call_expression [18353,18406]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [53593,53594]",
      "parent": "call_expression [18353,18406]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [18391,18392]",
      "parent": "call_expression [18353,18406]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18393,18405]",
      "parent": "call_expression [18353,18406]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "): ) [18405,18406]",
      "parent": "call_expression [18353,18406]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: require [73674,73681]",
      "label": "functionCallWithValue"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18942,18948]",
      "parent": "call_expression [18920,19007]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18950,18954]",
      "parent": "call_expression [18920,19007]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [18954,18955]",
      "parent": "call_expression [18920,19007]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [65558,65563]",
      "parent": "call_expression [18920,19007]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [18961,18962]",
      "parent": "call_expression [18920,19007]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "identifier: _functionCallWithValue [19522,19544]",
      "parent": "call_expression [19522,19579]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19544,19545]",
      "parent": "call_expression [19522,19579]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [19545,19551]",
      "parent": "call_expression [19522,19579]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [19551,19552]",
      "parent": "call_expression [19522,19579]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [19553,19557]",
      "parent": "call_expression [19522,19579]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [19557,19558]",
      "parent": "call_expression [19522,19579]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [86079,86084]",
      "parent": "call_expression [19522,19579]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [19564,19565]",
      "parent": "call_expression [19522,19579]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [19566,19578]",
      "parent": "call_expression [19522,19579]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "): ) [19578,19579]",
      "parent": "call_expression [19522,19579]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "struct_expression [19925,19955]",
      "parent": "call_expression [19925,19961]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [20035,20036]",
      "parent": "block_statement [20035,20567]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // Look for revert reason and bubble it up if present [20050,20103]",
      "parent": "block_statement [20035,20567]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "if_statement [20117,20556]",
      "parent": "block_statement [20035,20567]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [20566,20567]",
      "parent": "block_statement [20035,20567]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _increaseAllowanceAllArgs [34150,34175]",
      "label": "_transfer"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [24273,24285]",
      "parent": "call_expression [24263,24305]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [60606,60612]",
      "parent": "call_expression [24263,24305]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [24796,24804]",
      "parent": "call_expression [24796,24835]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [24804,24805]",
      "parent": "call_expression [24796,24835]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [24805,24817]",
      "parent": "call_expression [24796,24835]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [24817,24818]",
      "parent": "call_expression [24796,24835]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [85675,85682]",
      "parent": "call_expression [24796,24835]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [24826,24827]",
      "parent": "call_expression [24796,24835]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [67562,67568]",
      "parent": "call_expression [24796,24835]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [24834,24835]",
      "parent": "call_expression [24796,24835]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "identifier: _transfer [25462,25471]",
      "parent": "call_expression [25462,25498]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [25471,25472]",
      "parent": "call_expression [25462,25498]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [68658,68664]",
      "parent": "call_expression [25462,25498]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [25478,25479]",
      "parent": "call_expression [25462,25498]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [25480,25489]",
      "parent": "call_expression [25462,25498]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [25489,25490]",
      "parent": "call_expression [25462,25498]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [67601,67607]",
      "parent": "call_expression [25462,25498]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [25497,25498]",
      "parent": "call_expression [25462,25498]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [25509,25517]",
      "parent": "call_expression [25509,25630]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [25517,25518]",
      "parent": "call_expression [25509,25630]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [68812,68818]",
      "parent": "call_expression [25509,25630]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [25524,25525]",
      "parent": "call_expression [25509,25630]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [25526,25538]",
      "parent": "call_expression [25509,25630]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [25538,25539]",
      "parent": "call_expression [25509,25630]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "call_argument [25540,25629]",
      "parent": "call_expression [25509,25630]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [25629,25630]",
      "parent": "call_expression [25509,25630]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: _increaseAllowanceAllArgs [86273,86298]",
      "label": "_approve"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [26183,26195]",
      "parent": "call_expression [26174,26257]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "call_argument [26206,26256]",
      "parent": "call_expression [26174,26257]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: _decreaseAllowanceAllArgs [86512,86537]",
      "label": "_approve"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [26909,26921]",
      "parent": "call_expression [26900,27029]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "call_argument [26932,27028]",
      "parent": "call_expression [26900,27029]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [27675,27676]",
      "parent": "call_expression [27647,27717]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [54642,54655]",
      "parent": "call_expression [27647,27717]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [27759,27760]",
      "parent": "call_expression [27728,27799]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [54915,54928]",
      "parent": "call_expression [27728,27799]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "identifier: _beforeTokenTransfer [27812,27832]",
      "parent": "call_expression [27812,27859]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [27832,27833]",
      "parent": "call_expression [27812,27859]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [67157,67163]",
      "parent": "call_expression [27812,27859]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [27839,27840]",
      "parent": "call_expression [27812,27859]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [27841,27850]",
      "parent": "call_expression [27812,27859]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [27850,27851]",
      "parent": "call_expression [27812,27859]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [59428,59434]",
      "parent": "call_expression [27812,27859]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [27858,27859]",
      "parent": "call_expression [27812,27859]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "array_access [27872,27889]",
      "parent": "assignment_expression [27872,27963]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [27890,27891]",
      "parent": "assignment_expression [27872,27963]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_expression [54940,55003]",
      "parent": "assignment_expression [27872,27963]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "array_access [27974,27994]",
      "parent": "assignment_expression [27974,28029]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [27995,27996]",
      "parent": "assignment_expression [27974,28029]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_expression [27997,28029]",
      "parent": "assignment_expression [27974,28029]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: receiver [67858,67866]",
      "label": "recipient"
    },
    {
      "action": "move-tree",
      "tree": "call_argument [55635,55666]",
      "parent": "call_expression [28445,28510]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "identifier: _beforeTokenTransfer [28523,28543]",
      "parent": "call_expression [28523,28572]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_argument [59631,59638]",
      "parent": "call_expression [28523,28572]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [28563,28564]",
      "parent": "call_expression [28523,28572]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [67314,67320]",
      "parent": "call_expression [28523,28572]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [37692,37704]",
      "label": "_totalSupply"
    },
    {
      "action": "insert-tree",
      "tree": "array_access [28635,28653]",
      "parent": "assignment_expression [28635,28686]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [28654,28655]",
      "parent": "assignment_expression [28635,28686]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_expression [28656,28686]",
      "parent": "assignment_expression [28635,28686]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _from [37791,37796]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: _beforeTokenTransfer [29235,29255]",
      "parent": "call_expression [29235,29284]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [29255,29256]",
      "parent": "call_expression [29235,29284]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [60597,60604]",
      "parent": "call_expression [29235,29284]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [29263,29264]",
      "parent": "call_expression [29235,29284]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [52021,52031]",
      "parent": "call_expression [29235,29284]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [29275,29276]",
      "parent": "call_expression [29235,29284]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [29277,29283]",
      "parent": "call_expression [29235,29284]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [29283,29284]",
      "parent": "call_expression [29235,29284]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "[: [ [9666,9667]",
      "parent": "array_access [29297,29315]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [53606,53618]",
      "label": "_totalSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: _account [53730,53738]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: oldValue [53752,53760]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [30110,30117]",
      "parent": "call_expression [30110,30178]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30117,30118]",
      "parent": "call_expression [30110,30178]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [30118,30139]",
      "parent": "call_expression [30110,30178]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [30139,30140]",
      "parent": "call_expression [30110,30178]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [55866,55897]",
      "parent": "call_expression [30110,30178]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [30177,30178]",
      "parent": "call_expression [30110,30178]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _approveAllArgs [33210,33225]",
      "label": "_burn"
    },
    {
      "action": "move-tree",
      "tree": "call_argument [66557,66563]",
      "parent": "call_expression [33235,33260]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [34664,34675]",
      "parent": "call_expression [34664,34692]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [34675,34676]",
      "parent": "call_expression [34664,34692]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [59304,59311]",
      "parent": "call_expression [34664,34692]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [34683,34684]",
      "parent": "call_expression [34664,34692]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [66085,66091]",
      "parent": "call_expression [34664,34692]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [34691,34692]",
      "parent": "call_expression [34664,34692]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "identifier: _mint [37389,37394]",
      "parent": "call_expression [37389,37411]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_argument [60803,60810]",
      "parent": "call_expression [37389,37411]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [60812,60818]",
      "parent": "call_expression [37389,37411]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "{: { [39315,39316]",
      "parent": "block_statement [39315,39384]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [39330,39373]",
      "parent": "block_statement [39315,39384]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [39383,39384]",
      "parent": "block_statement [39315,39384]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [39779,39786]",
      "parent": "call_expression [39779,39854]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [39786,39787]",
      "parent": "call_expression [39779,39854]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [39787,39808]",
      "parent": "call_expression [39779,39854]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [39808,39809]",
      "parent": "call_expression [39779,39854]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [51772,51799]",
      "parent": "call_expression [39779,39854]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [39853,39854]",
      "parent": "call_expression [39779,39854]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [39972,39986]",
      "parent": "call_expression [39972,40010]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [39986,39987]",
      "parent": "call_expression [39972,40010]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [27952,27957]",
      "parent": "call_expression [39972,40010]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [39992,39993]",
      "parent": "call_expression [39972,40010]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [86070,86077]",
      "parent": "call_expression [39972,40010]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [40001,40002]",
      "parent": "call_expression [39972,40010]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [61683,61689]",
      "parent": "call_expression [39972,40010]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [40009,40010]",
      "parent": "call_expression [39972,40010]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [40371,40382]",
      "parent": "call_expression [40371,40399]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [40382,40383]",
      "parent": "call_expression [40371,40399]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [61674,61681]",
      "parent": "call_expression [40371,40399]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [40390,40391]",
      "parent": "call_expression [40371,40399]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [61765,61771]",
      "parent": "call_expression [40371,40399]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [40398,40399]",
      "parent": "call_expression [40371,40399]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [48627,48666]",
      "parent": "binary_expression [40984,41052]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "&&: && [41028,41030]",
      "parent": "binary_expression [40984,41052]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [50531,50570]",
      "parent": "binary_expression [40984,41052]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [42517,42532]",
      "parent": "call_expression [42517,42559]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [42532,42533]",
      "parent": "call_expression [42517,42559]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [67554,67560]",
      "parent": "call_expression [42517,42559]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [42539,42540]",
      "parent": "call_expression [42517,42559]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [42541,42550]",
      "parent": "call_expression [42517,42559]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [42550,42551]",
      "parent": "call_expression [42517,42559]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [59320,59326]",
      "parent": "call_expression [42517,42559]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [42558,42559]",
      "parent": "call_expression [42517,42559]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [42871,42878]",
      "parent": "call_expression [42871,42993]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [42878,42879]",
      "parent": "call_expression [42871,42993]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [54736,54754]",
      "parent": "call_expression [42871,42993]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [42967,42968]",
      "parent": "call_expression [42871,42993]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [67176,67198]",
      "parent": "call_expression [42871,42993]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [42992,42993]",
      "parent": "call_expression [42871,42993]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [16747,16778]",
      "parent": "call_argument [16747,16778]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: hasHook [83031,83038]",
      "label": "success"
    },
    {
      "action": "insert-node",
      "tree": "identifier: success [16976,16983]",
      "parent": "call_argument [16976,16983]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [19758,19776]",
      "parent": "call_argument [19758,19776]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: hasHook [81871,81878]",
      "label": "success"
    },
    {
      "action": "insert-node",
      "tree": "memory: memory [19904,19910]",
      "parent": "variable_declaration [19898,19921]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: finalTo [81857,81864]",
      "label": "returndata"
    },
    {
      "action": "update-node",
      "tree": "identifier: _from [81902,81907]",
      "label": "data"
    },
    {
      "action": "insert-node",
      "tree": "if: if [20117,20119]",
      "parent": "if_statement [20117,20556]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20120,20121]",
      "parent": "if_statement [20117,20556]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [20121,20142]",
      "parent": "if_statement [20117,20556]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [20142,20143]",
      "parent": "if_statement [20117,20556]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "block_statement [20144,20495]",
      "parent": "if_statement [20117,20556]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [20496,20500]",
      "parent": "if_statement [20117,20556]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [20501,20556]",
      "parent": "if_statement [20117,20556]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [34176,34184]",
      "label": "recipient"
    },
    {
      "action": "insert-node",
      "tree": "call_expression [25540,25629]",
      "parent": "call_argument [25540,25629]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [26206,26256]",
      "parent": "call_argument [26206,26256]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [26932,27028]",
      "parent": "call_argument [26932,27028]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [27892,27913]",
      "parent": "call_expression [27892,27963]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_argument [62669,62675]",
      "parent": "call_expression [27892,27963]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [27997,28021]",
      "parent": "call_expression [27997,28029]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [28021,28022]",
      "parent": "call_expression [27997,28029]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [62259,62265]",
      "parent": "call_expression [27997,28029]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [28028,28029]",
      "parent": "call_expression [27997,28029]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [28656,28678]",
      "parent": "call_expression [28656,28686]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [28678,28679]",
      "parent": "call_expression [28656,28686]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [60716,60722]",
      "parent": "call_expression [28656,28686]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [28685,28686]",
      "parent": "call_expression [28656,28686]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _attribute [9667,9677]",
      "label": "_balances"
    },
    {
      "action": "insert-node",
      "tree": "identifier: account [29307,29314]",
      "parent": "array_access [29297,29315]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [29318,29340]",
      "parent": "call_expression [29318,29386]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [77264,77291]",
      "parent": "call_argument [30118,30139]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [37216,37239]",
      "parent": "call_argument [37216,37239]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "unary_expression [37299,37328]",
      "parent": "call_argument [37299,37328]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "identifier: _value [48081,48087]",
      "parent": "binary_expression [37821,37865]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "array_access [38959,38981]",
      "parent": "call_argument [38959,38981]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [39040,39065]",
      "parent": "call_argument [39040,39065]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [39330,39372]",
      "parent": "expression_statement [39330,39373]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [40296,40312]",
      "parent": "call_argument [40296,40312]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [41048,41050]",
      "parent": "binary_expression [41031,41052]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0 [41051,41052]",
      "parent": "binary_expression [41031,41052]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [42879,42967]",
      "parent": "call_argument [42879,42967]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "member_expression [16747,16768]",
      "parent": "binary_expression [16747,16778]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [16769,16771]",
      "parent": "binary_expression [16747,16778]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [16772,16778]",
      "parent": "binary_expression [16747,16778]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "member_expression [19431,19452]",
      "parent": "binary_expression [19431,19461]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: rewardAmount [67415,67427]",
      "label": "value"
    },
    {
      "action": "insert-node",
      "tree": "{: { [20144,20145]",
      "parent": "block_statement [20144,20495]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // The easiest way to bubble the revert reason is using memory via assembly [20163,20238]",
      "parent": "block_statement [20144,20495]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-inline-assembly [20258,20305]",
      "parent": "block_statement [20144,20495]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "assembly_statement [20323,20480]",
      "parent": "block_statement [20144,20495]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [20494,20495]",
      "parent": "block_statement [20144,20495]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [25540,25577]",
      "parent": "call_expression [25540,25629]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [25577,25578]",
      "parent": "call_expression [25540,25629]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [63496,63502]",
      "parent": "call_expression [25540,25629]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [25584,25585]",
      "parent": "call_expression [25540,25629]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [60452,60481]",
      "parent": "call_expression [25540,25629]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [25628,25629]",
      "parent": "call_expression [25540,25629]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [26206,26244]",
      "parent": "call_expression [26206,26256]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [26244,26245]",
      "parent": "call_expression [26206,26256]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [86308,86318]",
      "parent": "call_expression [26206,26256]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [26255,26256]",
      "parent": "call_expression [26206,26256]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [26932,26970]",
      "parent": "call_expression [26932,27028]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [26970,26971]",
      "parent": "call_expression [26932,27028]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [86547,86562]",
      "parent": "call_expression [26932,27028]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [26986,26987]",
      "parent": "call_expression [26932,27028]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [59206,59234]",
      "parent": "call_expression [26932,27028]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [27027,27028]",
      "parent": "call_expression [26932,27028]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [14043,14051]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [29210,29218]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [51753,51756]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [37707,37719]",
      "label": "_totalSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: sub [37720,37723]",
      "label": "add"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [37724,37730]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: account [29163,29170]",
      "parent": "binary_expression [29163,29184]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [29171,29173]",
      "parent": "binary_expression [29163,29184]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [57834,57844]",
      "parent": "binary_expression [29163,29184]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [9695,9701]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [53621,53633]",
      "label": "_totalSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: oldValue [53638,53646]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: owner [30039,30044]",
      "parent": "binary_expression [30039,30058]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [30045,30047]",
      "parent": "binary_expression [30039,30058]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "type_cast_expression [30048,30058]",
      "parent": "binary_expression [30039,30058]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: spender [30118,30125]",
      "parent": "binary_expression [30118,30139]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [30126,30128]",
      "parent": "binary_expression [30118,30139]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [34496,34502]",
      "parent": "binary_expression [34496,34513]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [34503,34505]",
      "parent": "binary_expression [34496,34513]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: burnMin [34506,34513]",
      "parent": "binary_expression [34496,34513]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [34582,34588]",
      "parent": "binary_expression [34582,34599]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "<=: <= [34589,34591]",
      "parent": "binary_expression [34582,34599]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: burnMax [34592,34599]",
      "parent": "binary_expression [34582,34599]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "!: ! [37299,37300]",
      "parent": "unary_expression [37299,37328]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [37300,37328]",
      "parent": "unary_expression [37299,37328]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [54110,54122]",
      "parent": "binary_expression [37821,37865]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [48081,48087]",
      "label": "REDEMPTION_ADDRESS_COUNT"
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [39330,39345]",
      "parent": "call_expression [39330,39372]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [39345,39346]",
      "parent": "call_expression [39330,39372]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [69099,69105]",
      "parent": "call_expression [39330,39372]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [39352,39353]",
      "parent": "call_expression [39330,39372]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [39354,39363]",
      "parent": "call_expression [39330,39372]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [39363,39364]",
      "parent": "call_expression [39330,39372]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [39365,39371]",
      "parent": "call_expression [39330,39372]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [39371,39372]",
      "parent": "call_expression [39330,39372]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "array_access [39873,39896]",
      "parent": "binary_expression [39873,39911]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "||: || [39897,39899]",
      "parent": "binary_expression [39873,39911]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [39900,39911]",
      "parent": "binary_expression [39873,39911]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [61576,61583]",
      "parent": "type_cast_expression [40984,41000]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [42879,42936]",
      "parent": "binary_expression [42879,42967]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "||: || [42937,42939]",
      "parent": "binary_expression [42879,42967]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [42940,42967]",
      "parent": "binary_expression [42879,42967]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [75676,75689]",
      "parent": "member_expression [16747,16768]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [16760,16761]",
      "parent": "member_expression [16747,16768]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: balance [16761,16768]",
      "parent": "member_expression [16747,16768]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [75564,75577]",
      "parent": "member_expression [19431,19452]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [19444,19445]",
      "parent": "member_expression [19431,19452]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: balance [19445,19452]",
      "parent": "member_expression [19431,19452]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "bytes: bytes [19898,19903]",
      "parent": "primitive_type [19898,19903]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assembly: assembly [20323,20331]",
      "parent": "assembly_statement [20323,20480]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [20332,20333]",
      "parent": "assembly_statement [20323,20480]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "yul_variable_declaration [20355,20395]",
      "parent": "assembly_statement [20323,20480]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [20417,20461]",
      "parent": "assembly_statement [20323,20480]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [20479,20480]",
      "parent": "assembly_statement [20323,20480]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "identifier: isRedemptionAddress [37300,37319]",
      "parent": "call_expression [37300,37328]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [37319,37320]",
      "parent": "call_expression [37300,37328]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [60425,60432]",
      "parent": "call_expression [37300,37328]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [37327,37328]",
      "parent": "call_expression [37300,37328]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [59186,59193]",
      "parent": "type_cast_expression [37821,37837]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [50539,50542]",
      "label": "account"
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [55244,55262]",
      "parent": "binary_expression [42879,42936]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [42904,42906]",
      "parent": "binary_expression [42879,42936]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [54736,54754]",
      "parent": "binary_expression [42879,42936]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "yul_evm_builtin [20417,20423]",
      "parent": "yul_function_call [20417,20461]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20423,20424]",
      "parent": "yul_function_call [20417,20461]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [20424,20443]",
      "parent": "yul_function_call [20417,20461]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [20443,20444]",
      "parent": "yul_function_call [20417,20461]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [20445,20460]",
      "parent": "yul_function_call [20417,20461]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [20460,20461]",
      "parent": "yul_function_call [20417,20461]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [41812,41815]",
      "parent": "yul_function_call [20424,20443]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20427,20428]",
      "parent": "yul_function_call [20424,20443]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_decimal_number: 32 [20428,20430]",
      "parent": "yul_function_call [20424,20443]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [20430,20431]",
      "parent": "yul_function_call [20424,20443]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [20432,20442]",
      "parent": "yul_function_call [20424,20443]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [20442,20443]",
      "parent": "yul_function_call [20424,20443]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [55252,55255]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [54744,54747]",
      "label": "depositAddress"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [85,93]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: TrueCoinReceiver [94,110]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [111,112]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [118,126]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: tokenFallback [127,140]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [140,141]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [154,155]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [170,171]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [118,181]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [183,184]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [111,184]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [85,184]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [64463,64469]"
    },
    {
      "action": "delete-node",
      "tree": "constant: constant [64470,64478]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [64487,64488]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0xf000000000000000000000000000000000000000 [64489,64531]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [71312,71318]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [22762,22795]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [22801,22838]"
    },
    {
      "action": "delete-node",
      "tree": "constant: constant [84940,84948]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [84963,84964]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0x8dd5fbCe2F6a956C3022bA3663759011Dd51e73E [84965,85007]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [23035,23060]"
    },
    {
      "action": "delete-node",
      "tree": "constant: constant [32372,32380]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [32400,32401]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0xfe00000000000000000000000000000000000000000000000000000000000000 [32402,32468]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [23130,23162]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [23232,23238]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [21038,21044]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [21741,21747]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [23279,23319]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [23325,23386]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [11192,11193]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [11193,11194]"
    },
    {
      "action": "delete-node",
      "tree": "mapping: mapping [23490,23497]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23497,23498]"
    },
    {
      "action": "delete-node",
      "tree": "=>: => [23506,23508]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [23509,23529]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23529,23530]"
    },
    {
      "action": "delete-node",
      "tree": "type_name [23490,23530]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: finOps [23531,23537]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [23490,23538]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // true reward allocation [23660,23685]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // proportion: 1000 = 100% [23691,23717]"
    },
    {
      "action": "delete-tree",
      "tree": "struct_member [23749,23765]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [28378,28379]"
    },
    {
      "action": "delete-tree",
      "tree": "boolean_literal [28380,28385]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.      *******************************************************************************************************      ** length     input                                                         usage      *******************************************************************************************************      ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner      ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation      ** 32         uint256(11)                                                   gasRefundPool_Deprecated      ** 64         uint256(address),uint256(14)                                  balanceOf      ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance      ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes     **/ [23896,25450]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [26440,26534]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [1534,2953]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Solidity only automatically asserts when dividing by 0 [19272,19329]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [75290,75296]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [75297,75306]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [75691,75694]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [75694,75695]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [75696,75702]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [83009,83024]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [75361,75375]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: trueRewardEnabled [75378,75395]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [75396,75399]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: rewardTokenBalance [68639,68657]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [68657,68658]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [68664,68665]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [68666,68671]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [68671,68672]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [68639,68672]"
    },
    {
      "action": "delete-node",
      "tree": ">=: >= [68673,68675]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: rewardAmount [68676,68688]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [68639,68688]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // if to enabled, mint to this contract and deposit into finOp [75413,75475]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [75485,75487]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [75488,75489]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: toEnabled [75489,75498]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [75498,75499]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [75500,75501]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // mint to this contract [75515,75539]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [75553,75563]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [75563,75564]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [75564,75577]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [75577,75578]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [75579,75585]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [75585,75586]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [75553,75586]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [75553,75587]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // transfer minted amount to target receiver [75601,75645]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [75714,75715]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [75500,75715]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // otherwise call normal mint process [75725,75762]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [75772,75776]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [75777,75827]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [75485,75827]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [74484,74513]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [73682,73712]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [67377,67411]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [68436,68469]"
    },
    {
      "action": "delete-node",
      "tree": "address: address [81849,81856]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanTransfer [81882,81901]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [81907,81908]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [81909,81912]"
    },
    {
      "action": "delete-node",
      "tree": "interface: interface [5931,5940]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: RegistryClone [5941,5954]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [5955,5956]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [5962,5970]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: syncAttributeValue [5971,5989]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5989,5990]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [6002,6003]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _attribute [6012,6022]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [6004,6022]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [6022,6023]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6038,6039]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [6040,6048]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [5962,6049]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [6051,6052]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [5955,6052]"
    },
    {
      "action": "delete-node",
      "tree": "interface_declaration [5931,6052]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [6056,6064]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Registry [6065,6073]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [6074,6075]"
    },
    {
      "action": "delete-node",
      "tree": "struct: struct [6081,6087]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: AttributeData [6088,6101]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [6102,6103]"
    },
    {
      "action": "delete-tree",
      "tree": "struct_member [6137,6151]"
    },
    {
      "action": "delete-tree",
      "tree": "struct_member [6161,6179]"
    },
    {
      "action": "delete-tree",
      "tree": "struct_member [6189,6207]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [6213,6214]"
    },
    {
      "action": "delete-node",
      "tree": "struct_declaration [6081,6214]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // never remove any storage variables [6226,6263]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [6269,6290]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [6296,6324]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [6330,6347]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Stores arbitrary attributes for users. An example use case is an IERC20 [6355,6429]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // token that requires its users to go through a KYC/AML check - in this case [6435,6512]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate [6518,6599]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // that account can use the token. This mapping stores that value (1, in the [6605,6681]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // example) as well as which validator last set the value and at what time, [6687,6762]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // so that e.g. the check can be renewed at appropriate intervals. [6768,6834]"
    },
    {
      "action": "delete-node",
      "tree": "mapping: mapping [6840,6847]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [6847,6848]"
    },
    {
      "action": "delete-node",
      "tree": "=>: => [6856,6858]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [6859,6892]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6892,6893]"
    },
    {
      "action": "delete-node",
      "tree": "type_name [6840,6893]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: attributes [6894,6904]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [6840,6905]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // The logic governing who is allowed to set what attributes is abstracted as [6911,6988]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // this accessManager, so that it may be replaced by the owner as needed [6994,7066]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [7072,7133]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [7139,7187]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [7195,7304]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [7310,7426]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [7432,7505]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [7511,7596]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [7602,7686]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Allows a write if either a) the writer is that Registry's owner, or [7694,7764]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // b) the writer is writing to attribute foo and that writer already has [7770,7842]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // the canWriteTo-foo attribute set (in that same Registry) [7848,7907]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [7913,7921]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: confirmWrite [7922,7934]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [7934,7935]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _attribute [7943,7953]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [7935,7953]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [7953,7954]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [7969,7970]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [8000,8127]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [7913,8127]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Writes are allowed only if the accessManager approves [8135,8191]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [8197,8205]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setAttribute [8206,8218]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [8218,8219]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [8231,8232]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [8233,8251]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [8251,8252]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [8267,8268]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [8269,8283]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [8283,8284]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [8285,8291]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [8292,8757]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [8197,8757]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [8765,8773]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subscribe [8774,8783]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [8783,8784]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [8784,8802]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [8802,8803]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [8804,8825]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [8825,8826]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [8836,8845]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [8846,8956]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [8765,8956]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [8964,8972]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: unsubscribe [8973,8984]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [8984,8985]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [8985,9003]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [9003,9004]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9019,9020]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [9030,9039]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [9040,9352]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [8964,9352]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [9360,9368]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subscriberCount [9369,9384]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9384,9385]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [9385,9403]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9403,9404]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [9405,9411]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [9435,9491]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [9360,9491]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [9499,9507]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setAttributeValue [9508,9525]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9525,9526]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [9526,9538]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [9538,9539]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [9540,9558]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [9558,9559]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [9560,9574]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9574,9575]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [9576,9582]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [9583,9584]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [9594,9640]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [9746,9806]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [9816,9874]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [9884,9915]"
    },
    {
      "action": "delete-tree",
      "tree": "while_statement [9925,10031]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [10037,10038]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [9583,10038]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [9499,10038]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Returns true if the uint256 value stored for this attribute is non-zero [10046,10120]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Returns the exact value of the attribute, as well as its metadata [10284,10352]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [10358,10620]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [10787,10946]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [11121,11129]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: syncAttribute [11130,11143]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11143,11144]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [11144,11162]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [11162,11163]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [11164,11183]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [11183,11184]"
    },
    {
      "action": "delete-node",
      "tree": "calldata: calldata [11195,11203]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addresses [11204,11214]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [11185,11214]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11214,11215]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [11216,11224]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [11225,11665]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [11121,11665]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [11673,11789]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [11797,11971]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [11978,12055]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [12061,12155]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [12163,12256]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [12262,12356]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [12364,12506]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [12512,12616]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [12624,12705]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [12711,12893]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [12895,12896]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [6074,12896]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [6056,12896]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [10985,10997]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [10997,10998]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [10999,11017]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [11067,11105]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [10667,10668]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [10669,10687]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [10737,10771]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34055,34071]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34073,34092]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [34186,34197]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [34199,34209]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [85618,85635]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _getAllowance [85654,85667]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [85667,85668]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [85668,85673]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [85673,85674]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [85682,85683]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [85654,85683]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [10162,10180]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [10220,10267]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [86186,86201]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [86201,86202]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [86203,86221]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [86230,86246]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [86320,86330]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [86420,86440]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [86440,86441]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [86442,86460]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [86469,86485]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [86564,86574]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [54940,54947]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [54949,54987]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [67874,67875]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [67876,67881]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [52362,52397]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [52410,52416]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // no need to require value <= totalSupply, since that would imply the [37474,37544]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sender's balance is greater than the totalSupply, which *should* be an assertion failure [37554,37645]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [37655,37682]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [37742,37767]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [37810,37816]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [53417,53423]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [53424,53433]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [55757,55790]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [55791,55793]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [55794,55795]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [9650,9666]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: AttributeData [9681,9694]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [9705,9706]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [9707,9717]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [9717,9718]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [9719,9734]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [53520,53561]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setBalance [53571,53582]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [53582,53583]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [53583,53591]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [53591,53592]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [53594,53595]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [53571,53595]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [53571,53596]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [53658,53706]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [55385,55416]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [55417,55419]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [55420,55421]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [77264,77277]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [77278,77280]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [13228,13236]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: InstantiatableOwnable [13237,13258]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [13259,13260]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13266,13287]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [13295,13404]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev The InstantiatableOwnable constructor sets the original `owner` of the contract to the sender      * account.      */ [13412,13548]"
    },
    {
      "action": "delete-tree",
      "tree": "constructor_definition [13554,13612]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Throws if called by any account other than the owner.      */ [13620,13699]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [13705,13785]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Allows the current owner to transfer control of the contract to a newOwner.      * @param newOwner The address to transfer ownership to.      */ [13793,13956]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [13962,13970]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferOwnership [13971,13988]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [13988,13989]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [14005,14006]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [14014,14023]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [14024,14025]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [14077,14081]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: OwnershipTransferred [14082,14102]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [14102,14103]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14108,14109]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [14110,14118]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [14118,14119]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [14077,14120]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [14130,14147]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [14153,14154]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [14024,14154]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [13962,14154]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [14156,14157]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [13259,14157]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [13228,14157]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/Claimable.sol [14161,14221]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     *@dev allows owner of the contract to gain ownership of any contract that the contract currently owns     */ [27714,27832]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [27838,27846]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reclaimContract [27847,27862]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [27862,27863]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [27863,27893]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [27893,27894]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [27904,27913]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [27914,27915]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [27925,27951]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [27951,27952]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [27957,27958]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [27925,27958]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [27925,27959]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [27965,27966]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [27914,27966]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [27838,27966]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [14441,14449]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Claimable [14450,14459]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [14460,14462]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [14463,14484]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [14485,14486]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [14492,14520]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Modifier throws if called by any account other than the pendingOwner.      */ [14528,14623]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Allows the current owner to set the pendingOwner address.      * @param newOwner The address to transfer ownership to.      */ [14731,14876]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [14882,14986]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Allows the pendingOwner address to finalize the transfer.      */ [14994,15077]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [15083,15265]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [15267,15268]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [14485,15268]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [14441,15268]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/math/SafeMath.sol [15272,15330]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/BalanceSheet.sol [20790,20853]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [38216,38236]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33143,33159]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33159,33160]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33161,33175]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [33226,33234]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [33236,33242]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33242,33243]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //in any particular cap for the minimum) [38937,38977]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [53964,53977]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [53979,53990]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [53992,54000]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [54001,54005]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [54006,54013]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [54014,54015]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [54015,54022]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [54022,54023]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [54028,54029]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [54006,54029]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [54041,54068]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [54069,54070]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [54071,54101]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [54101,54102]"
    },
    {
      "action": "delete-tree",
      "tree": "primitive_type [54102,54109]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [54109,54110]"
    },
    {
      "action": "delete-node",
      "tree": ">>: >> [54123,54125]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 20 [54126,54128]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [54110,54128]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [54110,54128]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [54128,54129]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [54102,54129]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [54129,54130]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [54071,54130]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [54041,54131]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [54141,54232]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [54323,54356]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [54357,54359]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [54360,54361]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [54251,54282]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [54283,54285]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [54286,54287]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [61844,61845]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [61846,61851]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [54388,54447]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [20932,20940]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: BalanceSheet [20941,20953]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [20954,20956]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [20957,20966]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [20967,20968]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [20974,21001]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [21063,21071]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: addBalance [21072,21082]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [21082,21083]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21096,21097]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21098,21112]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [21112,21113]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [21114,21120]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [21121,21130]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [21131,21197]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [21063,21197]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [21205,21213]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subBalance [21214,21224]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [21224,21225]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21238,21239]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21240,21254]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [21254,21255]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [21273,21339]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [21205,21339]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [21347,21355]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setBalance [21356,21366]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [21366,21367]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21380,21381]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21382,21396]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [21396,21397]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [21415,21459]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [21347,21459]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [21461,21462]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [20967,21462]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [20932,21462]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/AllowanceSheet.sol [21466,21531]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [52513,52520]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38328,38343]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38345,38359]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [38361,38369]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [38389,38406]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [38450,38467]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [38505,38523]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [38524,38531]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [38533,38539]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59737,59738]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [59739,59744]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [54118,54121]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burnMin [48091,48098]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [48142,48159]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [47225,47242]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _value [47286,47292]"
    },
    {
      "action": "delete-node",
      "tree": "<=: <= [47293,47295]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burnMax [47296,47303]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [62156,62157]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [62158,62171]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [53453,53477]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [62193,62222]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [62223,62224]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [62225,62258]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [62258,62259]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [62265,62266]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [62225,62266]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [62193,62266]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [48635,48638]"
    },
    {
      "action": "delete-node",
      "tree": "<: < [50544,50545]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: REDEMPTION_ADDRESS_COUNT [50546,50570]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [21612,21620]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: AllowanceSheet [21621,21635]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [21636,21638]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [21639,21648]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [21649,21650]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [21656,21683]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [21768,21776]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: addAllowance [21777,21789]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [21789,21790]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21810,21811]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21828,21829]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21830,21844]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [21844,21845]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [21846,21852]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [21853,21862]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [21863,21967]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [21768,21967]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [21975,21983]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subAllowance [21984,21996]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [21996,21997]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21997,22017]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22017,22018]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22035,22036]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22037,22051]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [22051,22052]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [22053,22059]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [22060,22069]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [22070,22174]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [21975,22174]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [22182,22190]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setAllowance [22191,22203]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [22203,22204]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22224,22225]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22242,22243]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22244,22258]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [22258,22259]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [22260,22266]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [22277,22340]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [22182,22340]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [22342,22343]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [21649,22343]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [21612,22343]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/ProxyStorage.sol [22347,22397]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/HasOwner.sol [25457,25503]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/ReclaimerToken.sol [27078,27130]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [27134,27157]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/InitializableOwnable.sol [27973,28044]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [28048,28071]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title InitializableOwnable  * @dev The InitializableOwnable contract has an owner address, and provides basic authorization control  * functions, this simplifies the implementation of \"user permissions\".  */ [28077,28296]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [28298,28306]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: InitializableOwnable [28307,28327]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [28328,28329]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [28335,28356]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [28394,28503]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev The InitializableOwnable constructor sets the original `owner` of the contract to the sender      * account.      */ [28511,28646]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [28652,28660]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _configure [28661,28671]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [28671,28672]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [28672,28673]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [28683,28684]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [28694,28715]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: owner [28725,28730]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [28731,28732]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [28725,28743]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [28725,28744]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [28754,28772]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [28778,28779]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [28683,28779]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [28652,28779]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Throws if called by any account other than the owner.      */ [28787,28866]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [28872,28952]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Allows the current owner to transfer control of the contract to a newOwner.      * @param newOwner The address to transfer ownership to.      */ [28960,29123]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [29129,29137]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferOwnership [29138,29155]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [29155,29156]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [29156,29172]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [29172,29173]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [29174,29180]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [29181,29190]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [29191,29192]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [29244,29287]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [29297,29314]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [29320,29321]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [29191,29321]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [29129,29321]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [29323,29324]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [28328,29324]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [28298,29324]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/InitializableClaimable.sol [29328,29401]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [29405,29428]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title InitializableOwnable  * @dev Extension for the InstantiatableOwnable contract, where the ownership needs to be claimed.  * This allows the new owner to accept the transfer.  */ [29436,29630]"
    },
    {
      "action": "delete-tree",
      "tree": "contract_declaration [29632,30471]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/ModularBasicToken.sol [30475,30543]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [30547,30570]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Fork of OpenZeppelin's BasicToken [30582,30618]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Basic token  * @dev Basic version of StandardToken, with no allowances.  */ [30620,30712]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [30714,30722]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularBasicToken [30723,30740]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [30741,30743]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [30744,30752]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30753,30754]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [30760,30787]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [30795,30867]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev total number of tokens in existence     */ [30875,30934]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [30940,31031]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [31039,31145]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [31153,31161]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _getBalance [31162,31173]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31173,31174]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [31174,31186]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31186,31187]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [31197,31201]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [31202,31219]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [31220,31262]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [31153,31262]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [31270,31278]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addBalance [31279,31290]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31290,31291]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [31291,31303]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31303,31304]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [31305,31319]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31319,31320]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [31330,31360]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [31361,31465]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [31270,31465]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [31473,31481]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subBalance [31482,31493]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31493,31494]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [31494,31506]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31506,31507]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [31508,31522]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31522,31523]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [31533,31557]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [31558,31650]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [31473,31650]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [31658,31666]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setBalance [31667,31678]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31678,31679]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [31679,31691]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31691,31692]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [31693,31707]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31707,31708]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [31718,31762]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [31658,31762]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31764,31765]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [30753,31765]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [30714,31765]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/ModularStandardToken.sol [31769,31840]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [31844,31867]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Standard ERC20 token  *  * @dev Implementation of the basic standard token.  * @dev https://github.com/ethereum/EIPs/issues/20  * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol  */ [31877,32149]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [32151,32159]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularStandardToken [32160,32180]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [32181,32183]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [32184,32201]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [32202,32203]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [32244,32356]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.      *      * Beware that changing an allowance with this method brings the risk that someone may use both the old      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729      * @param _spender The address which will spend the funds.      * @param _value The amount of tokens to be spent.      */ [32477,33120]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [33293,33537]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Increase the amount of tokens that an owner allowed to a spender.      *      * approve should be called when allowed[_spender] == 0. To increment      * allowed value is better to use this function to avoid 2 calls (and wait until      * the first transaction is mined)      * From MonolithDAO Token.sol      * @param _spender The address which will spend the funds.      * @param _addedValue The amount of tokens to increase the allowance by.      */ [33545,34022]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [34248,34593]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Decrease the amount of tokens that an owner allowed to a spender.      *      * approve should be called when allowed[_spender] == 0. To decrement      * allowed value is better to use this function to avoid 2 calls (and wait until      * the first transaction is mined)      * From MonolithDAO Token.sol      * @param _spender The address which will spend the funds.      * @param _subtractedValue The amount of tokens to decrease the allowance by.      */ [34601,35083]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [35089,35097]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: decreaseAllowance [35098,35115]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [35115,35116]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35116,35132]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35132,35133]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35134,35158]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [35158,35159]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [35169,35175]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [35205,35206]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [35216,35282]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [35310,35311]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [35205,35311]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [35089,35311]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [35319,35327]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _decreaseAllowanceAllArgs [35328,35353]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [35353,35354]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35364,35380]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35380,35381]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35391,35415]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35415,35416]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35426,35446]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [35452,35453]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [35463,35834]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [35319,35834]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [35842,36010]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [36018,36195]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [36203,36383]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [36391,36714]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [36722,36730]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setAllowance [36731,36744]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [36744,36745]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36745,36757]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [36757,36758]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36759,36775]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [36775,36776]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36777,36791]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [36791,36792]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [36816,36870]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [36722,36870]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [36872,36873]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [32202,36873]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [32151,36873]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/modularERC20/ModularBurnableToken.sol [36877,36948]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [36952,36975]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Burnable Token  * @dev Token that can be irreversibly burned (destroyed).  */ [36981,37075]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [37077,37085]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularBurnableToken [37086,37106]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [37107,37109]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [37110,37130]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [37131,37132]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [37287,37393]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [37827,37828]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [37131,37828]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [37077,37828]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/BurnableTokenWithBounds.sol [37832,37893]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [37897,37920]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Burnable Token WithBounds  * @dev Burning functions as redeeming money from the system. The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */ [37926,38178]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/GasRefundToken.sol [39204,39256]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [39260,39283]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /** @title Gas Refund Token Allow any user to sponsor gas refunds for transfer and mints. Utilitzes the gas refund mechanism in EVM Each time an non-empty storage slot is set to 0, evm refund 15,000 to the sender of the transaction. */ [39289,39529]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [39531,39539]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: GasRefundToken [39540,39554]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [39555,39557]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [39558,39570]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [39571,39572]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**       A buffer of \"Sheep\" runs from 0xffff...fffe down       They suicide when you call them, if you are their parent     */ [39580,39711]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [39719,39727]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: sponsorGas2 [39728,39739]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39739,39740]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39740,39741]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [39742,39750]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [39751,39752]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**         Deploy (9 bytes)           PC Assembly       Opcodes                                       Stack           00 PUSH1(27)      60 1b                                         1b           02 DUP1           80                                            1b 1b           03 PUSH1(9)       60 09                                         1b 1b 09           05 RETURNDATASIZE 3d                                            1b 1b 09 00           06 CODECOPY       39                                            1b           07 RETURNDATASIZE 3d                                            1b 00           08 RETURN         f3         Sheep (27 bytes = 3 + 20 + 4)           PC Assembly       Opcodes                                       Stack           00 RETURNDATASIZE 3d                                            00           01 CALLER         33                                            00 caller           02 PUSH20(me)     73 memememememememememememememememememememe   00 caller me           17 XOR            18                                            00 invalid           18 PC             58                                            00 invalid 18           19 JUMPI          57                                            00           1a SELFDESTRUCT   ff         */ [39762,41061]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [41071,41079]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [41080,41081]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [41095,41185]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [41199,41279]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [41293,41380]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [41394,41489]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [41503,41539]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [41553,41581]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [41595,41631]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [41645,41673]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [41687,41723]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [41737,41743]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41743,41744]"
    },
    {
      "action": "delete-node",
      "tree": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [41744,41810]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41810,41811]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41815,41816]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [41816,41822]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41822,41823]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 3 [41824,41825]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41825,41826]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [41812,41826]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41826,41827]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [41737,41827]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [41837,41838]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [41071,41838]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [41844,41845]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [39751,41845]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [39719,41845]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     @dev refund 39,000 gas     @dev costs slightly more than 16,100 gas     */ [41853,41938]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [41944,42510]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [42518,43582]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [43590,43841]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     @dev refund 30,000 gas     @dev costs slightly more than 15,400 gas     */ [43849,43934]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [43940,44409]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     @dev refund 15,000 gas     @dev costs slightly more than 10,200 gas     */ [44417,44502]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [44508,44886]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     *@dev Return the remaining sponsored gas slots     */ [44894,44957]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [44963,45108]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [45116,45287]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [45295,45382]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [45390,45658]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [45660,45661]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [39571,45661]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [39531,45661]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/CompliantDepositTokenWithHook.sol [45665,45732]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [45736,45759]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [45775,45783]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: CompliantDepositTokenWithHook [45784,45813]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [45814,45816]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [45831,45832]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [45833,45846]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [45846,45847]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [45871,45872]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [45873,45887]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [45888,45889]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [45897,45962]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [45968,46025]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [46090,46140]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [46148,46156]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: canBurn [46157,46164]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [46164,46165]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [46165,46166]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [46167,46175]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [46181,46198]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [46148,46199]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev transfer token for a specified address     * @param _to The address to transfer to.     * @param _value The amount to be transferred.     */ [46207,46366]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [46372,46523]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfer tokens from one address to another      * @param _from address The address which you want to send tokens from      * @param _to address The address which you want to transfer to      * @param _value uint256 the amount of tokens to be transferred      */ [46531,46814]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [46820,46828]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferFrom [46829,46841]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [46841,46842]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _from [46850,46855]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [46842,46855]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [46855,46856]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [46857,46868]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [46868,46869]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [46870,46884]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [46884,46885]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [46886,46892]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [46893,46907]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [46908,47001]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [46820,47001]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [47009,47017]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnFromAllowanceAllArgs [47018,47043]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [47043,47044]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [47044,47057]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [47057,47058]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [47059,47070]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [47070,47071]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [47072,47086]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [47086,47087]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [47088,47104]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [47104,47105]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [47115,47116]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [47126,47172]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [47182,47207]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [47341,47715]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [47725,47759]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [47769,47809]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [47819,47842]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [47852,47891]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [47897,47898]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [47115,47898]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [47009,47898]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [47906,47914]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnFromAllArgs [47915,47931]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [47931,47932]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [47932,47945]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [47945,47946]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [47947,47958]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [47958,47959]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [47960,47974]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [47974,47975]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [47976,47984]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [47985,47986]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [47996,48028]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [48038,48063]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [48197,48320]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [48330,48364]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [48374,48414]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [48424,48447]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [48457,48496]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [48502,48503]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [47985,48503]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [47906,48503]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [48511,48519]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferFromAllArgs [48520,48540]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [48540,48541]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [48541,48554]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [48554,48555]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [48556,48567]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [48567,48568]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [48569,48583]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [48583,48584]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [48585,48601]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [48601,48602]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [48603,48611]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [48612,48613]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [48623,48625]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [48626,48627]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [48666,48667]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [48668,48788]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [48789,48793]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [48794,50422]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [48623,50422]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [50428,50429]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [48612,50429]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [48511,50429]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [50437,50445]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferAllArgs [50446,50462]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [50462,50463]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [50463,50476]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [50476,50477]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [50478,50489]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [50489,50490]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [50491,50505]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [50505,50506]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [50507,50515]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [50516,50517]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [50527,50529]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [50530,50531]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [50570,50571]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [50572,50673]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [50674,50678]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [50679,51659]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [50527,51659]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [51665,51666]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [50516,51666]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [50437,51666]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [51674,51682]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: mint [51683,51687]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [51687,51688]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [51688,51699]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [51699,51700]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [51701,51715]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [51715,51716]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [51717,51723]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [51724,51733]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [51734,51735]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [51811,51824]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [51834,51859]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [51869,51907]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [51917,51957]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [51967,51997]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [52007,52011]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Transfer [52012,52020]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [52020,52021]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [52031,52032]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [52033,52043]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [52043,52044]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [52045,52051]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [52051,52052]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [52007,52053]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [52063,52151]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [52161,52186]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [52196,52198]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [52199,52200]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: hasHook [52200,52207]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [52207,52208]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [52209,52210]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [52224,52226]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [52227,52228]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [52228,52245]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [52245,52246]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [52247,52337]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [52338,52342]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [52343,52344]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [52432,52433]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [52343,52433]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [52224,52433]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [52443,52444]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [52209,52444]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [52196,52444]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [52450,52451]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [51734,52451]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [51674,52451]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [52536,52580]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Point to the registry that contains all compliance related data     @param _registry The address of the registry instance     */ [52588,52734]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [52740,52748]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setRegistry [52749,52760]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [52760,52761]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [52761,52779]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [52779,52780]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [52788,52797]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [52798,52799]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [52809,52830]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [52840,52844]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: SetRegistry [52845,52856]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [52856,52857]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [52864,52865]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [52865,52873]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [52873,52874]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [52857,52874]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [52857,52874]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [52874,52875]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [52840,52876]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [52882,52883]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [52798,52883]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [52740,52883]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [52891,52984]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [52992,53146]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [53154,53301]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Destroy the tokens owned by a blacklisted account [53309,53361]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [53777,53785]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _isBlacklisted [53786,53800]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [53800,53801]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [53801,53817]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [53817,53818]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [53819,53827]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [53828,53832]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [53833,53840]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [53841,53842]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [53858,53859]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [53833,53859]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [53860,53927]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [53777,53927]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [54462,54470]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanTransferFrom [54471,54494]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [54494,54495]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [54495,54511]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [54511,54512]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [54513,54526]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [54526,54527]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [54528,54539]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [54539,54540]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [54550,54554]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [54555,54562]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [54563,54564]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [54564,54571]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [54571,54572]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [54573,54577]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [54577,54578]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [54555,54578]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [54579,54580]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [54590,54597]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [54598,54599]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [54599,54640]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [54640,54641]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [54655,54656]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [54590,54656]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [54590,54657]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [54667,54694]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [54695,54696]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [54697,54727]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [54727,54728]"
    },
    {
      "action": "delete-tree",
      "tree": "primitive_type [54728,54735]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [54735,54736]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [54754,54755]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [54728,54755]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [54755,54756]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [54697,54756]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [54667,54757]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [54767,54858]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [54868,54875]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [54876,54877]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [54877,54913]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [54913,54914]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [54928,54929]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [54868,54929]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [54868,54930]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [55014,55073]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [55079,55080]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [54579,55080]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [54462,55080]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [55088,55096]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanMint [55097,55112]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [55112,55113]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [55113,55124]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [55124,55125]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [55135,55139]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [55140,55147]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [55148,55149]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [55149,55156]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [55156,55157]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [55158,55162]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [55162,55163]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [55140,55163]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [55164,55165]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [55175,55202]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [55203,55204]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [55205,55235]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [55235,55236]"
    },
    {
      "action": "delete-tree",
      "tree": "primitive_type [55236,55243]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [55243,55244]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [55244,55262]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [55262,55263]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [55236,55263]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [55263,55264]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [55205,55264]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [55175,55265]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [55275,55366]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [55448,55507]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [55513,55514]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [55164,55514]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [55088,55514]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [55522,55530]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireOnlyCanBurn [55531,55550]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [55550,55551]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [55551,55564]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [55564,55565]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [55566,55574]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [55575,55579]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [55580,55581]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [55591,55598]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [55599,55600]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [55600,55633]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [55633,55634]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [55666,55667]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [55591,55667]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [55591,55668]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [55674,55675]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [55580,55675]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [55522,55675]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [55683,55691]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanBurn [55692,55707]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [55707,55708]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [55708,55721]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [55721,55722]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [55732,55736]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [55737,55738]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [55822,55829]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [55830,55831]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [55831,55864]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [55864,55865]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [55897,55898]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [55822,55898]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [55822,55899]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [55905,55906]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [55737,55906]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [55683,55906]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [55914,55922]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: paused [55923,55929]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [55929,55930]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [55930,55931]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [55932,55938]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [55944,55958]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [55959,55990]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [55914,55990]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [55992,55993]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [45888,55993]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [45775,55993]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/RewardToken.sol [55997,56046]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [56050,56073]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title RewardToken  * @dev Non-transferrable token meant to represent  * RewardTokens are TrueCurrencies owed by a financial opportunity  *  * -- Overview --  * RewardTokens are redeemable for an underlying Token.  * RewardTokens are non-transferrable for compliance reasons  * The caller of depositor is responsible for exchanging their  * tokens, rather just keep accounting of user rewardToken balances  *  * -- Financial Opportunity --  * RewardTokens are backed by an underlying financial opportunity  * Each financial opportunity can accept Token deposits for  * See FinancialOpportunity.sol  *  * -- Mint/Redeem/Burn --  * To create rewardTokens, we call mintRewardToken with some amount of TUSD  * To redeem rewardTokens we call redeemRewardToken and recieve TUSD  * Only the account that has rewardTokens can burn reward tokens. The only  * time we would want to burn rewardTokens is if the underlying opportunity  * is no longer redeemable, and we want to wipe the debt.  *  */ [56081,57098]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [57100,57108]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: RewardToken [57109,57120]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [57121,57123]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [57124,57153]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [57154,57155]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /* variables in proxy storage     mapping(address => FinancialOpportunity) finOps;     mapping(address => mapping(address => uint256)) finOpBalances;     mapping(address => uint256) finOpSupply;     */ [57163,57368]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [57376,57446]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [57452,57524]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [57530,57600]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Only addresses registered in this contract's mapping are valid      *      * @param finOp reverts if this finOp is not registered      */ [57608,57765]"
    },
    {
      "action": "delete-node",
      "tree": "modifier: modifier [57771,57779]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: validFinOp [57780,57790]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [57790,57791]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [57791,57804]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [57804,57805]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [57806,57807]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [57817,57824]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [57824,57825]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: finOp [57825,57830]"
    },
    {
      "action": "delete-node",
      "tree": "!=: != [57831,57833]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [57825,57844]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [57825,57844]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [57844,57845]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [57867,57868]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [57817,57868]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [57817,57869]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [57879,57881]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [57887,57888]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [57806,57888]"
    },
    {
      "action": "delete-node",
      "tree": "modifier_definition [57771,57888]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev get debt balance of account in rewardToken      *      * @param finOp financial opportunity      */ [57896,58015]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [58021,58171]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev get debt balance of account in rewardToken      *      * @param account account to get rewardToken balance of      * @param finOp financial opportunity      */ [58179,58359]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [58365,58373]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: rewardTokenBalance [58374,58392]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [58392,58393]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [58418,58419]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [58429,58442]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [58448,58449]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [58450,58456]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [58457,58461]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [58462,58479]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [58480,58497]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [58498,58553]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [58365,58553]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev mint rewardToken for financial opportunity      *      * For valid finOp, deposit Token into finOp      * Update finOpSupply & finOpBalance for account      * Emit mintRewardToken event on success      *      * @param account account to mint rewardToken for      * @param amount amount of depositToken to mint      * @param finOp financial opportunity address      */ [58561,58954]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [58960,58968]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: mintRewardToken [58969,58984]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [58984,58985]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59010,59011]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59035,59036]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [59046,59059]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [59065,59066]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [59067,59075]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [59076,59093]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [59094,59111]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [59112,59113]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // require sufficient balance [59123,59152]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [59162,59169]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [59169,59170]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [59170,59185]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [59185,59186]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [59193,59194]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [59170,59194]"
    },
    {
      "action": "delete-node",
      "tree": ">=: >= [59195,59197]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: amount [59198,59204]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [59170,59204]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [59170,59204]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59204,59205]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [59234,59235]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [59162,59235]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [59162,59236]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // approve finOp can spend Token [59248,59280]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setAllowance [59290,59303]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [59303,59304]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59311,59312]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [59313,59318]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59318,59319]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [59326,59327]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [59290,59327]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [59290,59328]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // deposit into finOp [59340,59361]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [59371,59391]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [59392,59393]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [59394,59418]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [59418,59419]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59426,59427]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [59434,59435]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [59394,59435]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [59371,59436]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // increase finOp rewardToken supply [59448,59484]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [59494,59552]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // increase account rewardToken balance [59564,59603]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addRewardBalance [59613,59630]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [59630,59631]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59638,59639]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [59640,59652]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [59652,59653]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [59654,59659]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [59659,59660]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [59613,59660]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [59613,59661]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit mint event [59673,59691]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [59758,59778]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [59784,59785]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [59112,59785]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [58960,59785]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev redeem rewardToken balance for depositToken      *      * For valid finOp, deposit Token into finOp      * Update finOpSupply & finOpBalance for account      * Emit mintRewardToken event on success      *      * @param account account to redeem rewardToken for      * @param amount depositToken amount to redeem      * @param finOp financial opportunitu address      */ [59793,60188]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [60194,60202]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: redeemRewardToken [60203,60220]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [60220,60221]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60246,60247]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60271,60272]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [60282,60295]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [60301,60302]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [60303,60311]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [60312,60329]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [60330,60347]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [60348,60349]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // require sufficient balance [60359,60388]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [60398,60405]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [60405,60406]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: rewardTokenBalance [60406,60424]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [60424,60425]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60432,60433]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [60434,60439]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [60439,60440]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [60406,60440]"
    },
    {
      "action": "delete-node",
      "tree": ">=: >= [60441,60443]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: amount [60444,60450]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [60406,60450]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [60406,60450]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60450,60451]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [60481,60482]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [60398,60482]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [60398,60483]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // withdraw from finOp, giving TUSD to account [60495,60541]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [60551,60570]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [60571,60572]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [60573,60596]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [60596,60597]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60604,60605]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [60612,60613]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [60573,60613]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [60551,60614]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // decrease finOp rewardToken supply [60626,60662]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [60672,60690]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [60691,60692]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [60693,60715]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [60715,60716]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [60722,60723]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [60693,60723]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [60672,60723]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [60672,60724]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // decrease account rewardToken balance [60736,60775]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subRewardBalance [60785,60802]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [60802,60803]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60810,60811]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60818,60819]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [60820,60825]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [60825,60826]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [60785,60826]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [60785,60827]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit mint event [60839,60857]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [60867,60871]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: RedeemRewardToken [60872,60889]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [60889,60890]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60897,60898]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [60899,60910]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [60910,60911]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [60912,60917]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [60917,60918]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [60867,60919]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [60931,60950]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [60956,60957]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [60348,60957]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [60194,60957]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev burn rewardToken without redeeming      *      * Burn rewardToken for finOp      *      * @param account account to burn rewardToken for      * @param amount depositToken amount to burn      * @param finOp financial opportunity address      */ [60965,61232]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [61238,61246]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burnRewardToken [61247,61262]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [61262,61263]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [61288,61289]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [61313,61314]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [61324,61337]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [61343,61344]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [61372,61389]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [61395,61396]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // burn call must come from sender [61406,61440]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [61450,61481]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sender must have rewardToken amount to burn [61493,61539]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [61549,61556]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [61556,61557]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: rewardTokenBalance [61557,61575]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [61575,61576]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [61583,61584]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [61585,61590]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [61590,61591]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [61557,61591]"
    },
    {
      "action": "delete-node",
      "tree": ">=: >= [61592,61594]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: amount [61595,61601]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [61557,61601]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [61557,61601]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [61601,61602]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [61549,61602]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [61549,61603]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // subtract reward balance from [61615,61646]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subRewardBalance [61656,61673]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [61673,61674]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [61681,61682]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [61689,61690]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [61691,61696]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [61696,61697]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [61656,61697]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [61656,61698]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // reduce total supply [61710,61732]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [61742,61764]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [61764,61765]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [61771,61772]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [61742,61772]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [61742,61773]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // burn event [61785,61798]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [61859,61860]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [61395,61860]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [61238,61860]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev add rewardToken balance to account      *      * @param account account to add to      * @param amount rewardToken amount to add      * @param finOp financial opportunity to add reward tokens to      */ [61868,62092]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev subtract rewardToken balance from account      *      * @param account account to subtract from      * @param amount rewardToken ammount to subtract      * @param finOp financial opportunity      */ [62282,62502]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [62508,62516]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subRewardBalance [62517,62534]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [62534,62535]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [62550,62551]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [62566,62567]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [62568,62581]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [62581,62582]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [62592,62593]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [62603,62632]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [62633,62634]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [62635,62668]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [62668,62669]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [62675,62676]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [62635,62676]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [62603,62676]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [62603,62677]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [62683,62684]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [62592,62684]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [62508,62684]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Utility to convert depositToken value to rewardToken value      *      * @param amount depositToken amount to convert to rewardToken      * @param finOp financial opportunity address      */ [62692,62903]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [62909,62917]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _toRewardToken [62918,62932]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [62932,62933]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [62947,62948]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [62949,62962]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [62962,62963]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [62964,62972]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [62973,62977]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [62978,62995]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [62996,63109]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [62909,63109]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Utility to convert rewardToken value to depositToken value      *      * @param amount rewardToken amount to convert to depositToken      * @param finOp financial opportunity address      */ [63117,63328]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [63334,63342]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _toToken [63343,63351]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [63351,63352]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [63352,63363]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [63363,63364]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [63365,63378]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [63378,63379]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [63380,63388]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [63389,63393]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [63394,63411]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [63412,63413]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [63423,63469]"
    },
    {
      "action": "delete-node",
      "tree": "return: return [63479,63485]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [63486,63495]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [63495,63496]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [63502,63503]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [63486,63503]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [63503,63504]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: div [63504,63507]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [63486,63507]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [63507,63508]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [63508,63516]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [63516,63517]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [63486,63517]"
    },
    {
      "action": "delete-node",
      "tree": "return_statement [63479,63518]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [63524,63525]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [63412,63525]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [63334,63525]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev utility to get FinancialOpportunity for address      *      * @param finOp financial opportunity to get      */ [63533,63664]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [63670,63802]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [63804,63805]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [57154,63805]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [57100,63805]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/RewardTokenWithReserve.sol [63809,63869]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [63873,63896]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title RewardTokenWithReserve  * @dev Provides a reserve to swap rewardTokens for gas savings  *  * -- Overview --  * The Reserve holds Tokens and RewardTokens  * Because gas costs can be high for depositing/redeeming in financial  * opportunities, we use this contract to keep a reserve of tokens  * to provide swap opportunities  *  */ [63902,64256]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [64258,64266]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: RewardTokenWithReserve [64267,64289]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [64290,64292]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [64293,64304]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [64305,64306]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Reserve is an address which nobody has the private key to [64314,64374]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Reserves of TUSD and TrueRewardBackedToken are held at this addess [64380,64449]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [64540,64631]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [64637,64728]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev get reserve token balance      *      * @return token balance of reserve      */ [64736,64836]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [64842,64948]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Get rewardToken reserve balance      *      * @param finOp address of financial opportunity      * @return rewardToken balance of reserve for finOp      */ [64956,65132]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [65138,65270]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Withdraw Token from reserve through transferAll      *      * @param to address to withdraw to      * @param value amount to withdraw      */ [65278,65440]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [65446,65454]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reserveWithdraw [65455,65470]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [65470,65471]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [65481,65482]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [65496,65497]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [65498,65506]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [65507,65516]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [65517,65518]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferAllArgs [65528,65544]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [65544,65545]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [65545,65552]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [65552,65553]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [65554,65556]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [65556,65557]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [65563,65564]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [65528,65564]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [65528,65565]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [65571,65572]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [65517,65572]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [65446,65572]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Allow this contract to rebalance currency reserves      * This is called when there is too much money in an opportunity and we want      * to get more TrueCurrency.      * This allows us to reduct the cost of transfers 5-10x in/out of opportunities      *      * @param amount amount of rewardTokens to redeem      * @param finOp financial opportunity to redeem from      */ [65580,65978]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [65984,65992]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reserveRedeem [65993,66006]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [66006,66007]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [66021,66022]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [66023,66036]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [66036,66037]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [66038,66046]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [66047,66048]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: redeemRewardToken [66058,66075]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [66075,66076]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [66076,66083]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [66083,66084]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [66091,66092]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [66093,66098]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [66098,66099]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [66058,66099]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [66058,66100]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [66106,66107]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [66047,66107]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [65984,66107]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Allow this contract to rebalance currency reserves      * This is called when there is not enough rewardToken for an      * opportunity and we want to add rewardTokens to the reserve      *      * @param amount amount of Token to redeem for rewardToken      * @param finOp financial opportunity to redeem for      */ [66115,66454]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [66460,66468]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reserveMint [66469,66480]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [66480,66481]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [66495,66496]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [66497,66510]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [66510,66511]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [66512,66520]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [66521,66522]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: mintRewardToken [66532,66547]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [66547,66548]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [66548,66555]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [66555,66556]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [66563,66564]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [66565,66570]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [66570,66571]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [66532,66571]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [66532,66572]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [66578,66579]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [66521,66579]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [66460,66579]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Use reserve to swap Token for rewardToken between accounts      *      * @param sender account to deduct token from      * @param receiver account to add rewardToken to      * @param amount Token amount to exchange for rewardToken      * @param finOp financial opportunity to swap tokens for      */ [66587,66909]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [66915,66923]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: swapTokenForReward [66924,66942]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [66942,66943]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [66967,66968]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [66978,66994]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [66994,66995]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [67019,67020]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [67030,67043]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [67049,67050]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [67060,67077]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [67078,67079]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // require sender has sufficient balance [67089,67129]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [67139,67146]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [67146,67147]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: balanceOf [67147,67156]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [67156,67157]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [67163,67164]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [67147,67164]"
    },
    {
      "action": "delete-node",
      "tree": ">=: >= [67165,67167]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: amount [67168,67174]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [67147,67174]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [67147,67174]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [67174,67175]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [67198,67199]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [67139,67199]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [67139,67200]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // calculate rewardToken value for depositToken amount [67212,67266]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [67276,67296]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [67297,67298]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _toRewardToken [67299,67313]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [67313,67314]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [67320,67321]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [67322,67327]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [67327,67328]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [67299,67328]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [67276,67329]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // require reserve [67341,67359]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sub from sender and add to reserve for depositToken [67478,67532]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subBalance [67542,67553]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [67553,67554]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [67560,67561]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [67568,67569]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [67542,67569]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [67542,67570]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addBalance [67580,67591]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [67591,67592]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [67592,67599]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [67599,67600]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [67607,67608]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [67580,67608]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [67580,67609]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sub from reserve and add to sender for rewardToken [67621,67674]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [67684,67732]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [67742,67791]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit event [67803,67816]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [67889,67890]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [67078,67890]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [66915,67890]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Use reserve to swap rewardToken for Token between accounts      *      * @param sender account to swap rewardToken from      * @param receiver account to add Token to      * @param tokenAmount token amount to receive for Token      * @param finOp financial opportunity      */ [67898,68197]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [68203,68211]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: swapRewardForToken [68212,68230]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [68230,68231]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [68255,68256]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [68266,68282]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [68282,68283]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [68293,68312]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [68312,68313]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [68323,68336]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [68342,68343]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [68353,68370]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [68371,68372]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // ensure reserve has enough balance [68382,68418]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [68521,68579]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // require sufficient balance [68591,68620]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sub account and add reserve for rewardToken [68738,68784]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subRewardBalance [68794,68811]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [68811,68812]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [68818,68819]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [68820,68832]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [68832,68833]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [68834,68839]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [68839,68840]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [68794,68840]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [68794,68841]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [68851,68899]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sub account and add reserve for Token [68911,68951]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [68961,68995]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [69005,69040]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit event [69052,69065]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [69075,69079]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: SwapRewardForToken [69080,69098]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [69098,69099]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [69105,69106]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [69107,69115]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [69115,69116]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [69117,69129]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [69129,69130]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [69131,69136]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [69136,69137]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [69075,69138]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [69144,69145]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [68371,69145]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [68203,69145]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [69147,69148]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [64305,69148]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [64258,69148]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/TrueRewardBackedToken.sol [69152,69211]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [69215,69238]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title TrueRewardBackedToken  * @dev TrueRewardBackedToken is TrueCurrency backed by debt  *  * -- Overview --  * Enabling TrueRewards deposits TrueCurrency into a financial opportunity  * Financial opportunities provide awards over time  * Awards are reflected in the wallet balance updated block-by-block  *  * -- rewardToken vs yToken --  * rewardToken represents an amount of ASSURED TrueCurrency owed to the rewardToken holder  * yToken represents an amount of NON-ASSURED TrueCurrency owed to a yToken holder  * For this contract, we only handle rewardToken (Assured Opportunities)  *  * -- Calculating rewardToken --  * TrueCurrency Value = rewardToken * financial opportunity tokenValue()  *  * -- rewardToken Assumptions --  * We assume tokenValue never decreases for assured financial opportunities  * rewardToken is not transferrable in that the token itself is never tranferred  * Rather, we override our transfer functions to account for user balances  *  * -- Reserve --  * This contract uses a reserve holding of TrueCurrency and rewardToken to save on gas costs  * because calling the financial opportunity deposit() and redeem() everytime  * can be expensive  * See RewardTokenWithReserve.sol  *  * -- Future Upgrades to Financial Opportunity --  * Currently, we only have a single financial opportunity  * We plan on upgrading this contract to support a multiple financial opportunity,  * so some of the code is built to support this  *  */ [69248,70746]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [70748,70756]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: TrueRewardBackedToken [70757,70778]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [70779,70781]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [70782,70804]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [70805,70806]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /* variables in Proxy Storage:     mapping(address => FinancialOpportunity) finOps;     mapping(address => mapping(address => uint256)) finOpBalances;     mapping(address => uint256) finOpSupply;     uint256 maxRewardProportion = 1000;     */ [70814,71061]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // registry attribute for whitelist [71069,71104]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // 0x6973547275655265776172647357686974656c69737465640000000000000000 [71110,71179]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [71185,71258]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // financial opportunity address [71266,71298]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [71340,71382]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [71388,71431]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /** @dev return true if TrueReward is enabled for a given address */ [71439,71507]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [71513,71652]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Get total supply of all TrueCurrency      * Equal to deposit backed TrueCurrency plus debt backed TrueCurrency      * @return total supply in trueCurrency      */ [71660,71842]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [71848,72200]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev get total supply of TrueCurrency backed by fiat deposits      * @return supply of fiat backed TrueCurrency      */ [72208,72341]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [72347,72446]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev get total supply of TrueCurrency backed by debt      * @return supply of debt backed TrueCurrency      */ [72454,72578]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [72584,72699]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Get balance of TrueCurrency including rewards for an address      *      * @param _who address of account to get balanceOf for      * @return balance total balance of address including rewards      */ [72707,72928]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [72934,73296]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Enable TrueReward and deposit user balance into opportunity.      * Currently supports a single financial opportunity      */ [73304,73448]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [73454,73462]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: enableTrueReward [73463,73479]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [73479,73480]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [73480,73481]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [73482,73490]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [73491,73492]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // require TrueReward is not enabled [73502,73538]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [73548,73555]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [73555,73556]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [73556,73617]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [73617,73618]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [73662,73663]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [73548,73663]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [73548,73664]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [73674,73744]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // get sender balance [73756,73777]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [73787,73826]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [73838,73968]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // set reward distribution [73980,74006]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // we set max distribution since we only have one opportunity [74016,74077]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [74087,74140]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit enable event [74152,74172]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [74182,74217]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //emit Transfer(address(0), msg.sender, balance); [74227,74276]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [74282,74283]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [73491,74283]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [73454,74283]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Disable TrueReward and withdraw user balance from opportunity.      */ [74291,74379]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [74385,74393]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: disableTrueReward [74394,74411]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [74411,74412]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [74412,74413]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [74414,74422]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [74423,74424]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // require TrueReward is enabled [74434,74466]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [74476,74546]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // get balance [74556,74570]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [74580,74647]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // remove reward distribution [74659,74688]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [74698,74733]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [74745,74887]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit disable event [74899,74920]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [74930,74966]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit Transfer(msg.sender, address(0), zTrueCurrency); [74976,75032]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [75038,75039]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [74423,75039]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [74385,75039]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev mint function for TrueRewardBackedToken      * Mints TrueCurrency backed by debt      * When we add multiple opportunities, this needs to work for mutliple interfaces      */ [75047,75241]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev redeem reserve rewardTokens for Token given a rewardToken amount      * This is called by the TokenController to balance the reserve      * @param _value amount of Token to deposit for rewardTokens      */ [75842,76067]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [76073,76197]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev mint reserve rewardTokens for opportunity given a Token deposit      * This is called by the TokenController to balance the reserve      * @param _value amount of Token to deposit for rewardTokens      */ [76205,76429]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [76435,76555]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev set a new opportunity financial opportunity address      * @param _opportunity new opportunity to set      */ [76563,76691]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [76697,76815]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Get (assured) financial opportunity address      * @return address financial opportunity address      */ [76823,76946]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [76952,77043]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Get total supply of opportunity rewardToken      * @return total supply of opportunity rewardToken      */ [77051,77176]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [77182,77190]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: opportunityRewardSupply [77191,77214]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [77214,77215]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [77215,77216]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [77226,77230]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [77231,77248]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [77249,77250]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [77260,77262]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [77263,77264]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [77291,77292]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [77293,77328]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [77260,77328]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [77338,77378]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [77384,77385]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [77249,77385]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [77182,77385]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Get total supply of TrueCurrency in opportunity      * @return total supply of TrueCurrency in opportunity      */ [77393,77526]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [77532,77674]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfer helper for accounts with rewardToken balances      * Uses reserve float to save gas costs for transactions with value < reserve balance      * Case #2 and #3 use reserve balances      *      * There are 6 transfer cases      *  1. Both sender and receiver are disabled (see _transferAllArgs)      *  2. Sender enabled, receiver disabled, value < reserve TrueCurrency balance      *  3. Sender disabled, receiver enabled, value < reserve rewardToken balance (in TrueCurrency)      *  4. Both sender and receiver are enabled      *  5. Sender enabled, receiver disabled, value > reserve TrueCurrency balance      *  6. Sender disabled, receiver enabled, value > reserve rewardToken balance (in TrueCurrency)      *      * @param _from account to transfer from      * @param _to account to transfer to      * @param _value value in Token to transfer      * @return actual value transferred      */ [77682,78618]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [78624,81175]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfer helper function for TrueRewardBackedToken      */ [81183,81259]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [81265,81273]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferAllArgs [81274,81290]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [81290,81291]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [81291,81304]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [81304,81305]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [81306,81317]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [81317,81318]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [81319,81333]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [81333,81334]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [81344,81345]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // 1. Both sender and receiver are disabled [81355,81398]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Exchange is in TrueCurrency -> call the normal transfer function [81408,81475]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [81485,81689]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [81699,81706]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [81706,81707]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [81707,81733]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [81733,81734]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [81755,81756]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [81699,81756]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [81699,81757]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // require account is not blacklisted and check if hook is registered [81769,81838]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [81926,81980]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit transfer event for from [81992,82023]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [82033,82067]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [82077,82407]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [82413,82414]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [81344,82414]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [81265,82414]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev TransferFromAll helper function for TrueRewardBackedToken      */ [82422,82505]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [82511,82519]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferFromAllArgs [82520,82540]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [82540,82541]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [82551,82564]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [82564,82565]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [82575,82586]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [82586,82587]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [82597,82611]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [82611,82612]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [82622,82638]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [82644,82645]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [82646,82654]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [82655,82656]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // 1. Both sender and receiver are disabled -> normal transfer [82666,82728]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [82738,82900]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // check balance [82912,82928]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [82938,82996]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [83040,83041]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [83042,83087]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [83008,83088]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // call transfer helper [83100,83123]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [83133,83187]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sub allowance of spender [83199,83226]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [83236,83275]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // emit transfer event. For hook emit second transfer event [83287,83346]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // call fallback function for valid hook [83356,83396]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [83406,83440]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [83450,83780]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [83786,83787]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [82655,83787]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [82511,83787]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Set reward distribution for an opportunity      *      * @param proportion to set      * @param finOp financial opportunity to set proportion for      */ [83795,83969]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [83975,84316]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Remove reward distribution for a financial opportunity      * Remove      */ [84324,84419]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [84425,84589]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [84591,84592]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [70805,84592]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [70748,84592]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/DelegateERC20.sol [84596,84647]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [84651,84674]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /** @title DelegateERC20 Accept forwarding delegation calls from the old TrueUSD (V1) contract. This way the all the ERC20 functions in the old contract still works (except Burn). */ [84680,84865]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [84867,84875]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: DelegateERC20 [84876,84889]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [84890,84892]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [84893,84922]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [84923,84924]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [85016,85111]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [85119,85219]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [85227,85339]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [85347,85539]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [85699,85919]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [85927,85935]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: delegateApprove [85936,85951]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [85951,85952]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [85967,85968]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [85969,85982]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [85982,85983]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [85984,86002]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [86002,86003]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [86004,86010]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [86011,86027]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [86028,86042]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [86043,86044]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _approveAllArgs [86054,86069]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [86069,86070]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [86077,86078]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [86084,86085]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [86086,86096]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [86096,86097]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [86054,86097]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [86054,86098]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [86108,86120]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [86126,86127]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [86043,86127]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [85927,86127]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [86607,86608]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [84923,86608]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [84867,86608]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCurrencies/TrueUSD.sol [86612,86657]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [86661,86684]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /** @title TrueUSD  * @dev This is the top-level ERC20 contract, but most of the interesting functionality is  * inherited - see the documentation on the corresponding contracts.  */ [86696,86881]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [86924,86925]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [86926,86939]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [87387,87395]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: canBurn [87396,87403]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [87403,87404]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [87404,87405]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [87406,87414]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [87420,87437]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [87438,87473]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [87387,87473]"
    }
  ]
}