{
  "matches": [
    {
      "src": "internal: internal [4022,4030]",
      "dest": "internal: internal [4022,4030]"
    },
    {
      "src": "string [3154,3194]",
      "dest": "string [3154,3194]"
    },
    {
      "src": "): ) [3194,3195]",
      "dest": "): ) [3194,3195]"
    },
    {
      "src": "int128: int128 [4996,5002]",
      "dest": "int128: int128 [4996,5002]"
    },
    {
      "src": "): ) [4503,4504]",
      "dest": "): ) [4503,4504]"
    },
    {
      "src": "parameter [7191,7195]",
      "dest": "parameter [7191,7195]"
    },
    {
      "src": "type: type [4991,4995]",
      "dest": "type: type [4991,4995]"
    },
    {
      "src": "identifier: require [5515,5522]",
      "dest": "identifier: require [5515,5522]"
    },
    {
      "src": "visibility [4376,4384]",
      "dest": "visibility [4376,4384]"
    },
    {
      "src": "identifier: require [2645,2652]",
      "dest": "identifier: require [2645,2652]"
    },
    {
      "src": "identifier: value [4015,4020]",
      "dest": "identifier: value [4015,4020]"
    },
    {
      "src": "binary_expression [4953,5003]",
      "dest": "binary_expression [4953,5003]"
    },
    {
      "src": "member_expression [4070,4094]",
      "dest": "member_expression [4070,4094]"
    },
    {
      "src": "meta_type_expression [7251,7261]",
      "dest": "meta_type_expression [7251,7261]"
    },
    {
      "src": "primitive_type [3101,3107]",
      "dest": "primitive_type [3101,3107]"
    },
    {
      "src": "binary_expression [6089,6109]",
      "dest": "binary_expression [6089,6109]"
    },
    {
      "src": "(: ( [2666,2667]",
      "dest": "(: ( [2666,2667]"
    },
    {
      "src": "identifier: value [2597,2602]",
      "dest": "identifier: value [2597,2602]"
    },
    {
      "src": "}: } [6785,6786]",
      "dest": "}: } [6785,6786]"
    },
    {
      "src": ",: , [5007,5008]",
      "dest": ",: , [5007,5008]"
    },
    {
      "src": "): ) [5646,5647]",
      "dest": "): ) [5646,5647]"
    },
    {
      "src": "primitive_type [1233,1240]",
      "dest": "primitive_type [1233,1240]"
    },
    {
      "src": "): ) [1682,1683]",
      "dest": "): ) [1682,1683]"
    },
    {
      "src": "call_expression [4062,4136]",
      "dest": "call_expression [4062,4136]"
    },
    {
      "src": "internal: internal [2130,2138]",
      "dest": "internal: internal [2130,2138]"
    },
    {
      "src": "\": \" [4471,4472]",
      "dest": "\": \" [4471,4472]"
    },
    {
      "src": "return_statement [1299,1321]",
      "dest": "return_statement [1299,1321]"
    },
    {
      "src": "): ) [4089,4090]",
      "dest": "): ) [4089,4090]"
    },
    {
      "src": "solidity_version_comparison_operator [107,109]",
      "dest": "solidity_version_comparison_operator [107,109]"
    },
    {
      "src": "type: type [3136,3140]",
      "dest": "type: type [3136,3140]"
    },
    {
      "src": "primitive_type [3686,3692]",
      "dest": "primitive_type [3686,3692]"
    },
    {
      "src": "type_name [3615,3621]",
      "dest": "type_name [3615,3621]"
    },
    {
      "src": "(: ( [7535,7536]",
      "dest": "(: ( [7535,7536]"
    },
    {
      "src": "): ) [6039,6040]",
      "dest": "): ) [6039,6040]"
    },
    {
      "src": "int256: int256 [5461,5467]",
      "dest": "int256: int256 [5461,5467]"
    },
    {
      "src": "function: function [1135,1143]",
      "dest": "function: function [1135,1143]"
    },
    {
      "src": "parameter [2153,2159]",
      "dest": "parameter [2153,2159]"
    },
    {
      "src": "identifier: value [6207,6212]",
      "dest": "identifier: value [6207,6212]"
    },
    {
      "src": "primitive_type [1675,1682]",
      "dest": "primitive_type [1675,1682]"
    },
    {
      "src": "function_body [2161,2284]",
      "dest": "function_body [2161,2284]"
    },
    {
      "src": "return: return [3679,3685]",
      "dest": "return: return [3679,3685]"
    },
    {
      "src": "function: function [7518,7526]",
      "dest": "function: function [7518,7526]"
    },
    {
      "src": "uint32: uint32 [3212,3218]",
      "dest": "uint32: uint32 [3212,3218]"
    },
    {
      "src": "type_name [4362,4368]",
      "dest": "type_name [4362,4368]"
    },
    {
      "src": "(: ( [4398,4399]",
      "dest": "(: ( [4398,4399]"
    },
    {
      "src": "returns: returns [7565,7572]",
      "dest": "returns: returns [7565,7572]"
    },
    {
      "src": "call_argument [3127,3152]",
      "dest": "call_argument [3127,3152]"
    },
    {
      "src": "(: ( [4083,4084]",
      "dest": "(: ( [4083,4084]"
    },
    {
      "src": "state_mutability [2613,2617]",
      "dest": "state_mutability [2613,2617]"
    },
    {
      "src": "string [4096,4135]",
      "dest": "string [4096,4135]"
    },
    {
      "src": "): ) [5503,5504]",
      "dest": "): ) [5503,5504]"
    },
    {
      "src": "visibility [4904,4912]",
      "dest": "visibility [4904,4912]"
    },
    {
      "src": "(: ( [1313,1314]",
      "dest": "(: ( [1313,1314]"
    },
    {
      "src": "type_name [4045,4050]",
      "dest": "type_name [4045,4050]"
    },
    {
      "src": "call_argument [4426,4436]",
      "dest": "call_argument [4426,4436]"
    },
    {
      "src": "meta_type_expression [6098,6109]",
      "dest": "meta_type_expression [6098,6109]"
    },
    {
      "src": "member_expression [3127,3152]",
      "dest": "member_expression [3127,3152]"
    },
    {
      "src": "binary_expression [5551,5571]",
      "dest": "binary_expression [5551,5571]"
    },
    {
      "src": "primitive_type [6767,6772]",
      "dest": "primitive_type [6767,6772]"
    },
    {
      "src": "type_name [7256,7260]",
      "dest": "type_name [7256,7260]"
    },
    {
      "src": "): ) [6605,6606]",
      "dest": "): ) [6605,6606]"
    },
    {
      "src": "primitive_type [3063,3070]",
      "dest": "primitive_type [3063,3070]"
    },
    {
      "src": "primitive_type [1637,1644]",
      "dest": "primitive_type [1637,1644]"
    },
    {
      "src": "primitive_type [5461,5467]",
      "dest": "primitive_type [5461,5467]"
    },
    {
      "src": "state_mutability [7177,7181]",
      "dest": "state_mutability [7177,7181]"
    },
    {
      "src": "uint224: uint224 [1192,1199]",
      "dest": "uint224: uint224 [1192,1199]"
    },
    {
      "src": "member_expression [5523,5575]",
      "dest": "member_expression [5523,5575]"
    },
    {
      "src": "pure: pure [4913,4917]",
      "dest": "pure: pure [4913,4917]"
    },
    {
      "src": "): ) [7334,7335]",
      "dest": "): ) [7334,7335]"
    },
    {
      "src": "): ) [5542,5543]",
      "dest": "): ) [5542,5543]"
    },
    {
      "src": "&&: && [5548,5550]",
      "dest": "&&: && [5548,5550]"
    },
    {
      "src": "binary_expression [7215,7261]",
      "dest": "binary_expression [7215,7261]"
    },
    {
      "src": "return_statement [4146,4166]",
      "dest": "return_statement [4146,4166]"
    },
    {
      "src": "): ) [3076,3077]",
      "dest": "): ) [3076,3077]"
    },
    {
      "src": "return_statement [1782,1804]",
      "dest": "return_statement [1782,1804]"
    },
    {
      "src": "(: ( [2114,2115]",
      "dest": "(: ( [2114,2115]"
    },
    {
      "src": "call_argument [6143,6183]",
      "dest": "call_argument [6143,6183]"
    },
    {
      "src": "type: type [6126,6130]",
      "dest": "type: type [6126,6130]"
    },
    {
      "src": "(: ( [1674,1675]",
      "dest": "(: ( [1674,1675]"
    },
    {
      "src": "type: type [7251,7255]",
      "dest": "type: type [7251,7255]"
    },
    {
      "src": "(: ( [3140,3141]",
      "dest": "(: ( [3140,3141]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted int16 from int256, reverting on      * overflow (when the input is less than smallest int16 or      * greater than largest int16).      *      * Counterpart to Solidity's `int16` operator.      *      * Requirements:      *      * - input must fit into 16 bits      *      * _Available since v3.1._      */ [6226,6571]",
      "dest": "comment: /**      * @dev Returns the downcasted int16 from int256, reverting on      * overflow (when the input is less than smallest int16 or      * greater than largest int16).      *      * Counterpart to Solidity's `int16` operator.      *      * Requirements:      *      * - input must fit into 16 bits      *      * _Available since v3.1._      */ [6226,6571]"
    },
    {
      "src": "(: ( [4069,4070]",
      "dest": "(: ( [4069,4070]"
    },
    {
      "src": ".: . [6109,6110]",
      "dest": ".: . [6109,6110]"
    },
    {
      "src": "uint128: uint128 [1789,1796]",
      "dest": "uint128: uint128 [1789,1796]"
    },
    {
      "src": "internal: internal [3078,3086]",
      "dest": "internal: internal [3078,3086]"
    },
    {
      "src": "type_name [4996,5002]",
      "dest": "type_name [4996,5002]"
    },
    {
      "src": "meta_type_expression [2188,2200]",
      "dest": "meta_type_expression [2188,2200]"
    },
    {
      "src": "(: ( [4361,4362]",
      "dest": "(: ( [4361,4362]"
    },
    {
      "src": "<=: <= [7705,7707]",
      "dest": "<=: <= [7705,7707]"
    },
    {
      "src": "type_name [1192,1199]",
      "dest": "type_name [1192,1199]"
    },
    {
      "src": "expression_statement [4418,4474]",
      "dest": "expression_statement [4418,4474]"
    },
    {
      "src": "identifier: max [3149,3152]",
      "dest": "identifier: max [3149,3152]"
    },
    {
      "src": "uint224: uint224 [1233,1240]",
      "dest": "uint224: uint224 [1233,1240]"
    },
    {
      "src": "call_argument [7802,7807]",
      "dest": "call_argument [7802,7807]"
    },
    {
      "src": "primitive_type [3575,3581]",
      "dest": "primitive_type [3575,3581]"
    },
    {
      "src": "binary_expression [6089,6137]",
      "dest": "binary_expression [6089,6137]"
    },
    {
      "src": "call_expression [3119,3195]",
      "dest": "call_expression [3119,3195]"
    },
    {
      "src": "uint16: uint16 [3575,3581]",
      "dest": "uint16: uint16 [3575,3581]"
    },
    {
      "src": "type_name [4967,4973]",
      "dest": "type_name [4967,4973]"
    },
    {
      "src": "primitive_type [3212,3218]",
      "dest": "primitive_type [3212,3218]"
    },
    {
      "src": "(: ( [1232,1233]",
      "dest": "(: ( [1232,1233]"
    },
    {
      "src": "type: type [6664,6668]",
      "dest": "type: type [6664,6668]"
    },
    {
      "src": "comment: /**      * @dev Converts an unsigned uint256 into a signed int256.      *      * Requirements:      *      * - input must be less than or equal to maxInt256.      */ [7348,7513]",
      "dest": "comment: /**      * @dev Converts an unsigned uint256 into a signed int256.      *      * Requirements:      *      * - input must be less than or equal to maxInt256.      */ [7348,7513]"
    },
    {
      "src": "call_argument [5577,5617]",
      "dest": "call_argument [5577,5617]"
    },
    {
      "src": "identifier: max [1725,1728]",
      "dest": "identifier: max [1725,1728]"
    },
    {
      "src": "meta_type_expression [4991,5003]",
      "dest": "meta_type_expression [4991,5003]"
    },
    {
      "src": "return_statement [7317,7336]",
      "dest": "return_statement [7317,7336]"
    },
    {
      "src": "identifier: value [1702,1707]",
      "dest": "identifier: value [1702,1707]"
    },
    {
      "src": "uint128: uint128 [1716,1723]",
      "dest": "uint128: uint128 [1716,1723]"
    },
    {
      "src": "call_expression [4945,5051]",
      "dest": "call_expression [4945,5051]"
    },
    {
      "src": "function: function [3990,3998]",
      "dest": "function: function [3990,3998]"
    },
    {
      "src": "call_argument [2271,2276]",
      "dest": "call_argument [2271,2276]"
    },
    {
      "src": "int256: int256 [6027,6033]",
      "dest": "int256: int256 [6027,6033]"
    },
    {
      "src": "(: ( [5497,5498]",
      "dest": "(: ( [5497,5498]"
    },
    {
      "src": "library_declaration [827,7817]",
      "dest": "library_declaration [827,7817]"
    },
    {
      "src": "type_cast_expression [5068,5081]",
      "dest": "type_cast_expression [5068,5081]"
    },
    {
      "src": "call_argument [4070,4094]",
      "dest": "call_argument [4070,4094]"
    },
    {
      "src": "binary_expression [7242,7261]",
      "dest": "binary_expression [7242,7261]"
    },
    {
      "src": "parameter [3063,3076]",
      "dest": "parameter [3063,3076]"
    },
    {
      "src": ">=: >= [4432,4434]",
      "dest": ">=: >= [4432,4434]"
    },
    {
      "src": "parameter [6027,6039]",
      "dest": "parameter [6027,6039]"
    },
    {
      "src": "{: { [5505,5506]",
      "dest": "{: { [5505,5506]"
    },
    {
      "src": "type_name [6064,6069]",
      "dest": "type_name [6064,6069]"
    },
    {
      "src": "function: function [1618,1626]",
      "dest": "function: function [1618,1626]"
    },
    {
      "src": "call_argument [6709,6749]",
      "dest": "call_argument [6709,6749]"
    },
    {
      "src": "&&: && [6680,6682]",
      "dest": "&&: && [6680,6682]"
    },
    {
      "src": "primitive_type [1306,1313]",
      "dest": "primitive_type [1306,1313]"
    },
    {
      "src": "expression_statement [2171,2248]",
      "dest": "expression_statement [2171,2248]"
    },
    {
      "src": "expression_statement [6647,6751]",
      "dest": "expression_statement [6647,6751]"
    },
    {
      "src": "uint8: uint8 [4153,4158]",
      "dest": "uint8: uint8 [4153,4158]"
    },
    {
      "src": "(: ( [2652,2653]",
      "dest": "(: ( [2652,2653]"
    },
    {
      "src": "type_name [4084,4089]",
      "dest": "type_name [4084,4089]"
    },
    {
      "src": ">=: >= [4959,4961]",
      "dest": ">=: >= [4959,4961]"
    },
    {
      "src": "type_cast_expression [2264,2277]",
      "dest": "type_cast_expression [2264,2277]"
    },
    {
      "src": "int32: int32 [6201,6206]",
      "dest": "int32: int32 [6201,6206]"
    },
    {
      "src": ",: , [7265,7266]",
      "dest": ",: , [7265,7266]"
    },
    {
      "src": "): ) [2276,2277]",
      "dest": "): ) [2276,2277]"
    },
    {
      "src": "\": \" [6748,6749]",
      "dest": "\": \" [6748,6749]"
    },
    {
      "src": "parameter [1675,1682]",
      "dest": "parameter [1675,1682]"
    },
    {
      "src": "(: ( [5564,5565]",
      "dest": "(: ( [5564,5565]"
    },
    {
      "src": "member_expression [2653,2678]",
      "dest": "member_expression [2653,2678]"
    },
    {
      "src": "returns: returns [5489,5496]",
      "dest": "returns: returns [5489,5496]"
    },
    {
      "src": "int16: int16 [6630,6635]",
      "dest": "int16: int16 [6630,6635]"
    },
    {
      "src": "): ) [6136,6137]",
      "dest": "): ) [6136,6137]"
    },
    {
      "src": "function_body [4408,4511]",
      "dest": "function_body [4408,4511]"
    },
    {
      "src": "): ) [6183,6184]",
      "dest": "): ) [6183,6184]"
    },
    {
      "src": "\": \" [2245,2246]",
      "dest": "\": \" [2245,2246]"
    },
    {
      "src": "identifier: value [4897,4902]",
      "dest": "identifier: value [4897,4902]"
    },
    {
      "src": "identifier: toInt32 [6019,6026]",
      "dest": "identifier: toInt32 [6019,6026]"
    },
    {
      "src": "string_literal [5009,5050]",
      "dest": "string_literal [5009,5050]"
    },
    {
      "src": "type: type [1228,1232]",
      "dest": "type: type [1228,1232]"
    },
    {
      "src": "\": \" [6709,6710]",
      "dest": "\": \" [6709,6710]"
    },
    {
      "src": "call_argument [7699,7733]",
      "dest": "call_argument [7699,7733]"
    },
    {
      "src": ",: , [7733,7734]",
      "dest": ",: , [7733,7734]"
    },
    {
      "src": "type_name [6103,6108]",
      "dest": "type_name [6103,6108]"
    },
    {
      "src": "uint64: uint64 [2627,2633]",
      "dest": "uint64: uint64 [2627,2633]"
    },
    {
      "src": "}: } [3231,3232]",
      "dest": "}: } [3231,3232]"
    },
    {
      "src": "primitive_type [4045,4050]",
      "dest": "primitive_type [4045,4050]"
    },
    {
      "src": "string_literal [1730,1771]",
      "dest": "string_literal [1730,1771]"
    },
    {
      "src": "\": \" [3154,3155]",
      "dest": "\": \" [3154,3155]"
    },
    {
      "src": "(: ( [4952,4953]",
      "dest": "(: ( [4952,4953]"
    },
    {
      "src": "expression_statement [4945,5052]",
      "dest": "expression_statement [4945,5052]"
    },
    {
      "src": "primitive_type [3141,3147]",
      "dest": "primitive_type [3141,3147]"
    },
    {
      "src": "identifier: max [5004,5007]",
      "dest": "identifier: max [5004,5007]"
    },
    {
      "src": "call_expression [4418,4473]",
      "dest": "call_expression [4418,4473]"
    },
    {
      "src": "pure: pure [6050,6054]",
      "dest": "pure: pure [6050,6054]"
    },
    {
      "src": "): ) [4973,4974]",
      "dest": "): ) [4973,4974]"
    },
    {
      "src": "binary_expression [2179,2200]",
      "dest": "binary_expression [2179,2200]"
    },
    {
      "src": "identifier: require [7691,7698]",
      "dest": "identifier: require [7691,7698]"
    },
    {
      "src": "primitive_type [1154,1161]",
      "dest": "primitive_type [1154,1161]"
    },
    {
      "src": "type_cast_expression [5635,5647]",
      "dest": "type_cast_expression [5635,5647]"
    },
    {
      "src": "): ) [6749,6750]",
      "dest": "): ) [6749,6750]"
    },
    {
      "src": "primitive_type [5498,5503]",
      "dest": "primitive_type [5498,5503]"
    },
    {
      "src": ">=: >= [6661,6663]",
      "dest": ">=: >= [6661,6663]"
    },
    {
      "src": "(: ( [2178,2179]",
      "dest": "(: ( [2178,2179]"
    },
    {
      "src": "identifier: value [1797,1802]",
      "dest": "identifier: value [1797,1802]"
    },
    {
      "src": "): ) [6212,6213]",
      "dest": "): ) [6212,6213]"
    },
    {
      "src": "identifier: require [3593,3600]",
      "dest": "identifier: require [3593,3600]"
    },
    {
      "src": "solidity_pragma_token [99,114]",
      "dest": "solidity_pragma_token [99,114]"
    },
    {
      "src": "(: ( [2744,2745]",
      "dest": "(: ( [2744,2745]"
    },
    {
      "src": "expression_statement [3119,3196]",
      "dest": "expression_statement [3119,3196]"
    },
    {
      "src": "call_argument [6773,6778]",
      "dest": "call_argument [6773,6778]"
    },
    {
      "src": "member_expression [1702,1728]",
      "dest": "member_expression [1702,1728]"
    },
    {
      "src": "return: return [7317,7323]",
      "dest": "return: return [7317,7323]"
    },
    {
      "src": "(: ( [6668,6669]",
      "dest": "(: ( [6668,6669]"
    },
    {
      "src": "string_literal [6709,6749]",
      "dest": "string_literal [6709,6749]"
    },
    {
      "src": "identifier: value [6773,6778]",
      "dest": "identifier: value [6773,6778]"
    },
    {
      "src": "parameter [2115,2128]",
      "dest": "parameter [2115,2128]"
    },
    {
      "src": "identifier: toInt8 [7147,7153]",
      "dest": "identifier: toInt8 [7147,7153]"
    },
    {
      "src": "(: ( [4995,4996]",
      "dest": "(: ( [4995,4996]"
    },
    {
      "src": "<=: <= [5557,5559]",
      "dest": "<=: <= [5557,5559]"
    },
    {
      "src": "identifier: require [4945,4952]",
      "dest": "identifier: require [4945,4952]"
    },
    {
      "src": "<=: <= [6123,6125]",
      "dest": "<=: <= [6123,6125]"
    },
    {
      "src": "parameter [2627,2633]",
      "dest": "parameter [2627,2633]"
    },
    {
      "src": "(: ( [6629,6630]",
      "dest": "(: ( [6629,6630]"
    },
    {
      "src": "}: } [2283,2284]",
      "dest": "}: } [2283,2284]"
    },
    {
      "src": "parameter [4890,4902]",
      "dest": "parameter [4890,4902]"
    },
    {
      "src": "string_literal [7735,7777]",
      "dest": "string_literal [7735,7777]"
    },
    {
      "src": "call_expression [2645,2721]",
      "dest": "call_expression [2645,2721]"
    },
    {
      "src": "): ) [7166,7167]",
      "dest": "): ) [7166,7167]"
    },
    {
      "src": "identifier: value [1162,1167]",
      "dest": "identifier: value [1162,1167]"
    },
    {
      "src": ".: . [6675,6676]",
      "dest": ".: . [6675,6676]"
    },
    {
      "src": "parameter [4045,4050]",
      "dest": "parameter [4045,4050]"
    },
    {
      "src": "identifier: value [2745,2750]",
      "dest": "identifier: value [2745,2750]"
    },
    {
      "src": "parameter [6064,6069]",
      "dest": "parameter [6064,6069]"
    },
    {
      "src": "function_definition [7518,7815]",
      "dest": "function_definition [7518,7815]"
    },
    {
      "src": "visibility [3078,3086]",
      "dest": "visibility [3078,3086]"
    },
    {
      "src": "expression_statement [7691,7779]",
      "dest": "expression_statement [7691,7779]"
    },
    {
      "src": "(: ( [3100,3101]",
      "dest": "(: ( [3100,3101]"
    },
    {
      "src": "call_argument [2179,2204]",
      "dest": "call_argument [2179,2204]"
    },
    {
      "src": "state_mutability [3087,3091]",
      "dest": "state_mutability [3087,3091]"
    },
    {
      "src": "): ) [1240,1241]",
      "dest": "): ) [1240,1241]"
    },
    {
      "src": "): ) [5473,5474]",
      "dest": "): ) [5473,5474]"
    },
    {
      "src": "type: type [3610,3614]",
      "dest": "type: type [3610,3614]"
    },
    {
      "src": "state_mutability [1661,1665]",
      "dest": "state_mutability [1661,1665]"
    },
    {
      "src": "identifier: value [2179,2184]",
      "dest": "identifier: value [2179,2184]"
    },
    {
      "src": "): ) [3147,3148]",
      "dest": "): ) [3147,3148]"
    },
    {
      "src": "call_argument [5075,5080]",
      "dest": "call_argument [5075,5080]"
    },
    {
      "src": "identifier: toUint96 [2106,2114]",
      "dest": "identifier: toUint96 [2106,2114]"
    },
    {
      "src": "identifier: value [6600,6605]",
      "dest": "identifier: value [6600,6605]"
    },
    {
      "src": "type_name [6131,6136]",
      "dest": "type_name [6131,6136]"
    },
    {
      "src": "}: } [2757,2758]",
      "dest": "}: } [2757,2758]"
    },
    {
      "src": "{: { [3109,3110]",
      "dest": "{: { [3109,3110]"
    },
    {
      "src": "uint256: uint256 [4007,4014]",
      "dest": "uint256: uint256 [4007,4014]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted uint64 from uint256, reverting on      * overflow (when the input is greater than largest uint64).      *      * Counterpart to Solidity's `uint64` operator.      *      * Requirements:      *      * - input must fit into 64 bits      */ [2290,2566]",
      "dest": "comment: /**      * @dev Returns the downcasted uint64 from uint256, reverting on      * overflow (when the input is greater than largest uint64).      *      * Counterpart to Solidity's `uint64` operator.      *      * Requirements:      *      * - input must fit into 64 bits      */ [2290,2566]"
    },
    {
      "src": "primitive_type [5565,5570]",
      "dest": "primitive_type [5565,5570]"
    },
    {
      "src": "function_body [5505,5654]",
      "dest": "function_body [5505,5654]"
    },
    {
      "src": "int16: int16 [6767,6772]",
      "dest": "int16: int16 [6767,6772]"
    },
    {
      "src": "type: type [2662,2666]",
      "dest": "type: type [2662,2666]"
    },
    {
      "src": "call_argument [1219,1245]",
      "dest": "call_argument [1219,1245]"
    },
    {
      "src": "int128: int128 [5068,5074]",
      "dest": "int128: int128 [5068,5074]"
    },
    {
      "src": "\": \" [1287,1288]",
      "dest": "\": \" [1287,1288]"
    },
    {
      "src": "primitive_type [6201,6206]",
      "dest": "primitive_type [6201,6206]"
    },
    {
      "src": "type: type [4962,4966]",
      "dest": "type: type [4962,4966]"
    },
    {
      "src": "binary_expression [3127,3148]",
      "dest": "binary_expression [3127,3148]"
    },
    {
      "src": "primitive_type [4084,4089]",
      "dest": "primitive_type [4084,4089]"
    },
    {
      "src": ".: . [6137,6138]",
      "dest": ".: . [6137,6138]"
    },
    {
      "src": "call_argument [3693,3698]",
      "dest": "call_argument [3693,3698]"
    },
    {
      "src": "comment: // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive [7592,7682]",
      "dest": "comment: // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive [7592,7682]"
    },
    {
      "src": "identifier: toUint64 [2580,2588]",
      "dest": "identifier: toUint64 [2580,2588]"
    },
    {
      "src": "function_definition [3519,3706]",
      "dest": "function_definition [3519,3706]"
    },
    {
      "src": ",: , [3626,3627]",
      "dest": ",: , [3626,3627]"
    },
    {
      "src": "call_argument [3219,3224]",
      "dest": "call_argument [3219,3224]"
    },
    {
      "src": "meta_type_expression [5560,5571]",
      "dest": "meta_type_expression [5560,5571]"
    },
    {
      "src": "function: function [7138,7146]",
      "dest": "function: function [7138,7146]"
    },
    {
      "src": "): ) [2246,2247]",
      "dest": "): ) [2246,2247]"
    },
    {
      "src": "parameter [5498,5503]",
      "dest": "parameter [5498,5503]"
    },
    {
      "src": "<=: <= [1225,1227]",
      "dest": "<=: <= [1225,1227]"
    },
    {
      "src": "identifier: max [6704,6707]",
      "dest": "identifier: max [6704,6707]"
    },
    {
      "src": "return_type_definition [1666,1683]",
      "dest": "return_type_definition [1666,1683]"
    },
    {
      "src": "{: { [2161,2162]",
      "dest": "{: { [2161,2162]"
    },
    {
      "src": ">=: >= [6095,6097]",
      "dest": ">=: >= [6095,6097]"
    },
    {
      "src": "pure: pure [4385,4389]",
      "dest": "pure: pure [4385,4389]"
    },
    {
      "src": "}: } [7341,7342]",
      "dest": "}: } [7341,7342]"
    },
    {
      "src": "visibility [5475,5483]",
      "dest": "visibility [5475,5483]"
    },
    {
      "src": "type_name [5498,5503]",
      "dest": "type_name [5498,5503]"
    },
    {
      "src": "identifier: value [4498,4503]",
      "dest": "identifier: value [4498,4503]"
    },
    {
      "src": ",: , [6141,6142]",
      "dest": ",: , [6141,6142]"
    },
    {
      "src": "identifier: max [2201,2204]",
      "dest": "identifier: max [2201,2204]"
    },
    {
      "src": "function_definition [3045,3232]",
      "dest": "function_definition [3045,3232]"
    },
    {
      "src": "primitive_type [6131,6136]",
      "dest": "primitive_type [6131,6136]"
    },
    {
      "src": "): ) [5002,5003]",
      "dest": "): ) [5002,5003]"
    },
    {
      "src": "): ) [4164,4165]",
      "dest": "): ) [4164,4165]"
    },
    {
      "src": "returns: returns [1666,1673]",
      "dest": "returns: returns [1666,1673]"
    },
    {
      "src": "identifier: value [6683,6688]",
      "dest": "identifier: value [6683,6688]"
    },
    {
      "src": "internal: internal [2604,2612]",
      "dest": "internal: internal [2604,2612]"
    },
    {
      "src": "call_argument [4096,4135]",
      "dest": "call_argument [4096,4135]"
    },
    {
      "src": "): ) [5080,5081]",
      "dest": "): ) [5080,5081]"
    },
    {
      "src": "): ) [2602,2603]",
      "dest": "): ) [2602,2603]"
    },
    {
      "src": "type_name [3537,3544]",
      "dest": "type_name [3537,3544]"
    },
    {
      "src": "call_argument [4159,4164]",
      "dest": "call_argument [4159,4164]"
    },
    {
      "src": "meta_type_expression [7224,7234]",
      "dest": "meta_type_expression [7224,7234]"
    },
    {
      "src": "<=: <= [4988,4990]",
      "dest": "<=: <= [4988,4990]"
    },
    {
      "src": "parameter [7154,7166]",
      "dest": "parameter [7154,7166]"
    },
    {
      "src": "comment: /**  * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow  * checks.  *  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can  * easily result in undesired exploitation or bugs, since developers usually  * assume that overflows raise errors. `SafeCast` restores this intuition by  * reverting the transaction when such an operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  *  * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing  * all math on `uint256` and `int256` and then downcasting.  */ [117,826]",
      "dest": "comment: /**  * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow  * checks.  *  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can  * easily result in undesired exploitation or bugs, since developers usually  * assume that overflows raise errors. `SafeCast` restores this intuition by  * reverting the transaction when such an operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  *  * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing  * all math on `uint256` and `int256` and then downcasting.  */ [117,826]"
    },
    {
      "src": "expression_statement [5515,5619]",
      "dest": "expression_statement [5515,5619]"
    },
    {
      "src": "\": \" [7267,7268]",
      "dest": "\": \" [7267,7268]"
    },
    {
      "src": "\": \" [3667,3668]",
      "dest": "\": \" [3667,3668]"
    },
    {
      "src": "\": \" [5049,5050]",
      "dest": "\": \" [5049,5050]"
    },
    {
      "src": "binary_expression [6683,6703]",
      "dest": "binary_expression [6683,6703]"
    },
    {
      "src": "return: return [1299,1305]",
      "dest": "return: return [1299,1305]"
    },
    {
      "src": "type: type [6692,6696]",
      "dest": "type: type [6692,6696]"
    },
    {
      "src": "string [4438,4472]",
      "dest": "string [4438,4472]"
    },
    {
      "src": "(: ( [4044,4045]",
      "dest": "(: ( [4044,4045]"
    },
    {
      "src": "): ) [3698,3699]",
      "dest": "): ) [3698,3699]"
    },
    {
      "src": "type: type [4079,4083]",
      "dest": "type: type [4079,4083]"
    },
    {
      "src": "expression_statement [1694,1773]",
      "dest": "expression_statement [1694,1773]"
    },
    {
      "src": "primitive_type [5537,5542]",
      "dest": "primitive_type [5537,5542]"
    },
    {
      "src": "function_definition [1618,1810]",
      "dest": "function_definition [1618,1810]"
    },
    {
      "src": "): ) [4050,4051]",
      "dest": "): ) [4050,4051]"
    },
    {
      "src": "int256: int256 [7795,7801]",
      "dest": "int256: int256 [7795,7801]"
    },
    {
      "src": "member_expression [7215,7238]",
      "dest": "member_expression [7215,7238]"
    },
    {
      "src": "identifier: toInt64 [5453,5460]",
      "dest": "identifier: toInt64 [5453,5460]"
    },
    {
      "src": "type_name [2627,2633]",
      "dest": "type_name [2627,2633]"
    },
    {
      "src": "string_literal [2680,2720]",
      "dest": "string_literal [2680,2720]"
    },
    {
      "src": ".: . [5003,5004]",
      "dest": ".: . [5003,5004]"
    },
    {
      "src": "): ) [3621,3622]",
      "dest": "): ) [3621,3622]"
    },
    {
      "src": "identifier: max [1242,1245]",
      "dest": "identifier: max [1242,1245]"
    },
    {
      "src": "int256: int256 [7154,7160]",
      "dest": "int256: int256 [7154,7160]"
    },
    {
      "src": "call_argument [3601,3626]",
      "dest": "call_argument [3601,3626]"
    },
    {
      "src": ".: . [2200,2201]",
      "dest": ".: . [2200,2201]"
    },
    {
      "src": "binary_expression [4953,4974]",
      "dest": "binary_expression [4953,4974]"
    },
    {
      "src": "{: { [1201,1202]",
      "dest": "{: { [1201,1202]"
    },
    {
      "src": "): ) [3107,3108]",
      "dest": "): ) [3107,3108]"
    },
    {
      "src": "meta_type_expression [5532,5543]",
      "dest": "meta_type_expression [5532,5543]"
    },
    {
      "src": "meta_type_expression [3610,3622]",
      "dest": "meta_type_expression [3610,3622]"
    },
    {
      "src": "return_type_definition [2144,2160]",
      "dest": "return_type_definition [2144,2160]"
    },
    {
      "src": "meta_type_expression [6126,6137]",
      "dest": "meta_type_expression [6126,6137]"
    },
    {
      "src": "call_expression [6081,6184]",
      "dest": "call_expression [6081,6184]"
    },
    {
      "src": "return: return [5061,5067]",
      "dest": "return: return [5061,5067]"
    },
    {
      "src": "int16: int16 [6697,6702]",
      "dest": "int16: int16 [6697,6702]"
    },
    {
      "src": "string [7735,7777]",
      "dest": "string [7735,7777]"
    },
    {
      "src": "primitive_type [1716,1723]",
      "dest": "primitive_type [1716,1723]"
    },
    {
      "src": "member_expression [6655,6679]",
      "dest": "member_expression [6655,6679]"
    },
    {
      "src": "function: function [2097,2105]",
      "dest": "function: function [2097,2105]"
    },
    {
      "src": "function_definition [6576,6786]",
      "dest": "function_definition [6576,6786]"
    },
    {
      "src": "type_cast_expression [2738,2751]",
      "dest": "type_cast_expression [2738,2751]"
    },
    {
      "src": "uint32: uint32 [3141,3147]",
      "dest": "uint32: uint32 [3141,3147]"
    },
    {
      "src": "returns: returns [3092,3099]",
      "dest": "returns: returns [3092,3099]"
    },
    {
      "src": "): ) [5050,5051]",
      "dest": "): ) [5050,5051]"
    },
    {
      "src": "function_body [7582,7815]",
      "dest": "function_body [7582,7815]"
    },
    {
      "src": "internal: internal [5475,5483]",
      "dest": "internal: internal [5475,5483]"
    },
    {
      "src": "): ) [6635,6636]",
      "dest": "): ) [6635,6636]"
    },
    {
      "src": "identifier: toUint224 [1144,1153]",
      "dest": "identifier: toUint224 [1144,1153]"
    },
    {
      "src": "type_name [6669,6674]",
      "dest": "type_name [6669,6674]"
    },
    {
      "src": "function_definition [3990,4172]",
      "dest": "function_definition [3990,4172]"
    },
    {
      "src": "member_expression [4953,4978]",
      "dest": "member_expression [4953,4978]"
    },
    {
      "src": "string [5009,5050]",
      "dest": "string [5009,5050]"
    },
    {
      "src": "meta_type_expression [7716,7728]",
      "dest": "meta_type_expression [7716,7728]"
    },
    {
      "src": "string [2206,2246]",
      "dest": "string [2206,2246]"
    },
    {
      "src": "(: ( [5522,5523]",
      "dest": "(: ( [5522,5523]"
    },
    {
      "src": "member_expression [7716,7732]",
      "dest": "member_expression [7716,7732]"
    },
    {
      "src": "type: type [2188,2192]",
      "dest": "type: type [2188,2192]"
    },
    {
      "src": "state_mutability [1178,1182]",
      "dest": "state_mutability [1178,1182]"
    },
    {
      "src": "identifier: value [4982,4987]",
      "dest": "identifier: value [4982,4987]"
    },
    {
      "src": "): ) [3550,3551]",
      "dest": "): ) [3550,3551]"
    },
    {
      "src": "(: ( [4158,4159]",
      "dest": "(: ( [4158,4159]"
    },
    {
      "src": "return_type_definition [2618,2634]",
      "dest": "return_type_definition [2618,2634]"
    },
    {
      "src": "identifier: value [3693,3698]",
      "dest": "identifier: value [3693,3698]"
    },
    {
      "src": "): ) [1199,1200]",
      "dest": "): ) [1199,1200]"
    },
    {
      "src": "}: } [5087,5088]",
      "dest": "}: } [5087,5088]"
    },
    {
      "src": "(: ( [6063,6064]",
      "dest": "(: ( [6063,6064]"
    },
    {
      "src": "(: ( [3574,3575]",
      "dest": "(: ( [3574,3575]"
    },
    {
      "src": "parameter [2589,2602]",
      "dest": "parameter [2589,2602]"
    },
    {
      "src": "\": \" [3193,3194]",
      "dest": "\": \" [3193,3194]"
    },
    {
      "src": "(: ( [4966,4967]",
      "dest": "(: ( [4966,4967]"
    },
    {
      "src": "return_statement [3679,3700]",
      "dest": "return_statement [3679,3700]"
    },
    {
      "src": "type_name [6697,6702]",
      "dest": "type_name [6697,6702]"
    },
    {
      "src": "): ) [1319,1320]",
      "dest": "): ) [1319,1320]"
    },
    {
      "src": "returns: returns [6621,6628]",
      "dest": "returns: returns [6621,6628]"
    },
    {
      "src": "type_cast_expression [4153,4165]",
      "dest": "type_cast_expression [4153,4165]"
    },
    {
      "src": "identifier: value [7544,7549]",
      "dest": "identifier: value [7544,7549]"
    },
    {
      "src": "primitive_type [2264,2270]",
      "dest": "primitive_type [2264,2270]"
    },
    {
      "src": "(: ( [5460,5461]",
      "dest": "(: ( [5460,5461]"
    },
    {
      "src": "int8: int8 [7256,7260]",
      "dest": "int8: int8 [7256,7260]"
    },
    {
      "src": "visibility [4022,4030]",
      "dest": "visibility [4022,4030]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted int8 from int256, reverting on      * overflow (when the input is less than smallest int8 or      * greater than largest int8).      *      * Counterpart to Solidity's `int8` operator.      *      * Requirements:      *      * - input must fit into 8 bits.      *      * _Available since v3.1._      */ [6792,7133]",
      "dest": "comment: /**      * @dev Returns the downcasted int8 from int256, reverting on      * overflow (when the input is less than smallest int8 or      * greater than largest int8).      *      * Counterpart to Solidity's `int8` operator.      *      * Requirements:      *      * - input must fit into 8 bits.      *      * _Available since v3.1._      */ [6792,7133]"
    },
    {
      "src": "(: ( [1153,1154]",
      "dest": "(: ( [1153,1154]"
    },
    {
      "src": "call_argument [1702,1728]",
      "dest": "call_argument [1702,1728]"
    },
    {
      "src": "): ) [7777,7778]",
      "dest": "): ) [7777,7778]"
    },
    {
      "src": "): ) [7233,7234]",
      "dest": "): ) [7233,7234]"
    },
    {
      "src": "<=: <= [3607,3609]",
      "dest": "<=: <= [3607,3609]"
    },
    {
      "src": "primitive_type [3537,3544]",
      "dest": "primitive_type [3537,3544]"
    },
    {
      "src": "return_type_definition [3566,3582]",
      "dest": "return_type_definition [3566,3582]"
    },
    {
      "src": "type_name [7536,7543]",
      "dest": "type_name [7536,7543]"
    },
    {
      "src": "call_argument [2206,2246]",
      "dest": "call_argument [2206,2246]"
    },
    {
      "src": "(: ( [7228,7229]",
      "dest": "(: ( [7228,7229]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted int32 from int256, reverting on      * overflow (when the input is less than smallest int32 or      * greater than largest int32).      *      * Counterpart to Solidity's `int32` operator.      *      * Requirements:      *      * - input must fit into 32 bits      *      * _Available since v3.1._      */ [5660,6005]",
      "dest": "comment: /**      * @dev Returns the downcasted int32 from int256, reverting on      * overflow (when the input is less than smallest int32 or      * greater than largest int32).      *      * Counterpart to Solidity's `int32` operator.      *      * Requirements:      *      * - input must fit into 32 bits      *      * _Available since v3.1._      */ [5660,6005]"
    },
    {
      "src": "pure: pure [2139,2143]",
      "dest": "pure: pure [2139,2143]"
    },
    {
      "src": "type_name [5565,5570]",
      "dest": "type_name [5565,5570]"
    },
    {
      "src": "int8: int8 [7229,7233]",
      "dest": "int8: int8 [7229,7233]"
    },
    {
      "src": "uint256: uint256 [7708,7715]",
      "dest": "uint256: uint256 [7708,7715]"
    },
    {
      "src": "&&: && [4979,4981]",
      "dest": "&&: && [4979,4981]"
    },
    {
      "src": "(: ( [1218,1219]",
      "dest": "(: ( [1218,1219]"
    },
    {
      "src": "identifier: value [3071,3076]",
      "dest": "identifier: value [3071,3076]"
    },
    {
      "src": "internal: internal [4376,4384]",
      "dest": "internal: internal [4376,4384]"
    },
    {
      "src": "identifier: value [1645,1650]",
      "dest": "identifier: value [1645,1650]"
    },
    {
      "src": "return_type_definition [5489,5504]",
      "dest": "return_type_definition [5489,5504]"
    },
    {
      "src": "type_cast_expression [7708,7733]",
      "dest": "type_cast_expression [7708,7733]"
    },
    {
      "src": "solidity: solidity [99,107]",
      "dest": "solidity: solidity [99,107]"
    },
    {
      "src": ".: . [4974,4975]",
      "dest": ".: . [4974,4975]"
    },
    {
      "src": "): ) [1771,1772]",
      "dest": "): ) [1771,1772]"
    },
    {
      "src": "member_expression [1219,1245]",
      "dest": "member_expression [1219,1245]"
    },
    {
      "src": "function_definition [2097,2284]",
      "dest": "function_definition [2097,2284]"
    },
    {
      "src": "type_name [4890,4896]",
      "dest": "type_name [4890,4896]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted uint128 from uint256, reverting on      * overflow (when the input is greater than largest uint128).      *      * Counterpart to Solidity's `uint128` operator.      *      * Requirements:      *      * - input must fit into 128 bits      */ [1333,1613]",
      "dest": "comment: /**      * @dev Returns the downcasted uint128 from uint256, reverting on      * overflow (when the input is greater than largest uint128).      *      * Counterpart to Solidity's `uint128` operator.      *      * Requirements:      *      * - input must fit into 128 bits      */ [1333,1613]"
    },
    {
      "src": "visibility [7551,7559]",
      "dest": "visibility [7551,7559]"
    },
    {
      "src": "return_type_definition [4918,4934]",
      "dest": "return_type_definition [4918,4934]"
    },
    {
      "src": "function_definition [5444,5654]",
      "dest": "function_definition [5444,5654]"
    },
    {
      "src": "(: ( [5536,5537]",
      "dest": "(: ( [5536,5537]"
    },
    {
      "src": "string [2680,2720]",
      "dest": "string [2680,2720]"
    },
    {
      "src": "primitive_type [7721,7727]",
      "dest": "primitive_type [7721,7727]"
    },
    {
      "src": "type_name [7191,7195]",
      "dest": "type_name [7191,7195]"
    },
    {
      "src": "(: ( [7720,7721]",
      "dest": "(: ( [7720,7721]"
    },
    {
      "src": "\": \" [4134,4135]",
      "dest": "\": \" [4134,4135]"
    },
    {
      "src": "parameter [4007,4020]",
      "dest": "parameter [4007,4020]"
    },
    {
      "src": "int128: int128 [4967,4973]",
      "dest": "int128: int128 [4967,4973]"
    },
    {
      "src": "type_cast_expression [1306,1320]",
      "dest": "type_cast_expression [1306,1320]"
    },
    {
      "src": "primitive_type [4996,5002]",
      "dest": "primitive_type [4996,5002]"
    },
    {
      "src": "returns: returns [2144,2151]",
      "dest": "returns: returns [2144,2151]"
    },
    {
      "src": "type_cast_expression [3686,3699]",
      "dest": "type_cast_expression [3686,3699]"
    },
    {
      "src": "identifier: value [7161,7166]",
      "dest": "identifier: value [7161,7166]"
    },
    {
      "src": "meta_type_expression [6664,6675]",
      "dest": "meta_type_expression [6664,6675]"
    },
    {
      "src": "identifier: max [7262,7265]",
      "dest": "identifier: max [7262,7265]"
    },
    {
      "src": "identifier: value [1314,1319]",
      "dest": "identifier: value [1314,1319]"
    },
    {
      "src": "<=: <= [1708,1710]",
      "dest": "<=: <= [1708,1710]"
    },
    {
      "src": "uint96: uint96 [2264,2270]",
      "dest": "uint96: uint96 [2264,2270]"
    },
    {
      "src": "primitive_type [6630,6635]",
      "dest": "primitive_type [6630,6635]"
    },
    {
      "src": "internal: internal [7168,7176]",
      "dest": "internal: internal [7168,7176]"
    },
    {
      "src": "type_name [1233,1240]",
      "dest": "type_name [1233,1240]"
    },
    {
      "src": "function_body [3109,3232]",
      "dest": "function_body [3109,3232]"
    },
    {
      "src": "function: function [3045,3053]",
      "dest": "function: function [3045,3053]"
    },
    {
      "src": "(: ( [4006,4007]",
      "dest": "(: ( [4006,4007]"
    },
    {
      "src": "return_statement [6194,6214]",
      "dest": "return_statement [6194,6214]"
    },
    {
      "src": "): ) [1650,1651]",
      "dest": "): ) [1650,1651]"
    },
    {
      "src": "state_mutability [7560,7564]",
      "dest": "state_mutability [7560,7564]"
    },
    {
      "src": "{: { [4052,4053]",
      "dest": "{: { [4052,4053]"
    },
    {
      "src": "uint16: uint16 [3615,3621]",
      "dest": "uint16: uint16 [3615,3621]"
    },
    {
      "src": "member_expression [2179,2204]",
      "dest": "member_expression [2179,2204]"
    },
    {
      "src": "binary_expression [5523,5571]",
      "dest": "binary_expression [5523,5571]"
    },
    {
      "src": "uint256: uint256 [1637,1644]",
      "dest": "uint256: uint256 [1637,1644]"
    },
    {
      "src": "identifier: value [4953,4958]",
      "dest": "identifier: value [4953,4958]"
    },
    {
      "src": "identifier: value [5551,5556]",
      "dest": "identifier: value [5551,5556]"
    },
    {
      "src": "internal: internal [6041,6049]",
      "dest": "internal: internal [6041,6049]"
    },
    {
      "src": "state_mutability [6050,6054]",
      "dest": "state_mutability [6050,6054]"
    },
    {
      "src": "(: ( [4889,4890]",
      "dest": "(: ( [4889,4890]"
    },
    {
      "src": "\": \" [2680,2681]",
      "dest": "\": \" [2680,2681]"
    },
    {
      "src": "\": \" [4438,4439]",
      "dest": "\": \" [4438,4439]"
    },
    {
      "src": "identifier: require [4418,4425]",
      "dest": "identifier: require [4418,4425]"
    },
    {
      "src": "call_argument [6655,6707]",
      "dest": "call_argument [6655,6707]"
    },
    {
      "src": "type: type [1711,1715]",
      "dest": "type: type [1711,1715]"
    },
    {
      "src": ".: . [3622,3623]",
      "dest": ".: . [3622,3623]"
    },
    {
      "src": "{: { [3583,3584]",
      "dest": "{: { [3583,3584]"
    },
    {
      "src": "uint8: uint8 [4084,4089]",
      "dest": "uint8: uint8 [4084,4089]"
    },
    {
      "src": "call_argument [1797,1802]",
      "dest": "call_argument [1797,1802]"
    },
    {
      "src": "type_name [5461,5467]",
      "dest": "type_name [5461,5467]"
    },
    {
      "src": "int32: int32 [6131,6136]",
      "dest": "int32: int32 [6131,6136]"
    },
    {
      "src": "function_definition [6010,6220]",
      "dest": "function_definition [6010,6220]"
    },
    {
      "src": "identifier: value [3219,3224]",
      "dest": "identifier: value [3219,3224]"
    },
    {
      "src": "): ) [6108,6109]",
      "dest": "): ) [6108,6109]"
    },
    {
      "src": "type_cast_expression [6201,6213]",
      "dest": "type_cast_expression [6201,6213]"
    },
    {
      "src": "\": \" [1247,1248]",
      "dest": "\": \" [1247,1248]"
    },
    {
      "src": "identifier: value [6034,6039]",
      "dest": "identifier: value [6034,6039]"
    },
    {
      "src": "function_body [4052,4172]",
      "dest": "function_body [4052,4172]"
    },
    {
      "src": "meta_type_expression [4079,4090]",
      "dest": "meta_type_expression [4079,4090]"
    },
    {
      "src": "int64: int64 [5635,5640]",
      "dest": "int64: int64 [5635,5640]"
    },
    {
      "src": "identifier: max [5572,5575]",
      "dest": "identifier: max [5572,5575]"
    },
    {
      "src": "call_argument [4498,4503]",
      "dest": "call_argument [4498,4503]"
    },
    {
      "src": "(: ( [3536,3537]",
      "dest": "(: ( [3536,3537]"
    },
    {
      "src": "type_name [5537,5542]",
      "dest": "type_name [5537,5542]"
    },
    {
      "src": "): ) [4933,4934]",
      "dest": "): ) [4933,4934]"
    },
    {
      "src": "identifier: toUint128 [1627,1636]",
      "dest": "identifier: toUint128 [1627,1636]"
    },
    {
      "src": "string_literal [1247,1288]",
      "dest": "string_literal [1247,1288]"
    },
    {
      "src": "(: ( [5074,5075]",
      "dest": "(: ( [5074,5075]"
    },
    {
      "src": "type: type [7716,7720]",
      "dest": "type: type [7716,7720]"
    },
    {
      "src": "int8: int8 [7324,7328]",
      "dest": "int8: int8 [7324,7328]"
    },
    {
      "src": "{: { [4935,4936]",
      "dest": "{: { [4935,4936]"
    },
    {
      "src": "(: ( [7698,7699]",
      "dest": "(: ( [7698,7699]"
    },
    {
      "src": "uint32: uint32 [3101,3107]",
      "dest": "uint32: uint32 [3101,3107]"
    },
    {
      "src": "binary_expression [7215,7234]",
      "dest": "binary_expression [7215,7234]"
    },
    {
      "src": "uint256: uint256 [1154,1161]",
      "dest": "uint256: uint256 [1154,1161]"
    },
    {
      "src": "): ) [4020,4021]",
      "dest": "): ) [4020,4021]"
    },
    {
      "src": "returns: returns [1183,1190]",
      "dest": "returns: returns [1183,1190]"
    },
    {
      "src": "(: ( [1191,1192]",
      "dest": "(: ( [1191,1192]"
    },
    {
      "src": "expression_statement [6081,6185]",
      "dest": "expression_statement [6081,6185]"
    },
    {
      "src": "identifier: min [4975,4978]",
      "dest": "identifier: min [4975,4978]"
    },
    {
      "src": "identifier: toInt16 [6585,6592]",
      "dest": "identifier: toInt16 [6585,6592]"
    },
    {
      "src": "identifier: toUint16 [3528,3536]",
      "dest": "identifier: toUint16 [3528,3536]"
    },
    {
      "src": "(: ( [7153,7154]",
      "dest": "(: ( [7153,7154]"
    },
    {
      "src": "parameter [6593,6605]",
      "dest": "parameter [6593,6605]"
    },
    {
      "src": "primitive_type [7574,7580]",
      "dest": "primitive_type [7574,7580]"
    },
    {
      "src": "return_statement [6760,6780]",
      "dest": "return_statement [6760,6780]"
    },
    {
      "src": "return_type_definition [7565,7581]",
      "dest": "return_type_definition [7565,7581]"
    },
    {
      "src": ">=: >= [7221,7223]",
      "dest": ">=: >= [7221,7223]"
    },
    {
      "src": "uint256: uint256 [3063,3070]",
      "dest": "uint256: uint256 [3063,3070]"
    },
    {
      "src": "call_argument [7329,7334]",
      "dest": "call_argument [7329,7334]"
    },
    {
      "src": "identifier: value [5523,5528]",
      "dest": "identifier: value [5523,5528]"
    },
    {
      "src": "parameter [1154,1167]",
      "dest": "parameter [1154,1167]"
    },
    {
      "src": "(: ( [2270,2271]",
      "dest": "(: ( [2270,2271]"
    },
    {
      "src": "identifier: value [4369,4374]",
      "dest": "identifier: value [4369,4374]"
    },
    {
      "src": "type_cast_expression [6767,6779]",
      "dest": "type_cast_expression [6767,6779]"
    },
    {
      "src": "): ) [3668,3669]",
      "dest": "): ) [3668,3669]"
    },
    {
      "src": "(: ( [2152,2153]",
      "dest": "(: ( [2152,2153]"
    },
    {
      "src": "return_type_definition [6621,6636]",
      "dest": "return_type_definition [6621,6636]"
    },
    {
      "src": "type: type [7224,7228]",
      "dest": "type: type [7224,7228]"
    },
    {
      "src": "library: library [827,834]",
      "dest": "library: library [827,834]"
    },
    {
      "src": "return_statement [3205,3226]",
      "dest": "return_statement [3205,3226]"
    },
    {
      "src": "primitive_type [6103,6108]",
      "dest": "primitive_type [6103,6108]"
    },
    {
      "src": "): ) [4374,4375]",
      "dest": "): ) [4374,4375]"
    },
    {
      "src": "return_statement [7788,7809]",
      "dest": "return_statement [7788,7809]"
    },
    {
      "src": "pure: pure [2613,2617]",
      "dest": "pure: pure [2613,2617]"
    },
    {
      "src": "return: return [7788,7794]",
      "dest": "return: return [7788,7794]"
    },
    {
      "src": "primitive_type [7191,7195]",
      "dest": "primitive_type [7191,7195]"
    },
    {
      "src": "string_literal [4438,4472]",
      "dest": "string_literal [4438,4472]"
    },
    {
      "src": ",: , [2204,2205]",
      "dest": ",: , [2204,2205]"
    },
    {
      "src": "identifier: require [4062,4069]",
      "dest": "identifier: require [4062,4069]"
    },
    {
      "src": "state_mutability [5484,5488]",
      "dest": "state_mutability [5484,5488]"
    },
    {
      "src": "return_type_definition [7182,7196]",
      "dest": "return_type_definition [7182,7196]"
    },
    {
      "src": "): ) [6069,6070]",
      "dest": "): ) [6069,6070]"
    },
    {
      "src": "visibility [1169,1177]",
      "dest": "visibility [1169,1177]"
    },
    {
      "src": "identifier: max [3623,3626]",
      "dest": "identifier: max [3623,3626]"
    },
    {
      "src": "type_name [6027,6033]",
      "dest": "type_name [6027,6033]"
    },
    {
      "src": "function: function [6576,6584]",
      "dest": "function: function [6576,6584]"
    },
    {
      "src": "{: { [844,845]",
      "dest": "{: { [844,845]"
    },
    {
      "src": "identifier: max [6138,6141]",
      "dest": "identifier: max [6138,6141]"
    },
    {
      "src": "primitive_type [5635,5640]",
      "dest": "primitive_type [5635,5640]"
    },
    {
      "src": "type_name [6593,6599]",
      "dest": "type_name [6593,6599]"
    },
    {
      "src": "type_name [2589,2596]",
      "dest": "type_name [2589,2596]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted uint96 from uint256, reverting on      * overflow (when the input is greater than largest uint96).      *      * Counterpart to Solidity's `uint96` operator.      *      * Requirements:      *      * - input must fit into 96 bits      */ [1816,2092]",
      "dest": "comment: /**      * @dev Returns the downcasted uint96 from uint256, reverting on      * overflow (when the input is greater than largest uint96).      *      * Counterpart to Solidity's `uint96` operator.      *      * Requirements:      *      * - input must fit into 96 bits      */ [1816,2092]"
    },
    {
      "src": "primitive_type [4007,4014]",
      "dest": "primitive_type [4007,4014]"
    },
    {
      "src": "(: ( [3614,3615]",
      "dest": "(: ( [3614,3615]"
    },
    {
      "src": "<=: <= [4076,4078]",
      "dest": "<=: <= [4076,4078]"
    },
    {
      "src": "): ) [5570,5571]",
      "dest": "): ) [5570,5571]"
    },
    {
      "src": "<=: <= [2659,2661]",
      "dest": "<=: <= [2659,2661]"
    },
    {
      "src": "identifier: require [3119,3126]",
      "dest": "identifier: require [3119,3126]"
    },
    {
      "src": "int32: int32 [6064,6069]",
      "dest": "int32: int32 [6064,6069]"
    },
    {
      "src": ".: . [7728,7729]",
      "dest": ".: . [7728,7729]"
    },
    {
      "src": "call_argument [4438,4472]",
      "dest": "call_argument [4438,4472]"
    },
    {
      "src": "function_body [6071,6220]",
      "dest": "function_body [6071,6220]"
    },
    {
      "src": "string [5577,5617]",
      "dest": "string [5577,5617]"
    },
    {
      "src": "internal: internal [4904,4912]",
      "dest": "internal: internal [4904,4912]"
    },
    {
      "src": "\": \" [1730,1731]",
      "dest": "\": \" [1730,1731]"
    },
    {
      "src": "(: ( [1796,1797]",
      "dest": "(: ( [1796,1797]"
    },
    {
      "src": "{: { [6071,6072]",
      "dest": "{: { [6071,6072]"
    },
    {
      "src": "call_argument [4953,5007]",
      "dest": "call_argument [4953,5007]"
    },
    {
      "src": "parameter [7574,7580]",
      "dest": "parameter [7574,7580]"
    },
    {
      "src": "): ) [7260,7261]",
      "dest": "): ) [7260,7261]"
    },
    {
      "src": "): ) [2128,2129]",
      "dest": "): ) [2128,2129]"
    },
    {
      "src": "visibility [2604,2612]",
      "dest": "visibility [2604,2612]"
    },
    {
      "src": "int256: int256 [4362,4368]",
      "dest": "int256: int256 [4362,4368]"
    },
    {
      "src": "uint128: uint128 [1675,1682]",
      "dest": "uint128: uint128 [1675,1682]"
    },
    {
      "src": "identifier: value [6117,6122]",
      "dest": "identifier: value [6117,6122]"
    },
    {
      "src": "identifier: value [2271,2276]",
      "dest": "identifier: value [2271,2276]"
    },
    {
      "src": "identifier: require [1694,1701]",
      "dest": "identifier: require [1694,1701]"
    },
    {
      "src": "}: } [1326,1327]",
      "dest": "}: } [1326,1327]"
    },
    {
      "src": "pure: pure [3561,3565]",
      "dest": "pure: pure [3561,3565]"
    },
    {
      "src": "string_literal [4096,4135]",
      "dest": "string_literal [4096,4135]"
    },
    {
      "src": "return_statement [2257,2278]",
      "dest": "return_statement [2257,2278]"
    },
    {
      "src": "primitive_type [1192,1199]",
      "dest": "primitive_type [1192,1199]"
    },
    {
      "src": "primitive_type [7795,7801]",
      "dest": "primitive_type [7795,7801]"
    },
    {
      "src": "identifier: value [3601,3606]",
      "dest": "identifier: value [3601,3606]"
    },
    {
      "src": "return_statement [5628,5648]",
      "dest": "return_statement [5628,5648]"
    },
    {
      "src": "<=: <= [6689,6691]",
      "dest": "<=: <= [6689,6691]"
    },
    {
      "src": ".: . [1241,1242]",
      "dest": ".: . [1241,1242]"
    },
    {
      "src": "): ) [2199,2200]",
      "dest": "): ) [2199,2200]"
    },
    {
      "src": "return_statement [5061,5082]",
      "dest": "return_statement [5061,5082]"
    },
    {
      "src": "call_argument [1730,1771]",
      "dest": "call_argument [1730,1771]"
    },
    {
      "src": "int8: int8 [7191,7195]",
      "dest": "int8: int8 [7191,7195]"
    },
    {
      "src": "identifier: SafeCast [835,843]",
      "dest": "identifier: SafeCast [835,843]"
    },
    {
      "src": "(: ( [1636,1637]",
      "dest": "(: ( [1636,1637]"
    },
    {
      "src": ",: , [2678,2679]",
      "dest": ",: , [2678,2679]"
    },
    {
      "src": "function_definition [4872,5088]",
      "dest": "function_definition [4872,5088]"
    },
    {
      "src": "primitive_type [7154,7160]",
      "dest": "primitive_type [7154,7160]"
    },
    {
      "src": "string [1730,1771]",
      "dest": "string [1730,1771]"
    },
    {
      "src": ".: . [3148,3149]",
      "dest": ".: . [3148,3149]"
    },
    {
      "src": "return: return [4483,4489]",
      "dest": "return: return [4483,4489]"
    },
    {
      "src": "internal: internal [1169,1177]",
      "dest": "internal: internal [1169,1177]"
    },
    {
      "src": "string_literal [3628,3668]",
      "dest": "string_literal [3628,3668]"
    },
    {
      "src": "state_mutability [6616,6620]",
      "dest": "state_mutability [6616,6620]"
    },
    {
      "src": "type_name [3575,3581]",
      "dest": "type_name [3575,3581]"
    },
    {
      "src": "type: type [6098,6102]",
      "dest": "type: type [6098,6102]"
    },
    {
      "src": "return: return [2731,2737]",
      "dest": "return: return [2731,2737]"
    },
    {
      "src": "uint16: uint16 [3686,3692]",
      "dest": "uint16: uint16 [3686,3692]"
    },
    {
      "src": "pure: pure [4031,4035]",
      "dest": "pure: pure [4031,4035]"
    },
    {
      "src": ".: . [7234,7235]",
      "dest": ".: . [7234,7235]"
    },
    {
      "src": "function_body [1684,1810]",
      "dest": "function_body [1684,1810]"
    },
    {
      "src": "binary_expression [3601,3622]",
      "dest": "binary_expression [3601,3622]"
    },
    {
      "src": "): ) [1802,1803]",
      "dest": "): ) [1802,1803]"
    },
    {
      "src": "identifier: value [2123,2128]",
      "dest": "identifier: value [2123,2128]"
    },
    {
      "src": "}: } [7816,7817]",
      "dest": "}: } [7816,7817]"
    },
    {
      "src": "function_body [3583,3706]",
      "dest": "function_body [3583,3706]"
    },
    {
      "src": ",: , [6707,6708]",
      "dest": ",: , [6707,6708]"
    },
    {
      "src": ",: , [1728,1729]",
      "dest": ",: , [1728,1729]"
    },
    {
      "src": "type_name [2115,2122]",
      "dest": "type_name [2115,2122]"
    },
    {
      "src": "uint96: uint96 [2193,2199]",
      "dest": "uint96: uint96 [2193,2199]"
    },
    {
      "src": "(: ( [3062,3063]",
      "dest": "(: ( [3062,3063]"
    },
    {
      "src": "function: function [4343,4351]",
      "dest": "function: function [4343,4351]"
    },
    {
      "src": ",: , [1245,1246]",
      "dest": ",: , [1245,1246]"
    },
    {
      "src": "<=: <= [3133,3135]",
      "dest": "<=: <= [3133,3135]"
    },
    {
      "src": "(: ( [7715,7716]",
      "dest": "(: ( [7715,7716]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted uint8 from uint256, reverting on      * overflow (when the input is greater than largest uint8).      *      * Counterpart to Solidity's `uint8` operator.      *      * Requirements:      *      * - input must fit into 8 bits.      */ [3712,3985]",
      "dest": "comment: /**      * @dev Returns the downcasted uint8 from uint256, reverting on      * overflow (when the input is greater than largest uint8).      *      * Counterpart to Solidity's `uint8` operator.      *      * Requirements:      *      * - input must fit into 8 bits.      */ [3712,3985]"
    },
    {
      "src": "call_argument [1314,1319]",
      "dest": "call_argument [1314,1319]"
    },
    {
      "src": "primitive_type [1789,1796]",
      "dest": "primitive_type [1789,1796]"
    },
    {
      "src": "identifier: value [4159,4164]",
      "dest": "identifier: value [4159,4164]"
    },
    {
      "src": "type: type [5532,5536]",
      "dest": "type: type [5532,5536]"
    },
    {
      "src": "identifier: toInt256 [7527,7535]",
      "dest": "identifier: toInt256 [7527,7535]"
    },
    {
      "src": ",: , [4436,4437]",
      "dest": ",: , [4436,4437]"
    },
    {
      "src": "member_expression [6089,6141]",
      "dest": "member_expression [6089,6141]"
    },
    {
      "src": "\": \" [3628,3629]",
      "dest": "\": \" [3628,3629]"
    },
    {
      "src": "call_expression [7691,7778]",
      "dest": "call_expression [7691,7778]"
    },
    {
      "src": "return: return [3205,3211]",
      "dest": "return: return [3205,3211]"
    },
    {
      "src": "type_name [6630,6635]",
      "dest": "type_name [6630,6635]"
    },
    {
      "src": "identifier: value [5468,5473]",
      "dest": "identifier: value [5468,5473]"
    },
    {
      "src": "internal: internal [7551,7559]",
      "dest": "internal: internal [7551,7559]"
    },
    {
      "src": "(: ( [7801,7802]",
      "dest": "(: ( [7801,7802]"
    },
    {
      "src": "(: ( [6102,6103]",
      "dest": "(: ( [6102,6103]"
    },
    {
      "src": "identifier: value [4426,4431]",
      "dest": "identifier: value [4426,4431]"
    },
    {
      "src": "identifier: value [5641,5646]",
      "dest": "identifier: value [5641,5646]"
    },
    {
      "src": "(: ( [2588,2589]",
      "dest": "(: ( [2588,2589]"
    },
    {
      "src": "<=: <= [7248,7250]",
      "dest": "<=: <= [7248,7250]"
    },
    {
      "src": "type_name [2667,2673]",
      "dest": "type_name [2667,2673]"
    },
    {
      "src": "function: function [4872,4880]",
      "dest": "function: function [4872,4880]"
    },
    {
      "src": "(: ( [6696,6697]",
      "dest": "(: ( [6696,6697]"
    },
    {
      "src": "string [7267,7306]",
      "dest": "string [7267,7306]"
    },
    {
      "src": "type_name [1637,1644]",
      "dest": "type_name [1637,1644]"
    },
    {
      "src": "(: ( [6088,6089]",
      "dest": "(: ( [6088,6089]"
    },
    {
      "src": "(: ( [4497,4498]",
      "dest": "(: ( [4497,4498]"
    },
    {
      "src": "\": \" [2719,2720]",
      "dest": "\": \" [2719,2720]"
    },
    {
      "src": "pure: pure [1661,1665]",
      "dest": "pure: pure [1661,1665]"
    },
    {
      "src": "return: return [4146,4152]",
      "dest": "return: return [4146,4152]"
    },
    {
      "src": "): ) [4902,4903]",
      "dest": "): ) [4902,4903]"
    },
    {
      "src": "visibility [3552,3560]",
      "dest": "visibility [3552,3560]"
    },
    {
      "src": "type_name [1716,1723]",
      "dest": "type_name [1716,1723]"
    },
    {
      "src": "identifier: value [5075,5080]",
      "dest": "identifier: value [5075,5080]"
    },
    {
      "src": "string [6709,6749]",
      "dest": "string [6709,6749]"
    },
    {
      "src": "return_type_definition [4036,4051]",
      "dest": "return_type_definition [4036,4051]"
    },
    {
      "src": "visibility [6041,6049]",
      "dest": "visibility [6041,6049]"
    },
    {
      "src": "call_argument [7215,7265]",
      "dest": "call_argument [7215,7265]"
    },
    {
      "src": "returns: returns [6055,6062]",
      "dest": "returns: returns [6055,6062]"
    },
    {
      "src": "identifier: value [6655,6660]",
      "dest": "identifier: value [6655,6660]"
    },
    {
      "src": "meta_type_expression [3136,3148]",
      "dest": "meta_type_expression [3136,3148]"
    },
    {
      "src": "\": \" [4096,4097]",
      "dest": "\": \" [4096,4097]"
    },
    {
      "src": "member_expression [4953,5007]",
      "dest": "member_expression [4953,5007]"
    },
    {
      "src": "identifier: min [6110,6113]",
      "dest": "identifier: min [6110,6113]"
    },
    {
      "src": "pure: pure [3087,3091]",
      "dest": "pure: pure [3087,3091]"
    },
    {
      "src": "type: type [5560,5564]",
      "dest": "type: type [5560,5564]"
    },
    {
      "src": "call_argument [7735,7777]",
      "dest": "call_argument [7735,7777]"
    },
    {
      "src": "identifier: value [2653,2658]",
      "dest": "identifier: value [2653,2658]"
    },
    {
      "src": "}: } [1809,1810]",
      "dest": "}: } [1809,1810]"
    },
    {
      "src": "call_expression [6647,6750]",
      "dest": "call_expression [6647,6750]"
    },
    {
      "src": "return_statement [4483,4505]",
      "dest": "return_statement [4483,4505]"
    },
    {
      "src": "member_expression [5523,5547]",
      "dest": "member_expression [5523,5547]"
    },
    {
      "src": "type_name [7574,7580]",
      "dest": "type_name [7574,7580]"
    },
    {
      "src": "function_body [1201,1327]",
      "dest": "function_body [1201,1327]"
    },
    {
      "src": "identifier: value [3127,3132]",
      "dest": "identifier: value [3127,3132]"
    },
    {
      "src": "internal: internal [1652,1660]",
      "dest": "internal: internal [1652,1660]"
    },
    {
      "src": "&&: && [6114,6116]",
      "dest": "&&: && [6114,6116]"
    },
    {
      "src": "primitive_type [6669,6674]",
      "dest": "primitive_type [6669,6674]"
    },
    {
      "src": "expression_statement [3593,3670]",
      "dest": "expression_statement [3593,3670]"
    },
    {
      "src": "(: ( [6206,6207]",
      "dest": "(: ( [6206,6207]"
    },
    {
      "src": "primitive_type [4490,4497]",
      "dest": "primitive_type [4490,4497]"
    },
    {
      "src": "type_cast_expression [1789,1803]",
      "dest": "type_cast_expression [1789,1803]"
    },
    {
      "src": "call_expression [3593,3669]",
      "dest": "call_expression [3593,3669]"
    },
    {
      "src": "return_statement [2731,2752]",
      "dest": "return_statement [2731,2752]"
    },
    {
      "src": "binary_expression [4982,5003]",
      "dest": "binary_expression [4982,5003]"
    },
    {
      "src": "int256: int256 [4890,4896]",
      "dest": "int256: int256 [4890,4896]"
    },
    {
      "src": "primitive_type [2627,2633]",
      "dest": "primitive_type [2627,2633]"
    },
    {
      "src": "binary_expression [7699,7733]",
      "dest": "binary_expression [7699,7733]"
    },
    {
      "src": "pure: pure [7177,7181]",
      "dest": "pure: pure [7177,7181]"
    },
    {
      "src": "primitive_type [7708,7715]",
      "dest": "primitive_type [7708,7715]"
    },
    {
      "src": "return: return [5628,5634]",
      "dest": "return: return [5628,5634]"
    },
    {
      "src": "(: ( [7214,7215]",
      "dest": "(: ( [7214,7215]"
    },
    {
      "src": "(: ( [2192,2193]",
      "dest": "(: ( [2192,2193]"
    },
    {
      "src": "uint256: uint256 [3537,3544]",
      "dest": "uint256: uint256 [3537,3544]"
    },
    {
      "src": "uint64: uint64 [2738,2744]",
      "dest": "uint64: uint64 [2738,2744]"
    },
    {
      "src": "number_literal: 0 [4435,4436]",
      "dest": "number_literal: 0 [4435,4436]"
    },
    {
      "src": "pure: pure [1178,1182]",
      "dest": "pure: pure [1178,1182]"
    },
    {
      "src": "uint256: uint256 [2115,2122]",
      "dest": "uint256: uint256 [2115,2122]"
    },
    {
      "src": ".: . [4090,4091]",
      "dest": ".: . [4090,4091]"
    },
    {
      "src": "identifier: require [7207,7214]",
      "dest": "identifier: require [7207,7214]"
    },
    {
      "src": "visibility [2130,2138]",
      "dest": "visibility [2130,2138]"
    },
    {
      "src": "meta_type_expression [6692,6703]",
      "dest": "meta_type_expression [6692,6703]"
    },
    {
      "src": "type_name [7721,7727]",
      "dest": "type_name [7721,7727]"
    },
    {
      "src": "returns: returns [2618,2625]",
      "dest": "returns: returns [2618,2625]"
    },
    {
      "src": "): ) [4135,4136]",
      "dest": "): ) [4135,4136]"
    },
    {
      "src": "(: ( [7190,7191]",
      "dest": "(: ( [7190,7191]"
    },
    {
      "src": "primitive_type [7536,7543]",
      "dest": "primitive_type [7536,7543]"
    },
    {
      "src": "string_literal [2206,2246]",
      "dest": "string_literal [2206,2246]"
    },
    {
      "src": "parameter [1192,1199]",
      "dest": "parameter [1192,1199]"
    },
    {
      "src": "\": \" [6143,6144]",
      "dest": "\": \" [6143,6144]"
    },
    {
      "src": "uint256: uint256 [7536,7543]",
      "dest": "uint256: uint256 [7536,7543]"
    },
    {
      "src": "call_expression [1694,1772]",
      "dest": "call_expression [1694,1772]"
    },
    {
      "src": "(: ( [6130,6131]",
      "dest": "(: ( [6130,6131]"
    },
    {
      "src": "<=: <= [2185,2187]",
      "dest": "<=: <= [2185,2187]"
    },
    {
      "src": "\": \" [1770,1771]",
      "dest": "\": \" [1770,1771]"
    },
    {
      "src": "identifier: require [2171,2178]",
      "dest": "identifier: require [2171,2178]"
    },
    {
      "src": "parameter [3101,3107]",
      "dest": "parameter [3101,3107]"
    },
    {
      "src": "{: { [2635,2636]",
      "dest": "{: { [2635,2636]"
    },
    {
      "src": "primitive_type [2667,2673]",
      "dest": "primitive_type [2667,2673]"
    },
    {
      "src": "parameter [1637,1650]",
      "dest": "parameter [1637,1650]"
    },
    {
      "src": "solidity_version: 0.8.0 [109,114]",
      "dest": "solidity_version: 0.8.0 [109,114]"
    },
    {
      "src": "expression_statement [7207,7308]",
      "dest": "expression_statement [7207,7308]"
    },
    {
      "src": "(: ( [1715,1716]",
      "dest": "(: ( [1715,1716]"
    },
    {
      "src": ".: . [6703,6704]",
      "dest": ".: . [6703,6704]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted int128 from int256, reverting on      * overflow (when the input is less than smallest int128 or      * greater than largest int128).      *      * Counterpart to Solidity's `int128` operator.      *      * Requirements:      *      * - input must fit into 128 bits      *      * _Available since v3.1._      */ [4517,4867]",
      "dest": "comment: /**      * @dev Returns the downcasted int128 from int256, reverting on      * overflow (when the input is less than smallest int128 or      * greater than largest int128).      *      * Counterpart to Solidity's `int128` operator.      *      * Requirements:      *      * - input must fit into 128 bits      *      * _Available since v3.1._      */ [4517,4867]"
    },
    {
      "src": "): ) [2633,2634]",
      "dest": "): ) [2633,2634]"
    },
    {
      "src": "primitive_type [4153,4158]",
      "dest": "primitive_type [4153,4158]"
    },
    {
      "src": "function: function [6010,6018]",
      "dest": "function: function [6010,6018]"
    },
    {
      "src": "call_argument [7267,7306]",
      "dest": "call_argument [7267,7306]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [0,31]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "\": \" [7305,7306]",
      "dest": "\": \" [7305,7306]"
    },
    {
      "src": "visibility [6607,6615]",
      "dest": "visibility [6607,6615]"
    },
    {
      "src": "pragma: pragma [92,98]",
      "dest": "pragma: pragma [92,98]"
    },
    {
      "src": "): ) [3581,3582]",
      "dest": "): ) [3581,3582]"
    },
    {
      "src": "): ) [7580,7581]",
      "dest": "): ) [7580,7581]"
    },
    {
      "src": "uint96: uint96 [2153,2159]",
      "dest": "uint96: uint96 [2153,2159]"
    },
    {
      "src": "meta_type_expression [2662,2674]",
      "dest": "meta_type_expression [2662,2674]"
    },
    {
      "src": "(: ( [2626,2627]",
      "dest": "(: ( [2626,2627]"
    },
    {
      "src": "type_name [4399,4406]",
      "dest": "type_name [4399,4406]"
    },
    {
      "src": "call_argument [7716,7732]",
      "dest": "call_argument [7716,7732]"
    },
    {
      "src": "identifier: value [7242,7247]",
      "dest": "identifier: value [7242,7247]"
    },
    {
      "src": "}: } [5653,5654]",
      "dest": "}: } [5653,5654]"
    },
    {
      "src": "identifier: require [6647,6654]",
      "dest": "identifier: require [6647,6654]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted uint32 from uint256, reverting on      * overflow (when the input is greater than largest uint32).      *      * Counterpart to Solidity's `uint32` operator.      *      * Requirements:      *      * - input must fit into 32 bits      */ [2764,3040]",
      "dest": "comment: /**      * @dev Returns the downcasted uint32 from uint256, reverting on      * overflow (when the input is greater than largest uint32).      *      * Counterpart to Solidity's `uint32` operator.      *      * Requirements:      *      * - input must fit into 32 bits      */ [2764,3040]"
    },
    {
      "src": "): ) [3224,3225]",
      "dest": "): ) [3224,3225]"
    },
    {
      "src": "returns: returns [3566,3573]",
      "dest": "returns: returns [3566,3573]"
    },
    {
      "src": "}: } [4171,4172]",
      "dest": "}: } [4171,4172]"
    },
    {
      "src": "identifier: toInt128 [4881,4889]",
      "dest": "identifier: toInt128 [4881,4889]"
    },
    {
      "src": "): ) [6702,6703]",
      "dest": "): ) [6702,6703]"
    },
    {
      "src": "\": \" [5009,5010]",
      "dest": "\": \" [5009,5010]"
    },
    {
      "src": "function_definition [1135,1327]",
      "dest": "function_definition [1135,1327]"
    },
    {
      "src": "call_argument [2745,2750]",
      "dest": "call_argument [2745,2750]"
    },
    {
      "src": "function: function [5444,5452]",
      "dest": "function: function [5444,5452]"
    },
    {
      "src": "(: ( [6772,6773]",
      "dest": "(: ( [6772,6773]"
    },
    {
      "src": "): ) [7195,7196]",
      "dest": "): ) [7195,7196]"
    },
    {
      "src": "return: return [6194,6200]",
      "dest": "return: return [6194,6200]"
    },
    {
      "src": "identifier: toUint32 [3054,3062]",
      "dest": "identifier: toUint32 [3054,3062]"
    },
    {
      "src": "visibility [1652,1660]",
      "dest": "visibility [1652,1660]"
    },
    {
      "src": "type_name [3063,3070]",
      "dest": "type_name [3063,3070]"
    },
    {
      "src": "): ) [2673,2674]",
      "dest": "): ) [2673,2674]"
    },
    {
      "src": "uint224: uint224 [1306,1313]",
      "dest": "uint224: uint224 [1306,1313]"
    },
    {
      "src": "function_body [4935,5088]",
      "dest": "function_body [4935,5088]"
    },
    {
      "src": "(: ( [4926,4927]",
      "dest": "(: ( [4926,4927]"
    },
    {
      "src": "int64: int64 [5537,5542]",
      "dest": "int64: int64 [5537,5542]"
    },
    {
      "src": "(: ( [3218,3219]",
      "dest": "(: ( [3218,3219]"
    },
    {
      "src": "(: ( [3692,3693]",
      "dest": "(: ( [3692,3693]"
    },
    {
      "src": "type_name [4007,4014]",
      "dest": "type_name [4007,4014]"
    },
    {
      "src": "): ) [2750,2751]",
      "dest": "): ) [2750,2751]"
    },
    {
      "src": "(: ( [7328,7329]",
      "dest": "(: ( [7328,7329]"
    },
    {
      "src": "identifier: value [1219,1224]",
      "dest": "identifier: value [1219,1224]"
    },
    {
      "src": "parameter [7536,7549]",
      "dest": "parameter [7536,7549]"
    },
    {
      "src": "return_type_definition [6055,6070]",
      "dest": "return_type_definition [6055,6070]"
    },
    {
      "src": ",: , [5575,5576]",
      "dest": ",: , [5575,5576]"
    },
    {
      "src": "parameter [3537,3550]",
      "dest": "parameter [3537,3550]"
    },
    {
      "src": "uint256: uint256 [2589,2596]",
      "dest": "uint256: uint256 [2589,2596]"
    },
    {
      "src": "string_literal [7267,7306]",
      "dest": "string_literal [7267,7306]"
    },
    {
      "src": "type_cast_expression [3212,3225]",
      "dest": "type_cast_expression [3212,3225]"
    },
    {
      "src": "meta_type_expression [1711,1724]",
      "dest": "meta_type_expression [1711,1724]"
    },
    {
      "src": "uint256: uint256 [4399,4406]",
      "dest": "uint256: uint256 [4399,4406]"
    },
    {
      "src": "call_argument [1247,1288]",
      "dest": "call_argument [1247,1288]"
    },
    {
      "src": "): ) [1288,1289]",
      "dest": "): ) [1288,1289]"
    },
    {
      "src": "return_type_definition [1183,1200]",
      "dest": "return_type_definition [1183,1200]"
    },
    {
      "src": "): ) [7549,7550]",
      "dest": "): ) [7549,7550]"
    },
    {
      "src": "primitive_type [2193,2199]",
      "dest": "primitive_type [2193,2199]"
    },
    {
      "src": "internal: internal [6607,6615]",
      "dest": "internal: internal [6607,6615]"
    },
    {
      "src": "identifier: min [7235,7238]",
      "dest": "identifier: min [7235,7238]"
    },
    {
      "src": "returns: returns [7182,7189]",
      "dest": "returns: returns [7182,7189]"
    },
    {
      "src": "string [6143,6183]",
      "dest": "string [6143,6183]"
    },
    {
      "src": "parameter [4362,4374]",
      "dest": "parameter [4362,4374]"
    },
    {
      "src": "string_literal [5577,5617]",
      "dest": "string_literal [5577,5617]"
    },
    {
      "src": "pure: pure [7560,7564]",
      "dest": "pure: pure [7560,7564]"
    },
    {
      "src": "type_name [3141,3147]",
      "dest": "type_name [3141,3147]"
    },
    {
      "src": "identifier: toUint8 [3999,4006]",
      "dest": "identifier: toUint8 [3999,4006]"
    },
    {
      "src": "primitive_type [7324,7328]",
      "dest": "primitive_type [7324,7328]"
    },
    {
      "src": "source_file [0,7818]",
      "dest": "source_file [0,7818]"
    },
    {
      "src": "primitive_type [3615,3621]",
      "dest": "primitive_type [3615,3621]"
    },
    {
      "src": "string_literal [6143,6183]",
      "dest": "string_literal [6143,6183]"
    },
    {
      "src": "binary_expression [6655,6675]",
      "dest": "binary_expression [6655,6675]"
    },
    {
      "src": ",: , [3152,3153]",
      "dest": ",: , [3152,3153]"
    },
    {
      "src": "^:  ^ [107,109]",
      "dest": "^:  ^ [107,109]"
    },
    {
      "src": "(: ( [6026,6027]",
      "dest": "(: ( [6026,6027]"
    },
    {
      "src": "uint256: uint256 [4490,4497]",
      "dest": "uint256: uint256 [4490,4497]"
    },
    {
      "src": "identifier: value [7215,7220]",
      "dest": "identifier: value [7215,7220]"
    },
    {
      "src": "state_mutability [4031,4035]",
      "dest": "state_mutability [4031,4035]"
    },
    {
      "src": "identifier: min [6676,6679]",
      "dest": "identifier: min [6676,6679]"
    },
    {
      "src": "return_type_definition [3092,3108]",
      "dest": "return_type_definition [3092,3108]"
    },
    {
      "src": "identifier: value [3545,3550]",
      "dest": "identifier: value [3545,3550]"
    },
    {
      "src": "member_expression [7215,7265]",
      "dest": "member_expression [7215,7265]"
    },
    {
      "src": "string [1247,1288]",
      "dest": "string [1247,1288]"
    },
    {
      "src": "identifier: max [4091,4094]",
      "dest": "identifier: max [4091,4094]"
    },
    {
      "src": "returns: returns [4390,4397]",
      "dest": "returns: returns [4390,4397]"
    },
    {
      "src": "pure: pure [6616,6620]",
      "dest": "pure: pure [6616,6620]"
    },
    {
      "src": "type_cast_expression [7324,7335]",
      "dest": "type_cast_expression [7324,7335]"
    },
    {
      "src": "): ) [1723,1724]",
      "dest": "): ) [1723,1724]"
    },
    {
      "src": "primitive_type [6027,6033]",
      "dest": "primitive_type [6027,6033]"
    },
    {
      "src": ".: . [7261,7262]",
      "dest": ".: . [7261,7262]"
    },
    {
      "src": "call_argument [6207,6212]",
      "dest": "call_argument [6207,6212]"
    },
    {
      "src": "primitive_type [2738,2744]",
      "dest": "primitive_type [2738,2744]"
    },
    {
      "src": "): ) [5617,5618]",
      "dest": "): ) [5617,5618]"
    },
    {
      "src": "primitive_type [5068,5074]",
      "dest": "primitive_type [5068,5074]"
    },
    {
      "src": "(: ( [4425,4426]",
      "dest": "(: ( [4425,4426]"
    },
    {
      "src": "returns: returns [4918,4925]",
      "dest": "returns: returns [4918,4925]"
    },
    {
      "src": "): ) [7306,7307]",
      "dest": "): ) [7306,7307]"
    },
    {
      "src": "comment: /**      * @dev Converts a signed int256 into an unsigned uint256.      *      * Requirements:      *      * - input must be greater than or equal to 0.      */ [4178,4338]",
      "dest": "comment: /**      * @dev Converts a signed int256 into an unsigned uint256.      *      * Requirements:      *      * - input must be greater than or equal to 0.      */ [4178,4338]"
    },
    {
      "src": "type_name [2153,2159]",
      "dest": "type_name [2153,2159]"
    },
    {
      "src": "int64: int64 [5565,5570]",
      "dest": "int64: int64 [5565,5570]"
    },
    {
      "src": "\": \" [5616,5617]",
      "dest": "\": \" [5616,5617]"
    },
    {
      "src": "): ) [1167,1168]",
      "dest": "): ) [1167,1168]"
    },
    {
      "src": "primitive_type [4362,4368]",
      "dest": "primitive_type [4362,4368]"
    },
    {
      "src": "visibility [7168,7176]",
      "dest": "visibility [7168,7176]"
    },
    {
      "src": "call_argument [2680,2720]",
      "dest": "call_argument [2680,2720]"
    },
    {
      "src": "primitive_type [4890,4896]",
      "dest": "primitive_type [4890,4896]"
    },
    {
      "src": "return: return [6760,6766]",
      "dest": "return: return [6760,6766]"
    },
    {
      "src": "{: { [1684,1685]",
      "dest": "{: { [1684,1685]"
    },
    {
      "src": "expression_statement [2645,2722]",
      "dest": "expression_statement [2645,2722]"
    },
    {
      "src": "uint64: uint64 [2667,2673]",
      "dest": "uint64: uint64 [2667,2673]"
    },
    {
      "src": "{: { [7197,7198]",
      "dest": "{: { [7197,7198]"
    },
    {
      "src": "): ) [6674,6675]",
      "dest": "): ) [6674,6675]"
    },
    {
      "src": "type_name [2193,2199]",
      "dest": "type_name [2193,2199]"
    },
    {
      "src": "uint8: uint8 [4045,4050]",
      "dest": "uint8: uint8 [4045,4050]"
    },
    {
      "src": "int128: int128 [4927,4933]",
      "dest": "int128: int128 [4927,4933]"
    },
    {
      "src": "}: } [3705,3706]",
      "dest": "}: } [3705,3706]"
    },
    {
      "src": "): ) [7732,7733]",
      "dest": "): ) [7732,7733]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted int64 from int256, reverting on      * overflow (when the input is less than smallest int64 or      * greater than largest int64).      *      * Counterpart to Solidity's `int64` operator.      *      * Requirements:      *      * - input must fit into 64 bits      *      * _Available since v3.1._      */ [5094,5439]",
      "dest": "comment: /**      * @dev Returns the downcasted int64 from int256, reverting on      * overflow (when the input is less than smallest int64 or      * greater than largest int64).      *      * Counterpart to Solidity's `int64` operator.      *      * Requirements:      *      * - input must fit into 64 bits      *      * _Available since v3.1._      */ [5094,5439]"
    },
    {
      "src": "member_expression [6089,6113]",
      "dest": "member_expression [6089,6113]"
    },
    {
      "src": "binary_expression [6117,6137]",
      "dest": "binary_expression [6117,6137]"
    },
    {
      "src": "): ) [2720,2721]",
      "dest": "): ) [2720,2721]"
    },
    {
      "src": "(: ( [3600,3601]",
      "dest": "(: ( [3600,3601]"
    },
    {
      "src": "\": \" [5577,5578]",
      "dest": "\": \" [5577,5578]"
    },
    {
      "src": "expression_statement [1211,1290]",
      "dest": "expression_statement [1211,1290]"
    },
    {
      "src": "function_definition [4343,4511]",
      "dest": "function_definition [4343,4511]"
    },
    {
      "src": ",: , [4094,4095]",
      "dest": ",: , [4094,4095]"
    },
    {
      "src": "}: } [6219,6220]",
      "dest": "}: } [6219,6220]"
    },
    {
      "src": "type_name [7154,7160]",
      "dest": "type_name [7154,7160]"
    },
    {
      "src": "{: { [7582,7583]",
      "dest": "{: { [7582,7583]"
    },
    {
      "src": "function: function [3519,3527]",
      "dest": "function: function [3519,3527]"
    },
    {
      "src": "{: { [4408,4409]",
      "dest": "{: { [4408,4409]"
    },
    {
      "src": "int256: int256 [6593,6599]",
      "dest": "int256: int256 [6593,6599]"
    },
    {
      "src": "): ) [6778,6779]",
      "dest": "): ) [6778,6779]"
    },
    {
      "src": "comment: // OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol) [32,90]",
      "dest": "comment: // OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol) [32,90]"
    },
    {
      "src": "(: ( [7573,7574]",
      "dest": "(: ( [7573,7574]"
    },
    {
      "src": "call_expression [5515,5618]",
      "dest": "call_expression [5515,5618]"
    },
    {
      "src": "(: ( [6654,6655]",
      "dest": "(: ( [6654,6655]"
    },
    {
      "src": "binary_expression [4426,4436]",
      "dest": "binary_expression [4426,4436]"
    },
    {
      "src": "state_mutability [3561,3565]",
      "dest": "state_mutability [3561,3565]"
    },
    {
      "src": "string [3628,3668]",
      "dest": "string [3628,3668]"
    },
    {
      "src": "function_definition [7138,7342]",
      "dest": "function_definition [7138,7342]"
    },
    {
      "src": "}: } [4510,4511]",
      "dest": "}: } [4510,4511]"
    },
    {
      "src": "binary_expression [1219,1241]",
      "dest": "binary_expression [1219,1241]"
    },
    {
      "src": "call_argument [3628,3668]",
      "dest": "call_argument [3628,3668]"
    },
    {
      "src": "meta_type_expression [1228,1241]",
      "dest": "meta_type_expression [1228,1241]"
    },
    {
      "src": "int256: int256 [7574,7580]",
      "dest": "int256: int256 [7574,7580]"
    },
    {
      "src": "contract_body [844,7817]",
      "dest": "contract_body [844,7817]"
    },
    {
      "src": "string_literal [3154,3194]",
      "dest": "string_literal [3154,3194]"
    },
    {
      "src": "call_expression [7207,7307]",
      "dest": "call_expression [7207,7307]"
    },
    {
      "src": "primitive_type [6593,6599]",
      "dest": "primitive_type [6593,6599]"
    },
    {
      "src": "(: ( [7255,7256]",
      "dest": "(: ( [7255,7256]"
    },
    {
      "src": "(: ( [5640,5641]",
      "dest": "(: ( [5640,5641]"
    },
    {
      "src": "identifier: value [7329,7334]",
      "dest": "identifier: value [7329,7334]"
    },
    {
      "src": "function: function [2571,2579]",
      "dest": "function: function [2571,2579]"
    },
    {
      "src": ".: . [5571,5572]",
      "dest": ".: . [5571,5572]"
    },
    {
      "src": "(: ( [6592,6593]",
      "dest": "(: ( [6592,6593]"
    },
    {
      "src": "primitive_type [7229,7233]",
      "dest": "primitive_type [7229,7233]"
    },
    {
      "src": "int16: int16 [6669,6674]",
      "dest": "int16: int16 [6669,6674]"
    },
    {
      "src": "call_argument [5641,5646]",
      "dest": "call_argument [5641,5646]"
    },
    {
      "src": "function_body [6637,6786]",
      "dest": "function_body [6637,6786]"
    },
    {
      "src": "&&: && [7239,7241]",
      "dest": "&&: && [7239,7241]"
    },
    {
      "src": "member_expression [3601,3626]",
      "dest": "member_expression [3601,3626]"
    },
    {
      "src": "}: } [7814,7815]",
      "dest": "}: } [7814,7815]"
    },
    {
      "src": "identifier: require [1211,1218]",
      "dest": "identifier: require [1211,1218]"
    },
    {
      "src": "type_cast_expression [4490,4504]",
      "dest": "type_cast_expression [4490,4504]"
    },
    {
      "src": "{: { [6637,6638]",
      "dest": "{: { [6637,6638]"
    },
    {
      "src": "state_mutability [4913,4917]",
      "dest": "state_mutability [4913,4917]"
    },
    {
      "src": "parameter [4927,4933]",
      "dest": "parameter [4927,4933]"
    },
    {
      "src": "\": \" [6182,6183]",
      "dest": "\": \" [6182,6183]"
    },
    {
      "src": "primitive_type [4927,4933]",
      "dest": "primitive_type [4927,4933]"
    },
    {
      "src": "member_expression [6655,6707]",
      "dest": "member_expression [6655,6707]"
    },
    {
      "src": "identifier: max [2675,2678]",
      "dest": "identifier: max [2675,2678]"
    },
    {
      "src": "return_type_definition [4390,4407]",
      "dest": "return_type_definition [4390,4407]"
    },
    {
      "src": "pure: pure [5484,5488]",
      "dest": "pure: pure [5484,5488]"
    },
    {
      "src": "internal: internal [3552,3560]",
      "dest": "internal: internal [3552,3560]"
    },
    {
      "src": ">=: >= [5529,5531]",
      "dest": ">=: >= [5529,5531]"
    },
    {
      "src": "primitive_type [4967,4973]",
      "dest": "primitive_type [4967,4973]"
    },
    {
      "src": "identifier: toUint256 [4352,4361]",
      "dest": "identifier: toUint256 [4352,4361]"
    },
    {
      "src": "primitive_type [6064,6069]",
      "dest": "primitive_type [6064,6069]"
    },
    {
      "src": "return: return [1782,1788]",
      "dest": "return: return [1782,1788]"
    },
    {
      "src": "binary_expression [4070,4090]",
      "dest": "binary_expression [4070,4090]"
    },
    {
      "src": "call_argument [5523,5575]",
      "dest": "call_argument [5523,5575]"
    },
    {
      "src": "primitive_type [2115,2122]",
      "dest": "primitive_type [2115,2122]"
    },
    {
      "src": "binary_expression [1702,1724]",
      "dest": "binary_expression [1702,1724]"
    },
    {
      "src": "return: return [2257,2263]",
      "dest": "return: return [2257,2263]"
    },
    {
      "src": "type_name [4927,4933]",
      "dest": "type_name [4927,4933]"
    },
    {
      "src": "expression_statement [4062,4137]",
      "dest": "expression_statement [4062,4137]"
    },
    {
      "src": "\": \" [7776,7777]",
      "dest": "\": \" [7776,7777]"
    },
    {
      "src": "): ) [4472,4473]",
      "dest": "): ) [4472,4473]"
    },
    {
      "src": "identifier: value [6089,6094]",
      "dest": "identifier: value [6089,6094]"
    },
    {
      "src": "function_definition [2571,2758]",
      "dest": "function_definition [2571,2758]"
    },
    {
      "src": "type_name [7229,7233]",
      "dest": "type_name [7229,7233]"
    },
    {
      "src": "parameter [3575,3581]",
      "dest": "parameter [3575,3581]"
    },
    {
      "src": "primitive_type [6697,6702]",
      "dest": "primitive_type [6697,6702]"
    },
    {
      "src": "primitive_type [2153,2159]",
      "dest": "primitive_type [2153,2159]"
    },
    {
      "src": "int256: int256 [7721,7727]",
      "dest": "int256: int256 [7721,7727]"
    },
    {
      "src": "identifier: require [6081,6088]",
      "dest": "identifier: require [6081,6088]"
    },
    {
      "src": "(: ( [1701,1702]",
      "dest": "(: ( [1701,1702]"
    },
    {
      "src": "call_expression [2171,2247]",
      "dest": "call_expression [2171,2247]"
    },
    {
      "src": "(: ( [3126,3127]",
      "dest": "(: ( [3126,3127]"
    },
    {
      "src": "meta_type_expression [4962,4974]",
      "dest": "meta_type_expression [4962,4974]"
    },
    {
      "src": "binary_expression [6655,6703]",
      "dest": "binary_expression [6655,6703]"
    },
    {
      "src": "type_name [1154,1161]",
      "dest": "type_name [1154,1161]"
    },
    {
      "src": "call_argument [2653,2678]",
      "dest": "call_argument [2653,2678]"
    },
    {
      "src": "call_argument [3154,3194]",
      "dest": "call_argument [3154,3194]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted uint224 from uint256, reverting on      * overflow (when the input is greater than largest uint224).      *      * Counterpart to Solidity's `uint224` operator.      *      * Requirements:      *      * - input must fit into 224 bits      */ [850,1130]",
      "dest": "comment: /**      * @dev Returns the downcasted uint224 from uint256, reverting on      * overflow (when the input is greater than largest uint224).      *      * Counterpart to Solidity's `uint224` operator.      *      * Requirements:      *      * - input must fit into 224 bits      */ [850,1130]"
    },
    {
      "src": "type_name [1675,1682]",
      "dest": "type_name [1675,1682]"
    },
    {
      "src": "\": \" [7735,7736]",
      "dest": "\": \" [7735,7736]"
    },
    {
      "src": "function_body [7197,7342]",
      "dest": "function_body [7197,7342]"
    },
    {
      "src": "state_mutability [4385,4389]",
      "dest": "state_mutability [4385,4389]"
    },
    {
      "src": "binary_expression [2653,2674]",
      "dest": "binary_expression [2653,2674]"
    },
    {
      "src": "call_argument [6089,6141]",
      "dest": "call_argument [6089,6141]"
    },
    {
      "src": "identifier: max [7729,7732]",
      "dest": "identifier: max [7729,7732]"
    },
    {
      "src": "comment: /**      * @dev Returns the downcasted uint16 from uint256, reverting on      * overflow (when the input is greater than largest uint16).      *      * Counterpart to Solidity's `uint16` operator.      *      * Requirements:      *      * - input must fit into 16 bits      */ [3238,3514]",
      "dest": "comment: /**      * @dev Returns the downcasted uint16 from uint256, reverting on      * overflow (when the input is greater than largest uint16).      *      * Counterpart to Solidity's `uint16` operator.      *      * Requirements:      *      * - input must fit into 16 bits      */ [3238,3514]"
    },
    {
      "src": "primitive_type [4399,4406]",
      "dest": "primitive_type [4399,4406]"
    },
    {
      "src": "parameter [6630,6635]",
      "dest": "parameter [6630,6635]"
    },
    {
      "src": ".: . [1724,1725]",
      "dest": ".: . [1724,1725]"
    },
    {
      "src": "primitive_type [2589,2596]",
      "dest": "primitive_type [2589,2596]"
    },
    {
      "src": "call_expression [1211,1289]",
      "dest": "call_expression [1211,1289]"
    },
    {
      "src": "identifier: value [4070,4075]",
      "dest": "identifier: value [4070,4075]"
    },
    {
      "src": "state_mutability [2139,2143]",
      "dest": "state_mutability [2139,2143]"
    },
    {
      "src": "int64: int64 [5498,5503]",
      "dest": "int64: int64 [5498,5503]"
    },
    {
      "src": "function_body [2635,2758]",
      "dest": "function_body [2635,2758]"
    },
    {
      "src": "type_name [3101,3107]",
      "dest": "type_name [3101,3107]"
    },
    {
      "src": "primitive_type [7256,7260]",
      "dest": "primitive_type [7256,7260]"
    },
    {
      "src": ".: . [2674,2675]",
      "dest": ".: . [2674,2675]"
    },
    {
      "src": "): ) [7807,7808]",
      "dest": "): ) [7807,7808]"
    },
    {
      "src": "type_cast_expression [7795,7808]",
      "dest": "type_cast_expression [7795,7808]"
    },
    {
      "src": "returns: returns [4036,4043]",
      "dest": "returns: returns [4036,4043]"
    },
    {
      "src": "parameter [5461,5473]",
      "dest": "parameter [5461,5473]"
    },
    {
      "src": "\": \" [2206,2207]",
      "dest": "\": \" [2206,2207]"
    },
    {
      "src": "identifier: min [5544,5547]",
      "dest": "identifier: min [5544,5547]"
    },
    {
      "src": "int32: int32 [6103,6108]",
      "dest": "int32: int32 [6103,6108]"
    },
    {
      "src": "): ) [4406,4407]",
      "dest": "): ) [4406,4407]"
    },
    {
      "src": "parameter [4399,4406]",
      "dest": "parameter [4399,4406]"
    },
    {
      "src": "call_argument [5009,5050]",
      "dest": "call_argument [5009,5050]"
    },
    {
      "src": "identifier: value [7699,7704]",
      "dest": "identifier: value [7699,7704]"
    },
    {
      "src": "identifier: value [7802,7807]",
      "dest": "identifier: value [7802,7807]"
    },
    {
      "src": ".: . [5543,5544]",
      "dest": ".: . [5543,5544]"
    },
    {
      "src": "): ) [7727,7728]",
      "dest": "): ) [7727,7728]"
    },
    {
      "src": "pragma_directive [92,115]",
      "dest": "pragma_directive [92,115]"
    },
    {
      "src": "): ) [2159,2160]",
      "dest": "): ) [2159,2160]"
    },
    {
      "src": "binary_expression [5523,5543]",
      "dest": "binary_expression [5523,5543]"
    }
  ],
  "actions": []
}