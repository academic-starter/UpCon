{
  "matches": [
    {
      "src": "function_body [564,853]",
      "dest": "function_body [568,1011]"
    },
    {
      "src": "{: { [705,706]",
      "dest": "{: { [709,710]"
    },
    {
      "src": "\": \" [1183,1184]",
      "dest": "\": \" [3185,3186]"
    },
    {
      "src": "identifier: CEtherDelegate [198,212]",
      "dest": "identifier: CEtherDelegate [198,212]"
    },
    {
      "src": "identifier: data [611,615]",
      "dest": "identifier: data [615,619]"
    },
    {
      "src": "solidity_pragma_token [7,23]",
      "dest": "solidity_pragma_token [7,23]"
    },
    {
      "src": ",: , [234,235]",
      "dest": ",: , [234,235]"
    },
    {
      "src": "type_name [538,543]",
      "dest": "type_name [538,543]"
    },
    {
      "src": "): ) [324,325]",
      "dest": "): ) [324,325]"
    },
    {
      "src": "user_defined_type [216,234]",
      "dest": "user_defined_type [216,234]"
    },
    {
      "src": "^:  ^ [15,17]",
      "dest": "^:  ^ [15,17]"
    },
    {
      "src": "number_literal: 0 [745,746]",
      "dest": "number_literal: 0 [749,750]"
    },
    {
      "src": "contract: contract [189,197]",
      "dest": "contract: contract [189,197]"
    },
    {
      "src": "function_body [333,335]",
      "dest": "function_body [333,335]"
    },
    {
      "src": "if_statement [1080,1145]",
      "dest": "if_statement [1240,1305]"
    },
    {
      "src": "block_statement [1091,1145]",
      "dest": "block_statement [1251,1305]"
    },
    {
      "src": "expression_statement [611,616]",
      "dest": "expression_statement [615,620]"
    },
    {
      "src": "}: } [852,853]",
      "dest": "}: } [1010,1011]"
    },
    {
      "src": "identifier: require [1157,1164]",
      "dest": "identifier: require [3159,3166]"
    },
    {
      "src": "\": \" [48,49]",
      "dest": "\": \" [48,49]"
    },
    {
      "src": "{: { [564,565]",
      "dest": "{: { [568,569]"
    },
    {
      "src": "false [1084,1089]",
      "dest": "false [1244,1249]"
    },
    {
      "src": "}: } [758,759]",
      "dest": "}: } [762,763]"
    },
    {
      "src": "}: } [1144,1145]",
      "dest": "}: } [1304,1305]"
    },
    {
      "src": "call_argument [1165,1181]",
      "dest": "call_argument [3167,3183]"
    },
    {
      "src": "(: ( [537,538]",
      "dest": "(: ( [537,538]"
    },
    {
      "src": "constructor_definition [312,335]",
      "dest": "constructor_definition [312,335]"
    },
    {
      "src": "function_body [1003,1239]",
      "dest": "function_body [1163,1312]"
    },
    {
      "src": "comment: /**      * @notice Called by the delegator on a delegate to initialize it for duty      * @param data The encoded bytes data for any initialization      */ [343,501]",
      "dest": "comment: /**      * @notice Called by the delegator on a delegate to initialize it for duty      * @param data The encoded bytes data for any initialization      */ [343,501]"
    },
    {
      "src": "comment: // Shh -- we don't ever want this hook to be marked pure [1014,1070]",
      "dest": "comment: // Shh -- we don't ever want this hook to be marked pure [1174,1230]"
    },
    {
      "src": "import: import [28,34]",
      "dest": "import: import [28,34]"
    },
    {
      "src": "if_statement [694,759]",
      "dest": "if_statement [698,763]"
    },
    {
      "src": "inheritance_specifier [236,242]",
      "dest": "inheritance_specifier [236,242]"
    },
    {
      "src": "assignment_expression [1106,1133]",
      "dest": "assignment_expression [1266,1293]"
    },
    {
      "src": "comment: /**  * @title Compound's CEtherDelegate Contract  * @notice CTokens which wrap Ether and are delegated to  * @author Compound  */ [54,187]",
      "dest": "comment: /**  * @title Compound's CEtherDelegate Contract  * @notice CTokens which wrap Ether and are delegated to  * @author Compound  */ [54,187]"
    },
    {
      "src": "comment: /**      * @notice Construct an empty delegate      */ [250,306]",
      "dest": "comment: /**      * @notice Construct an empty delegate      */ [250,306]"
    },
    {
      "src": "{: { [1003,1004]",
      "dest": "{: { [1163,1164]"
    },
    {
      "src": "constructor: constructor [312,323]",
      "dest": "constructor: constructor [312,323]"
    },
    {
      "src": "{: { [243,244]",
      "dest": "{: { [243,244]"
    },
    {
      "src": "): ) [1180,1181]",
      "dest": "): ) [3182,3183]"
    },
    {
      "src": "(: ( [1164,1165]",
      "dest": "(: ( [3166,3167]"
    },
    {
      "src": "}: } [334,335]",
      "dest": "}: } [334,335]"
    },
    {
      "src": "import_directive [28,50]",
      "dest": "import_directive [28,50]"
    },
    {
      "src": "): ) [703,704]",
      "dest": "): ) [707,708]"
    },
    {
      "src": "contract_body [243,1242]",
      "dest": "contract_body [243,3980]"
    },
    {
      "src": "identifier: _resignImplementation [972,993]",
      "dest": "identifier: _resignImplementation [1130,1151]"
    },
    {
      "src": "): ) [746,747]",
      "dest": "): ) [750,751]"
    },
    {
      "src": "): ) [1089,1090]",
      "dest": "): ) [1249,1250]"
    },
    {
      "src": "identifier: hasAdminRights [1165,1179]",
      "dest": "identifier: hasAdminRights [3167,3181]"
    },
    {
      "src": "): ) [1132,1133]",
      "dest": "): ) [1292,1293]"
    },
    {
      "src": "): ) [555,556]",
      "dest": "): ) [557,558]"
    },
    {
      "src": "block_statement [705,759]",
      "dest": "block_statement [709,763]"
    },
    {
      "src": "identifier: CDelegateInterface [216,234]",
      "dest": "identifier: CDelegateInterface [216,234]"
    },
    {
      "src": "call_expression [1157,1231]",
      "dest": "call_expression [3159,3194]"
    },
    {
      "src": "solidity: solidity [7,15]",
      "dest": "solidity: solidity [7,15]"
    },
    {
      "src": "(: ( [1083,1084]",
      "dest": "(: ( [1243,1244]"
    },
    {
      "src": "parameter [538,555]",
      "dest": "parameter [538,557]"
    },
    {
      "src": "string [35,49]",
      "dest": "string [35,49]"
    },
    {
      "src": "\": \" [35,36]",
      "dest": "\": \" [35,36]"
    },
    {
      "src": "(: ( [323,324]",
      "dest": "(: ( [323,324]"
    },
    {
      "src": "boolean_literal [1084,1089]",
      "dest": "boolean_literal [1244,1249]"
    },
    {
      "src": "false: false [1084,1089]",
      "dest": "false: false [1244,1249]"
    },
    {
      "src": "contract_declaration [189,1242]",
      "dest": "contract_declaration [189,3980]"
    },
    {
      "src": "public: public [326,332]",
      "dest": "public: public [326,332]"
    },
    {
      "src": "source_file [0,1244]",
      "dest": "source_file [0,3982]"
    },
    {
      "src": "false [698,703]",
      "dest": "false [702,707]"
    },
    {
      "src": "number_literal: 0 [1131,1132]",
      "dest": "number_literal: 0 [1291,1292]"
    },
    {
      "src": "\": \" [1229,1230]",
      "dest": "\": \" [3192,3193]"
    },
    {
      "src": "): ) [1230,1231]",
      "dest": "): ) [3193,3194]"
    },
    {
      "src": "function: function [507,515]",
      "dest": "function: function [507,515]"
    },
    {
      "src": "address: address [1123,1130]",
      "dest": "address: address [1283,1290]"
    },
    {
      "src": "boolean_literal [698,703]",
      "dest": "boolean_literal [702,707]"
    },
    {
      "src": "visibility [996,1002]",
      "dest": "visibility [1154,1162]"
    },
    {
      "src": "pragma: pragma [0,6]",
      "dest": "pragma: pragma [0,6]"
    },
    {
      "src": "function_definition [963,1239]",
      "dest": "function_definition [1121,1312]"
    },
    {
      "src": "(: ( [697,698]",
      "dest": "(: ( [701,702]"
    },
    {
      "src": "identifier: implementation [1106,1120]",
      "dest": "identifier: implementation [1266,1280]"
    },
    {
      "src": "identifier: data [551,555]",
      "dest": "identifier: data [553,557]"
    },
    {
      "src": "type_cast_expression [737,747]",
      "dest": "type_cast_expression [741,751]"
    },
    {
      "src": "string [1183,1230]",
      "dest": "string [3185,3193]"
    },
    {
      "src": "(: ( [1130,1131]",
      "dest": "(: ( [1290,1291]"
    },
    {
      "src": "if: if [1080,1082]",
      "dest": "if: if [1240,1242]"
    },
    {
      "src": "bytes: bytes [538,543]",
      "dest": "bytes: bytes [538,543]"
    },
    {
      "src": ",: , [1181,1182]",
      "dest": ",: , [3183,3184]"
    },
    {
      "src": "call_argument [745,746]",
      "dest": "call_argument [749,750]"
    },
    {
      "src": "string_literal [1183,1230]",
      "dest": "string_literal [3185,3193]"
    },
    {
      "src": "): ) [994,995]",
      "dest": "): ) [1152,1153]"
    },
    {
      "src": "{: { [1091,1092]",
      "dest": "{: { [1251,1252]"
    },
    {
      "src": "user_defined_type [236,242]",
      "dest": "user_defined_type [236,242]"
    },
    {
      "src": "}: } [1238,1239]",
      "dest": "}: } [1311,1312]"
    },
    {
      "src": "comment: // Shh -- we don't ever want this hook to be marked pure [628,684]",
      "dest": "comment: // Shh -- we don't ever want this hook to be marked pure [632,688]"
    },
    {
      "src": "solidity_version_comparison_operator [15,17]",
      "dest": "solidity_version_comparison_operator [15,17]"
    },
    {
      "src": "=: = [1121,1122]",
      "dest": "=: = [1281,1282]"
    },
    {
      "src": "comment: // Shh -- currently unused [575,601]",
      "dest": "comment: // Shh -- currently unused [579,605]"
    },
    {
      "src": "expression_statement [1106,1134]",
      "dest": "expression_statement [1266,1294]"
    },
    {
      "src": "pragma_directive [0,24]",
      "dest": "pragma_directive [0,24]"
    },
    {
      "src": "(: ( [744,745]",
      "dest": "(: ( [748,749]"
    },
    {
      "src": "expression_statement [720,748]",
      "dest": "expression_statement [724,752]"
    },
    {
      "src": "primitive_type [1123,1130]",
      "dest": "primitive_type [1283,1290]"
    },
    {
      "src": "{: { [333,334]",
      "dest": "{: { [333,334]"
    },
    {
      "src": "identifier: _becomeImplementation [516,537]",
      "dest": "identifier: _becomeImplementation [516,537]"
    },
    {
      "src": "call_expression [1165,1181]",
      "dest": "call_expression [3167,3183]"
    },
    {
      "src": "is: is [213,215]",
      "dest": "is: is [213,215]"
    },
    {
      "src": "solidity_version: 0.5.16 [17,23]",
      "dest": "solidity_version: 0.5.16 [17,23]"
    },
    {
      "src": "if: if [694,696]",
      "dest": "if: if [698,700]"
    },
    {
      "src": "(: ( [993,994]",
      "dest": "(: ( [1151,1152]"
    },
    {
      "src": "assignment_expression [720,747]",
      "dest": "assignment_expression [724,751]"
    },
    {
      "src": "type_cast_expression [1123,1133]",
      "dest": "type_cast_expression [1283,1293]"
    },
    {
      "src": "comment: /**      * @notice Called by the delegator on a delegate to forfeit its responsibility      */ [861,957]",
      "dest": "comment: /**      * @notice Called by the delegator on a delegate to forfeit its responsibility      */ [1019,1115]"
    },
    {
      "src": "expression_statement [1157,1232]",
      "dest": "expression_statement [3159,3195]"
    },
    {
      "src": "identifier: CEther [236,242]",
      "dest": "identifier: CEther [236,242]"
    },
    {
      "src": "false: false [698,703]",
      "dest": "false: false [702,707]"
    },
    {
      "src": "address: address [737,744]",
      "dest": "address: address [741,748]"
    },
    {
      "src": "visibility [557,563]",
      "dest": "visibility [559,567]"
    },
    {
      "src": "primitive_type [538,543]",
      "dest": "primitive_type [538,543]"
    },
    {
      "src": "=: = [735,736]",
      "dest": "=: = [739,740]"
    },
    {
      "src": "(: ( [1179,1180]",
      "dest": "(: ( [3181,3182]"
    },
    {
      "src": "primitive_type [737,744]",
      "dest": "primitive_type [741,748]"
    },
    {
      "src": "inheritance_specifier [216,234]",
      "dest": "inheritance_specifier [216,234]"
    },
    {
      "src": "function_definition [507,853]",
      "dest": "function_definition [507,1011]"
    },
    {
      "src": "function: function [963,971]",
      "dest": "function: function [1121,1129]"
    },
    {
      "src": "identifier: implementation [720,734]",
      "dest": "identifier: implementation [724,738]"
    },
    {
      "src": "call_argument [1131,1132]",
      "dest": "call_argument [1291,1292]"
    },
    {
      "src": "call_argument [1183,1230]",
      "dest": "call_argument [3185,3193]"
    },
    {
      "src": "}: } [1241,1242]",
      "dest": "}: } [3979,3980]"
    }
  ],
  "actions": [
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Internal function to update the implementation of the delegator      * @param implementation_ The address of the new implementation for delegation      * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation      * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation      */ [1320,1702]",
      "parent": "contract_body [243,3980]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "function_definition [1708,2591]",
      "parent": "contract_body [243,3980]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @notice Called by the admin to update the implementation of the delegator      * @param implementation_ The address of the new implementation for delegation      * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation      * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation      */ [2599,2986]",
      "parent": "contract_body [243,3980]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [2992,3328]",
      "parent": "contract_body [243,3980]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @notice Function called before all delegator functions      * @dev Checks comptroller.autoImplementation and upgrades the implementation if necessary      */ [3336,3507]",
      "parent": "contract_body [243,3980]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "function_definition [3513,3977]",
      "parent": "contract_body [243,3980]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function: function [2992,3000]",
      "parent": "function_definition [2992,3328]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _setImplementationSafe [3001,3023]",
      "parent": "function_definition [2992,3328]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [3023,3024]",
      "parent": "function_definition [2992,3328]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [3024,3047]",
      "parent": "function_definition [2992,3328]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [3047,3048]",
      "parent": "function_definition [2992,3328]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [3049,3065]",
      "parent": "function_definition [2992,3328]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [3065,3066]",
      "parent": "function_definition [2992,3328]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [3067,3106]",
      "parent": "function_definition [2992,3328]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [3106,3107]",
      "parent": "function_definition [2992,3328]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "visibility [3108,3116]",
      "parent": "function_definition [2992,3328]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_body [3117,3328]",
      "parent": "function_definition [2992,3328]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "calldata: calldata [544,552]",
      "parent": "parameter [538,557]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "external: external [559,567]",
      "parent": "visibility [559,567]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [775,841]",
      "parent": "function_body [568,1011]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: // Make sure admin storage is set up correctly [853,899]",
      "parent": "function_body [568,1011]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [909,930]",
      "parent": "function_body [568,1011]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [940,965]",
      "parent": "function_body [568,1011]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [975,1004]",
      "parent": "function_body [568,1011]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "internal: internal [1154,1162]",
      "parent": "visibility [1154,1162]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [3117,3118]",
      "parent": "function_body [3117,3328]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // Check admin rights [3128,3149]",
      "parent": "function_body [3117,3328]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [1157,1232]",
      "parent": "function_body [3117,3328]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // Set implementation [3207,3228]",
      "parent": "function_body [3117,3328]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [3238,3321]",
      "parent": "function_body [3117,3328]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [3327,3328]",
      "parent": "function_body [3117,3328]",
      "at": 5
    },
    {
      "action": "delete-node",
      "tree": "memory: memory [544,550]"
    },
    {
      "action": "delete-node",
      "tree": "public: public [557,563]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [771,846]"
    },
    {
      "action": "delete-node",
      "tree": "public: public [996,1002]"
    }
  ]
}