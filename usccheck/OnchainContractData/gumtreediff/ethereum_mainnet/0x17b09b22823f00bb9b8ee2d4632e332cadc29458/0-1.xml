<?xml version="1.0" ?>
<matches>
  <match src="type_name [922,930]" dest="type_name [13603,13611]"/>
  <match src="int256: int256 [922,928]" dest="int256: int256 [13603,13609]"/>
  <match src="type_name [1873,1879]" dest="type_name [25061,25067]"/>
  <match src="visibility [561,569]" dest="visibility [13242,13250]"/>
  <match src="type_name [982,991]" dest="type_name [13663,13672]"/>
  <match src="inheritance_specifier [12657,12671]" dest="inheritance_specifier [13949,13963]"/>
  <match src="visibility [9047,9053]" dest="visibility [12363,12369]"/>
  <match src="primitive_type [1500,1507]" dest="primitive_type [21123,21130]"/>
  <match src="comment: /**  * @title UpgradeabilityOwnerStorage  * @dev This contract keeps track of the upgradeability owner  */ [8687,8796]" dest="comment: // File: contracts/upgradeable_contracts/EternalOwnable.sol [13710,13769]"/>
  <match src="identifier: addressArrayStorage [755,774]" dest="identifier: addressArrayStorage [13436,13455]"/>
  <match src="identifier: version [11998,12005]" dest="identifier: _day [18103,18107]"/>
  <match src="=&gt;: =&gt; [607,609]" dest="=&gt;: =&gt; [13288,13290]"/>
  <match src="binary_expression [10810,10832]" dest="binary_expression [14921,14943]"/>
  <match src="type_name [501,505]" dest="type_name [13182,13186]"/>
  <match src="identifier: version [6900,6907]" dest="identifier: gasPrice [16962,16970]"/>
  <match src="comment: /**  * @title EternalStorageProxy  * @dev This proxy holds the storage of the token contract and delegates every call to the current implementation set.  * Besides, it allows to upgrade the token's behaviour towards further implementations, and provides basic  * authorization control functionalities  */ [12288,12597]" dest="comment: // File: contracts/upgradeable_contracts/BasicBridge.sol [16134,16190]"/>
  <match src="identifier: previousOwner [9920,9933]" dest="identifier: previousOwner [14227,14240]"/>
  <match src="primitive_type [724,731]" dest="primitive_type [13405,13412]"/>
  <match src="type_name [1760,1767]" dest="type_name [4672,4679]"/>
  <match src="add: add [5040,5043]" dest="add: add [4413,4416]"/>
  <match src="primitive_type [1760,1767]" dest="primitive_type [4672,4679]"/>
  <match src="=&gt;: =&gt; [275,277]" dest="=&gt;: =&gt; [12956,12958]"/>
  <match src="{: { [11325,11326]" dest="{: { [15088,15089]"/>
  <match src="type_name [447,452]" dest="type_name [13128,13133]"/>
  <match src="call_argument [1811,1830]" dest="call_argument [21181,21198]"/>
  <match src="comment: /**  * @title OwnedUpgradeabilityProxy  * @dev This contract combines an upgradeability proxy with basic authorization control functionalities  */ [9433,9582]" dest="comment: // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol [15239,15302]"/>
  <match src="): ) [869,870]" dest="): ) [13550,13551]"/>
  <match src="returns: returns [1447,1454]" dest="returns: returns [2173,2180]"/>
  <match src="visibility [287,295]" dest="visibility [12968,12976]"/>
  <match src="pragma_directive [6360,6383]" dest="pragma_directive [2248,2271]"/>
  <match src="identifier: _innerImpl [1852,1862]" dest="identifier: recipient [25742,25751]"/>
  <match src="): ) [10305,10306]" dest="): ) [14412,14413]"/>
  <match src="pragma_directive [1076,1099]" dest="pragma_directive [1822,1845]"/>
  <match src="[: [ [928,929]" dest="[: [ [13609,13610]"/>
  <match src="{: { [8834,8835]" dest="{: { [12323,12324]"/>
  <match src="function_definition [1409,1465]" dest="function_definition [2144,2190]"/>
  <match src="identifier: require [1803,1810]" dest="identifier: require [21173,21180]"/>
  <match src="}: } [10325,10326]" dest="}: } [14432,14433]"/>
  <match src="yul_evm_builtin [5790,5793]" dest="yul_evm_builtin [4840,4843]"/>
  <match src="contract: contract [9584,9592]" dest="contract: contract [13922,13930]"/>
  <match src="event_paramater [9935,9951]" dest="event_paramater [14242,14258]"/>
  <match src="call_argument [12145,12149]" dest="call_argument [21272,21276]"/>
  <match src="uint256: uint256 [11990,11997]" dest="uint256: uint256 [18095,18102]"/>
  <match src="internal: internal [287,295]" dest="internal: internal [12968,12976]"/>
  <match src="primitive_type [8010,8017]" dest="primitive_type [21937,21944]"/>
  <match src=".: . [12155,12156]" dest=".: . [21254,21255]"/>
  <match src="call_argument [12162,12171]" dest="call_argument [21264,21285]"/>
  <match src="solidity: solidity [7458,7466]" dest="solidity: solidity [12071,12079]"/>
  <match src="internal: internal [507,515]" dest="internal: internal [13188,13196]"/>
  <match src="): ) [10304,10305]" dest="): ) [14411,14412]"/>
  <match src="event_paramater [8010,8040]" dest="event_paramater [21937,21954]"/>
  <match src="(: ( [321,322]" dest="(: ( [13002,13003]"/>
  <match src="address: address [389,396]" dest="address: address [13070,13077]"/>
  <match src="yul_path [5761,5764]" dest="yul_path [11579,11582]"/>
  <match src="comment: /**     * @dev Allows the current owner to transfer control of the contract to a newOwner.     * @param newOwner The address to transfer ownership to.     */ [10553,10713]" dest="comment: /**     * @dev Sets a new owner address     */ [14989,15037]"/>
  <match src="internal: internal [932,940]" dest="internal: internal [13613,13621]"/>
  <match src="pragma: pragma [6360,6366]" dest="pragma: pragma [2248,2254]"/>
  <match src="address: address [8871,8878]" dest="address: address [23581,23588]"/>
  <match src="member_expression [12137,12161]" dest="member_expression [21251,21263]"/>
  <match src="comment: // File: contracts/upgradeability/EternalStorage.sol [0,52]" dest="comment: // File: contracts/upgradeability/EternalStorage.sol [12681,12733]"/>
  <match src="variable_declaration [1760,1773]" dest="variable_declaration [4672,4692]"/>
  <match src="}: } [10142,10143]" dest="}: } [22992,22993]"/>
  <match src="primitive_type [490,497]" dest="primitive_type [13171,13178]"/>
  <match src="return: return [6951,6957]" dest="return: return [17013,17019]"/>
  <match src="(: ( [9911,9912]" dest="(: ( [14218,14219]"/>
  <match src="primitive_type [1820,1827]" dest="primitive_type [21188,21195]"/>
  <match src="visibility [1435,1441]" dest="visibility [2161,2167]"/>
  <match src="}: } [12186,12187]" dest="}: } [21465,21466]"/>
  <match src="type_name [863,869]" dest="type_name [13544,13550]"/>
  <match src="identifier: upgradeTo [11252,11261]" dest="identifier: setOwner [15052,15060]"/>
  <match src="visibility [507,515]" dest="visibility [13188,13196]"/>
  <match src="call_expression [1803,1831]" dest="call_expression [21173,21199]"/>
  <match src="visibility [10468,10474]" dest="visibility [14558,14564]"/>
  <match src="parameter [11262,11277]" dest="parameter [17753,17765]"/>
  <match src="(: ( [598,599]" dest="(: ( [13279,13280]"/>
  <match src="comment: /**  * @title UpgradeabilityStorage  * @dev This contract holds all the necessary state variables to support the upgrade functionality  */ [6389,6530]" dest="comment: // File: contracts/IForeignBridgeValidators.sol [2197,2244]"/>
  <match src="bytes32: bytes32 [852,859]" dest="bytes32: bytes32 [13533,13540]"/>
  <match src="(: ( [1432,1433]" dest="(: ( [2158,2159]"/>
  <match src="identifier: upgradeabilityOwner [9025,9044]" dest="identifier: upgradeabilityAdmin [12341,12360]"/>
  <match src="comment: // Owner of the contract [8841,8865]" dest="comment: // Avoid using onlyProxyOwner name to prevent issues with implementation from proxy contract [12471,12563]"/>
  <match src="function_definition [6891,6974]" dest="function_definition [16953,17080]"/>
  <match src="member_expression [7300,7310]" dest="member_expression [27064,27074]"/>
  <match src="type_name [863,867]" dest="type_name [13544,13548]"/>
  <match src="call_expression [10271,10306]" dest="call_expression [14383,14413]"/>
  <match src="parameter [12031,12041]" dest="parameter [27005,27010]"/>
  <match src=",: , [12005,12006]" dest=",: , [21121,21122]"/>
  <match src="): ) [1433,1434]" dest="): ) [2159,2160]"/>
  <match src="primitive_type [12031,12036]" dest="primitive_type [27005,27010]"/>
  <match src="variable_declaration [1844,1862]" dest="variable_declaration [25734,25751]"/>
  <match src="(: ( [723,724]" dest="(: ( [13404,13405]"/>
  <match src="solidity: solidity [63,71]" dest="solidity: solidity [2580,2588]"/>
  <match src="uint256: uint256 [6621,6628]" dest="uint256: uint256 [16337,16344]"/>
  <match src="modifier_invocation [10776,10790]" dest="modifier_invocation [14892,14901]"/>
  <match src="address: address [1820,1827]" dest="address: address [21188,21195]"/>
  <match src="{: { [6940,6941]" dest="{: { [17002,17003]"/>
  <match src="identifier: proxyOwner [10293,10303]" dest="identifier: owner [14405,14410]"/>
  <match src="type_name [8010,8017]" dest="type_name [21937,21944]"/>
  <match src="parameter [11990,12005]" dest="parameter [18095,18107]"/>
  <match src="identifier: newOwner [9943,9951]" dest="identifier: newOwner [14250,14258]"/>
  <match src="call_argument [1828,1829]" dest="call_argument [21196,21197]"/>
  <match src="call_argument [10810,10832]" dest="call_argument [14921,14943]"/>
  <match src="public: public [10769,10775]" dest="public: public [14885,14891]"/>
  <match src="=&gt;: =&gt; [732,734]" dest="=&gt;: =&gt; [13413,13415]"/>
  <match src="state_mutability [7145,7149]" dest="state_mutability [12165,12169]"/>
  <match src="type_name [9068,9075]" dest="type_name [12384,12391]"/>
  <match src="contract_body [250,1025]" dest="contract_body [12931,13706]"/>
  <match src="identifier: implementation [8026,8040]" dest="identifier: recipient [21945,21954]"/>
  <match src="identifier: implementation [8338,8352]" dest="identifier: _to [25208,25211]"/>
  <match src="primitive_type [267,274]" dest="primitive_type [12948,12955]"/>
  <match src="type_name [11990,11997]" dest="type_name [18095,18102]"/>
  <match src="comment: /**     * @dev the constructor sets the original owner of the contract to the sender account.     */ [9961,10063]" dest="comment: /**     * @dev Tells the address of the owner     * @return the address of the owner     */ [14441,14535]"/>
  <match src="visibility [871,879]" dest="visibility [13552,13560]"/>
  <match src="address: address [6701,6708]" dest="address: address [23675,23682]"/>
  <match src="event: event [9880,9885]" dest="event: event [14185,14190]"/>
  <match src="identifier: msg [10279,10282]" dest="identifier: msg [14391,14394]"/>
  <match src="bool: bool [501,505]" dest="bool: bool [13182,13186]"/>
  <match src="(: ( [10257,10258]" dest="(: ( [14369,14370]"/>
  <match src="(: ( [12144,12145]" dest="(: ( [21271,21272]"/>
  <match src="binary_expression [1811,1830]" dest="binary_expression [21181,21198]"/>
  <match src="==: == [7311,7313]" dest="==: == [26005,26007]"/>
  <match src="address: address [1894,1901]" dest="address: address [25812,25819]"/>
  <match src="type_name [735,742]" dest="type_name [13416,13423]"/>
  <match src="state_variable_declaration [370,422]" dest="state_variable_declaration [13051,13103]"/>
  <match src="identifier: sender [10128,10134]" dest="identifier: sender [22965,22971]"/>
  <match src="solidity_version:  0.4.24 [71,78]" dest="solidity_version:  0.4.24 [2588,2595]"/>
  <match src="primitive_type [7993,8000]" dest="primitive_type [16375,16382]"/>
  <match src="bytes: bytes [447,452]" dest="bytes: bytes [13128,13133]"/>
  <match src="identifier: implementation [1418,1432]" dest="identifier: owner [2153,2158]"/>
  <match src="{: { [12073,12074]" dest="{: { [21162,21163]"/>
  <match src="}: } [9329,9330]" dest="}: } [12676,12677]"/>
  <match src="public: public [1435,1441]" dest="public: public [2161,2167]"/>
  <match src="expression_statement [10101,10136]" dest="expression_statement [22921,22974]"/>
  <match src="call_expression [12137,12172]" dest="call_expression [21251,21286]"/>
  <match src="solidity: solidity [1083,1091]" dest="solidity: solidity [1829,1837]"/>
  <match src="mapping: mapping [428,435]" dest="mapping: mapping [13109,13116]"/>
  <match src="address: address [7244,7251]" dest="address: address [21107,21114]"/>
  <match src="(: ( [910,911]" dest="(: ( [13591,13592]"/>
  <match src="): ) [8040,8041]" dest="): ) [16391,16392]"/>
  <match src="expression_statement [11336,11372]" dest="expression_statement [15161,15225]"/>
  <match src="=&gt;: =&gt; [386,388]" dest="=&gt;: =&gt; [13067,13069]"/>
  <match src="): ) [10940,10941]" dest="): ) [14972,14973]"/>
  <match src="): ) [10496,10497]" dest="): ) [14586,14587]"/>
  <match src="}: } [12189,12190]" dest="}: } [15234,15235]"/>
  <match src="primitive_type [852,859]" dest="primitive_type [13533,13540]"/>
  <match src="identifier: sig [5761,5764]" dest="identifier: sig [11579,11582]"/>
  <match src="primitive_type [9222,9229]" dest="primitive_type [23257,23264]"/>
  <match src="is: is [9618,9620]" dest="is: is [13946,13948]"/>
  <match src="identifier: _newImplementation [7252,7270]" dest="identifier: _token [21115,21121]"/>
  <match src="identifier: proxyOwner [10455,10465]" dest="identifier: owner [14550,14555]"/>
  <match src="): ) [619,620]" dest="): ) [13300,13301]"/>
  <match src=".: . [10127,10128]" dest=".: . [22964,22965]"/>
  <match src="mapping: mapping [903,910]" dest="mapping: mapping [13584,13591]"/>
  <match src="call_argument [7300,7327]" dest="call_argument [25989,26021]"/>
  <match src="comment: /**   * @dev Event to show ownership has been transferred   * @param previousOwner representing the address of the previous owner   * @param newOwner representing the address of the new owner   */ [9674,9874]" dest="comment: /**     * @dev Event to show ownership has been transferred     * @param previousOwner representing the address of the previous owner     * @param newOwner representing the address of the new owner     */ [13971,14179]"/>
  <match src="visibility [932,940]" dest="visibility [13613,13621]"/>
  <match src="(: ( [10123,10124]" dest="(: ( [22960,22961]"/>
  <match src="}: } [9122,9123]" dest="}: } [12462,12463]"/>
  <match src="): ) [10831,10832]" dest="): ) [14942,14943]"/>
  <match src="): ) [7327,7328]" dest="): ) [26021,26022]"/>
  <match src="member_expression [10279,10289]" dest="member_expression [14391,14401]"/>
  <match src="event_paramater [9912,9933]" dest="event_paramater [14219,14240]"/>
  <match src="primitive_type [661,668]" dest="primitive_type [13342,13349]"/>
  <match src="}: } [10948,10949]" dest="}: } [14980,14981]"/>
  <match src="identifier: _newImplementation [1508,1526]" dest="identifier: _to [21131,21134]"/>
  <match src="yul_path [5646,5649]" dest="yul_path [11543,11546]"/>
  <match src="solidity_pragma_token [1083,1098]" dest="solidity_pragma_token [1829,1844]"/>
  <match src="identifier: require [10802,10809]" dest="identifier: require [14913,14920]"/>
  <match src="call_expression [10909,10941]" dest="call_expression [14955,14973]"/>
  <match src="contract_declaration [226,1025]" dest="contract_declaration [12907,13706]"/>
  <match src="returns: returns [7150,7157]" dest="returns: returns [12170,12177]"/>
  <match src="(: ( [266,267]" dest="(: ( [12947,12948]"/>
  <match src="primitive_type [447,452]" dest="primitive_type [13128,13133]"/>
  <match src="return_type_definition [10480,10497]" dest="return_type_definition [14570,14587]"/>
  <match src="identifier: _impl [1768,1773]" dest="identifier: newSetMember [4680,4692]"/>
  <match src="type_name [6701,6708]" dest="type_name [23675,23682]"/>
  <match src="state_variable_declaration [259,308]" dest="state_variable_declaration [12940,12989]"/>
  <match src="bytes32: bytes32 [378,385]" dest="bytes32: bytes32 [13059,13066]"/>
  <match src="state_variable_declaration [716,775]" dest="state_variable_declaration [13397,13456]"/>
  <match src="mload: mload [2641,2646]" dest="mload: mload [4304,4309]"/>
  <match src="[: [ [867,868]" dest="[: [ [13548,13549]"/>
  <match src="contract: contract [8798,8806]" dest="contract: contract [12294,12302]"/>
  <match src="type_name [716,745]" dest="type_name [13397,13426]"/>
  <match src="primitive_type [12137,12144]" dest="primitive_type [21264,21271]"/>
  <match src="function: function [11243,11251]" dest="function: function [15043,15051]"/>
  <match src="state_mutability [1442,1446]" dest="state_mutability [2168,2172]"/>
  <match src="{: { [9077,9078]" dest="{: { [12393,12394]"/>
  <match src="expression_statement [12084,12119]" dest="expression_statement [21421,21459]"/>
  <match src="parameter [1456,1463]" dest="parameter [2181,2188]"/>
  <match src="identifier: value [12156,12161]" dest="identifier: _to [21251,21254]"/>
  <match src="type_name [7159,7166]" dest="type_name [12179,12186]"/>
  <match src="call_argument [10124,10134]" dest="call_argument [22961,22971]"/>
  <match src="bytes32: bytes32 [322,329]" dest="bytes32: bytes32 [13003,13010]"/>
  <match src="): ) [10134,10135]" dest="): ) [22971,22972]"/>
  <match src="function_definition [10719,10949]" dest="function_definition [14840,14981]"/>
  <match src="public: public [7138,7144]" dest="public: public [12158,12164]"/>
  <match src="type_name [8313,8320]" dest="type_name [16751,16758]"/>
  <match src="): ) [10466,10467]" dest="): ) [14556,14557]"/>
  <match src="internal: internal [561,569]" dest="internal: internal [13242,13250]"/>
  <match src="primitive_type [436,443]" dest="primitive_type [13117,13124]"/>
  <match src="{: { [10090,10091]" dest="{: { [22910,22911]"/>
  <match src="]: ] [929,930]" dest="]: ] [13610,13611]"/>
  <match src="internal: internal [8354,8362]" dest="internal: internal [17783,17791]"/>
  <match src="{: { [10498,10499]" dest="{: { [14588,14589]"/>
  <match src="}: } [10544,10545]" dest="}: } [14665,14666]"/>
  <match src="): ) [452,453]" dest="): ) [13133,13134]"/>
  <match src="variable_declaration_statement [1894,1930]" dest="variable_declaration_statement [25812,25836]"/>
  <match src="mapping: mapping [482,489]" dest="mapping: mapping [13163,13170]"/>
  <match src="comment: // File: contracts/upgradeability/EternalStorageProxy.sol [12194,12251]" dest="comment: /**  * @title ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/20  */ [15334,15425]"/>
  <match src="expression_statement [10317,10319]" dest="expression_statement [14424,14426]"/>
  <match src="contract_body [8834,9330]" dest="contract_body [12323,12677]"/>
  <match src="function: function [10719,10727]" dest="function: function [14840,14848]"/>
  <match src="type_name [610,619]" dest="type_name [13291,13300]"/>
  <match src="(: ( [1810,1811]" dest="(: ( [21180,21181]"/>
  <match src="primitive_type [6701,6708]" dest="primitive_type [23675,23682]"/>
  <match src="identifier: onlyProxyOwner [10243,10257]" dest="identifier: onlyOwner [14360,14369]"/>
  <match src="(: ( [10303,10304]" dest="(: ( [14410,14411]"/>
  <match src="state_variable_declaration [591,647]" dest="state_variable_declaration [13272,13328]"/>
  <match src="function: function [1409,1417]" dest="function: function [2144,2152]"/>
  <match src="call_expression [12084,12118]" dest="call_expression [21421,21458]"/>
  <match src="type_name [653,681]" dest="type_name [13334,13362]"/>
  <match src="): ) [5764,5765]" dest="): ) [11586,11587]"/>
  <match src="): ) [9951,9952]" dest="): ) [14258,14259]"/>
  <match src="returns: returns [9059,9066]" dest="returns: returns [12375,12382]"/>
  <match src="(: ( [6907,6908]" dest="(: ( [16970,16971]"/>
  <match src="internal: internal [993,1001]" dest="internal: internal [13674,13682]"/>
  <match src="external: external [1528,1536]" dest="external: external [19995,20003]"/>
  <match src="): ) [11301,11302]" dest="): ) [15077,15078]"/>
  <match src="type_name [8330,8337]" dest="type_name [25200,25207]"/>
  <match src="state_variable_declaration [428,476]" dest="state_variable_declaration [13109,13157]"/>
  <match src="number_literal: 0 [10830,10831]" dest="number_literal: 0 [14941,14942]"/>
  <match src="primitive_type [9935,9942]" dest="primitive_type [14242,14249]"/>
  <match src="primitive_type [10751,10758]" dest="primitive_type [14867,14874]"/>
  <match src="pragma: pragma [9400,9406]" dest="pragma: pragma [12737,12743]"/>
  <match src="identifier: newOwner [10932,10940]" dest="identifier: newOwner [14964,14972]"/>
  <match src="]: ] [868,869]" dest="]: ] [13549,13550]"/>
  <match src="identifier: require [10271,10278]" dest="identifier: require [14383,14390]"/>
  <match src="pragma: pragma [56,62]" dest="pragma: pragma [2573,2579]"/>
  <match src="address: address [9068,9075]" dest="address: address [12384,12391]"/>
  <match src="returns: returns [10480,10487]" dest="returns: returns [14570,14577]"/>
  <match src="bytes32: bytes32 [542,549]" dest="bytes32: bytes32 [13223,13230]"/>
  <match src="(: ( [970,971]" dest="(: ( [13651,13652]"/>
  <match src="address: address [7159,7166]" dest="address: address [12179,12186]"/>
  <match src="primitive_type [8313,8320]" dest="primitive_type [16751,16758]"/>
  <match src="call_argument [7322,7326]" dest="call_argument [26016,26020]"/>
  <match src="primitive_type [11279,11286]" dest="primitive_type [22518,22525]"/>
  <match src="type_name [922,928]" dest="type_name [13603,13609]"/>
  <match src="address: address [735,742]" dest="address: address [13416,13423]"/>
  <match src="address: address [1844,1851]" dest="address: address [25734,25741]"/>
  <match src="identifier: transferProxyOwnership [10728,10750]" dest="identifier: transferOwnership [14849,14866]"/>
  <match src="identifier: Upgraded [7984,7992]" dest="identifier: GasPriceChanged [16359,16374]"/>
  <match src="contract_declaration [8798,9330]" dest="contract_declaration [12294,12677]"/>
  <match src="identifier: boolArrayStorage [880,896]" dest="identifier: boolArrayStorage [13561,13577]"/>
  <match src="mapping: mapping [591,598]" dest="mapping: mapping [13272,13279]"/>
  <match src="call_expression [10293,10305]" dest="call_expression [14405,14412]"/>
  <match src="function_body [11325,11379]" dest="function_body [15088,15232]"/>
  <match src="return_type_definition [6922,6939]" dest="return_type_definition [16985,17001]"/>
  <match src="number_literal: 0 [1828,1829]" dest="number_literal: 0 [21196,21197]"/>
  <match src="(: ( [12093,12094]" dest="(: ( [21428,21429]"/>
  <match src="visibility [341,349]" dest="visibility [13022,13030]"/>
  <match src="view: view [7145,7149]" dest="view: view [12165,12169]"/>
  <match src="bool: bool [863,867]" dest="bool: bool [13544,13548]"/>
  <match src="function_body [12073,12187]" dest="function_body [21162,21466]"/>
  <match src=",: , [5759,5760]" dest=",: , [11582,11583]"/>
  <match src="event_paramater [7993,8008]" dest="event_paramater [16375,16391]"/>
  <match src="identifier: upgradeTo [12084,12093]" dest="identifier: require [21421,21428]"/>
  <match src="identifier: sig [5646,5649]" dest="identifier: sig [11543,11546]"/>
  <match src="comment: /**  * @title UpgradeabilityProxy  * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded  */ [7484,7640]" dest="comment: // File: contracts/IOwnedUpgradeabilityProxy.sol [12012,12060]"/>
  <match src="primitive_type [1873,1879]" dest="primitive_type [25061,25067]"/>
  <match src="identifier: this [12145,12149]" dest="identifier: this [21272,21276]"/>
  <match src="(: ( [660,661]" dest="(: ( [13341,13342]"/>
  <match src="parameter [7159,7166]" dest="parameter [12179,12186]"/>
  <match src="visibility [6709,6717]" dest="visibility [22457,22465]"/>
  <match src="return_statement [9088,9116]" dest="return_statement [12404,12456]"/>
  <match src="type_name [1500,1507]" dest="type_name [21123,21130]"/>
  <match src="primitive_type [333,339]" dest="primitive_type [13014,13020]"/>
  <match src="primitive_type [542,549]" dest="primitive_type [13223,13230]"/>
  <match src="function: function [7112,7120]" dest="function: function [12136,12144]"/>
  <match src="identifier: upgradeToAndCall [11973,11989]" dest="identifier: claimTokens [21095,21106]"/>
  <match src="parameter [1500,1526]" dest="parameter [21123,21134]"/>
  <match src="(: ( [7992,7993]" dest="(: ( [16374,16375]"/>
  <match src="return: return [9088,9094]" dest="return: return [12404,12410]"/>
  <match src="contract_declaration [9584,12190]" dest="contract_declaration [13922,15235]"/>
  <match src="type_name [672,678]" dest="type_name [13353,13359]"/>
  <match src="type_name [9935,9942]" dest="type_name [14242,14249]"/>
  <match src="(: ( [851,852]" dest="(: ( [13532,13533]"/>
  <match src="type_name [11262,11269]" dest="type_name [17753,17760]"/>
  <match src="mapping: mapping [370,377]" dest="mapping: mapping [13051,13058]"/>
  <match src="type_name [11279,11286]" dest="type_name [22518,22525]"/>
  <match src="]: ] [990,991]" dest="]: ] [13671,13672]"/>
  <match src="visibility [8879,8886]" dest="visibility [26641,26648]"/>
  <match src="type_name [672,680]" dest="type_name [13353,13361]"/>
  <match src="pragma_directive [9400,9423]" dest="pragma_directive [12737,12760]"/>
  <match src="solidity_pragma_token [6367,6382]" dest="solidity_pragma_token [2255,2270]"/>
  <match src="identifier: thisAddress [1902,1913]" dest="identifier: contractAddress [25820,25835]"/>
  <match src="): ) [12171,12172]" dest="): ) [21285,21286]"/>
  <match src="mapping: mapping [259,266]" dest="mapping: mapping [12940,12947]"/>
  <match src="visibility [6910,6916]" dest="visibility [16973,16979]"/>
  <match src="visibility [7138,7144]" dest="visibility [12158,12164]"/>
  <match src="function: function [6891,6899]" dest="function: function [16953,16961]"/>
  <match src="bytes: bytes [12031,12036]" dest="bytes: bytes [27005,27010]"/>
  <match src="type_name [1844,1851]" dest="type_name [25734,25741]"/>
  <match src="{: { [250,251]" dest="{: { [12931,12932]"/>
  <match src="bytes32: bytes32 [267,274]" dest="bytes32: bytes32 [12948,12955]"/>
  <match src="parameter [10751,10767]" dest="parameter [14867,14883]"/>
  <match src="identifier: setUpgradeabilityOwner [10909,10931]" dest="identifier: setOwner [14955,14963]"/>
  <match src="mapping: mapping [534,541]" dest="mapping: mapping [13215,13222]"/>
  <match src="address: address [12007,12014]" dest="address: address [22027,22034]"/>
  <match src="visibility [454,462]" dest="visibility [13135,13143]"/>
  <match src="yul_evm_builtin [5722,5727]" dest="yul_evm_builtin [4351,4356]"/>
  <match src="visibility [1742,1748]" dest="visibility [25041,25047]"/>
  <match src="): ) [559,560]" dest="): ) [13240,13241]"/>
  <match src="add: add [5790,5793]" dest="add: add [4840,4843]"/>
  <match src="view: view [10475,10479]" dest="view: view [14565,14569]"/>
  <match src="state_variable_declaration [534,581]" dest="state_variable_declaration [13215,13262]"/>
  <match src="mstore: mstore [5027,5033]" dest="mstore: mstore [8370,8376]"/>
  <match src="identifier: OwnedUpgradeabilityProxy [9593,9617]" dest="identifier: EternalOwnable [13931,13945]"/>
  <match src="type_name [8871,8878]" dest="type_name [23581,23588]"/>
  <match src="pragma: pragma [8658,8664]" dest="pragma: pragma [12263,12269]"/>
  <match src="function_definition [11243,11379]" dest="function_definition [15043,15232]"/>
  <match src="primitive_type [1456,1463]" dest="primitive_type [2181,2188]"/>
  <match src="string: string [672,678]" dest="string: string [13353,13359]"/>
  <match src="pragma: pragma [1076,1082]" dest="pragma: pragma [1822,1828]"/>
  <match src="address: address [7314,7321]" dest="address: address [26008,26015]"/>
  <match src="binary_expression [10279,10305]" dest="binary_expression [14391,14412]"/>
  <match src="{: { [10791,10792]" dest="{: { [14902,14903]"/>
  <match src="pragma_directive [7451,7474]" dest="pragma_directive [12064,12087]"/>
  <match src="visibility [398,406]" dest="visibility [13079,13087]"/>
  <match src="mload: mload [5722,5727]" dest="mload: mload [4351,4356]"/>
  <match src="comment: /**  * @title Proxy  * @dev Gives the possibility to delegate any call to a foreign implementation.  */ [1105,1211]" dest="comment: /**  * @title SafeMath  * @dev Math operations with safety checks that revert on error  */ [90,183]"/>
  <match src="type_cast_expression [7314,7327]" dest="type_cast_expression [26008,26021]"/>
  <match src="(: ( [10931,10932]" dest="(: ( [14963,14964]"/>
  <match src="pragma: pragma [12255,12261]" dest="pragma: pragma [13773,13779]"/>
  <match src="type_name [735,744]" dest="type_name [13416,13425]"/>
  <match src="function_body [10791,10949]" dest="function_body [14902,14981]"/>
  <match src="): ) [744,745]" dest="): ) [13425,13426]"/>
  <match src="identifier: stringStorage [350,363]" dest="identifier: stringStorage [13031,13044]"/>
  <match src="string: string [333,339]" dest="string: string [13014,13020]"/>
  <match src="primitive_type [735,742]" dest="primitive_type [13416,13423]"/>
  <match src="comment: // File: contracts/upgradeability/Proxy.sol [1029,1072]" dest="comment: // File: openzeppelin-solidity/contracts/math/SafeMath.sol [0,58]"/>
  <match src="(: ( [7299,7300]" dest="(: ( [25988,25989]"/>
  <match src="type_name [333,339]" dest="type_name [13014,13020]"/>
  <match src="): ) [1830,1831]" dest="): ) [21198,21199]"/>
  <match src="(: ( [7321,7322]" dest="(: ( [26015,26016]"/>
  <match src="visibility [746,754]" dest="visibility [13427,13435]"/>
  <match src="solidity_version:  0.4.24 [12270,12277]" dest="solidity_version:  0.4.24 [13788,13795]"/>
  <match src="address: address [10489,10496]" dest="address: address [14579,14586]"/>
  <match src="identifier: msg [10124,10127]" dest="identifier: msg [22961,22964]"/>
  <match src="yul_evm_builtin [2641,2646]" dest="yul_evm_builtin [4304,4309]"/>
  <match src="internal: internal [341,349]" dest="internal: internal [13022,13030]"/>
  <match src="primitive_type [553,559]" dest="primitive_type [13234,13240]"/>
  <match src="type_name [610,617]" dest="type_name [13291,13298]"/>
  <match src="type_name [903,931]" dest="type_name [13584,13612]"/>
  <match src="identifier: EternalStorage [235,249]" dest="identifier: EternalStorage [12916,12930]"/>
  <match src="identifier: version [11270,11277]" dest="identifier: _day [17761,17765]"/>
  <match src="public: public [12051,12057]" dest="public: public [21136,21142]"/>
  <match src="): ) [6908,6909]" dest="): ) [16971,16972]"/>
  <match src="solidity_pragma_token [12262,12277]" dest="solidity_pragma_token [13780,13795]"/>
  <match src="(: ( [10465,10466]" dest="(: ( [14555,14556]"/>
  <match src="]: ] [679,680]" dest="]: ] [13360,13361]"/>
  <match src="primitive_type [7314,7321]" dest="primitive_type [26008,26015]"/>
  <match src="mapping: mapping [844,851]" dest="mapping: mapping [13525,13532]"/>
  <match src="parameter [6931,6938]" dest="parameter [16993,17000]"/>
  <match src="internal: internal [454,462]" dest="internal: internal [13135,13143]"/>
  <match src="identifier: newOwner [10889,10897]" dest="identifier: newOwner [15141,15149]"/>
  <match src="parameter [8313,8328]" dest="parameter [16751,16768]"/>
  <match src="identifier: onlyProxyOwner [12058,12072]" dest="identifier: onlyIfOwnerOfProxy [21143,21161]"/>
  <match src="(: ( [7135,7136]" dest="(: ( [12155,12156]"/>
  <match src="=&gt;: =&gt; [550,552]" dest="=&gt;: =&gt; [13231,13233]"/>
  <match src="uint256: uint256 [11262,11269]" dest="uint256: uint256 [17753,17760]"/>
  <match src="bytes32: bytes32 [599,606]" dest="bytes32: bytes32 [13280,13287]"/>
  <match src="expression_statement [10909,10942]" dest="expression_statement [14955,14974]"/>
  <match src="): ) [10767,10768]" dest="): ) [14883,14884]"/>
  <match src="function: function [9016,9024]" dest="function: function [12332,12340]"/>
  <match src="(: ( [5757,5758]" dest="(: ( [11578,11579]"/>
  <match src="type_name [314,340]" dest="type_name [12995,13021]"/>
  <match src="primitive_type [863,867]" dest="primitive_type [13544,13548]"/>
  <match src="primitive_type [599,606]" dest="primitive_type [13280,13287]"/>
  <match src="yul_evm_builtin [5040,5043]" dest="yul_evm_builtin [4413,4416]"/>
  <match src="address: address [10822,10829]" dest="address: address [14933,14940]"/>
  <match src="type_name [534,560]" dest="type_name [13215,13241]"/>
  <match src="parameter [7244,7270]" dest="parameter [21107,21121]"/>
  <match src="uint256: uint256 [8313,8320]" dest="uint256: uint256 [16751,16758]"/>
  <match src="function_body [6940,6974]" dest="function_body [17002,17080]"/>
  <match src="): ) [9075,9076]" dest="): ) [12391,12392]"/>
  <match src="internal: internal [6629,6637]" dest="internal: internal [22045,22053]"/>
  <match src="): ) [680,681]" dest="): ) [13361,13362]"/>
  <match src="solidity_pragma_token [8665,8680]" dest="solidity_pragma_token [12270,12285]"/>
  <match src="type_name [482,506]" dest="type_name [13163,13187]"/>
  <match src="bytes32: bytes32 [971,978]" dest="bytes32: bytes32 [13652,13659]"/>
  <match src="state_variable_declaration [963,1022]" dest="state_variable_declaration [13644,13703]"/>
  <match src="mapping: mapping [963,970]" dest="mapping: mapping [13644,13651]"/>
  <match src="solidity: solidity [9407,9415]" dest="solidity: solidity [12744,12752]"/>
  <match src="type_name [428,453]" dest="type_name [13109,13134]"/>
  <match src="expression_statement [10802,10834]" dest="expression_statement [14913,14945]"/>
  <match src="public: public [10468,10474]" dest="public: public [14558,14564]"/>
  <match src="primitive_type [672,678]" dest="primitive_type [13353,13359]"/>
  <match src="): ) [1829,1830]" dest="): ) [21197,21198]"/>
  <match src="primitive_type [322,329]" dest="primitive_type [13003,13010]"/>
  <match src="binary_expression [7300,7327]" dest="binary_expression [25989,26021]"/>
  <match src="identifier: stringArrayStorage [691,709]" dest="identifier: stringArrayStorage [13372,13390]"/>
  <match src="mapping: mapping [716,723]" dest="mapping: mapping [13397,13404]"/>
  <match src="uint256: uint256 [610,617]" dest="uint256: uint256 [13291,13298]"/>
  <match src=".: . [7303,7304]" dest=".: . [27067,27068]"/>
  <match src="identifier: intArrayStorage [941,956]" dest="identifier: intArrayStorage [13622,13637]"/>
  <match src="primitive_type [389,396]" dest="primitive_type [13070,13077]"/>
  <match src="[: [ [678,679]" dest="[: [ [13359,13360]"/>
  <match src="(: ( [6930,6931]" dest="(: ( [16992,16993]"/>
  <match src="return_statement [10509,10538]" dest="return_statement [14599,14659]"/>
  <match src="visibility [682,690]" dest="visibility [13363,13371]"/>
  <match src="view: view [9054,9058]" dest="view: view [12370,12374]"/>
  <match src="comment: // File: contracts/upgradeability/OwnedUpgradeabilityProxy.sol [9334,9396]" dest="comment: /**  * @title EternalOwnable  * @dev This contract has an owner address providing basic authorization control  */ [13804,13920]"/>
  <match src="primitive_type [982,989]" dest="primitive_type [13663,13670]"/>
  <match src="type_cast_expression [1820,1830]" dest="type_cast_expression [21188,21198]"/>
  <match src="=&gt;: =&gt; [498,500]" dest="=&gt;: =&gt; [13179,13181]"/>
  <match src="visibility [11303,11309]" dest="visibility [17934,17940]"/>
  <match src="): ) [10258,10259]" dest="): ) [14370,14371]"/>
  <match src="identifier: _impl [1811,1816]" dest="identifier: _to [21181,21184]"/>
  <match src="): ) [505,506]" dest="): ) [13186,13187]"/>
  <match src="identifier: newOwner [10810,10818]" dest="identifier: newOwner [14921,14929]"/>
  <match src="type_name [10751,10758]" dest="type_name [14867,14874]"/>
  <match src="primitive_type [501,505]" dest="primitive_type [13182,13186]"/>
  <match src="): ) [930,931]" dest="): ) [13611,13612]"/>
  <match src="bytes32: bytes32 [982,989]" dest="bytes32: bytes32 [13663,13670]"/>
  <match src="address: address [10751,10758]" dest="address: address [14867,14874]"/>
  <match src="pragma_directive [56,79]" dest="pragma_directive [2573,2596]"/>
  <match src="comment: // File: contracts/upgradeability/UpgradeabilityOwnerStorage.sol [8590,8654]" dest="comment: // File: contracts/upgradeable_contracts/OwnedUpgradeability.sol [12195,12259]"/>
  <match src="call_argument [10830,10831]" dest="call_argument [14941,14942]"/>
  <match src="uint256: uint256 [7993,8000]" dest="uint256: uint256 [16375,16382]"/>
  <match src="type_name [6621,6628]" dest="type_name [16337,16344]"/>
  <match src="!=: != [10819,10821]" dest="!=: != [14930,14932]"/>
  <match src="primitive_type [7244,7251]" dest="primitive_type [21107,21114]"/>
  <match src="): ) [7326,7327]" dest="): ) [26020,26021]"/>
  <match src="primitive_type [378,385]" dest="primitive_type [13059,13066]"/>
  <match src="address: address [1500,1507]" dest="address: address [21123,21130]"/>
  <match src="return_type_definition [7150,7167]" dest="return_type_definition [12170,12187]"/>
  <match src="type_name [1456,1463]" dest="type_name [2181,2188]"/>
  <match src="internal: internal [871,879]" dest="internal: internal [13552,13560]"/>
  <match src="type_cast_expression [12137,12150]" dest="type_cast_expression [21264,21277]"/>
  <match src="visibility [12051,12057]" dest="visibility [21136,21142]"/>
  <match src="source_file [0,12674]" dest="source_file [0,27230]"/>
  <match src="address: address [8010,8017]" dest="address: address [21937,21944]"/>
  <match src="address: address [11279,11286]" dest="address: address [22518,22525]"/>
  <match src="expression_statement [10271,10307]" dest="expression_statement [14383,14414]"/>
  <match src="type_name [9912,9919]" dest="type_name [14219,14226]"/>
  <match src="parameter [9068,9075]" dest="parameter [12384,12391]"/>
  <match src="variable_declaration_statement [1760,1793]" dest="variable_declaration_statement [4672,4693]"/>
  <match src="primitive_type [911,918]" dest="primitive_type [13592,13599]"/>
  <match src="type_cast_expression [10822,10832]" dest="type_cast_expression [14933,14943]"/>
  <match src="return: return [10509,10515]" dest="return: return [14599,14605]"/>
  <match src=".: . [12150,12151]" dest=".: . [21277,21278]"/>
  <match src="(: ( [541,542]" dest="(: ( [13222,13223]"/>
  <match src="internal: internal [621,629]" dest="internal: internal [13302,13310]"/>
  <match src="event: event [7978,7983]" dest="event: event [16353,16358]"/>
  <match src="): ) [12041,12042]" dest="): ) [21134,21135]"/>
  <match src="address: address [9912,9919]" dest="address: address [14219,14226]"/>
  <match src="primitive_type [12007,12014]" dest="primitive_type [22027,22034]"/>
  <match src="[: [ [742,743]" dest="[: [ [13423,13424]"/>
  <match src="visibility [7272,7280]" dest="visibility [27022,27030]"/>
  <match src="): ) [991,992]" dest="): ) [13672,13673]"/>
  <match src="address: address [9935,9942]" dest="address: address [14242,14249]"/>
  <match src="address: address [8330,8337]" dest="address: address [25200,25207]"/>
  <match src="type_name [389,396]" dest="type_name [13070,13077]"/>
  <match src="(: ( [1455,1456]" dest="(: ( [2180,2181]"/>
  <match src="type_name [12007,12014]" dest="type_name [22027,22034]"/>
  <match src="primitive_type [6621,6628]" dest="primitive_type [16337,16344]"/>
  <match src="state_variable_declaration [844,897]" dest="state_variable_declaration [13525,13578]"/>
  <match src="primitive_type [10489,10496]" dest="primitive_type [14579,14586]"/>
  <match src="(: ( [10488,10489]" dest="(: ( [14578,14579]"/>
  <match src="type_name [9222,9229]" dest="type_name [23257,23264]"/>
  <match src="uint256: uint256 [278,285]" dest="uint256: uint256 [12959,12966]"/>
  <match src="=&gt;: =&gt; [669,671]" dest="=&gt;: =&gt; [13350,13352]"/>
  <match src="): ) [9045,9046]" dest="): ) [12361,12362]"/>
  <match src="parameter [9222,9252]" dest="parameter [23257,23270]"/>
  <match src="comment: /**     * @dev Throws if called by any account other than the owner.     */ [10151,10228]" dest="comment: /**     * @dev Throws if called by any account other than the owner.     */ [14268,14345]"/>
  <match src="primitive_type [8871,8878]" dest="primitive_type [23581,23588]"/>
  <match src="type_name [7993,8000]" dest="type_name [16375,16382]"/>
  <match src="returns: returns [6922,6929]" dest="returns: returns [16985,16992]"/>
  <match src="event_definition [9880,9953]" dest="event_definition [14185,14260]"/>
  <match src="contract: contract [226,234]" dest="contract: contract [12907,12915]"/>
  <match src="call_expression [10802,10833]" dest="call_expression [14913,14944]"/>
  <match src="type_name [12031,12036]" dest="type_name [27005,27010]"/>
  <match src="bytes32: bytes32 [661,668]" dest="bytes32: bytes32 [13342,13349]"/>
  <match src="external: external [7272,7280]" dest="external: external [27022,27030]"/>
  <match src="state_variable_declaration [903,957]" dest="state_variable_declaration [13584,13638]"/>
  <match src="visibility [1528,1536]" dest="visibility [19995,20003]"/>
  <match src="solidity_version:  0.4.24 [7466,7473]" dest="solidity_version:  0.4.24 [12079,12086]"/>
  <match src="address: address [1760,1767]" dest="address: address [4672,4679]"/>
  <match src="comment: /**     * @dev Tells the address of the proxy owner     * @return the address of the proxy owner     */ [10334,10440]" dest="comment: /**     * @dev Allows the current owner to transfer control of the contract to a newOwner.     * @param newOwner the address to transfer ownership to.     */ [14674,14834]"/>
  <match src="identifier: uintStorage [296,307]" dest="identifier: uintStorage [12977,12988]"/>
  <match src="function_body [10090,10143]" dest="function_body [22910,22993]"/>
  <match src="}: } [11378,11379]" dest="}: } [15231,15232]"/>
  <match src="]: ] [743,744]" dest="]: ] [13424,13425]"/>
  <match src="solidity_version:  0.4.24 [9415,9422]" dest="solidity_version:  0.4.24 [12752,12759]"/>
  <match src="(: ( [9044,9045]" dest="(: ( [12360,12361]"/>
  <match src="): ) [12149,12150]" dest="): ) [21276,21277]"/>
  <match src="yul_evm_builtin [5751,5757]" dest="yul_evm_builtin [11575,11578]"/>
  <match src="call_argument [10279,10305]" dest="call_argument [14391,14412]"/>
  <match src="visibility [621,629]" dest="visibility [13302,13310]"/>
  <match src="return_type_definition [9059,9076]" dest="return_type_definition [12375,12392]"/>
  <match src="modifier_definition [10234,10326]" dest="modifier_definition [14351,14433]"/>
  <match src="private: private [8879,8886]" dest="private: private [26641,26648]"/>
  <match src="internal: internal [398,406]" dest="internal: internal [13079,13087]"/>
  <match src="type_name [370,397]" dest="type_name [13051,13078]"/>
  <match src="int256: int256 [553,559]" dest="int256: int256 [13234,13240]"/>
  <match src="primitive_type [610,617]" dest="primitive_type [13291,13298]"/>
  <match src="(: ( [10278,10279]" dest="(: ( [14390,14391]"/>
  <match src="primitive_type [1894,1901]" dest="primitive_type [25812,25819]"/>
  <match src="visibility [10769,10775]" dest="visibility [14885,14891]"/>
  <match src="identifier: UpgradeabilityOwnerStorage [8807,8833]" dest="identifier: OwnedUpgradeability [12303,12322]"/>
  <match src="(: ( [377,378]" dest="(: ( [13058,13059]"/>
  <match src="address: address [1456,1463]" dest="address: address [2181,2188]"/>
  <match src="function_definition [9016,9123]" dest="function_definition [12332,12463]"/>
  <match src="identifier: call [12151,12155]" dest="identifier: balance [21278,21285]"/>
  <match src="visibility [993,1001]" dest="visibility [13674,13682]"/>
  <match src="event_definition [7978,8042]" dest="event_definition [16353,16393]"/>
  <match src="identifier: boolStorage [516,527]" dest="identifier: boolStorage [13197,13208]"/>
  <match src="expression_statement [1803,1832]" dest="expression_statement [21173,21200]"/>
  <match src="mapping: mapping [653,660]" dest="mapping: mapping [13334,13341]"/>
  <match src="(: ( [489,490]" dest="(: ( [13170,13171]"/>
  <match src="primitive_type [922,928]" dest="primitive_type [13603,13609]"/>
  <match src="public: public [11303,11309]" dest="public: public [17934,17940]"/>
  <match src="}: } [6973,6974]" dest="}: } [17079,17080]"/>
  <match src="=&gt;: =&gt; [979,981]" dest="=&gt;: =&gt; [13660,13662]"/>
  <match src="parameter [10489,10496]" dest="parameter [14579,14586]"/>
  <match src="comment: // File: contracts/upgradeability/UpgradeabilityStorage.sol [6297,6356]" dest="comment: // File: contracts/IBridgeValidators.sol [1778,1818]"/>
  <match src="bytes32: bytes32 [436,443]" dest="bytes32: bytes32 [13117,13124]"/>
  <match src="primitive_type [8330,8337]" dest="primitive_type [25200,25207]"/>
  <match src="identifier: msg [7300,7303]" dest="identifier: msg [27064,27067]"/>
  <match src="(: ( [7158,7159]" dest="(: ( [12178,12179]"/>
  <match src="visibility [8354,8362]" dest="visibility [17783,17791]"/>
  <match src="(: ( [1827,1828]" dest="(: ( [21195,21196]"/>
  <match src="function_definition [11964,12187]" dest="function_definition [21086,21466]"/>
  <match src="): ) [12117,12118]" dest="): ) [21457,21458]"/>
  <match src="(: ( [12161,12162]" dest="(: ( [21263,21264]"/>
  <match src="modifier_invocation [12058,12072]" dest="modifier_invocation [21143,21161]"/>
  <match src="variable_declaration_statement [1844,1863]" dest="variable_declaration_statement [25734,25752]"/>
  <match src="solidity: solidity [12262,12270]" dest="solidity: solidity [13780,13788]"/>
  <match src="[: [ [989,990]" dest="[: [ [13670,13671]"/>
  <match src="solidity_pragma_token [7458,7473]" dest="solidity_pragma_token [12071,12086]"/>
  <match src="expression_statement [7292,7329]" dest="expression_statement [25981,26023]"/>
  <match src="): ) [396,397]" dest="): ) [13077,13078]"/>
  <match src="}: } [1024,1025]" dest="}: } [13705,13706]"/>
  <match src="primitive_type [10822,10829]" dest="primitive_type [14933,14940]"/>
  <match src="pragma_directive [8658,8681]" dest="pragma_directive [12263,12286]"/>
  <match src="): ) [7166,7167]" dest="): ) [12186,12187]"/>
  <match src="{: { [10260,10261]" dest="{: { [14372,14373]"/>
  <match src="(: ( [10750,10751]" dest="(: ( [14866,14867]"/>
  <match src="contract_body [9669,12190]" dest="contract_body [13964,15235]"/>
  <match src="visibility [9254,9262]" dest="visibility [15079,15087]"/>
  <match src="internal: internal [6709,6717]" dest="internal: internal [22457,22465]"/>
  <match src="primitive_type [278,285]" dest="primitive_type [12959,12966]"/>
  <match src="yul_identifier [5646,5649]" dest="yul_identifier [11543,11546]"/>
  <match src="solidity_version:  0.4.24 [8673,8680]" dest="solidity_version:  0.4.24 [12278,12285]"/>
  <match src="identifier: _ [10317,10318]" dest="identifier: _ [14424,14425]"/>
  <match src="=&gt;: =&gt; [919,921]" dest="=&gt;: =&gt; [13600,13602]"/>
  <match src="bytes32: bytes32 [724,731]" dest="bytes32: bytes32 [13405,13412]"/>
  <match src="state_mutability [10475,10479]" dest="state_mutability [14565,14569]"/>
  <match src="identifier: newUpgradeabilityOwner [9230,9252]" dest="identifier: _from [23265,23270]"/>
  <match src="identifier: EternalStorage [12657,12671]" dest="identifier: EternalStorage [13949,13963]"/>
  <match src="view: view [1442,1446]" dest="view: view [2168,2172]"/>
  <match src="solidity_pragma_token [63,78]" dest="solidity_pragma_token [2580,2595]"/>
  <match src="type_name [7244,7251]" dest="type_name [21107,21114]"/>
  <match src="state_variable_declaration [482,528]" dest="state_variable_declaration [13163,13209]"/>
  <match src="primitive_type [9068,9075]" dest="primitive_type [12384,12391]"/>
  <match src="type_name [10489,10496]" dest="type_name [14579,14586]"/>
  <match src="identifier: newOwner [10759,10767]" dest="identifier: newOwner [14875,14883]"/>
  <match src="function_body [10498,10545]" dest="function_body [14588,14666]"/>
  <match src="yul_function_call [5751,5765]" dest="yul_function_call [11575,11587]"/>
  <match src="identifier: version [8321,8328]" dest="identifier: _gasPrice [16759,16768]"/>
  <match src="uint256: uint256 [6931,6938]" dest="uint256: uint256 [16993,17000]"/>
  <match src="function_body [9077,9123]" dest="function_body [12393,12463]"/>
  <match src="type_name [6931,6938]" dest="type_name [16993,17000]"/>
  <match src="identifier: ProxyOwnershipTransferred [9886,9911]" dest="identifier: EternalOwnershipTransferred [14191,14218]"/>
  <match src=".: . [10282,10283]" dest=".: . [14394,14395]"/>
  <match src="state_mutability [9054,9058]" dest="state_mutability [12370,12374]"/>
  <match src="user_defined_type [12657,12671]" dest="user_defined_type [13949,13963]"/>
  <match src="public: public [9047,9053]" dest="public: public [12363,12369]"/>
  <match src="identifier: uintArrayStorage [630,646]" dest="identifier: uintArrayStorage [13311,13327]"/>
  <match src="{: { [9669,9670]" dest="{: { [13964,13965]"/>
  <match src="address: address [9222,9229]" dest="address: address [23257,23264]"/>
  <match src="parameter [8330,8352]" dest="parameter [25200,25211]"/>
  <match src="call_argument [10889,10897]" dest="call_argument [15141,15149]"/>
  <match src="]: ] [618,619]" dest="]: ] [13299,13300]"/>
  <match src="comment: // File: contracts/upgradeability/UpgradeabilityProxy.sol [7390,7447]" dest="comment: // File: contracts/libraries/Message.sol [2529,2569]"/>
  <match src="identifier: sender [10283,10289]" dest="identifier: sender [14395,14401]"/>
  <match src="pragma: pragma [7451,7457]" dest="pragma: pragma [12064,12070]"/>
  <match src="member_expression [10124,10134]" dest="member_expression [22961,22971]"/>
  <match src="bytes4: bytes4 [1873,1879]" dest="bytes4: bytes4 [25061,25067]"/>
  <match src="): ) [285,286]" dest="): ) [12966,12967]"/>
  <match src="identifier: bytes32ArrayStorage [1002,1021]" dest="identifier: bytes32ArrayStorage [13683,13702]"/>
  <match src="): ) [6938,6939]" dest="): ) [17000,17001]"/>
  <match src="parameter [12007,12029]" dest="parameter [22027,22034]"/>
  <match src="identifier: this [7322,7326]" dest="identifier: this [26016,26020]"/>
  <match src="primitive_type [11990,11997]" dest="primitive_type [18095,18102]"/>
  <match src="(: ( [10809,10810]" dest="(: ( [14920,14921]"/>
  <match src="primitive_type [6931,6938]" dest="primitive_type [16993,17000]"/>
  <match src="primitive_type [11262,11269]" dest="primitive_type [17753,17760]"/>
  <match src="yul_identifier [5761,5764]" dest="yul_identifier [11579,11582]"/>
  <match src="=&gt;: =&gt; [444,446]" dest="=&gt;: =&gt; [13125,13127]"/>
  <match src="type_name [259,286]" dest="type_name [12940,12967]"/>
  <match src="(: ( [435,436]" dest="(: ( [13116,13117]"/>
  <match src="parameter [11279,11301]" dest="parameter [22518,22525]"/>
  <match src="): ) [10832,10833]" dest="): ) [14943,14944]"/>
  <match src="): ) [1463,1464]" dest="): ) [2188,2189]"/>
  <match src="public: public [1742,1748]" dest="public: public [25041,25047]"/>
  <match src="type_name [844,870]" dest="type_name [13525,13551]"/>
  <match src="return_type_definition [1447,1464]" dest="return_type_definition [2173,2189]"/>
  <match src="internal: internal [682,690]" dest="internal: internal [13363,13371]"/>
  <match src="call_argument [10932,10940]" dest="call_argument [14964,14972]"/>
  <match src="identifier: sender [7304,7310]" dest="identifier: sender [27068,27074]"/>
  <match src="solidity_pragma_token [9407,9422]" dest="solidity_pragma_token [12744,12759]"/>
  <match src="identifier: require [7292,7299]" dest="identifier: require [25981,25988]"/>
  <match src="internal: internal [9254,9262]" dest="internal: internal [15079,15087]"/>
  <match src="(: ( [10829,10830]" dest="(: ( [14940,14941]"/>
  <match src="identifier: bytesStorage [463,475]" dest="identifier: bytesStorage [13144,13156]"/>
  <match src="solidity: solidity [8665,8673]" dest="solidity: solidity [12270,12278]"/>
  <match src="pragma_directive [12255,12278]" dest="pragma_directive [13773,13796]"/>
  <match src="function_body [10260,10326]" dest="function_body [14372,14433]"/>
  <match src="state_variable_declaration [314,364]" dest="state_variable_declaration [12995,13045]"/>
  <match src="=&gt;: =&gt; [330,332]" dest="=&gt;: =&gt; [13011,13013]"/>
  <match src="=&gt;: =&gt; [860,862]" dest="=&gt;: =&gt; [13541,13543]"/>
  <match src="yul_evm_builtin [5027,5033]" dest="yul_evm_builtin [8370,8376]"/>
  <match src="identifier: version [8001,8008]" dest="identifier: gasPrice [16383,16391]"/>
  <match src="return_statement [6951,6967]" dest="return_statement [17013,17073]"/>
  <match src="call_expression [7292,7328]" dest="call_expression [25981,26022]"/>
  <match src="identifier: intStorage [570,580]" dest="identifier: intStorage [13251,13261]"/>
  <match src="expression_statement [12129,12180]" dest="expression_statement [21251,21287]"/>
  <match src="): ) [339,340]" dest="): ) [13020,13021]"/>
  <match src="bytes32: bytes32 [911,918]" dest="bytes32: bytes32 [13592,13599]"/>
  <match src="variable_declaration [1894,1913]" dest="variable_declaration [25812,25835]"/>
  <match src="primitive_type [1844,1851]" dest="primitive_type [25734,25741]"/>
  <match src="view: view [6917,6921]" dest="view: view [16980,16984]"/>
  <match src="type_name [591,620]" dest="type_name [13272,13301]"/>
  <match src="==: == [10290,10292]" dest="==: == [14402,14404]"/>
  <match src="primitive_type [971,978]" dest="primitive_type [13652,13659]"/>
  <match src=",: , [9933,9934]" dest=",: , [14240,14241]"/>
  <match src="identifier: onlyProxyOwner [10776,10790]" dest="identifier: onlyOwner [14892,14901]"/>
  <match src="state_variable_declaration [653,710]" dest="state_variable_declaration [13334,13391]"/>
  <match src="comment: /**  * @title EternalStorage  * @dev This contract holds all the necessary state variables to carry out the storage of any contract.  */ [85,224]" dest="comment: /**  * @title EternalStorage  * @dev This contract holds all the necessary state variables to carry out the storage of any contract.  */ [12766,12905]"/>
  <match src="bytes32: bytes32 [490,497]" dest="bytes32: bytes32 [13171,13178]"/>
  <match src="function_definition [10446,10545]" dest="function_definition [14541,14666]"/>
  <match src="type_name [278,285]" dest="type_name [12959,12966]"/>
  <match src="solidity: solidity [6367,6375]" dest="solidity: solidity [2255,2263]"/>
  <match src="(: ( [11261,11262]" dest="(: ( [15060,15061]"/>
  <match src="type_name [553,559]" dest="type_name [13234,13240]"/>
  <match src="internal: internal [746,754]" dest="internal: internal [13427,13435]"/>
  <match src="solidity_version:  0.4.24 [1091,1098]" dest="solidity_version:  0.4.24 [1837,1844]"/>
  <match src="): ) [7136,7137]" dest="): ) [12156,12157]"/>
  <match src="function: function [11964,11972]" dest="function: function [21086,21094]"/>
  <match src="solidity_version:  0.4.24 [6375,6382]" dest="solidity_version:  0.4.24 [2263,2270]"/>
  <match src="(: ( [11989,11990]" dest="(: ( [21106,21107]"/>
  <match src="type_name [963,992]" dest="type_name [13644,13673]"/>
  <match src="identifier: implementation [7121,7135]" dest="identifier: proxyOwner [12145,12155]"/>
  <match src="[: [ [617,618]" dest="[: [ [13298,13299]"/>
  <match src="member_expression [12137,12155]" dest="member_expression [21264,21285]"/>
  <match src="identifier: addressStorage [407,421]" dest="identifier: addressStorage [13088,13102]"/>
  <match src="(: ( [9067,9068]" dest="(: ( [12383,12384]"/>
  <match src="address: address [12137,12144]" dest="address: address [21264,21271]"/>
  <match src="call_expression [10101,10135]" dest="call_expression [22929,22972]"/>
  <match src="type_name [982,989]" dest="type_name [13663,13670]"/>
  <match src="!=: != [1817,1819]" dest="!=: != [21185,21187]"/>
  <match src="function_definition [7112,7209]" dest="function_definition [12136,12188]"/>
  <match src="function: function [10446,10454]" dest="function: function [14541,14549]"/>
  <match src="visibility [6629,6637]" dest="visibility [22045,22053]"/>
  <match src="state_mutability [6917,6921]" dest="state_mutability [16980,16984]"/>
  <match src="type_name [1894,1901]" dest="type_name [25812,25819]"/>
  <match src="comment: //mapping(bytes32 =&gt; bytes[]) internal bytesArrayStorage; [781,838]" dest="comment: //mapping(bytes32 =&gt; bytes[]) internal bytesArrayStorage; [13462,13519]"/>
  <match src="primitive_type [7159,7166]" dest="primitive_type [12179,12186]"/>
  <match src="primitive_type [9912,9919]" dest="primitive_type [14219,14226]"/>
  <match src="public: public [6910,6916]" dest="public: public [16973,16979]"/>
  <match src="modifier: modifier [10234,10242]" dest="modifier: modifier [14351,14359]"/>
  <match src="mapping: mapping [314,321]" dest="mapping: mapping [12995,13002]"/>
</matches>
<actions>
  <move-tree tree="pragma_directive [1076,1099]" parent="source_file [0,27230]" at="8"/>
  <move-tree tree="pragma_directive [6360,6383]" parent="source_file [0,27230]" at="10"/>
  <move-tree tree="pragma_directive [56,79]" parent="source_file [0,27230]" at="12"/>
  <move-tree tree="pragma_directive [7451,7474]" parent="source_file [0,27230]" at="14"/>
  <move-tree tree="comment: // File: contracts/upgradeability/EternalStorage.sol [0,52]" parent="source_file [0,27230]" at="19"/>
  <move-tree tree="comment: /**  * @title EternalStorage  * @dev This contract holds all the necessary state variables to carry out the storage of any contract.  */ [85,224]" parent="source_file [0,27230]" at="21"/>
  <move-tree tree="contract_declaration [226,1025]" parent="source_file [0,27230]" at="21"/>
  <move-tree tree="comment: /**  * @title UpgradeabilityOwnerStorage  * @dev This contract keeps track of the upgradeability owner  */ [8687,8796]" parent="source_file [0,27230]" at="21"/>
  <move-tree tree="pragma_directive [12255,12278]" parent="source_file [0,27230]" at="22"/>
  <move-tree tree="comment: // File: contracts/upgradeability/OwnedUpgradeabilityProxy.sol [9334,9396]" parent="source_file [0,27230]" at="22"/>
  <move-tree tree="comment: /**  * @title OwnedUpgradeabilityProxy  * @dev This contract combines an upgradeability proxy with basic authorization control functionalities  */ [9433,9582]" parent="source_file [0,27230]" at="24"/>
  <update-node tree="comment: // File: contracts/upgradeability/Proxy.sol [1029,1072]" label="// File: openzeppelin-solidity/contracts/math/SafeMath.sol"/>
  <insert-tree tree="pragma_directive [62,86]" parent="source_file [0,27230]" at="1"/>
  <update-node tree="comment: /**  * @title Proxy  * @dev Gives the possibility to delegate any call to a foreign implementation.  */ [1105,1211]" label="/**  * @title SafeMath  * @dev Math operations with safety checks that revert on error  */"/>
  <insert-tree tree="library_declaration [185,1774]" parent="source_file [0,27230]" at="3"/>
  <update-node tree="comment: // File: contracts/upgradeability/UpgradeabilityStorage.sol [6297,6356]" label="// File: contracts/IBridgeValidators.sol"/>
  <insert-node tree="interface_declaration [1849,2193]" parent="source_file [0,27230]" at="6"/>
  <update-node tree="comment: /**  * @title UpgradeabilityStorage  * @dev This contract holds all the necessary state variables to support the upgrade functionality  */ [6389,6530]" label="// File: contracts/IForeignBridgeValidators.sol"/>
  <insert-tree tree="interface_declaration [2275,2525]" parent="source_file [0,27230]" at="9"/>
  <update-node tree="comment: // File: contracts/upgradeability/UpgradeabilityProxy.sol [7390,7447]" label="// File: contracts/libraries/Message.sol"/>
  <insert-node tree="library_declaration [2606,12008]" parent="source_file [0,27230]" at="12"/>
  <update-node tree="comment: /**  * @title UpgradeabilityProxy  * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded  */ [7484,7640]" label="// File: contracts/IOwnedUpgradeabilityProxy.sol"/>
  <insert-node tree="interface_declaration [12093,12191]" parent="source_file [0,27230]" at="15"/>
  <update-node tree="comment: // File: contracts/upgradeability/UpgradeabilityOwnerStorage.sol [8590,8654]" label="// File: contracts/upgradeable_contracts/OwnedUpgradeability.sol"/>
  <update-node tree="comment: /**  * @title UpgradeabilityOwnerStorage  * @dev This contract keeps track of the upgradeability owner  */ [8687,8796]" label="// File: contracts/upgradeable_contracts/EternalOwnable.sol"/>
  <update-node tree="comment: // File: contracts/upgradeability/OwnedUpgradeabilityProxy.sol [9334,9396]" label="/**  * @title EternalOwnable  * @dev This contract has an owner address providing basic authorization control  */"/>
  <update-node tree="comment: /**  * @title OwnedUpgradeabilityProxy  * @dev This contract combines an upgradeability proxy with basic authorization control functionalities  */ [9433,9582]" label="// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol"/>
  <insert-tree tree="pragma_directive [15306,15330]" parent="source_file [0,27230]" at="28"/>
  <update-node tree="comment: // File: contracts/upgradeability/EternalStorageProxy.sol [12194,12251]" label="/**  * @title ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/20  */"/>
  <insert-tree tree="interface_declaration [15427,16130]" parent="source_file [0,27230]" at="30"/>
  <update-node tree="comment: /**  * @title EternalStorageProxy  * @dev This proxy holds the storage of the token contract and delegates every call to the current implementation set.  * Besides, it allows to upgrade the token's behaviour towards further implementations, and provides basic  * authorization control functionalities  */ [12288,12597]" label="// File: contracts/upgradeable_contracts/BasicBridge.sol"/>
  <insert-tree tree="pragma_directive [16194,16217]" parent="source_file [0,27230]" at="32"/>
  <insert-node tree="contract_declaration [16235,21657]" parent="source_file [0,27230]" at="33"/>
  <insert-node tree="comment: // File: contracts/upgradeable_contracts/BasicForeignBridge.sol [21661,21724]" parent="source_file [0,27230]" at="34"/>
  <insert-tree tree="pragma_directive [21728,21751]" parent="source_file [0,27230]" at="35"/>
  <insert-node tree="contract_declaration [21761,22557]" parent="source_file [0,27230]" at="36"/>
  <insert-node tree="comment: // File: contracts/upgradeable_contracts/Validatable.sol [22561,22617]" parent="source_file [0,27230]" at="37"/>
  <insert-tree tree="pragma_directive [22621,22644]" parent="source_file [0,27230]" at="38"/>
  <insert-node tree="contract_declaration [22654,23129]" parent="source_file [0,27230]" at="39"/>
  <insert-node tree="comment: // File: contracts/ERC677Receiver.sol [23133,23170]" parent="source_file [0,27230]" at="40"/>
  <insert-tree tree="pragma_directive [23174,23197]" parent="source_file [0,27230]" at="41"/>
  <insert-node tree="contract_declaration [23203,23324]" parent="source_file [0,27230]" at="42"/>
  <insert-node tree="comment: // File: contracts/upgradeable_contracts/erc20_to_erc20/ForeignBridgeErcToErc.sol [23328,23409]" parent="source_file [0,27230]" at="43"/>
  <insert-tree tree="pragma_directive [23413,23436]" parent="source_file [0,27230]" at="44"/>
  <insert-node tree="contract_declaration [23456,27230]" parent="source_file [0,27230]" at="45"/>
  <insert-node tree="interface: interface [1849,1858]" parent="interface_declaration [1849,2193]" at="0"/>
  <insert-node tree="identifier: IBridgeValidators [1859,1876]" parent="interface_declaration [1849,2193]" at="1"/>
  <insert-node tree="contract_body [1877,2193]" parent="interface_declaration [1849,2193]" at="2"/>
  <insert-node tree="library: library [2606,2613]" parent="library_declaration [2606,12008]" at="0"/>
  <insert-node tree="identifier: Message [2614,2621]" parent="library_declaration [2606,12008]" at="1"/>
  <insert-node tree="contract_body [2622,12008]" parent="library_declaration [2606,12008]" at="2"/>
  <insert-node tree="interface: interface [12093,12102]" parent="interface_declaration [12093,12191]" at="0"/>
  <insert-node tree="identifier: IOwnedUpgradeabilityProxy [12103,12128]" parent="interface_declaration [12093,12191]" at="1"/>
  <insert-node tree="contract_body [12129,12191]" parent="interface_declaration [12093,12191]" at="2"/>
  <update-node tree="identifier: UpgradeabilityOwnerStorage [8807,8833]" label="OwnedUpgradeability"/>
  <move-tree tree="comment: // Owner of the contract [8841,8865]" parent="contract_body [12323,12677]" at="4"/>
  <update-node tree="identifier: OwnedUpgradeabilityProxy [9593,9617]" label="EternalOwnable"/>
  <move-tree tree="inheritance_specifier [12657,12671]" parent="contract_declaration [13922,15235]" at="3"/>
  <move-tree tree="comment: /**     * @dev the constructor sets the original owner of the contract to the sender account.     */ [9961,10063]" parent="contract_body [13964,15235]" at="6"/>
  <move-tree tree="comment: /**     * @dev Tells the address of the proxy owner     * @return the address of the proxy owner     */ [10334,10440]" parent="contract_body [13964,15235]" at="8"/>
  <move-tree tree="comment: /**     * @dev Allows the current owner to transfer control of the contract to a newOwner.     * @param newOwner The address to transfer ownership to.     */ [10553,10713]" parent="contract_body [13964,15235]" at="10"/>
  <insert-node tree="contract: contract [16235,16243]" parent="contract_declaration [16235,21657]" at="0"/>
  <insert-node tree="identifier: BasicBridge [16244,16255]" parent="contract_declaration [16235,21657]" at="1"/>
  <insert-node tree="is: is [16256,16258]" parent="contract_declaration [16235,21657]" at="2"/>
  <insert-tree tree="inheritance_specifier [16259,16273]" parent="contract_declaration [16235,21657]" at="3"/>
  <insert-node tree=",: , [16273,16274]" parent="contract_declaration [16235,21657]" at="4"/>
  <insert-tree tree="inheritance_specifier [16275,16289]" parent="contract_declaration [16235,21657]" at="5"/>
  <insert-node tree=",: , [16289,16290]" parent="contract_declaration [16235,21657]" at="6"/>
  <insert-tree tree="inheritance_specifier [16291,16310]" parent="contract_declaration [16235,21657]" at="7"/>
  <insert-node tree="contract_body [16311,21657]" parent="contract_declaration [16235,21657]" at="8"/>
  <insert-node tree="contract: contract [21761,21769]" parent="contract_declaration [21761,22557]" at="0"/>
  <insert-node tree="identifier: BasicForeignBridge [21770,21788]" parent="contract_declaration [21761,22557]" at="1"/>
  <insert-node tree="is: is [21789,21791]" parent="contract_declaration [21761,22557]" at="2"/>
  <insert-tree tree="inheritance_specifier [21792,21806]" parent="contract_declaration [21761,22557]" at="3"/>
  <insert-node tree="contract_body [21807,22557]" parent="contract_declaration [21761,22557]" at="4"/>
  <insert-node tree="contract: contract [22654,22662]" parent="contract_declaration [22654,23129]" at="0"/>
  <insert-node tree="identifier: Validatable [22663,22674]" parent="contract_declaration [22654,23129]" at="1"/>
  <insert-node tree="is: is [22675,22677]" parent="contract_declaration [22654,23129]" at="2"/>
  <insert-tree tree="inheritance_specifier [22678,22692]" parent="contract_declaration [22654,23129]" at="3"/>
  <insert-node tree="contract_body [22693,23129]" parent="contract_declaration [22654,23129]" at="4"/>
  <insert-node tree="contract: contract [23203,23211]" parent="contract_declaration [23203,23324]" at="0"/>
  <insert-node tree="identifier: ERC677Receiver [23212,23226]" parent="contract_declaration [23203,23324]" at="1"/>
  <insert-node tree="contract_body [23227,23324]" parent="contract_declaration [23203,23324]" at="2"/>
  <insert-node tree="contract: contract [23456,23464]" parent="contract_declaration [23456,27230]" at="0"/>
  <insert-node tree="identifier: ForeignBridgeErcToErc [23465,23486]" parent="contract_declaration [23456,27230]" at="1"/>
  <insert-node tree="is: is [23487,23489]" parent="contract_declaration [23456,27230]" at="2"/>
  <insert-tree tree="inheritance_specifier [23490,23504]" parent="contract_declaration [23456,27230]" at="3"/>
  <insert-node tree=",: , [23504,23505]" parent="contract_declaration [23456,27230]" at="4"/>
  <insert-tree tree="inheritance_specifier [23506,23517]" parent="contract_declaration [23456,27230]" at="5"/>
  <insert-node tree=",: , [23517,23518]" parent="contract_declaration [23456,27230]" at="6"/>
  <insert-tree tree="inheritance_specifier [23519,23537]" parent="contract_declaration [23456,27230]" at="7"/>
  <insert-node tree=",: , [23537,23538]" parent="contract_declaration [23456,27230]" at="8"/>
  <insert-tree tree="inheritance_specifier [23539,23550]" parent="contract_declaration [23456,27230]" at="9"/>
  <insert-node tree="contract_body [23551,27230]" parent="contract_declaration [23456,27230]" at="10"/>
  <insert-node tree="{: { [1877,1878]" parent="contract_body [1877,2193]" at="0"/>
  <insert-tree tree="function_definition [1884,2000]" parent="contract_body [1877,2193]" at="1"/>
  <insert-tree tree="function_definition [2006,2073]" parent="contract_body [1877,2193]" at="2"/>
  <insert-tree tree="function_definition [2079,2138]" parent="contract_body [1877,2193]" at="3"/>
  <move-tree tree="function_definition [1409,1465]" parent="contract_body [1877,2193]" at="4"/>
  <insert-node tree="}: } [2192,2193]" parent="contract_body [1877,2193]" at="5"/>
  <insert-node tree="{: { [2622,2623]" parent="contract_body [2622,12008]" at="0"/>
  <insert-tree tree="function_definition [2629,2899]" parent="contract_body [2622,12008]" at="1"/>
  <insert-node tree="comment: // layout of message :: bytes: [2905,2935]" parent="contract_body [2622,12008]" at="2"/>
  <insert-node tree="comment: // offset  0: 32 bytes :: uint256 - message length [2941,2991]" parent="contract_body [2622,12008]" at="3"/>
  <insert-node tree="comment: // offset 32: 20 bytes :: address - recipient address [2997,3050]" parent="contract_body [2622,12008]" at="4"/>
  <insert-node tree="comment: // offset 52: 32 bytes :: uint256 - value [3056,3097]" parent="contract_body [2622,12008]" at="5"/>
  <insert-node tree="comment: // offset 84: 32 bytes :: bytes32 - transaction hash [3103,3155]" parent="contract_body [2622,12008]" at="6"/>
  <insert-node tree="comment: // offset 104: 20 bytes :: address - contract address to prevent double spending [3161,3241]" parent="contract_body [2622,12008]" at="7"/>
  <insert-node tree="comment: // bytes 1 to 32 are 0 because message length is stored as little endian. [3249,3322]" parent="contract_body [2622,12008]" at="8"/>
  <insert-node tree="comment: // mload always reads 32 bytes. [3328,3359]" parent="contract_body [2622,12008]" at="9"/>
  <insert-node tree="comment: // so we can and have to start reading recipient at offset 20 instead of 32. [3365,3441]" parent="contract_body [2622,12008]" at="10"/>
  <insert-node tree="comment: // if we were to read at 32 the address would contain part of value and be corrupted. [3447,3532]" parent="contract_body [2622,12008]" at="11"/>
  <insert-node tree="comment: // when reading from offset 20 mload will read 12 zero bytes followed [3538,3607]" parent="contract_body [2622,12008]" at="12"/>
  <insert-node tree="comment: // by the 20 recipient address bytes and correctly convert it into an address. [3613,3691]" parent="contract_body [2622,12008]" at="13"/>
  <insert-node tree="comment: // this saves some storage/gas over the alternative solution [3697,3757]" parent="contract_body [2622,12008]" at="14"/>
  <insert-node tree="comment: // which is padding address to 32 bytes and reading recipient at offset 32. [3763,3838]" parent="contract_body [2622,12008]" at="15"/>
  <insert-node tree="comment: // for more details see discussion in: [3844,3882]" parent="contract_body [2622,12008]" at="16"/>
  <insert-node tree="comment: // https://github.com/paritytech/parity-bridge/issues/61 [3888,3944]" parent="contract_body [2622,12008]" at="17"/>
  <insert-node tree="function_definition [3950,4449]" parent="contract_body [2622,12008]" at="18"/>
  <insert-node tree="function_definition [4457,5330]" parent="contract_body [2622,12008]" at="19"/>
  <insert-tree tree="function_definition [5338,5466]" parent="contract_body [2622,12008]" at="20"/>
  <insert-tree tree="function_definition [5474,5567]" parent="contract_body [2622,12008]" at="21"/>
  <insert-tree tree="function_definition [5575,6251]" parent="contract_body [2622,12008]" at="22"/>
  <insert-tree tree="function_definition [6259,6555]" parent="contract_body [2622,12008]" at="23"/>
  <insert-node tree="function_definition [6563,8460]" parent="contract_body [2622,12008]" at="24"/>
  <insert-tree tree="function_definition [8468,9340]" parent="contract_body [2622,12008]" at="25"/>
  <insert-tree tree="function_definition [9348,10249]" parent="contract_body [2622,12008]" at="26"/>
  <insert-tree tree="function_definition [10257,11179]" parent="contract_body [2622,12008]" at="27"/>
  <insert-node tree="function_definition [11187,12005]" parent="contract_body [2622,12008]" at="28"/>
  <insert-node tree="}: } [12007,12008]" parent="contract_body [2622,12008]" at="29"/>
  <insert-node tree="{: { [12129,12130]" parent="contract_body [12129,12191]" at="0"/>
  <move-tree tree="function_definition [7112,7209]" parent="contract_body [12129,12191]" at="1"/>
  <insert-node tree="}: } [12190,12191]" parent="contract_body [12129,12191]" at="2"/>
  <update-node tree="comment: // Owner of the contract [8841,8865]" label="// Avoid using onlyProxyOwner name to prevent issues with implementation from proxy contract"/>
  <insert-tree tree="modifier_definition [12569,12674]" parent="contract_body [12323,12677]" at="3"/>
  <update-node tree="comment: /**   * @dev Event to show ownership has been transferred   * @param previousOwner representing the address of the previous owner   * @param newOwner representing the address of the new owner   */ [9674,9874]" label="/**     * @dev Event to show ownership has been transferred     * @param previousOwner representing the address of the previous owner     * @param newOwner representing the address of the new owner     */"/>
  <update-node tree="comment: /**     * @dev the constructor sets the original owner of the contract to the sender account.     */ [9961,10063]" label="/**     * @dev Tells the address of the owner     * @return the address of the owner     */"/>
  <update-node tree="comment: /**     * @dev Tells the address of the proxy owner     * @return the address of the proxy owner     */ [10334,10440]" label="/**     * @dev Allows the current owner to transfer control of the contract to a newOwner.     * @param newOwner the address to transfer ownership to.     */"/>
  <update-node tree="comment: /**     * @dev Allows the current owner to transfer control of the contract to a newOwner.     * @param newOwner The address to transfer ownership to.     */ [10553,10713]" label="/**     * @dev Sets a new owner address     */"/>
  <insert-node tree="{: { [16311,16312]" parent="contract_body [16311,21657]" at="0"/>
  <insert-node tree="using_directive [16318,16345]" parent="contract_body [16311,21657]" at="1"/>
  <move-tree tree="event_definition [7978,8042]" parent="contract_body [16311,21657]" at="2"/>
  <insert-tree tree="event_definition [16399,16474]" parent="contract_body [16311,21657]" at="3"/>
  <insert-tree tree="event_definition [16480,16522]" parent="contract_body [16311,21657]" at="4"/>
  <insert-tree tree="event_definition [16528,16579]" parent="contract_body [16311,21657]" at="5"/>
  <insert-tree tree="function_definition [16587,16722]" parent="contract_body [16311,21657]" at="6"/>
  <insert-node tree="function_definition [16730,16945]" parent="contract_body [16311,21657]" at="7"/>
  <move-tree tree="function_definition [6891,6974]" parent="contract_body [16311,21657]" at="8"/>
  <insert-tree tree="function_definition [17088,17396]" parent="contract_body [16311,21657]" at="9"/>
  <insert-tree tree="function_definition [17404,17567]" parent="contract_body [16311,21657]" at="10"/>
  <insert-tree tree="function_definition [17575,17716]" parent="contract_body [16311,21657]" at="11"/>
  <insert-node tree="function_definition [17724,17886]" parent="contract_body [16311,21657]" at="12"/>
  <insert-node tree="function_definition [17894,18055]" parent="contract_body [16311,21657]" at="13"/>
  <insert-node tree="function_definition [18063,18231]" parent="contract_body [16311,21657]" at="14"/>
  <insert-tree tree="function_definition [18239,18406]" parent="contract_body [16311,21657]" at="15"/>
  <insert-tree tree="function_definition [18414,18541]" parent="contract_body [16311,21657]" at="16"/>
  <insert-tree tree="function_definition [18549,18676]" parent="contract_body [16311,21657]" at="17"/>
  <insert-tree tree="function_definition [18684,18829]" parent="contract_body [16311,21657]" at="18"/>
  <insert-tree tree="function_definition [18837,18969]" parent="contract_body [16311,21657]" at="19"/>
  <insert-tree tree="function_definition [18977,19111]" parent="contract_body [16311,21657]" at="20"/>
  <insert-tree tree="function_definition [19119,19211]" parent="contract_body [16311,21657]" at="21"/>
  <insert-tree tree="function_definition [19219,19413]" parent="contract_body [16311,21657]" at="22"/>
  <insert-tree tree="function_definition [19421,19552]" parent="contract_body [16311,21657]" at="23"/>
  <insert-tree tree="function_definition [19560,19781]" parent="contract_body [16311,21657]" at="24"/>
  <insert-tree tree="function_definition [19789,19938]" parent="contract_body [16311,21657]" at="25"/>
  <insert-node tree="function_definition [19946,20159]" parent="contract_body [16311,21657]" at="26"/>
  <insert-tree tree="function_definition [20167,20353]" parent="contract_body [16311,21657]" at="27"/>
  <insert-tree tree="function_definition [20361,20573]" parent="contract_body [16311,21657]" at="28"/>
  <insert-tree tree="function_definition [20581,20823]" parent="contract_body [16311,21657]" at="29"/>
  <insert-tree tree="function_definition [20831,21078]" parent="contract_body [16311,21657]" at="30"/>
  <move-tree tree="function_definition [11964,12187]" parent="contract_body [16311,21657]" at="31"/>
  <insert-tree tree="function_definition [21476,21654]" parent="contract_body [16311,21657]" at="32"/>
  <insert-node tree="}: } [21656,21657]" parent="contract_body [16311,21657]" at="33"/>
  <insert-node tree="{: { [21807,21808]" parent="contract_body [21807,22557]" at="0"/>
  <insert-tree tree="using_directive [21814,21841]" parent="contract_body [21807,22557]" at="1"/>
  <insert-node tree="comment: /// triggered when relay of deposit from HomeBridge is complete [21847,21910]" parent="contract_body [21807,22557]" at="2"/>
  <insert-node tree="event_definition [21916,21993]" parent="contract_body [21807,22557]" at="3"/>
  <insert-node tree="function_definition [22001,22068]" parent="contract_body [21807,22557]" at="4"/>
  <insert-tree tree="function_definition [22076,22241]" parent="contract_body [21807,22557]" at="5"/>
  <insert-tree tree="function_definition [22249,22411]" parent="contract_body [21807,22557]" at="6"/>
  <insert-node tree="function_definition [22419,22485]" parent="contract_body [21807,22557]" at="7"/>
  <insert-node tree="function_definition [22493,22554]" parent="contract_body [21807,22557]" at="8"/>
  <insert-node tree="}: } [22556,22557]" parent="contract_body [21807,22557]" at="9"/>
  <insert-node tree="{: { [22693,22694]" parent="contract_body [22693,23129]" at="0"/>
  <insert-tree tree="function_definition [22700,22877]" parent="contract_body [22693,23129]" at="1"/>
  <insert-node tree="modifier_definition [22885,22993]" parent="contract_body [22693,23129]" at="2"/>
  <insert-tree tree="function_definition [23001,23126]" parent="contract_body [22693,23129]" at="3"/>
  <insert-node tree="}: } [23128,23129]" parent="contract_body [22693,23129]" at="4"/>
  <insert-node tree="{: { [23227,23228]" parent="contract_body [23227,23324]" at="0"/>
  <insert-node tree="function_definition [23232,23321]" parent="contract_body [23227,23324]" at="1"/>
  <insert-node tree="}: } [23323,23324]" parent="contract_body [23227,23324]" at="2"/>
  <insert-node tree="{: { [23551,23552]" parent="contract_body [23551,27230]" at="0"/>
  <insert-node tree="event_definition [23560,23637]" parent="contract_body [23551,27230]" at="1"/>
  <insert-node tree="function_definition [23645,25008]" parent="contract_body [23551,27230]" at="2"/>
  <insert-node tree="function_definition [25016,25155]" parent="contract_body [23551,27230]" at="3"/>
  <insert-node tree="function_definition [25163,25339]" parent="contract_body [23551,27230]" at="4"/>
  <insert-tree tree="function_definition [25347,25488]" parent="contract_body [23551,27230]" at="5"/>
  <insert-node tree="function_definition [25496,26331]" parent="contract_body [23551,27230]" at="6"/>
  <insert-tree tree="function_definition [26339,26594]" parent="contract_body [23551,27230]" at="7"/>
  <insert-node tree="function_definition [26602,26796]" parent="contract_body [23551,27230]" at="8"/>
  <insert-tree tree="function_definition [26804,26933]" parent="contract_body [23551,27230]" at="9"/>
  <insert-node tree="function_definition [26941,27131]" parent="contract_body [23551,27230]" at="10"/>
  <insert-tree tree="function_definition [27139,27227]" parent="contract_body [23551,27230]" at="11"/>
  <insert-node tree="}: } [27229,27230]" parent="contract_body [23551,27230]" at="12"/>
  <update-node tree="identifier: implementation [1418,1432]" label="owner"/>
  <insert-node tree="function: function [3950,3958]" parent="function_definition [3950,4449]" at="0"/>
  <insert-node tree="identifier: parseMessage [3959,3971]" parent="function_definition [3950,4449]" at="1"/>
  <insert-node tree="(: ( [3971,3972]" parent="function_definition [3950,4449]" at="2"/>
  <insert-tree tree="parameter [3972,3985]" parent="function_definition [3950,4449]" at="3"/>
  <insert-node tree="): ) [3985,3986]" parent="function_definition [3950,4449]" at="4"/>
  <insert-tree tree="visibility [3996,4004]" parent="function_definition [3950,4449]" at="5"/>
  <insert-tree tree="state_mutability [4014,4018]" parent="function_definition [3950,4449]" at="6"/>
  <insert-tree tree="return_type_definition [4028,4111]" parent="function_definition [3950,4449]" at="7"/>
  <insert-node tree="function_body [4117,4449]" parent="function_definition [3950,4449]" at="8"/>
  <insert-node tree="function: function [4457,4465]" parent="function_definition [4457,5330]" at="0"/>
  <insert-node tree="identifier: parseNewSetMessage [4466,4484]" parent="function_definition [4457,5330]" at="1"/>
  <insert-node tree="(: ( [4484,4485]" parent="function_definition [4457,5330]" at="2"/>
  <insert-tree tree="parameter [4485,4498]" parent="function_definition [4457,5330]" at="3"/>
  <insert-node tree="): ) [4498,4499]" parent="function_definition [4457,5330]" at="4"/>
  <insert-tree tree="visibility [4509,4517]" parent="function_definition [4457,5330]" at="5"/>
  <insert-tree tree="return_type_definition [4527,4600]" parent="function_definition [4457,5330]" at="6"/>
  <insert-node tree="function_body [4606,5330]" parent="function_definition [4457,5330]" at="7"/>
  <insert-node tree="function: function [6563,6571]" parent="function_definition [6563,8460]" at="0"/>
  <insert-node tree="identifier: hashMessageOfUnknownLength [6572,6598]" parent="function_definition [6563,8460]" at="1"/>
  <insert-node tree="(: ( [6598,6599]" parent="function_definition [6563,8460]" at="2"/>
  <insert-tree tree="parameter [6599,6612]" parent="function_definition [6563,8460]" at="3"/>
  <insert-node tree="): ) [6612,6613]" parent="function_definition [6563,8460]" at="4"/>
  <insert-tree tree="visibility [6614,6622]" parent="function_definition [6563,8460]" at="5"/>
  <insert-tree tree="state_mutability [6623,6627]" parent="function_definition [6563,8460]" at="6"/>
  <insert-tree tree="return_type_definition [6628,6645]" parent="function_definition [6563,8460]" at="7"/>
  <insert-node tree="function_body [6646,8460]" parent="function_definition [6563,8460]" at="8"/>
  <insert-node tree="function: function [11187,11195]" parent="function_definition [11187,12005]" at="0"/>
  <insert-node tree="identifier: recover [11196,11203]" parent="function_definition [11187,12005]" at="1"/>
  <insert-node tree="(: ( [11203,11204]" parent="function_definition [11187,12005]" at="2"/>
  <insert-tree tree="parameter [11204,11216]" parent="function_definition [11187,12005]" at="3"/>
  <insert-node tree=",: , [11216,11217]" parent="function_definition [11187,12005]" at="4"/>
  <insert-tree tree="parameter [11218,11227]" parent="function_definition [11187,12005]" at="5"/>
  <insert-node tree="): ) [11227,11228]" parent="function_definition [11187,12005]" at="6"/>
  <insert-tree tree="visibility [11229,11237]" parent="function_definition [11187,12005]" at="7"/>
  <insert-tree tree="state_mutability [11238,11242]" parent="function_definition [11187,12005]" at="8"/>
  <insert-tree tree="return_type_definition [11243,11260]" parent="function_definition [11187,12005]" at="9"/>
  <insert-node tree="function_body [11261,12005]" parent="function_definition [11187,12005]" at="10"/>
  <update-node tree="identifier: implementation [7121,7135]" label="proxyOwner"/>
  <update-node tree="identifier: upgradeabilityOwner [9025,9044]" label="upgradeabilityAdmin"/>
  <update-node tree="identifier: ProxyOwnershipTransferred [9886,9911]" label="EternalOwnershipTransferred"/>
  <update-node tree="identifier: onlyProxyOwner [10243,10257]" label="onlyOwner"/>
  <update-node tree="identifier: proxyOwner [10455,10465]" label="owner"/>
  <update-node tree="identifier: transferProxyOwnership [10728,10750]" label="transferOwnership"/>
  <update-node tree="identifier: upgradeTo [11252,11261]" label="setOwner"/>
  <insert-tree tree="parameter [15061,15077]" parent="function_definition [15043,15232]" at="3"/>
  <move-tree tree="visibility [9254,9262]" parent="function_definition [15043,15232]" at="8"/>
  <insert-node tree="using: using [16318,16323]" parent="using_directive [16318,16345]" at="0"/>
  <insert-tree tree="type_alias [16324,16332]" parent="using_directive [16318,16345]" at="1"/>
  <insert-node tree="for: for [16333,16336]" parent="using_directive [16318,16345]" at="2"/>
  <move-tree tree="type_name [6621,6628]" parent="using_directive [16318,16345]" at="3"/>
  <update-node tree="identifier: Upgraded [7984,7992]" label="GasPriceChanged"/>
  <insert-node tree="function: function [16730,16738]" parent="function_definition [16730,16945]" at="0"/>
  <insert-node tree="identifier: setGasPrice [16739,16750]" parent="function_definition [16730,16945]" at="1"/>
  <insert-node tree="(: ( [16750,16751]" parent="function_definition [16730,16945]" at="2"/>
  <move-tree tree="parameter [8313,8328]" parent="function_definition [16730,16945]" at="3"/>
  <insert-node tree="): ) [16768,16769]" parent="function_definition [16730,16945]" at="4"/>
  <insert-tree tree="visibility [16770,16776]" parent="function_definition [16730,16945]" at="5"/>
  <insert-tree tree="modifier_invocation [16777,16786]" parent="function_definition [16730,16945]" at="6"/>
  <insert-tree tree="function_body [16787,16945]" parent="function_definition [16730,16945]" at="7"/>
  <update-node tree="identifier: version [6900,6907]" label="gasPrice"/>
  <insert-node tree="function: function [17724,17732]" parent="function_definition [17724,17886]" at="0"/>
  <insert-node tree="identifier: setTotalSpentPerDay [17733,17752]" parent="function_definition [17724,17886]" at="1"/>
  <insert-node tree="(: ( [17752,17753]" parent="function_definition [17724,17886]" at="2"/>
  <move-tree tree="parameter [11262,11277]" parent="function_definition [17724,17886]" at="3"/>
  <insert-node tree=",: , [17765,17766]" parent="function_definition [17724,17886]" at="4"/>
  <insert-tree tree="parameter [17767,17781]" parent="function_definition [17724,17886]" at="5"/>
  <insert-node tree="): ) [17781,17782]" parent="function_definition [17724,17886]" at="6"/>
  <move-tree tree="visibility [8354,8362]" parent="function_definition [17724,17886]" at="7"/>
  <insert-tree tree="function_body [17792,17886]" parent="function_definition [17724,17886]" at="8"/>
  <insert-node tree="function: function [17894,17902]" parent="function_definition [17894,18055]" at="0"/>
  <insert-node tree="identifier: totalSpentPerDay [17903,17919]" parent="function_definition [17894,18055]" at="1"/>
  <insert-node tree="(: ( [17919,17920]" parent="function_definition [17894,18055]" at="2"/>
  <insert-tree tree="parameter [17920,17932]" parent="function_definition [17894,18055]" at="3"/>
  <insert-node tree="): ) [17932,17933]" parent="function_definition [17894,18055]" at="4"/>
  <move-tree tree="visibility [11303,11309]" parent="function_definition [17894,18055]" at="5"/>
  <insert-tree tree="state_mutability [17941,17945]" parent="function_definition [17894,18055]" at="6"/>
  <insert-tree tree="return_type_definition [17946,17962]" parent="function_definition [17894,18055]" at="7"/>
  <insert-tree tree="function_body [17963,18055]" parent="function_definition [17894,18055]" at="8"/>
  <insert-node tree="function: function [18063,18071]" parent="function_definition [18063,18231]" at="0"/>
  <insert-node tree="identifier: setTotalExecutedPerDay [18072,18094]" parent="function_definition [18063,18231]" at="1"/>
  <insert-node tree="(: ( [18094,18095]" parent="function_definition [18063,18231]" at="2"/>
  <move-tree tree="parameter [11990,12005]" parent="function_definition [18063,18231]" at="3"/>
  <insert-node tree=",: , [18107,18108]" parent="function_definition [18063,18231]" at="4"/>
  <insert-tree tree="parameter [18109,18123]" parent="function_definition [18063,18231]" at="5"/>
  <insert-node tree="): ) [18123,18124]" parent="function_definition [18063,18231]" at="6"/>
  <insert-tree tree="visibility [18125,18133]" parent="function_definition [18063,18231]" at="7"/>
  <insert-tree tree="function_body [18134,18231]" parent="function_definition [18063,18231]" at="8"/>
  <insert-node tree="function: function [19946,19954]" parent="function_definition [19946,20159]" at="0"/>
  <insert-node tree="identifier: setExecutionMaxPerTx [19955,19975]" parent="function_definition [19946,20159]" at="1"/>
  <insert-node tree="(: ( [19975,19976]" parent="function_definition [19946,20159]" at="2"/>
  <insert-tree tree="parameter [19976,19993]" parent="function_definition [19946,20159]" at="3"/>
  <insert-node tree="): ) [19993,19994]" parent="function_definition [19946,20159]" at="4"/>
  <move-tree tree="visibility [1528,1536]" parent="function_definition [19946,20159]" at="5"/>
  <insert-tree tree="modifier_invocation [20004,20013]" parent="function_definition [19946,20159]" at="6"/>
  <insert-tree tree="function_body [20014,20159]" parent="function_definition [19946,20159]" at="7"/>
  <update-node tree="identifier: upgradeToAndCall [11973,11989]" label="claimTokens"/>
  <move-tree tree="parameter [7244,7270]" parent="function_definition [21086,21466]" at="3"/>
  <move-tree tree="parameter [1500,1526]" parent="function_definition [21086,21466]" at="5"/>
  <insert-node tree="event: event [21916,21921]" parent="event_definition [21916,21993]" at="0"/>
  <insert-node tree="identifier: RelayedMessage [21922,21936]" parent="event_definition [21916,21993]" at="1"/>
  <insert-node tree="(: ( [21936,21937]" parent="event_definition [21916,21993]" at="2"/>
  <move-tree tree="event_paramater [8010,8040]" parent="event_definition [21916,21993]" at="3"/>
  <insert-node tree=",: , [21954,21955]" parent="event_definition [21916,21993]" at="4"/>
  <insert-tree tree="event_paramater [21956,21966]" parent="event_definition [21916,21993]" at="5"/>
  <insert-node tree=",: , [21966,21967]" parent="event_definition [21916,21993]" at="6"/>
  <insert-tree tree="event_paramater [21968,21991]" parent="event_definition [21916,21993]" at="7"/>
  <insert-node tree="): ) [21991,21992]" parent="event_definition [21916,21993]" at="8"/>
  <insert-node tree="function: function [22001,22009]" parent="function_definition [22001,22068]" at="0"/>
  <insert-node tree="identifier: onExecuteMessage [22010,22026]" parent="function_definition [22001,22068]" at="1"/>
  <insert-node tree="(: ( [22026,22027]" parent="function_definition [22001,22068]" at="2"/>
  <move-tree tree="parameter [12007,12029]" parent="function_definition [22001,22068]" at="3"/>
  <insert-node tree=",: , [22034,22035]" parent="function_definition [22001,22068]" at="4"/>
  <insert-tree tree="parameter [22036,22043]" parent="function_definition [22001,22068]" at="5"/>
  <insert-node tree="): ) [22043,22044]" parent="function_definition [22001,22068]" at="6"/>
  <move-tree tree="visibility [6629,6637]" parent="function_definition [22001,22068]" at="7"/>
  <insert-tree tree="return_type_definition [22054,22067]" parent="function_definition [22001,22068]" at="8"/>
  <insert-node tree="function: function [22419,22427]" parent="function_definition [22419,22485]" at="0"/>
  <insert-node tree="identifier: messageWithinLimits [22428,22447]" parent="function_definition [22419,22485]" at="1"/>
  <insert-node tree="(: ( [22447,22448]" parent="function_definition [22419,22485]" at="2"/>
  <insert-tree tree="parameter [22448,22455]" parent="function_definition [22419,22485]" at="3"/>
  <insert-node tree="): ) [22455,22456]" parent="function_definition [22419,22485]" at="4"/>
  <move-tree tree="visibility [6709,6717]" parent="function_definition [22419,22485]" at="5"/>
  <insert-tree tree="state_mutability [22466,22470]" parent="function_definition [22419,22485]" at="6"/>
  <insert-tree tree="return_type_definition [22471,22484]" parent="function_definition [22419,22485]" at="7"/>
  <insert-node tree="function: function [22493,22501]" parent="function_definition [22493,22554]" at="0"/>
  <insert-node tree="identifier: onFailedMessage [22502,22517]" parent="function_definition [22493,22554]" at="1"/>
  <insert-node tree="(: ( [22517,22518]" parent="function_definition [22493,22554]" at="2"/>
  <move-tree tree="parameter [11279,11301]" parent="function_definition [22493,22554]" at="3"/>
  <insert-node tree=",: , [22525,22526]" parent="function_definition [22493,22554]" at="4"/>
  <insert-tree tree="parameter [22527,22534]" parent="function_definition [22493,22554]" at="5"/>
  <insert-node tree=",: , [22534,22535]" parent="function_definition [22493,22554]" at="6"/>
  <insert-tree tree="parameter [22536,22543]" parent="function_definition [22493,22554]" at="7"/>
  <insert-node tree="): ) [22543,22544]" parent="function_definition [22493,22554]" at="8"/>
  <insert-tree tree="visibility [22545,22553]" parent="function_definition [22493,22554]" at="9"/>
  <insert-node tree="modifier: modifier [22885,22893]" parent="modifier_definition [22885,22993]" at="0"/>
  <insert-node tree="identifier: onlyValidator [22894,22907]" parent="modifier_definition [22885,22993]" at="1"/>
  <insert-node tree="(: ( [22907,22908]" parent="modifier_definition [22885,22993]" at="2"/>
  <insert-node tree="): ) [22908,22909]" parent="modifier_definition [22885,22993]" at="3"/>
  <move-tree tree="function_body [10090,10143]" parent="modifier_definition [22885,22993]" at="4"/>
  <insert-node tree="function: function [23232,23240]" parent="function_definition [23232,23321]" at="0"/>
  <insert-node tree="identifier: onTokenTransfer [23241,23256]" parent="function_definition [23232,23321]" at="1"/>
  <insert-node tree="(: ( [23256,23257]" parent="function_definition [23232,23321]" at="2"/>
  <move-tree tree="parameter [9222,9252]" parent="function_definition [23232,23321]" at="3"/>
  <insert-node tree=",: , [23270,23271]" parent="function_definition [23232,23321]" at="4"/>
  <insert-tree tree="parameter [23272,23283]" parent="function_definition [23232,23321]" at="5"/>
  <insert-node tree=",: , [23283,23284]" parent="function_definition [23232,23321]" at="6"/>
  <insert-tree tree="parameter [23285,23296]" parent="function_definition [23232,23321]" at="7"/>
  <insert-node tree="): ) [23296,23297]" parent="function_definition [23232,23321]" at="8"/>
  <insert-tree tree="visibility [23298,23306]" parent="function_definition [23232,23321]" at="9"/>
  <insert-tree tree="return_type_definition [23307,23320]" parent="function_definition [23232,23321]" at="10"/>
  <insert-node tree="event: event [23560,23565]" parent="event_definition [23560,23637]" at="0"/>
  <insert-node tree="identifier: RelayedMessage [23566,23580]" parent="event_definition [23560,23637]" at="1"/>
  <insert-node tree="(: ( [23580,23581]" parent="event_definition [23560,23637]" at="2"/>
  <insert-node tree="event_paramater [23581,23598]" parent="event_definition [23560,23637]" at="3"/>
  <insert-node tree=",: , [23598,23599]" parent="event_definition [23560,23637]" at="4"/>
  <insert-tree tree="event_paramater [23600,23610]" parent="event_definition [23560,23637]" at="5"/>
  <insert-node tree=",: , [23610,23611]" parent="event_definition [23560,23637]" at="6"/>
  <insert-tree tree="event_paramater [23612,23635]" parent="event_definition [23560,23637]" at="7"/>
  <insert-node tree="): ) [23635,23636]" parent="event_definition [23560,23637]" at="8"/>
  <insert-node tree="function: function [23645,23653]" parent="function_definition [23645,25008]" at="0"/>
  <insert-node tree="identifier: initialize [23654,23664]" parent="function_definition [23645,25008]" at="1"/>
  <insert-node tree="(: ( [23664,23665]" parent="function_definition [23645,25008]" at="2"/>
  <insert-node tree="parameter [23675,23701]" parent="function_definition [23645,25008]" at="3"/>
  <insert-node tree=",: , [23701,23702]" parent="function_definition [23645,25008]" at="4"/>
  <insert-tree tree="parameter [23712,23731]" parent="function_definition [23645,25008]" at="5"/>
  <insert-node tree=",: , [23731,23732]" parent="function_definition [23645,25008]" at="6"/>
  <insert-tree tree="parameter [23742,23777]" parent="function_definition [23645,25008]" at="7"/>
  <insert-node tree=",: , [23777,23778]" parent="function_definition [23645,25008]" at="8"/>
  <insert-tree tree="parameter [23788,23805]" parent="function_definition [23645,25008]" at="9"/>
  <insert-node tree=",: , [23805,23806]" parent="function_definition [23645,25008]" at="10"/>
  <insert-tree tree="parameter [23816,23833]" parent="function_definition [23645,25008]" at="11"/>
  <insert-node tree=",: , [23833,23834]" parent="function_definition [23645,25008]" at="12"/>
  <insert-tree tree="parameter [23844,23867]" parent="function_definition [23645,25008]" at="13"/>
  <insert-node tree=",: , [23867,23868]" parent="function_definition [23645,25008]" at="14"/>
  <insert-tree tree="parameter [23878,23899]" parent="function_definition [23645,25008]" at="15"/>
  <insert-node tree=",: , [23899,23900]" parent="function_definition [23645,25008]" at="16"/>
  <insert-tree tree="parameter [23910,23924]" parent="function_definition [23645,25008]" at="17"/>
  <insert-node tree="): ) [23930,23931]" parent="function_definition [23645,25008]" at="18"/>
  <insert-tree tree="visibility [23932,23938]" parent="function_definition [23645,25008]" at="19"/>
  <insert-tree tree="return_type_definition [23939,23952]" parent="function_definition [23645,25008]" at="20"/>
  <insert-tree tree="function_body [23953,25008]" parent="function_definition [23645,25008]" at="21"/>
  <insert-node tree="function: function [25016,25024]" parent="function_definition [25016,25155]" at="0"/>
  <insert-node tree="identifier: getBridgeMode [25025,25038]" parent="function_definition [25016,25155]" at="1"/>
  <insert-node tree="(: ( [25038,25039]" parent="function_definition [25016,25155]" at="2"/>
  <insert-node tree="): ) [25039,25040]" parent="function_definition [25016,25155]" at="3"/>
  <move-tree tree="visibility [1742,1748]" parent="function_definition [25016,25155]" at="4"/>
  <insert-tree tree="state_mutability [25048,25052]" parent="function_definition [25016,25155]" at="5"/>
  <insert-node tree="return_type_definition [25053,25074]" parent="function_definition [25016,25155]" at="6"/>
  <insert-tree tree="function_body [25075,25155]" parent="function_definition [25016,25155]" at="7"/>
  <insert-node tree="function: function [25163,25171]" parent="function_definition [25163,25339]" at="0"/>
  <insert-node tree="identifier: claimTokens [25172,25183]" parent="function_definition [25163,25339]" at="1"/>
  <insert-node tree="(: ( [25183,25184]" parent="function_definition [25163,25339]" at="2"/>
  <insert-tree tree="parameter [25184,25198]" parent="function_definition [25163,25339]" at="3"/>
  <insert-node tree=",: , [25198,25199]" parent="function_definition [25163,25339]" at="4"/>
  <move-tree tree="parameter [8330,8352]" parent="function_definition [25163,25339]" at="5"/>
  <insert-node tree="): ) [25211,25212]" parent="function_definition [25163,25339]" at="6"/>
  <insert-tree tree="visibility [25213,25219]" parent="function_definition [25163,25339]" at="7"/>
  <insert-tree tree="modifier_invocation [25220,25238]" parent="function_definition [25163,25339]" at="8"/>
  <insert-tree tree="function_body [25239,25339]" parent="function_definition [25163,25339]" at="9"/>
  <insert-node tree="function: function [25496,25504]" parent="function_definition [25496,26331]" at="0"/>
  <insert-node tree="identifier: executeSignatures [25505,25522]" parent="function_definition [25496,26331]" at="1"/>
  <insert-node tree="(: ( [25522,25523]" parent="function_definition [25496,26331]" at="2"/>
  <insert-tree tree="parameter [25523,25533]" parent="function_definition [25496,26331]" at="3"/>
  <insert-node tree=",: , [25533,25534]" parent="function_definition [25496,26331]" at="4"/>
  <insert-tree tree="parameter [25535,25547]" parent="function_definition [25496,26331]" at="5"/>
  <insert-node tree=",: , [25547,25548]" parent="function_definition [25496,26331]" at="6"/>
  <insert-tree tree="parameter [25549,25561]" parent="function_definition [25496,26331]" at="7"/>
  <insert-node tree=",: , [25561,25562]" parent="function_definition [25496,26331]" at="8"/>
  <insert-tree tree="parameter [25563,25576]" parent="function_definition [25496,26331]" at="9"/>
  <insert-node tree="): ) [25576,25577]" parent="function_definition [25496,26331]" at="10"/>
  <insert-tree tree="visibility [25578,25586]" parent="function_definition [25496,26331]" at="11"/>
  <insert-node tree="function_body [25587,26331]" parent="function_definition [25496,26331]" at="12"/>
  <insert-node tree="function: function [26602,26610]" parent="function_definition [26602,26796]" at="0"/>
  <insert-node tree="identifier: setErc20token [26611,26624]" parent="function_definition [26602,26796]" at="1"/>
  <insert-node tree="(: ( [26624,26625]" parent="function_definition [26602,26796]" at="2"/>
  <insert-tree tree="parameter [26625,26639]" parent="function_definition [26602,26796]" at="3"/>
  <insert-node tree="): ) [26639,26640]" parent="function_definition [26602,26796]" at="4"/>
  <move-tree tree="visibility [8879,8886]" parent="function_definition [26602,26796]" at="5"/>
  <insert-tree tree="function_body [26649,26796]" parent="function_definition [26602,26796]" at="6"/>
  <insert-node tree="function: function [26941,26949]" parent="function_definition [26941,27131]" at="0"/>
  <insert-node tree="identifier: onTokenTransfer [26950,26965]" parent="function_definition [26941,27131]" at="1"/>
  <insert-node tree="(: ( [26965,26966]" parent="function_definition [26941,27131]" at="2"/>
  <insert-tree tree="parameter [26966,26973]" parent="function_definition [26941,27131]" at="3"/>
  <insert-node tree="comment: /*_from*/ [26974,26983]" parent="function_definition [26941,27131]" at="4"/>
  <insert-node tree=",: , [26983,26984]" parent="function_definition [26941,27131]" at="5"/>
  <insert-tree tree="parameter [26985,26992]" parent="function_definition [26941,27131]" at="6"/>
  <insert-node tree="comment: /*_value*/ [26993,27003]" parent="function_definition [26941,27131]" at="7"/>
  <insert-node tree=",: , [27003,27004]" parent="function_definition [26941,27131]" at="8"/>
  <move-tree tree="parameter [12031,12041]" parent="function_definition [26941,27131]" at="9"/>
  <insert-node tree="comment: /*_data*/ [27011,27020]" parent="function_definition [26941,27131]" at="10"/>
  <insert-node tree="): ) [27020,27021]" parent="function_definition [26941,27131]" at="11"/>
  <move-tree tree="visibility [7272,7280]" parent="function_definition [26941,27131]" at="12"/>
  <insert-tree tree="return_type_definition [27031,27044]" parent="function_definition [26941,27131]" at="13"/>
  <insert-node tree="function_body [27045,27131]" parent="function_definition [26941,27131]" at="14"/>
  <insert-node tree="{: { [4117,4118]" parent="function_body [4117,4449]" at="0"/>
  <insert-tree tree="expression_statement [4128,4161]" parent="function_body [4117,4449]" at="1"/>
  <insert-node tree="assembly_statement [4171,4442]" parent="function_body [4117,4449]" at="2"/>
  <insert-node tree="}: } [4448,4449]" parent="function_body [4117,4449]" at="3"/>
  <insert-node tree="{: { [4606,4607]" parent="function_body [4606,5330]" at="0"/>
  <insert-tree tree="variable_declaration_statement [4617,4635]" parent="function_body [4606,5330]" at="1"/>
  <insert-tree tree="variable_declaration_statement [4645,4662]" parent="function_body [4606,5330]" at="2"/>
  <move-tree tree="variable_declaration_statement [1760,1793]" parent="function_body [4606,5330]" at="3"/>
  <insert-node tree="assembly_statement [4703,4896]" parent="function_body [4606,5330]" at="4"/>
  <insert-tree tree="variable_declaration_statement [4906,4961]" parent="function_body [4606,5330]" at="5"/>
  <insert-tree tree="expression_statement [4971,5008]" parent="function_body [4606,5330]" at="6"/>
  <insert-tree tree="variable_declaration_statement [5018,5032]" parent="function_body [4606,5330]" at="7"/>
  <insert-tree tree="while_statement [5042,5272]" parent="function_body [4606,5330]" at="8"/>
  <insert-tree tree="return_statement [5282,5323]" parent="function_body [4606,5330]" at="9"/>
  <insert-node tree="}: } [5329,5330]" parent="function_body [4606,5330]" at="10"/>
  <insert-node tree="{: { [6646,6647]" parent="function_body [6646,8460]" at="0"/>
  <insert-tree tree="variable_declaration_statement [6657,6712]" parent="function_body [6646,8460]" at="1"/>
  <insert-tree tree="variable_declaration_statement [6722,6743]" parent="function_body [6646,8460]" at="2"/>
  <insert-tree tree="variable_declaration_statement [6753,6768]" parent="function_body [6646,8460]" at="3"/>
  <insert-tree tree="assembly_statement [6778,7005]" parent="function_body [6646,8460]" at="4"/>
  <insert-tree tree="variable_declaration_statement [7015,7040]" parent="function_body [6646,8460]" at="5"/>
  <insert-node tree="comment: // The divisor to get the next left-most message length digit [7050,7111]" parent="function_body [6646,8460]" at="6"/>
  <insert-tree tree="variable_declaration_statement [7121,7146]" parent="function_body [6646,8460]" at="7"/>
  <insert-node tree="comment: // Move one digit of the message length to the right at a time [7156,7218]" parent="function_body [6646,8460]" at="8"/>
  <insert-tree tree="while_statement [7228,8070]" parent="function_body [6646,8460]" at="9"/>
  <insert-node tree="comment: // The null string requires exactly 1 zero (unskip 1 leading 0) [8080,8143]" parent="function_body [6646,8460]" at="10"/>
  <insert-tree tree="if_statement [8153,8283]" parent="function_body [6646,8460]" at="11"/>
  <insert-node tree="comment: // Truncate the tailing zeros from the prefix [8293,8338]" parent="function_body [6646,8460]" at="12"/>
  <insert-node tree="assembly_statement [8348,8409]" parent="function_body [6646,8460]" at="13"/>
  <insert-tree tree="return_statement [8419,8453]" parent="function_body [6646,8460]" at="14"/>
  <insert-node tree="}: } [8459,8460]" parent="function_body [6646,8460]" at="15"/>
  <insert-node tree="{: { [11261,11262]" parent="function_body [11261,12005]" at="0"/>
  <insert-tree tree="variable_declaration_statement [11272,11282]" parent="function_body [11261,12005]" at="1"/>
  <insert-tree tree="variable_declaration_statement [11292,11302]" parent="function_body [11261,12005]" at="2"/>
  <insert-tree tree="variable_declaration_statement [11312,11320]" parent="function_body [11261,12005]" at="3"/>
  <insert-node tree="comment: // Check the signature length [11332,11361]" parent="function_body [11261,12005]" at="4"/>
  <insert-tree tree="if_statement [11371,11437]" parent="function_body [11261,12005]" at="5"/>
  <insert-node tree="comment: // Divide the signature in r, s and v variables [11449,11496]" parent="function_body [11261,12005]" at="6"/>
  <insert-node tree="assembly_statement [11506,11644]" parent="function_body [11261,12005]" at="7"/>
  <insert-node tree="comment: // Version of signature should be 27 or 28, but 0 and 1 are also possible versions [11656,11738]" parent="function_body [11261,12005]" at="8"/>
  <insert-tree tree="if_statement [11748,11792]" parent="function_body [11261,12005]" at="9"/>
  <insert-node tree="comment: // If the version is correct return the signer address [11804,11858]" parent="function_body [11261,12005]" at="10"/>
  <insert-tree tree="if_statement [11868,11998]" parent="function_body [11261,12005]" at="11"/>
  <insert-node tree="}: } [12004,12005]" parent="function_body [11261,12005]" at="12"/>
  <update-node tree="identifier: onlyProxyOwner [10776,10790]" label="onlyOwner"/>
  <insert-node tree="emit_statement [15099,15151]" parent="function_body [15088,15232]" at="1"/>
  <update-node tree="identifier: version [8001,8008]" label="gasPrice"/>
  <update-node tree="identifier: version [8321,8328]" label="_gasPrice"/>
  <update-node tree="identifier: version [11270,11277]" label="_day"/>
  <update-node tree="identifier: version [11998,12005]" label="_day"/>
  <update-node tree="identifier: _newImplementation [7252,7270]" label="_token"/>
  <update-node tree="identifier: _newImplementation [1508,1526]" label="_to"/>
  <update-node tree="identifier: onlyProxyOwner [12058,12072]" label="onlyIfOwnerOfProxy"/>
  <move-tree tree="expression_statement [1803,1832]" parent="function_body [21162,21466]" at="1"/>
  <insert-node tree="if_statement [21210,21319]" parent="function_body [21162,21466]" at="2"/>
  <insert-tree tree="variable_declaration_statement [21331,21361]" parent="function_body [21162,21466]" at="3"/>
  <insert-tree tree="variable_declaration_statement [21371,21411]" parent="function_body [21162,21466]" at="4"/>
  <update-node tree="identifier: implementation [8026,8040]" label="recipient"/>
  <insert-tree tree="expression_statement [22984,22986]" parent="function_body [22910,22993]" at="2"/>
  <update-node tree="identifier: newUpgradeabilityOwner [9230,9252]" label="_from"/>
  <move-tree tree="type_name [8871,8878]" parent="event_paramater [23581,23598]" at="0"/>
  <insert-node tree="identifier: recipient [23589,23598]" parent="event_paramater [23581,23598]" at="1"/>
  <move-tree tree="type_name [6701,6708]" parent="parameter [23675,23701]" at="0"/>
  <insert-node tree="identifier: _validatorContract [23683,23701]" parent="parameter [23675,23701]" at="1"/>
  <insert-node tree="returns: returns [25053,25060]" parent="return_type_definition [25053,25074]" at="0"/>
  <insert-node tree="(: ( [25060,25061]" parent="return_type_definition [25053,25074]" at="1"/>
  <insert-node tree="parameter [25061,25073]" parent="return_type_definition [25053,25074]" at="2"/>
  <insert-node tree="): ) [25073,25074]" parent="return_type_definition [25053,25074]" at="3"/>
  <update-node tree="identifier: implementation [8338,8352]" label="_to"/>
  <insert-node tree="{: { [25587,25588]" parent="function_body [25587,26331]" at="0"/>
  <insert-tree tree="expression_statement [25598,25639]" parent="function_body [25587,26331]" at="1"/>
  <insert-tree tree="expression_statement [25649,25724]" parent="function_body [25587,26331]" at="2"/>
  <move-tree tree="variable_declaration_statement [1844,1863]" parent="function_body [25587,26331]" at="3"/>
  <insert-tree tree="variable_declaration_statement [25762,25777]" parent="function_body [25587,26331]" at="4"/>
  <insert-tree tree="variable_declaration_statement [25787,25802]" parent="function_body [25587,26331]" at="5"/>
  <move-tree tree="variable_declaration_statement [1894,1930]" parent="function_body [25587,26331]" at="6"/>
  <insert-tree tree="expression_statement [25846,25923]" parent="function_body [25587,26331]" at="7"/>
  <insert-node tree="if_statement [25933,26324]" parent="function_body [25587,26331]" at="8"/>
  <insert-node tree="}: } [26330,26331]" parent="function_body [25587,26331]" at="9"/>
  <insert-node tree="{: { [27045,27046]" parent="function_body [27045,27131]" at="0"/>
  <insert-node tree="expression_statement [27056,27101]" parent="function_body [27045,27131]" at="1"/>
  <insert-tree tree="return_statement [27111,27124]" parent="function_body [27045,27131]" at="2"/>
  <insert-node tree="}: } [27130,27131]" parent="function_body [27045,27131]" at="3"/>
  <insert-node tree="assembly: assembly [4171,4179]" parent="assembly_statement [4171,4442]" at="0"/>
  <insert-node tree="{: { [4180,4181]" parent="assembly_statement [4171,4442]" at="1"/>
  <insert-tree tree="yul_assignment [4195,4280]" parent="assembly_statement [4171,4442]" at="2"/>
  <insert-node tree="yul_assignment [4294,4327]" parent="assembly_statement [4171,4442]" at="3"/>
  <insert-node tree="yul_assignment [4341,4374]" parent="assembly_statement [4171,4442]" at="4"/>
  <insert-node tree="yul_assignment [4388,4431]" parent="assembly_statement [4171,4442]" at="5"/>
  <insert-node tree="}: } [4441,4442]" parent="assembly_statement [4171,4442]" at="6"/>
  <insert-node tree="assembly: assembly [4703,4711]" parent="assembly_statement [4703,4896]" at="0"/>
  <insert-node tree="{: { [4712,4713]" parent="assembly_statement [4703,4896]" at="1"/>
  <insert-tree tree="yul_assignment [4727,4754]" parent="assembly_statement [4703,4896]" at="2"/>
  <insert-tree tree="yul_assignment [4768,4801]" parent="assembly_statement [4703,4896]" at="3"/>
  <insert-node tree="yul_assignment [4815,4857]" parent="assembly_statement [4703,4896]" at="4"/>
  <insert-tree tree="yul_assignment [4871,4885]" parent="assembly_statement [4703,4896]" at="5"/>
  <insert-node tree="}: } [4895,4896]" parent="assembly_statement [4703,4896]" at="6"/>
  <insert-node tree="assembly: assembly [8348,8356]" parent="assembly_statement [8348,8409]" at="0"/>
  <insert-node tree="{: { [8357,8358]" parent="assembly_statement [8348,8409]" at="1"/>
  <insert-node tree="yul_function_call [8370,8398]" parent="assembly_statement [8348,8409]" at="2"/>
  <insert-node tree="}: } [8408,8409]" parent="assembly_statement [8348,8409]" at="3"/>
  <insert-node tree="assembly: assembly [11506,11514]" parent="assembly_statement [11506,11644]" at="0"/>
  <insert-node tree="{: { [11515,11516]" parent="assembly_statement [11506,11644]" at="1"/>
  <insert-node tree="yul_assignment [11528,11552]" parent="assembly_statement [11506,11644]" at="2"/>
  <insert-node tree="yul_assignment [11564,11588]" parent="assembly_statement [11506,11644]" at="3"/>
  <insert-tree tree="yul_assignment [11600,11633]" parent="assembly_statement [11506,11644]" at="4"/>
  <insert-node tree="}: } [11643,11644]" parent="assembly_statement [11506,11644]" at="5"/>
  <insert-tree tree="call_expression [12411,12455]" parent="return_statement [12404,12456]" at="1"/>
  <insert-tree tree="array_access [14606,14658]" parent="return_statement [14599,14659]" at="1"/>
  <insert-node tree="emit: emit [15099,15103]" parent="emit_statement [15099,15151]" at="0"/>
  <insert-node tree="identifier: EternalOwnershipTransferred [15104,15131]" parent="emit_statement [15099,15151]" at="1"/>
  <insert-node tree="(: ( [15131,15132]" parent="emit_statement [15099,15151]" at="2"/>
  <insert-tree tree="call_argument [15132,15139]" parent="emit_statement [15099,15151]" at="3"/>
  <insert-node tree=",: , [15139,15140]" parent="emit_statement [15099,15151]" at="4"/>
  <move-tree tree="call_argument [10889,10897]" parent="emit_statement [15099,15151]" at="5"/>
  <insert-node tree="): ) [15149,15150]" parent="emit_statement [15099,15151]" at="6"/>
  <insert-tree tree="assignment_expression [15161,15224]" parent="expression_statement [15161,15225]" at="0"/>
  <insert-tree tree="array_access [17020,17072]" parent="return_statement [17013,17073]" at="1"/>
  <insert-node tree="if: if [21210,21212]" parent="if_statement [21210,21319]" at="0"/>
  <insert-node tree="(: ( [21213,21214]" parent="if_statement [21210,21319]" at="1"/>
  <insert-tree tree="binary_expression [21214,21234]" parent="if_statement [21210,21319]" at="2"/>
  <insert-node tree="): ) [21234,21235]" parent="if_statement [21210,21319]" at="3"/>
  <insert-node tree="block_statement [21236,21319]" parent="if_statement [21210,21319]" at="4"/>
  <insert-node tree="call_expression [22921,22973]" parent="expression_statement [22921,22974]" at="0"/>
  <move-tree tree="type_name [1873,1879]" parent="parameter [25061,25073]" at="0"/>
  <insert-node tree="identifier: _data [25068,25073]" parent="parameter [25061,25073]" at="1"/>
  <insert-node tree="if: if [25933,25935]" parent="if_statement [25933,26324]" at="0"/>
  <insert-node tree="(: ( [25936,25937]" parent="if_statement [25933,26324]" at="1"/>
  <insert-tree tree="call_expression [25937,25964]" parent="if_statement [25933,26324]" at="2"/>
  <insert-node tree="): ) [25964,25965]" parent="if_statement [25933,26324]" at="3"/>
  <insert-node tree="block_statement [25966,26249]" parent="if_statement [25933,26324]" at="4"/>
  <insert-node tree="else: else [26250,26254]" parent="if_statement [25933,26324]" at="5"/>
  <insert-tree tree="block_statement [26255,26324]" parent="if_statement [25933,26324]" at="6"/>
  <insert-node tree="call_expression [27056,27100]" parent="expression_statement [27056,27101]" at="0"/>
  <insert-tree tree="yul_path [4294,4300]" parent="yul_assignment [4294,4327]" at="0"/>
  <insert-node tree=":=: := [4301,4303]" parent="yul_assignment [4294,4327]" at="1"/>
  <insert-node tree="yul_function_call [4304,4327]" parent="yul_assignment [4294,4327]" at="2"/>
  <insert-tree tree="yul_path [4341,4347]" parent="yul_assignment [4341,4374]" at="0"/>
  <insert-node tree=":=: := [4348,4350]" parent="yul_assignment [4341,4374]" at="1"/>
  <insert-node tree="yul_function_call [4351,4374]" parent="yul_assignment [4341,4374]" at="2"/>
  <insert-tree tree="yul_path [4388,4403]" parent="yul_assignment [4388,4431]" at="0"/>
  <insert-node tree=":=: := [4404,4406]" parent="yul_assignment [4388,4431]" at="1"/>
  <insert-node tree="yul_function_call [4407,4431]" parent="yul_assignment [4388,4431]" at="2"/>
  <update-node tree="identifier: _impl [1768,1773]" label="newSetMember"/>
  <insert-tree tree="yul_path [4815,4830]" parent="yul_assignment [4815,4857]" at="0"/>
  <insert-node tree=":=: := [4831,4833]" parent="yul_assignment [4815,4857]" at="1"/>
  <insert-node tree="yul_function_call [4834,4857]" parent="yul_assignment [4815,4857]" at="2"/>
  <move-tree tree="yul_evm_builtin [5027,5033]" parent="yul_function_call [8370,8398]" at="0"/>
  <insert-node tree="(: ( [8376,8377]" parent="yul_function_call [8370,8398]" at="1"/>
  <insert-tree tree="yul_path [8377,8383]" parent="yul_function_call [8370,8398]" at="2"/>
  <insert-node tree=",: , [8383,8384]" parent="yul_function_call [8370,8398]" at="3"/>
  <insert-tree tree="yul_path [8385,8397]" parent="yul_function_call [8370,8398]" at="4"/>
  <insert-node tree="): ) [8397,8398]" parent="yul_function_call [8370,8398]" at="5"/>
  <insert-tree tree="yul_path [11528,11529]" parent="yul_assignment [11528,11552]" at="0"/>
  <insert-node tree=":=: := [11530,11532]" parent="yul_assignment [11528,11552]" at="1"/>
  <insert-node tree="yul_function_call [11533,11552]" parent="yul_assignment [11528,11552]" at="2"/>
  <insert-tree tree="yul_path [11564,11565]" parent="yul_assignment [11564,11588]" at="0"/>
  <insert-node tree=":=: := [11566,11568]" parent="yul_assignment [11564,11588]" at="1"/>
  <insert-node tree="yul_function_call [11569,11588]" parent="yul_assignment [11564,11588]" at="2"/>
  <update-node tree="identifier: setUpgradeabilityOwner [10909,10931]" label="setOwner"/>
  <insert-node tree="{: { [21236,21237]" parent="block_statement [21236,21319]" at="0"/>
  <move-tree tree="expression_statement [12129,12180]" parent="block_statement [21236,21319]" at="1"/>
  <insert-tree tree="return_statement [21301,21308]" parent="block_statement [21236,21319]" at="2"/>
  <insert-node tree="}: } [21318,21319]" parent="block_statement [21236,21319]" at="3"/>
  <update-node tree="identifier: upgradeTo [12084,12093]" label="require"/>
  <insert-tree tree="call_argument [21429,21457]" parent="call_expression [21421,21458]" at="2"/>
  <insert-node tree="identifier: require [22921,22928]" parent="call_expression [22921,22973]" at="0"/>
  <insert-node tree="(: ( [22928,22929]" parent="call_expression [22921,22973]" at="1"/>
  <insert-node tree="call_argument [22929,22972]" parent="call_expression [22921,22973]" at="2"/>
  <insert-node tree="): ) [22972,22973]" parent="call_expression [22921,22973]" at="3"/>
  <update-node tree="identifier: _innerImpl [1852,1862]" label="recipient"/>
  <update-node tree="identifier: thisAddress [1902,1913]" label="contractAddress"/>
  <insert-node tree="{: { [25966,25967]" parent="block_statement [25966,26249]" at="0"/>
  <move-tree tree="expression_statement [7292,7329]" parent="block_statement [25966,26249]" at="1"/>
  <insert-tree tree="expression_statement [26037,26071]" parent="block_statement [25966,26249]" at="2"/>
  <insert-tree tree="expression_statement [26085,26118]" parent="block_statement [25966,26249]" at="3"/>
  <insert-tree tree="expression_statement [26132,26177]" parent="block_statement [25966,26249]" at="4"/>
  <insert-tree tree="emit_statement [26191,26238]" parent="block_statement [25966,26249]" at="5"/>
  <insert-node tree="}: } [26248,26249]" parent="block_statement [25966,26249]" at="6"/>
  <insert-node tree="identifier: require [27056,27063]" parent="call_expression [27056,27100]" at="0"/>
  <insert-node tree="(: ( [27063,27064]" parent="call_expression [27056,27100]" at="1"/>
  <insert-node tree="call_argument [27064,27099]" parent="call_expression [27056,27100]" at="2"/>
  <insert-node tree="): ) [27099,27100]" parent="call_expression [27056,27100]" at="3"/>
  <move-tree tree="yul_evm_builtin [2641,2646]" parent="yul_function_call [4304,4327]" at="0"/>
  <insert-node tree="(: ( [4309,4310]" parent="yul_function_call [4304,4327]" at="1"/>
  <insert-tree tree="yul_function_call [4310,4326]" parent="yul_function_call [4304,4327]" at="2"/>
  <insert-node tree="): ) [4326,4327]" parent="yul_function_call [4304,4327]" at="3"/>
  <move-tree tree="yul_evm_builtin [5722,5727]" parent="yul_function_call [4351,4374]" at="0"/>
  <insert-node tree="(: ( [4356,4357]" parent="yul_function_call [4351,4374]" at="1"/>
  <insert-tree tree="yul_function_call [4357,4373]" parent="yul_function_call [4351,4374]" at="2"/>
  <insert-node tree="): ) [4373,4374]" parent="yul_function_call [4351,4374]" at="3"/>
  <insert-tree tree="yul_evm_builtin [4407,4412]" parent="yul_function_call [4407,4431]" at="0"/>
  <insert-node tree="(: ( [4412,4413]" parent="yul_function_call [4407,4431]" at="1"/>
  <insert-node tree="yul_function_call [4413,4430]" parent="yul_function_call [4407,4431]" at="2"/>
  <insert-node tree="): ) [4430,4431]" parent="yul_function_call [4407,4431]" at="3"/>
  <insert-tree tree="yul_evm_builtin [4834,4839]" parent="yul_function_call [4834,4857]" at="0"/>
  <insert-node tree="(: ( [4839,4840]" parent="yul_function_call [4834,4857]" at="1"/>
  <insert-node tree="yul_function_call [4840,4856]" parent="yul_function_call [4834,4857]" at="2"/>
  <insert-node tree="): ) [4856,4857]" parent="yul_function_call [4834,4857]" at="3"/>
  <insert-tree tree="yul_evm_builtin [11533,11538]" parent="yul_function_call [11533,11552]" at="0"/>
  <insert-node tree="(: ( [11538,11539]" parent="yul_function_call [11533,11552]" at="1"/>
  <insert-node tree="yul_function_call [11539,11551]" parent="yul_function_call [11533,11552]" at="2"/>
  <insert-node tree="): ) [11551,11552]" parent="yul_function_call [11533,11552]" at="3"/>
  <insert-tree tree="yul_evm_builtin [11569,11574]" parent="yul_function_call [11569,11588]" at="0"/>
  <insert-node tree="(: ( [11574,11575]" parent="yul_function_call [11569,11588]" at="1"/>
  <move-tree tree="yul_function_call [5751,5765]" parent="yul_function_call [11569,11588]" at="2"/>
  <move-tree tree=",: , [5759,5760]" parent="yul_function_call [11575,11587]" at="4"/>
  <insert-node tree="): ) [11587,11588]" parent="yul_function_call [11569,11588]" at="3"/>
  <move-tree tree="call_expression [12137,12172]" parent="expression_statement [21251,21287]" at="0"/>
  <move-tree tree="call_expression [10101,10135]" parent="call_argument [22929,22972]" at="0"/>
  <insert-node tree="binary_expression [27064,27099]" parent="call_argument [27064,27099]" at="0"/>
  <move-tree tree="yul_evm_builtin [5040,5043]" parent="yul_function_call [4413,4430]" at="0"/>
  <insert-node tree="(: ( [4416,4417]" parent="yul_function_call [4413,4430]" at="1"/>
  <insert-tree tree="yul_path [4417,4424]" parent="yul_function_call [4413,4430]" at="2"/>
  <insert-node tree=",: , [4424,4425]" parent="yul_function_call [4413,4430]" at="3"/>
  <insert-node tree="yul_decimal_number: 104 [4426,4429]" parent="yul_function_call [4413,4430]" at="4"/>
  <insert-node tree="): ) [4429,4430]" parent="yul_function_call [4413,4430]" at="5"/>
  <move-tree tree="yul_evm_builtin [5790,5793]" parent="yul_function_call [4840,4856]" at="0"/>
  <insert-node tree="(: ( [4843,4844]" parent="yul_function_call [4840,4856]" at="1"/>
  <insert-tree tree="yul_path [4844,4851]" parent="yul_function_call [4840,4856]" at="2"/>
  <insert-node tree=",: , [4851,4852]" parent="yul_function_call [4840,4856]" at="3"/>
  <insert-node tree="yul_decimal_number: 52 [4853,4855]" parent="yul_function_call [4840,4856]" at="4"/>
  <insert-node tree="): ) [4855,4856]" parent="yul_function_call [4840,4856]" at="5"/>
  <insert-tree tree="yul_evm_builtin [11539,11542]" parent="yul_function_call [11539,11551]" at="0"/>
  <insert-node tree="(: ( [11542,11543]" parent="yul_function_call [11539,11551]" at="1"/>
  <move-tree tree="yul_path [5646,5649]" parent="yul_function_call [11539,11551]" at="2"/>
  <insert-node tree=",: , [11546,11547]" parent="yul_function_call [11539,11551]" at="3"/>
  <insert-node tree="yul_decimal_number: 32 [11548,11550]" parent="yul_function_call [11539,11551]" at="4"/>
  <insert-node tree="): ) [11550,11551]" parent="yul_function_call [11539,11551]" at="5"/>
  <insert-node tree="yul_decimal_number: 64 [11584,11586]" parent="yul_function_call [11575,11587]" at="4"/>
  <update-node tree="identifier: _impl [1811,1816]" label="_to"/>
  <move-tree tree=".: . [12155,12156]" parent="member_expression [21251,21263]" at="2"/>
  <insert-tree tree="member_expression [22929,22960]" parent="call_expression [22929,22972]" at="0"/>
  <move-tree tree="member_expression [7300,7310]" parent="binary_expression [27064,27099]" at="0"/>
  <insert-node tree="==: == [27075,27077]" parent="binary_expression [27064,27099]" at="1"/>
  <insert-tree tree="type_cast_expression [27078,27099]" parent="binary_expression [27064,27099]" at="2"/>
  <insert-node tree="add: add [11575,11578]" parent="yul_evm_builtin [11575,11578]" at="0"/>
  <update-node tree="identifier: proxyOwner [10293,10303]" label="owner"/>
  <update-node tree="identifier: value [12156,12161]" label="_to"/>
  <insert-node tree="identifier: transfer [21255,21263]" parent="member_expression [21251,21263]" at="2"/>
  <move-tree tree="member_expression [12137,12155]" parent="call_argument [21264,21285]" at="0"/>
  <update-node tree="identifier: call [12151,12155]" label="balance"/>
  <insert-node tree="identifier: contractAddress [25989,26004]" parent="binary_expression [25989,26021]" at="0"/>
  <delete-node tree="contract: contract [1213,1221]"/>
  <delete-node tree="identifier: Proxy [1222,1227]"/>
  <delete-node tree="{: { [1228,1229]"/>
  <delete-node tree="comment: /**   * @dev Tells the address of the implementation where every call will be delegated.   * @return address of the implementation to which it will be delegated   */ [1235,1403]"/>
  <delete-node tree="function: function [1473,1481]"/>
  <delete-node tree="identifier: setImplementation [1482,1499]"/>
  <delete-node tree="(: ( [1499,1500]"/>
  <delete-node tree="): ) [1526,1527]"/>
  <delete-node tree="function_definition [1473,1537]"/>
  <delete-node tree="comment: /**   * @dev Fallback function allowing to perform a delegatecall to the given implementation.   * This function will return whatever the implementation call returns   */ [1543,1716]"/>
  <delete-node tree="function: function [1722,1730]"/>
  <delete-node tree="(: ( [1731,1732]"/>
  <delete-node tree="): ) [1732,1733]"/>
  <delete-tree tree="state_mutability [1734,1741]"/>
  <delete-node tree="{: { [1749,1750]"/>
  <delete-node tree="identifier: sig [1880,1883]"/>
  <delete-node tree="variable_declaration [1873,1883]"/>
  <delete-node tree="variable_declaration_statement [1873,1884]"/>
  <delete-tree tree="if_statement [1940,2208]"/>
  <delete-node tree="assembly: assembly [2220,2228]"/>
  <delete-node tree="{: { [2229,2230]"/>
  <delete-node tree="comment: /*                 0x40 is the &quot;free memory slot&quot;, meaning a pointer to next slot of empty memory. mload(0x40)                 loads the data in the free memory slot, so `ptr` is a pointer to the next slot of empty                 memory. It's needed because we're going to write the return data of delegatecall to the                 free memory slot.             */ [2244,2616]"/>
  <delete-node tree="let: let [2630,2633]"/>
  <delete-tree tree="yul_identifier [2634,2637]"/>
  <delete-node tree=":=: := [2638,2640]"/>
  <delete-node tree="(: ( [2646,2647]"/>
  <delete-node tree="yul_hex_number: 0x40 [2647,2651]"/>
  <delete-node tree="): ) [2651,2652]"/>
  <delete-node tree="yul_function_call [2641,2652]"/>
  <delete-node tree="yul_variable_declaration [2630,2652]"/>
  <delete-node tree="comment: /*                 `calldatacopy` is copy calldatasize bytes from calldata                 First argument is the destination to which data is copied(ptr)                 Second argument specifies the start position of the copied data.                     Since calldata is sort of its own unique location in memory,                     0 doesn't refer to 0 in memory or 0 in storage - it just refers to the zeroth byte of calldata.                     That's always going to be the zeroth byte of the function selector.                 Third argument, calldatasize, specifies how much data will be copied.                     calldata is naturally calldatasize bytes long (same thing as msg.data.length)             */ [2666,3393]"/>
  <delete-tree tree="yul_function_call [3407,3441]"/>
  <delete-node tree="comment: /*                 delegatecall params explained:                 gas: the amount of gas to provide for the call. `gas` is an Opcode that gives                     us the amount of gas still available to execution                  _impl: address of the contract to delegate to                  ptr: to pass copied data                  calldatasize: loads the size of `bytes memory data`, same as msg.data.length                  0, 0: These are for the `out` and `outsize` params. Because the output could be dynamic,                         these are set to 0, 0 so the output data will not be written to memory. The output                         data will be read using `returndatasize` and `returdatacopy` instead.                  result: This will be 0 if the call fails and 1 if it succeeds             */ [3455,4284]"/>
  <delete-tree tree="yul_variable_declaration [4298,4361]"/>
  <delete-node tree="comment: /*              */ [4375,4395]"/>
  <delete-node tree="comment: /*                 ptr current points to the value stored at 0x40,                 because we assigned it like ptr := mload(0x40).                 Because we use 0x40 as a free memory pointer,                 we want to make sure that the next time we want to allocate memory,                 we aren't overwriting anything important.                 So, by adding ptr and returndatasize,                 we get a memory location beyond the end of the data we will be copying to ptr.                 We place this in at 0x40, and any reads from 0x40 will now read from free memory             */ [4409,5013]"/>
  <delete-node tree="(: ( [5033,5034]"/>
  <delete-node tree="yul_hex_number: 0x40 [5034,5038]"/>
  <delete-node tree=",: , [5038,5039]"/>
  <delete-node tree="(: ( [5043,5044]"/>
  <delete-tree tree="yul_path [5044,5047]"/>
  <delete-node tree=",: , [5047,5048]"/>
  <delete-tree tree="yul_function_call [5049,5063]"/>
  <delete-node tree="): ) [5063,5064]"/>
  <delete-node tree="yul_function_call [5040,5064]"/>
  <delete-node tree="): ) [5064,5065]"/>
  <delete-node tree="yul_function_call [5027,5065]"/>
  <delete-node tree="comment: /*                 `returndatacopy` is an Opcode that copies the last return data to a slot. `ptr` is the                     slot it will copy to, 0 means copy from the beginning of the return data, and size is                     the amount of data to copy.                 `returndatasize` is an Opcode that gives us the size of the last return data. In this case, that is the size of the data returned from delegatecall             */ [5079,5522]"/>
  <delete-tree tree="yul_function_call [5536,5574]"/>
  <delete-tree tree="yul_variable_declaration [5590,5623]"/>
  <delete-node tree="switch: switch [5639,5645]"/>
  <delete-node tree="case: case [5663,5667]"/>
  <delete-node tree="yul_decimal_number: 0 [5668,5669]"/>
  <delete-tree tree="yul_block [5670,5672]"/>
  <delete-node tree="default: default [5686,5693]"/>
  <delete-node tree="{: { [5694,5695]"/>
  <delete-node tree="let: let [5713,5716]"/>
  <delete-tree tree="yul_identifier [5717,5718]"/>
  <delete-node tree=":=: := [5719,5721]"/>
  <delete-node tree="(: ( [5727,5728]"/>
  <delete-node tree="yul_hex_number: 0x40 [5728,5732]"/>
  <delete-node tree="): ) [5732,5733]"/>
  <delete-node tree="yul_function_call [5722,5733]"/>
  <delete-node tree="yul_variable_declaration [5713,5733]"/>
  <delete-tree tree="yul_evm_builtin [5783,5789]"/>
  <delete-node tree="(: ( [5789,5790]"/>
  <delete-node tree="(: ( [5793,5794]"/>
  <delete-tree tree="yul_path [5794,5795]"/>
  <delete-node tree=",: , [5795,5796]"/>
  <delete-node tree="yul_hex_number: 0x04 [5797,5801]"/>
  <delete-node tree="): ) [5801,5802]"/>
  <delete-node tree="yul_function_call [5790,5802]"/>
  <delete-node tree=",: , [5802,5803]"/>
  <delete-tree tree="yul_path [5804,5809]"/>
  <delete-node tree="): ) [5809,5810]"/>
  <delete-node tree="yul_function_call [5783,5810]"/>
  <delete-tree tree="yul_variable_declaration [5828,5885]"/>
  <delete-node tree="}: } [5899,5900]"/>
  <delete-node tree="yul_block [5694,5900]"/>
  <delete-node tree="yul_switch_statement [5639,5900]"/>
  <delete-node tree="comment: /*                 if `result` is 0, revert.                 if `result` is 1, return `size` amount of data from `ptr`. This is the data that was                 copied to `ptr` from the delegatecall return data             */ [5916,6146]"/>
  <delete-tree tree="yul_switch_statement [6160,6272]"/>
  <delete-node tree="}: } [6282,6283]"/>
  <delete-node tree="assembly_statement [2220,6283]"/>
  <delete-node tree="}: } [6289,6290]"/>
  <delete-node tree="function_body [1749,6290]"/>
  <delete-node tree="fallback_receive_definition [1722,6290]"/>
  <delete-node tree="}: } [6292,6293]"/>
  <delete-node tree="contract_body [1228,6293]"/>
  <delete-node tree="contract_declaration [1213,6293]"/>
  <delete-node tree="contract: contract [6532,6540]"/>
  <delete-node tree="identifier: UpgradeabilityStorage [6541,6562]"/>
  <delete-node tree="{: { [6563,6564]"/>
  <delete-node tree="comment: // Version name of the current implementation [6570,6615]"/>
  <delete-node tree="identifier: _version [6638,6646]"/>
  <delete-node tree="state_variable_declaration [6621,6647]"/>
  <delete-node tree="comment: // Address of the current implementation [6655,6695]"/>
  <delete-node tree="identifier: _implementation [6718,6733]"/>
  <delete-node tree="state_variable_declaration [6701,6734]"/>
  <delete-node tree="comment: /**     * @dev Tells the version name of the current implementation     * @return string representing the name of the current version     */ [6742,6885]"/>
  <delete-node tree="comment: /**     * @dev Tells the address of the current implementation     * @return address of the current implementation     */ [6982,7106]"/>
  <delete-node tree="function: function [7217,7225]"/>
  <delete-node tree="identifier: setImplementation [7226,7243]"/>
  <delete-node tree="(: ( [7243,7244]"/>
  <delete-node tree="): ) [7270,7271]"/>
  <delete-node tree="{: { [7281,7282]"/>
  <delete-tree tree="expression_statement [7339,7376]"/>
  <delete-node tree="}: } [7382,7383]"/>
  <delete-node tree="function_body [7281,7383]"/>
  <delete-node tree="function_definition [7217,7383]"/>
  <delete-node tree="}: } [7385,7386]"/>
  <delete-node tree="contract_body [6563,7386]"/>
  <delete-node tree="contract_declaration [6532,7386]"/>
  <delete-node tree="=: = [1774,1775]"/>
  <delete-tree tree="call_expression [1776,1792]"/>
  <delete-node tree="mstore: mstore [5751,5757]"/>
  <delete-tree tree="yul_path [5758,5759]"/>
  <delete-tree tree="function_body [7168,7209]"/>
  <delete-node tree="contract: contract [7642,7650]"/>
  <delete-node tree="identifier: UpgradeabilityProxy [7651,7670]"/>
  <delete-node tree="is: is [7671,7673]"/>
  <delete-tree tree="inheritance_specifier [7674,7679]"/>
  <delete-node tree=",: , [7679,7680]"/>
  <delete-tree tree="inheritance_specifier [7681,7702]"/>
  <delete-node tree="{: { [7703,7704]"/>
  <delete-node tree="comment: /**     * @dev This event will be emitted every time the implementation gets upgraded     * @param version representing the version name of the upgraded implementation     * @param implementation representing the address of the upgraded implementation     */ [7710,7972]"/>
  <delete-node tree="comment: /**     * @dev Upgrades the implementation address     * @param version representing the version name of the new implementation to be set     * @param implementation representing the address of the new implementation to be set     */ [8050,8287]"/>
  <delete-node tree="function: function [8293,8301]"/>
  <delete-node tree="identifier: _upgradeTo [8302,8312]"/>
  <delete-node tree="(: ( [8312,8313]"/>
  <delete-node tree=",: , [8328,8329]"/>
  <delete-node tree="): ) [8352,8353]"/>
  <delete-tree tree="function_body [8363,8583]"/>
  <delete-node tree="function_definition [8293,8583]"/>
  <delete-node tree="}: } [8585,8586]"/>
  <delete-node tree="contract_body [7703,8586]"/>
  <delete-node tree="contract_declaration [7642,8586]"/>
  <delete-node tree="identifier: _upgradeabilityOwner [8887,8907]"/>
  <delete-node tree="state_variable_declaration [8871,8908]"/>
  <delete-node tree="comment: /**     * @dev Tells the address of the owner     * @return the address of the owner     */ [8916,9010]"/>
  <delete-node tree="identifier: _upgradeabilityOwner [9095,9115]"/>
  <delete-node tree="comment: /**     * @dev Sets the address of the owner     */ [9131,9184]"/>
  <delete-node tree="function: function [9190,9198]"/>
  <delete-node tree="identifier: setUpgradeabilityOwner [9199,9221]"/>
  <delete-node tree="(: ( [9221,9222]"/>
  <delete-node tree="): ) [9252,9253]"/>
  <delete-tree tree="function_body [9263,9327]"/>
  <delete-node tree="function_definition [9190,9327]"/>
  <delete-tree tree="inheritance_specifier [9621,9647]"/>
  <delete-node tree=",: , [9647,9648]"/>
  <delete-tree tree="inheritance_specifier [9649,9668]"/>
  <delete-node tree="constructor: constructor [10069,10080]"/>
  <delete-node tree="(: ( [10080,10081]"/>
  <delete-node tree="): ) [10081,10082]"/>
  <delete-node tree="public: public [10083,10089]"/>
  <delete-node tree="constructor_definition [10069,10143]"/>
  <delete-tree tree="call_expression [10516,10537]"/>
  <delete-node tree="emit: emit [10844,10848]"/>
  <delete-node tree="identifier: ProxyOwnershipTransferred [10849,10874]"/>
  <delete-node tree="(: ( [10874,10875]"/>
  <delete-tree tree="call_argument [10875,10887]"/>
  <delete-node tree=",: , [10887,10888]"/>
  <delete-node tree="): ) [10897,10898]"/>
  <delete-node tree="emit_statement [10844,10899]"/>
  <delete-node tree="comment: /**     * @dev Allows the upgradeability owner to upgrade the current version of the proxy.     * @param version representing the version name of the new implementation to be set.     * @param implementation representing the address of the new implementation to be set.     */ [10957,11237]"/>
  <delete-node tree=",: , [11277,11278]"/>
  <delete-tree tree="modifier_invocation [11310,11324]"/>
  <delete-tree tree="call_expression [11336,11371]"/>
  <delete-node tree="comment: /**     * @dev Allows the upgradeability owner to upgrade the current version of the proxy and call the new implementation     * to initialize whatever is needed through a low level call.     * @param version representing the version name of the new implementation to be set.     * @param implementation representing the address of the new implementation to be set.     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function     * signature of the implementation to be called with the needed payload     */ [11387,11958]"/>
  <delete-node tree=",: , [8008,8009]"/>
  <delete-node tree="identifier: _version [6958,6966]"/>
  <delete-node tree=",: , [12029,12030]"/>
  <delete-tree tree="state_mutability [12043,12050]"/>
  <delete-tree tree="member_expression [12162,12171]"/>
  <delete-node tree="identifier: require [12129,12136]"/>
  <delete-node tree="(: ( [12136,12137]"/>
  <delete-node tree="(: ( [12172,12173]"/>
  <delete-tree tree="call_argument [12173,12177]"/>
  <delete-node tree="): ) [12177,12178]"/>
  <delete-node tree="call_expression [12137,12178]"/>
  <delete-node tree="call_argument [12137,12178]"/>
  <delete-node tree="): ) [12178,12179]"/>
  <delete-node tree="call_expression [12129,12179]"/>
  <delete-tree tree="call_argument [12094,12101]"/>
  <delete-node tree=",: , [12101,12102]"/>
  <delete-tree tree="call_argument [12103,12117]"/>
  <delete-node tree="indexed: indexed [8018,8025]"/>
  <delete-node tree="identifier: implementation [12015,12029]"/>
  <delete-node tree="identifier: implementation [11287,11301]"/>
  <delete-node tree="identifier: setUpgradeabilityOwner [10101,10123]"/>
  <delete-node tree="=: = [1914,1915]"/>
  <delete-tree tree="type_cast_expression [1916,1929]"/>
  <delete-node tree="identifier: data [12037,12041]"/>
  <delete-node tree="contract: contract [12599,12607]"/>
  <delete-node tree="identifier: EternalStorageProxy [12608,12627]"/>
  <delete-node tree="is: is [12628,12630]"/>
  <delete-tree tree="inheritance_specifier [12631,12655]"/>
  <delete-node tree=",: , [12655,12656]"/>
  <delete-tree tree="contract_body [12672,12674]"/>
  <delete-node tree="contract_declaration [12599,12674]"/>
</actions>
