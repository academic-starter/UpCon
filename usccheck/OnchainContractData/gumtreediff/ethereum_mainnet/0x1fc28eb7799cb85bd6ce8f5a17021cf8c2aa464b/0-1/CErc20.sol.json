{
  "matches": [
    {
      "src": "(: ( [3182,3183]",
      "dest": "(: ( [3052,3053]"
    },
    {
      "src": "identifier: redeemTokens [2780,2792]",
      "dest": "identifier: redeemTokens [2650,2662]"
    },
    {
      "src": "uint: uint [2271,2275]",
      "dest": "uint: uint [2141,2145]"
    },
    {
      "src": "if_statement [9357,9438]",
      "dest": "if_statement [8323,8404]"
    },
    {
      "src": "visibility [3593,3601]",
      "dest": "visibility [3463,3471]"
    },
    {
      "src": "comment: // CToken initialize does the bulk of the work [1465,1511]",
      "dest": "comment: // CToken initialize does the bulk of the work [1212,1258]"
    },
    {
      "src": "identifier: interestRateModel_ [1122,1140]",
      "dest": "identifier: interestRateModel_ [971,989]"
    },
    {
      "src": "identifier: selector [8163,8171]",
      "dest": "identifier: selector [7680,7688]"
    },
    {
      "src": "member_expression [9361,9378]",
      "dest": "member_expression [8327,8344]"
    },
    {
      "src": "): ) [2280,2281]",
      "dest": "): ) [2150,2151]"
    },
    {
      "src": "parameter [5480,5494]",
      "dest": "parameter [8679,8704]"
    },
    {
      "src": "call_argument [6773,6786]",
      "dest": "call_argument [6290,6303]"
    },
    {
      "src": "): ) [6920,6921]",
      "dest": "): ) [6437,6438]"
    },
    {
      "src": "call_argument [7158,7186]",
      "dest": "call_argument [6675,6703]"
    },
    {
      "src": "identifier: err [2326,2329]",
      "dest": "identifier: err [2196,2199]"
    },
    {
      "src": "(: ( [6817,6818]",
      "dest": "(: ( [6334,6335]"
    },
    {
      "src": "function_definition [7997,8222]",
      "dest": "function_definition [7514,7739]"
    },
    {
      "src": "(: ( [5866,5867]",
      "dest": "(: ( [5383,5384]"
    },
    {
      "src": "call_argument [6000,6004]",
      "dest": "call_argument [5517,5521]"
    },
    {
      "src": "comment: /**      * @notice Gets balance of this contract in terms of the underlying      * @dev This excludes the value of the current message, if any      * @return The quantity of underlying tokens owned by this contract      */ [5613,5839]",
      "dest": "comment: /**      * @notice Gets balance of this contract in terms of the underlying      * @dev This excludes the value of the current message, if any      * @return The quantity of underlying tokens owned by this contract      */ [5130,5356]"
    },
    {
      "src": "parameter [6667,6678]",
      "dest": "parameter [6184,6195]"
    },
    {
      "src": "return_statement [7198,7234]",
      "dest": "return_statement [6715,6751]"
    },
    {
      "src": "identifier: interestRateModel_ [1552,1570]",
      "dest": "identifier: interestRateModel_ [1422,1440]"
    },
    {
      "src": "call_expression [5932,5958]",
      "dest": "call_expression [5449,5475]"
    },
    {
      "src": "identifier: returndata [9361,9371]",
      "dest": "identifier: returndata [8327,8337]"
    },
    {
      "src": "function: function [2204,2212]",
      "dest": "function: function [2074,2082]"
    },
    {
      "src": "call_argument [6916,6920]",
      "dest": "call_argument [6433,6437]"
    },
    {
      "src": ">: > [9379,9380]",
      "dest": ">: > [8345,8346]"
    },
    {
      "src": "type_name [5048,5063]",
      "dest": "type_name [4918,4933]"
    },
    {
      "src": "identifier: balanceBefore [7220,7233]",
      "dest": "identifier: balanceBefore [6737,6750]"
    },
    {
      "src": ".: . [1792,1793]",
      "dest": ".: . [1662,1663]"
    },
    {
      "src": "): ) [3940,3941]",
      "dest": "): ) [3810,3811]"
    },
    {
      "src": "type_name [5012,5019]",
      "dest": "type_name [4882,4889]"
    },
    {
      "src": "visibility [5082,5090]",
      "dest": "visibility [4952,4960]"
    },
    {
      "src": "function: function [3879,3887]",
      "dest": "function: function [3749,3757]"
    },
    {
      "src": ",: , [8175,8176]",
      "dest": ",: , [7692,7693]"
    },
    {
      "src": "}: } [6013,6014]",
      "dest": "}: } [5530,5531]"
    },
    {
      "src": "(: ( [2703,2704]",
      "dest": "(: ( [2573,2574]"
    },
    {
      "src": ".: . [6821,6822]",
      "dest": ".: . [6338,6339]"
    },
    {
      "src": "string: string [1227,1233]",
      "dest": "string: string [1016,1022]"
    },
    {
      "src": "primitive_type [3220,3224]",
      "dest": "primitive_type [3090,3094]"
    },
    {
      "src": "identifier: liquidateBorrowInternal [5131,5154]",
      "dest": "identifier: liquidateBorrowInternal [5001,5024]"
    },
    {
      "src": "variable_declaration [5118,5126]",
      "dest": "variable_declaration [4988,4996]"
    },
    {
      "src": "user_defined_type [5909,5923]",
      "dest": "user_defined_type [5426,5440]"
    },
    {
      "src": "parameter [3574,3591]",
      "dest": "parameter [3444,3461]"
    },
    {
      "src": ",: , [1627,1628]",
      "dest": ",: , [1497,1498]"
    },
    {
      "src": ".: . [6878,6879]",
      "dest": ".: . [6395,6396]"
    },
    {
      "src": "variable_declaration [6715,6733]",
      "dest": "variable_declaration [6232,6250]"
    },
    {
      "src": ",: , [8674,8675]",
      "dest": ",: , [8191,8192]"
    },
    {
      "src": "visibility [4379,4387]",
      "dest": "visibility [4249,4257]"
    },
    {
      "src": ".: . [7083,7084]",
      "dest": ".: . [6600,6601]"
    },
    {
      "src": "primitive_type [3936,3940]",
      "dest": "primitive_type [3806,3810]"
    },
    {
      "src": "function: function [5845,5853]",
      "dest": "function: function [5362,5370]"
    },
    {
      "src": "identifier: redeemAmount [3269,3281]",
      "dest": "identifier: redeemAmount [3139,3151]"
    },
    {
      "src": "identifier: require [7119,7126]",
      "dest": "identifier: require [6636,6643]"
    },
    {
      "src": "external: external [3593,3601]",
      "dest": "external: external [3463,3471]"
    },
    {
      "src": "string: string [8676,8682]",
      "dest": "string: string [8193,8199]"
    },
    {
      "src": "primitive_type [1420,1427]",
      "dest": "primitive_type [1167,1174]"
    },
    {
      "src": "primitive_type [6908,6915]",
      "dest": "primitive_type [6425,6432]"
    },
    {
      "src": "user_defined_type [438,444]",
      "dest": "user_defined_type [437,443]"
    },
    {
      "src": "}: } [1813,1814]",
      "dest": "}: } [1683,1684]"
    },
    {
      "src": "identifier: repayBorrowBehalfInternal [4428,4453]",
      "dest": "identifier: repayBorrowBehalfInternal [4298,4323]"
    },
    {
      "src": "identifier: initialExchangeRateMantissa_ [1572,1600]",
      "dest": "identifier: initialExchangeRateMantissa_ [1442,1470]"
    },
    {
      "src": "type_name [4397,4401]",
      "dest": "type_name [4267,4271]"
    },
    {
      "src": "parameter [1420,1445]",
      "dest": "parameter [1167,1192]"
    },
    {
      "src": "identifier: data [8670,8674]",
      "dest": "identifier: data [8187,8191]"
    },
    {
      "src": "type_cast_expression [7094,7107]",
      "dest": "type_cast_expression [6611,6624]"
    },
    {
      "src": "function_body [3942,4028]",
      "dest": "function_body [3812,3898]"
    },
    {
      "src": "identifier: to [8036,8038]",
      "dest": "identifier: to [7553,7555]"
    },
    {
      "src": "returns: returns [3602,3609]",
      "dest": "returns: returns [3472,3479]"
    },
    {
      "src": "): ) [6004,6005]",
      "dest": "): ) [5521,5522]"
    },
    {
      "src": "returns: returns [5091,5098]",
      "dest": "returns: returns [4961,4968]"
    },
    {
      "src": "{: { [6704,6705]",
      "dest": "{: { [6221,6222]"
    },
    {
      "src": "primitive_type [2218,2222]",
      "dest": "primitive_type [2088,2092]"
    },
    {
      "src": "identifier: cTokenCollateral [5178,5194]",
      "dest": "identifier: cTokenCollateral [5048,5064]"
    },
    {
      "src": "type_cast_expression [6773,6786]",
      "dest": "type_cast_expression [6290,6303]"
    },
    {
      "src": "identifier: repayAmount [4464,4475]",
      "dest": "identifier: repayAmount [4334,4345]"
    },
    {
      "src": "user_defined_type [1104,1121]",
      "dest": "user_defined_type [953,970]"
    },
    {
      "src": "return: return [5206,5212]",
      "dest": "return: return [5076,5082]"
    },
    {
      "src": "identifier: balanceOf [6763,6772]",
      "dest": "identifier: balanceOf [6280,6289]"
    },
    {
      "src": "primitive_type [5992,5999]",
      "dest": "primitive_type [5509,5516]"
    },
    {
      "src": "(: ( [2779,2780]",
      "dest": "(: ( [2649,2650]"
    },
    {
      "src": "bool: bool [9416,9420]",
      "dest": "bool: bool [8382,8386]"
    },
    {
      "src": "parameter [3220,3224]",
      "dest": "parameter [3090,3094]"
    },
    {
      "src": "call_expression [7057,7108]",
      "dest": "call_expression [6574,6625]"
    },
    {
      "src": "identifier: underlying [5947,5957]",
      "dest": "identifier: underlying [5464,5474]"
    },
    {
      "src": "return_type_definition [4388,4402]",
      "dest": "return_type_definition [4258,4272]"
    },
    {
      "src": "comment: /**      * @notice Sender supplies assets into the market and receives cTokens in exchange      * @dev Accrues interest whether or not the operation succeeds, unless reverted      * @param mintAmount The amount of the underlying asset to supply      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [1854,2198]",
      "dest": "comment: /**      * @notice Sender supplies assets into the market and receives cTokens in exchange      * @dev Accrues interest whether or not the operation succeeds, unless reverted      * @param mintAmount The amount of the underlying asset to supply      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [1724,2068]"
    },
    {
      "src": "return: return [4010,4016]",
      "dest": "return: return [3880,3886]"
    },
    {
      "src": "\": \" [6957,6958]",
      "dest": "\": \" [6474,6475]"
    },
    {
      "src": "uint: uint [7037,7041]",
      "dest": "uint: uint [6554,6558]"
    },
    {
      "src": "function_definition [2688,2801]",
      "dest": "function_definition [2558,2671]"
    },
    {
      "src": "uint: uint [2218,2222]",
      "dest": "uint: uint [2088,2092]"
    },
    {
      "src": "(: ( [8115,8116]",
      "dest": "(: ( [7632,7633]"
    },
    {
      "src": "primitive_type [4415,4419]",
      "dest": "primitive_type [4285,4289]"
    },
    {
      "src": "(: ( [6652,6653]",
      "dest": "(: ( [6169,6170]"
    },
    {
      "src": "parameter [5892,5896]",
      "dest": "parameter [5409,5413]"
    },
    {
      "src": "call_expression [1766,1806]",
      "dest": "call_expression [1636,1676]"
    },
    {
      "src": ",: , [1294,1295]",
      "dest": ",: , [1140,1141]"
    },
    {
      "src": "function_definition [4316,4505]",
      "dest": "function_definition [4186,4375]"
    },
    {
      "src": ",: , [4359,4360]",
      "dest": ",: , [4229,4230]"
    },
    {
      "src": "primitive_type [3611,3615]",
      "dest": "primitive_type [3481,3485]"
    },
    {
      "src": "{: { [4403,4404]",
      "dest": "{: { [4273,4274]"
    },
    {
      "src": "^:  ^ [15,17]",
      "dest": "^:  ^ [15,17]"
    },
    {
      "src": "function_body [5520,5577]",
      "dest": "function_body [8715,8867]"
    },
    {
      "src": "identifier: EIP20NonStandardInterface [6841,6866]",
      "dest": "identifier: EIP20NonStandardInterface [6358,6383]"
    },
    {
      "src": "identifier: EIP20Interface [5909,5923]",
      "dest": "identifier: EIP20Interface [5426,5440]"
    },
    {
      "src": "member_expression [6818,6840]",
      "dest": "member_expression [6335,6357]"
    },
    {
      "src": "}: } [7292,7293]",
      "dest": "}: } [6809,6810]"
    },
    {
      "src": "identifier: mintAmount [2297,2307]",
      "dest": "identifier: mintAmount [2167,2177]"
    },
    {
      "src": "comment: // Set underlying and sanity check it [1684,1721]",
      "dest": "comment: // Set underlying and sanity check it [1554,1591]"
    },
    {
      "src": "member_expression [8093,8115]",
      "dest": "member_expression [7610,7632]"
    },
    {
      "src": "identifier: comptroller_ [1538,1550]",
      "dest": "identifier: comptroller_ [1408,1420]"
    },
    {
      "src": "identifier: repayAmount [5165,5176]",
      "dest": "identifier: repayAmount [5035,5046]"
    },
    {
      "src": "(: ( [3573,3574]",
      "dest": "(: ( [3443,3444]"
    },
    {
      "src": "comment: /**      * @notice The sender adds to reserves.      * @param addAmount The amount fo underlying token to add as reserves      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [5232,5452]",
      "dest": "comment: /**     * @notice Admin call to delegate the votes of the COMP-like underlying     * @param compLikeDelegatee The address to delegate votes to     * @dev CTokens whose underlying are not CompLike should revert here     */ [8419,8644]"
    },
    {
      "src": "primitive_type [3954,3958]",
      "dest": "primitive_type [3824,3828]"
    },
    {
      "src": "): ) [5194,5195]",
      "dest": "): ) [5064,5065]"
    },
    {
      "src": "identifier: length [9372,9378]",
      "dest": "identifier: length [8338,8344]"
    },
    {
      "src": "member_expression [8116,8171]",
      "dest": "member_expression [7633,7688]"
    },
    {
      "src": "assignment_expression [1731,1755]",
      "dest": "assignment_expression [1601,1625]"
    },
    {
      "src": "uint: uint [3183,3187]",
      "dest": "uint: uint [3053,3057]"
    },
    {
      "src": "variable_declaration [2271,2279]",
      "dest": "variable_declaration [2141,2149]"
    },
    {
      "src": "return_type_definition [2244,2258]",
      "dest": "return_type_definition [2114,2128]"
    },
    {
      "src": "public: public [1447,1453]",
      "dest": "public: public [1194,1200]"
    },
    {
      "src": "return_type_definition [3927,3941]",
      "dest": "return_type_definition [3797,3811]"
    },
    {
      "src": "address: address [6908,6915]",
      "dest": "address: address [6425,6432]"
    },
    {
      "src": "visibility [3918,3926]",
      "dest": "visibility [3788,3796]"
    },
    {
      "src": "uint: uint [3220,3224]",
      "dest": "uint: uint [3090,3094]"
    },
    {
      "src": "(: ( [3268,3269]",
      "dest": "(: ( [3138,3139]"
    },
    {
      "src": "): ) [4424,4425]",
      "dest": "): ) [4294,4295]"
    },
    {
      "src": "uint256: uint256 [1363,1370]",
      "dest": "uint256: uint256 [1110,1117]"
    },
    {
      "src": "identifier: repayAmount [3905,3916]",
      "dest": "identifier: repayAmount [3775,3786]"
    },
    {
      "src": "identifier: super [1521,1526]",
      "dest": "identifier: super [1391,1396]"
    },
    {
      "src": "identifier: _callOptionalReturn [8073,8092]",
      "dest": "identifier: _callOptionalReturn [7590,7609]"
    },
    {
      "src": "type_cast_expression [5992,6005]",
      "dest": "type_cast_expression [5509,5522]"
    },
    {
      "src": "identifier: repayBorrow [3888,3899]",
      "dest": "identifier: repayBorrow [3758,3769]"
    },
    {
      "src": "): ) [3200,3201]",
      "dest": "): ) [3070,3071]"
    },
    {
      "src": "returns: returns [4388,4395]",
      "dest": "returns: returns [4258,4265]"
    },
    {
      "src": ".: . [6762,6763]",
      "dest": ".: . [6279,6280]"
    },
    {
      "src": "call_argument [9424,9436]",
      "dest": "call_argument [8390,8402]"
    },
    {
      "src": "identifier: err [5123,5126]",
      "dest": "identifier: err [4993,4996]"
    },
    {
      "src": "type_name [8657,8662]",
      "dest": "type_name [8174,8179]"
    },
    {
      "src": "\": \" [8186,8187]",
      "dest": "\": \" [7703,7704]"
    },
    {
      "src": "identifier: EIP20Interface [7057,7071]",
      "dest": "identifier: EIP20Interface [6574,6588]"
    },
    {
      "src": "contract_body [462,9448]",
      "dest": "contract_body [461,8870]"
    },
    {
      "src": "type_name [2253,2257]",
      "dest": "type_name [2123,2127]"
    },
    {
      "src": "return_statement [4010,4021]",
      "dest": "return_statement [3880,3891]"
    },
    {
      "src": "variable_declaration_statement [8723,8787]",
      "dest": "variable_declaration_statement [8241,8313]"
    },
    {
      "src": "import: import [28,34]",
      "dest": "import: import [28,34]"
    },
    {
      "src": "): ) [9421,9422]",
      "dest": "): ) [8387,8388]"
    },
    {
      "src": "identifier: borrower [4351,4359]",
      "dest": "identifier: borrower [4221,4229]"
    },
    {
      "src": "identifier: underlying_ [1006,1017]",
      "dest": "identifier: underlying_ [855,866]"
    },
    {
      "src": "return_statement [3628,3664]",
      "dest": "return_statement [3498,3534]"
    },
    {
      "src": "primitive_type [8020,8035]",
      "dest": "primitive_type [7537,7552]"
    },
    {
      "src": "): ) [6678,6679]",
      "dest": "): ) [6195,6196]"
    },
    {
      "src": "parameter [8676,8702]",
      "dest": "parameter [8193,8219]"
    },
    {
      "src": "identifier: data [8781,8785]",
      "dest": "identifier: data [8293,8297]"
    },
    {
      "src": "parameter [1227,1246]",
      "dest": "parameter [1016,1035]"
    },
    {
      "src": "identifier: EIP20Interface [5932,5946]",
      "dest": "identifier: EIP20Interface [5449,5463]"
    },
    {
      "src": ",: , [4423,4424]",
      "dest": ",: , [4293,4294]"
    },
    {
      "src": "(: ( [8656,8657]",
      "dest": "(: ( [8173,8174]"
    },
    {
      "src": "primitive_type [3574,3578]",
      "dest": "primitive_type [3444,3448]"
    },
    {
      "src": "function_body [5106,5224]",
      "dest": "function_body [4976,5094]"
    },
    {
      "src": ",: , [1140,1141]",
      "dest": ",: , [989,990]"
    },
    {
      "src": ",: , [2279,2280]",
      "dest": ",: , [2149,2150]"
    },
    {
      "src": "call_argument [3269,3281]",
      "dest": "call_argument [3139,3151]"
    },
    {
      "src": "(: ( [8019,8020]",
      "dest": "(: ( [7536,7537]"
    },
    {
      "src": "(: ( [7101,7102]",
      "dest": "(: ( [6618,6619]"
    },
    {
      "src": ",: , [1570,1571]",
      "dest": ",: , [1440,1441]"
    },
    {
      "src": "string [6932,6958]",
      "dest": "string [6449,6475]"
    },
    {
      "src": "comment: /**      * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset      * @dev Accrues interest whether or not the operation succeeds, unless reverted      * @param redeemAmount The amount of underlying to redeem      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [2809,3151]",
      "dest": "comment: /**      * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset      * @dev Accrues interest whether or not the operation succeeds, unless reverted      * @param redeemAmount The amount of underlying to redeem      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [2679,3021]"
    },
    {
      "src": "\": \" [35,36]",
      "dest": "\": \" [35,36]"
    },
    {
      "src": "(: ( [7126,7127]",
      "dest": "(: ( [6643,6644]"
    },
    {
      "src": "=: = [3965,3966]",
      "dest": "=: = [3835,3836]"
    },
    {
      "src": "{: { [3942,3943]",
      "dest": "{: { [3812,3813]"
    },
    {
      "src": "function_definition [3558,3671]",
      "dest": "function_definition [3428,3541]"
    },
    {
      "src": "identifier: symbol_ [1287,1294]",
      "dest": "identifier: symbol_ [1076,1083]"
    },
    {
      "src": "call_argument [8186,8213]",
      "dest": "call_argument [7703,7730]"
    },
    {
      "src": "import_directive [28,50]",
      "dest": "import_directive [28,50]"
    },
    {
      "src": "comment: /*** User Interface ***/ [1822,1846]",
      "dest": "comment: /*** User Interface ***/ [1692,1716]"
    },
    {
      "src": "member_expression [8116,8162]",
      "dest": "member_expression [7633,7679]"
    },
    {
      "src": "internal: internal [6680,6688]",
      "dest": "internal: internal [6197,6205]"
    },
    {
      "src": "primitive_type [3183,3187]",
      "dest": "primitive_type [3053,3057]"
    },
    {
      "src": "identifier: errorMessage [9424,9436]",
      "dest": "identifier: errorMessage [8390,8402]"
    },
    {
      "src": "function_definition [3879,4028]",
      "dest": "function_definition [3749,3898]"
    },
    {
      "src": "solidity_version_comparison_operator [15,17]",
      "dest": "solidity_version_comparison_operator [15,17]"
    },
    {
      "src": "comment: /**  * @title Compound's CErc20 Contract  * @notice CTokens which wrap an EIP-20 underlying  * @dev This contract should not to be deployed on its own; instead, deploy:  * 1) `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).  * 2) `CErc20Immutable` to deploy without the proxy storage pattern.  * @author Compound  */ [54,417]",
      "dest": "comment: /**  * @title Compound's CErc20 Contract  * @notice CTokens which wrap an EIP-20 underlying  * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).  * @author Compound  */ [131,416]"
    },
    {
      "src": "variable_declaration_statement [5909,5959]",
      "dest": "variable_declaration_statement [5426,5476]"
    },
    {
      "src": "call_expression [8765,8786]",
      "dest": "call_expression [8267,8312]"
    },
    {
      "src": "identifier: addAmount [5485,5494]",
      "dest": "identifier: compLikeDelegatee [8687,8704]"
    },
    {
      "src": "type_name [2741,2745]",
      "dest": "type_name [2611,2615]"
    },
    {
      "src": "call_argument [1781,1791]",
      "dest": "call_argument [1651,1661]"
    },
    {
      "src": "parameter [8020,8038]",
      "dest": "parameter [7537,7555]"
    },
    {
      "src": "primitive_type [6773,6780]",
      "dest": "primitive_type [6290,6297]"
    },
    {
      "src": "identifier: from [6902,6906]",
      "dest": "identifier: from [6419,6423]"
    },
    {
      "src": "address: address [8020,8027]",
      "dest": "address: address [7537,7544]"
    },
    {
      "src": "identifier: repayAmount [4366,4377]",
      "dest": "identifier: repayAmount [4236,4247]"
    },
    {
      "src": "identifier: borrower [5020,5028]",
      "dest": "identifier: borrower [4890,4898]"
    },
    {
      "src": "call_expression [7119,7187]",
      "dest": "call_expression [6636,6704]"
    },
    {
      "src": "identifier: decimals_ [1618,1627]",
      "dest": "identifier: decimals_ [1488,1497]"
    },
    {
      "src": "identifier: adminFeeMantissa_ [1428,1445]",
      "dest": "identifier: adminFeeMantissa_ [1175,1192]"
    },
    {
      "src": "parameter [3900,3916]",
      "dest": "parameter [3770,3786]"
    },
    {
      "src": "call_expression [8116,8153]",
      "dest": "call_expression [7633,7670]"
    },
    {
      "src": ".: . [9395,9396]",
      "dest": ".: . [8361,8362]"
    },
    {
      "src": "}: } [2336,2337]",
      "dest": "}: } [2206,2207]"
    },
    {
      "src": "return_type_definition [2732,2746]",
      "dest": "return_type_definition [2602,2616]"
    },
    {
      "src": "identifier: redeemUnderlyingInternal [3244,3268]",
      "dest": "identifier: redeemUnderlyingInternal [3114,3138]"
    },
    {
      "src": "call_expression [6736,6762]",
      "dest": "call_expression [6253,6279]"
    },
    {
      "src": "call_expression [6798,6959]",
      "dest": "call_expression [6315,6476]"
    },
    {
      "src": "call_argument [1538,1550]",
      "dest": "call_argument [1408,1420]"
    },
    {
      "src": "identifier: cTokenCollateral [5064,5080]",
      "dest": "identifier: cTokenCollateral [4934,4950]"
    },
    {
      "src": "type_name [3220,3224]",
      "dest": "type_name [3090,3094]"
    },
    {
      "src": "): ) [2257,2258]",
      "dest": "): ) [2127,2128]"
    },
    {
      "src": "(: ( [4414,4415]",
      "dest": "(: ( [4284,4285]"
    },
    {
      "src": "identifier: reserveFactorMantissa_ [1371,1393]",
      "dest": "identifier: reserveFactorMantissa_ [1118,1140]"
    },
    {
      "src": "identifier: token [5924,5929]",
      "dest": "identifier: token [5441,5446]"
    },
    {
      "src": "type_name [2271,2275]",
      "dest": "type_name [2141,2145]"
    },
    {
      "src": "call_argument [8142,8152]",
      "dest": "call_argument [7659,7669]"
    },
    {
      "src": "view: view [5878,5882]",
      "dest": "view: view [5395,5399]"
    },
    {
      "src": "(: ( [8092,8093]",
      "dest": "(: ( [7609,7610]"
    },
    {
      "src": "identifier: underlying [6751,6761]",
      "dest": "identifier: underlying [6268,6278]"
    },
    {
      "src": "call_argument [6908,6921]",
      "dest": "call_argument [6425,6438]"
    },
    {
      "src": "comment: // underflow already checked above, just subtract [7237,7286]",
      "dest": "comment: // underflow already checked above, just subtract [6754,6803]"
    },
    {
      "src": "): ) [5896,5897]",
      "dest": "): ) [5413,5414]"
    },
    {
      "src": "uint: uint [3954,3958]",
      "dest": "uint: uint [3824,3828]"
    },
    {
      "src": "=: = [5129,5130]",
      "dest": "=: = [4999,5000]"
    },
    {
      "src": "primitive_type [1227,1233]",
      "dest": "primitive_type [1016,1022]"
    },
    {
      "src": "parameter [2253,2257]",
      "dest": "parameter [2123,2127]"
    },
    {
      "src": "): ) [4401,4402]",
      "dest": "): ) [4271,4272]"
    },
    {
      "src": "address: address [5012,5019]",
      "dest": "address: address [4882,4889]"
    },
    {
      "src": "call_argument [5178,5194]",
      "dest": "call_argument [5048,5064]"
    },
    {
      "src": "}: } [4504,4505]",
      "dest": "}: } [4374,4375]"
    },
    {
      "src": "call_argument [3650,3662]",
      "dest": "call_argument [3520,3532]"
    },
    {
      "src": "): ) [6005,6006]",
      "dest": "): ) [5522,5523]"
    },
    {
      "src": "primitive_type [8676,8682]",
      "dest": "primitive_type [8193,8199]"
    },
    {
      "src": "visibility [8053,8061]",
      "dest": "visibility [7570,7578]"
    },
    {
      "src": "uint: uint [2253,2257]",
      "dest": "uint: uint [2123,2127]"
    },
    {
      "src": "variable_declaration_statement [3953,4000]",
      "dest": "variable_declaration_statement [3823,3870]"
    },
    {
      "src": "identifier: mint [2213,2217]",
      "dest": "identifier: mint [2083,2087]"
    },
    {
      "src": "identifier: err [5213,5216]",
      "dest": "identifier: err [5083,5086]"
    },
    {
      "src": "type_name [1363,1370]",
      "dest": "type_name [1110,1117]"
    },
    {
      "src": "): ) [9382,9383]",
      "dest": "): ) [8348,8349]"
    },
    {
      "src": "parameter [3183,3200]",
      "dest": "parameter [3053,3070]"
    },
    {
      "src": "type_cast_expression [6908,6921]",
      "dest": "type_cast_expression [6425,6438]"
    },
    {
      "src": "identifier: getCashPrior [5854,5866]",
      "dest": "identifier: getCashPrior [5371,5383]"
    },
    {
      "src": "visibility [5496,5504]",
      "dest": "visibility [8706,8714]"
    },
    {
      "src": "identifier: to [8173,8175]",
      "dest": "identifier: to [7690,7692]"
    },
    {
      "src": "variable_declaration_statement [4414,4477]",
      "dest": "variable_declaration_statement [4284,4347]"
    },
    {
      "src": ",: , [8171,8172]",
      "dest": ",: , [7688,7689]"
    },
    {
      "src": ",: , [5126,5127]",
      "dest": ",: , [4996,4997]"
    },
    {
      "src": "member_expression [9392,9402]",
      "dest": "member_expression [8358,8368]"
    },
    {
      "src": "identifier: doTransferIn [6640,6652]",
      "dest": "identifier: doTransferIn [6157,6169]"
    },
    {
      "src": "call_argument [5992,6005]",
      "dest": "call_argument [5509,5522]"
    },
    {
      "src": "number_literal: 0 [9381,9382]",
      "dest": "number_literal: 0 [8347,8348]"
    },
    {
      "src": "(: ( [3610,3611]",
      "dest": "(: ( [3480,3481]"
    },
    {
      "src": "call_argument [6818,6930]",
      "dest": "call_argument [6335,6447]"
    },
    {
      "src": "variable_declaration_statement [2270,2309]",
      "dest": "variable_declaration_statement [2140,2179]"
    },
    {
      "src": "): ) [3916,3917]",
      "dest": "): ) [3786,3787]"
    },
    {
      "src": "identifier: repayAmount [3987,3998]",
      "dest": "identifier: repayAmount [3857,3868]"
    },
    {
      "src": "function_body [5898,6014]",
      "dest": "function_body [5415,5531]"
    },
    {
      "src": "contract_declaration [419,9448]",
      "dest": "contract_declaration [418,8870]"
    },
    {
      "src": "return_type_definition [3602,3616]",
      "dest": "return_type_definition [3472,3486]"
    },
    {
      "src": "type_name [5118,5122]",
      "dest": "type_name [4988,4992]"
    },
    {
      "src": "identifier: amount [6923,6929]",
      "dest": "identifier: amount [6440,6446]"
    },
    {
      "src": "variable_declaration [4415,4423]",
      "dest": "variable_declaration [4285,4293]"
    },
    {
      "src": "call_expression [6841,6878]",
      "dest": "call_expression [6358,6395]"
    },
    {
      "src": "return: return [3237,3243]",
      "dest": "return: return [3107,3113]"
    },
    {
      "src": "identifier: token [5976,5981]",
      "dest": "identifier: token [5493,5498]"
    },
    {
      "src": "string_literal [8186,8213]",
      "dest": "string_literal [7703,7730]"
    },
    {
      "src": "(: ( [6780,6781]",
      "dest": "(: ( [6297,6298]"
    },
    {
      "src": "): ) [5494,5495]",
      "dest": "): ) [8704,8705]"
    },
    {
      "src": "): ) [8051,8052]",
      "dest": "): ) [7568,7569]"
    },
    {
      "src": "uint: uint [6715,6719]",
      "dest": "uint: uint [6232,6236]"
    },
    {
      "src": "call_argument [4464,4475]",
      "dest": "call_argument [4334,4345]"
    },
    {
      "src": "\": \" [7158,7159]",
      "dest": "\": \" [6675,6676]"
    },
    {
      "src": "type_name [1420,1427]",
      "dest": "type_name [1167,1174]"
    },
    {
      "src": "type_name [1044,1064]",
      "dest": "type_name [893,913]"
    },
    {
      "src": "primitive_type [7037,7041]",
      "dest": "primitive_type [6554,6558]"
    },
    {
      "src": ",: , [5046,5047]",
      "dest": ",: , [4916,4917]"
    },
    {
      "src": "expression_statement [7119,7188]",
      "dest": "expression_statement [6636,6705]"
    },
    {
      "src": ",: , [1600,1601]",
      "dest": ",: , [1470,1471]"
    },
    {
      "src": "comment: /**      * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory      *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to      *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified      *      it is >= amount, this should not revert in normal conditions.      *      *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.      *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca      */ [7301,7991]",
      "dest": "comment: /**      * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory      *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to      *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified      *      it is >= amount, this should not revert in normal conditions.      *      *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.      *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca      */ [6818,7508]"
    },
    {
      "src": "state_mutability [5878,5882]",
      "dest": "state_mutability [5395,5399]"
    },
    {
      "src": "function: function [4316,4324]",
      "dest": "function: function [4186,4194]"
    },
    {
      "src": "type_name [3574,3578]",
      "dest": "type_name [3444,3448]"
    },
    {
      "src": "primitive_type [9416,9420]",
      "dest": "primitive_type [8382,8386]"
    },
    {
      "src": "type_name [6667,6671]",
      "dest": "type_name [6184,6188]"
    },
    {
      "src": "): ) [5080,5081]",
      "dest": "): ) [4950,4951]"
    },
    {
      "src": "identifier: repayBorrowBehalf [4325,4342]",
      "dest": "identifier: repayBorrowBehalf [4195,4212]"
    },
    {
      "src": "expression_statement [8073,8215]",
      "dest": "expression_statement [7590,7732]"
    },
    {
      "src": ",: , [8038,8039]",
      "dest": ",: , [7555,7556]"
    },
    {
      "src": "(: ( [8780,8781]",
      "dest": "(: ( [8280,8281]"
    },
    {
      "src": "parameter [6698,6702]",
      "dest": "parameter [6215,6219]"
    },
    {
      "src": "call_argument [5165,5176]",
      "dest": "call_argument [5035,5046]"
    },
    {
      "src": "identifier: borrower [4454,4462]",
      "dest": "identifier: borrower [4324,4332]"
    },
    {
      "src": "variable_declaration_statement [5117,5196]",
      "dest": "variable_declaration_statement [4987,5066]"
    },
    {
      "src": "identifier: amount [8177,8183]",
      "dest": "identifier: amount [7694,7700]"
    },
    {
      "src": "type_name [6715,6719]",
      "dest": "type_name [6232,6236]"
    },
    {
      "src": "solidity: solidity [7,15]",
      "dest": "solidity: solidity [7,15]"
    },
    {
      "src": "): ) [8152,8153]",
      "dest": "): ) [7669,7670]"
    },
    {
      "src": "parameter [3611,3615]",
      "dest": "parameter [3481,3485]"
    },
    {
      "src": "uint8: uint8 [1321,1326]",
      "dest": "uint8: uint8 [1324,1329]"
    },
    {
      "src": "identifier: repayAmount [5035,5046]",
      "dest": "identifier: repayAmount [4905,4916]"
    },
    {
      "src": "call_argument [6841,6900]",
      "dest": "call_argument [6358,6417]"
    },
    {
      "src": "): ) [1670,1671]",
      "dest": "): ) [1540,1541]"
    },
    {
      "src": "identifier: abi [8093,8096]",
      "dest": "identifier: abi [7610,7613]"
    },
    {
      "src": "user_defined_type [446,461]",
      "dest": "user_defined_type [445,460]"
    },
    {
      "src": "primitive_type [6667,6671]",
      "dest": "primitive_type [6184,6188]"
    },
    {
      "src": "call_argument [2780,2792]",
      "dest": "call_argument [2650,2662]"
    },
    {
      "src": "string_literal [6932,6958]",
      "dest": "string_literal [6449,6475]"
    },
    {
      "src": "function: function [2688,2696]",
      "dest": "function: function [2558,2566]"
    },
    {
      "src": "(: ( [997,998]",
      "dest": "(: ( [846,847]"
    },
    {
      "src": "type_name [2218,2222]",
      "dest": "type_name [2088,2092]"
    },
    {
      "src": "identifier: CTokenInterface [5048,5063]",
      "dest": "identifier: CTokenInterface [4918,4933]"
    },
    {
      "src": "function_body [8062,8222]",
      "dest": "function_body [7579,7739]"
    },
    {
      "src": "contract: contract [419,427]",
      "dest": "contract: contract [418,426]"
    },
    {
      "src": "): ) [8702,8703]",
      "dest": "): ) [8219,8220]"
    },
    {
      "src": "string [7158,7186]",
      "dest": "string [6675,6703]"
    },
    {
      "src": "function: function [978,986]",
      "dest": "function: function [827,835]"
    },
    {
      "src": "returns: returns [3927,3934]",
      "dest": "returns: returns [3797,3804]"
    },
    {
      "src": "member_expression [6736,6772]",
      "dest": "member_expression [6253,6289]"
    },
    {
      "src": ".: . [6891,6892]",
      "dest": ".: . [6408,6409]"
    },
    {
      "src": "): ) [7082,7083]",
      "dest": "): ) [6599,6600]"
    },
    {
      "src": "identifier: EIP20Interface [6736,6750]",
      "dest": "identifier: EIP20Interface [6253,6267]"
    },
    {
      "src": "function_definition [4987,5224]",
      "dest": "function_definition [4857,5094]"
    },
    {
      "src": "): ) [7107,7108]",
      "dest": "): ) [6624,6625]"
    },
    {
      "src": "identifier: borrowInternal [3635,3649]",
      "dest": "identifier: borrowInternal [3505,3519]"
    },
    {
      "src": "(: ( [5891,5892]",
      "dest": "(: ( [5408,5409]"
    },
    {
      "src": "member_expression [6841,6891]",
      "dest": "member_expression [6358,6408]"
    },
    {
      "src": "(: ( [3935,3936]",
      "dest": "(: ( [3805,3806]"
    },
    {
      "src": "): ) [2721,2722]",
      "dest": "): ) [2591,2592]"
    },
    {
      "src": "call_expression [3635,3663]",
      "dest": "call_expression [3505,3533]"
    },
    {
      "src": "identifier: redeemAmount [3188,3200]",
      "dest": "identifier: redeemAmount [3058,3070]"
    },
    {
      "src": "(: ( [2252,2253]",
      "dest": "(: ( [2122,2123]"
    },
    {
      "src": "type_name [5909,5923]",
      "dest": "type_name [5426,5440]"
    },
    {
      "src": "call_expression [6818,6930]",
      "dest": "call_expression [6335,6447]"
    },
    {
      "src": "(: ( [2740,2741]",
      "dest": "(: ( [2610,2611]"
    },
    {
      "src": "\": \" [7185,7186]",
      "dest": "\": \" [6702,6703]"
    },
    {
      "src": "(: ( [4342,4343]",
      "dest": "(: ( [4212,4213]"
    },
    {
      "src": "(: ( [3953,3954]",
      "dest": "(: ( [3823,3824]"
    },
    {
      "src": "type_name [3611,3615]",
      "dest": "type_name [3481,3485]"
    },
    {
      "src": "(: ( [6840,6841]",
      "dest": "(: ( [6357,6358]"
    },
    {
      "src": "): ) [6958,6959]",
      "dest": "): ) [6475,6476]"
    },
    {
      "src": "uint: uint [4415,4419]",
      "dest": "uint: uint [4285,4289]"
    },
    {
      "src": ".: . [8096,8097]",
      "dest": ".: . [7613,7614]"
    },
    {
      "src": "return_type_definition [5883,5897]",
      "dest": "return_type_definition [5400,5414]"
    },
    {
      "src": "(: ( [3649,3650]",
      "dest": "(: ( [3519,3520]"
    },
    {
      "src": "(: ( [6772,6773]",
      "dest": "(: ( [6289,6290]"
    },
    {
      "src": "(: ( [9360,9361]",
      "dest": "(: ( [8326,8327]"
    },
    {
      "src": "{: { [3617,3618]",
      "dest": "{: { [3487,3488]"
    },
    {
      "src": "(: ( [5991,5992]",
      "dest": "(: ( [5508,5509]"
    },
    {
      "src": ".: . [1526,1527]",
      "dest": ".: . [1396,1397]"
    },
    {
      "src": "identifier: selector [6892,6900]",
      "dest": "identifier: selector [6409,6417]"
    },
    {
      "src": "uint: uint [2741,2745]",
      "dest": "uint: uint [2611,2615]"
    },
    {
      "src": "type_name [8020,8035]",
      "dest": "type_name [7537,7552]"
    },
    {
      "src": "(: ( [4453,4454]",
      "dest": "(: ( [4323,4324]"
    },
    {
      "src": "identifier: transferFrom [6879,6891]",
      "dest": "identifier: transferFrom [6396,6408]"
    },
    {
      "src": "identifier: borrowAmount [3650,3662]",
      "dest": "identifier: borrowAmount [3520,3532]"
    },
    {
      "src": "primitive_type [998,1005]",
      "dest": "primitive_type [847,854]"
    },
    {
      "src": "address: address [998,1005]",
      "dest": "address: address [847,854]"
    },
    {
      "src": "uint: uint [4361,4365]",
      "dest": "uint: uint [4231,4235]"
    },
    {
      "src": "expression_statement [1766,1807]",
      "dest": "expression_statement [1636,1677]"
    },
    {
      "src": "variable_declaration_statement [7037,7109]",
      "dest": "variable_declaration_statement [6554,6626]"
    },
    {
      "src": "identifier: decode [9396,9402]",
      "dest": "identifier: decode [8362,8368]"
    },
    {
      "src": "address: address [7094,7101]",
      "dest": "address: address [6611,6618]"
    },
    {
      "src": "primitive_type [1363,1370]",
      "dest": "primitive_type [1110,1117]"
    },
    {
      "src": ",: , [444,445]",
      "dest": ",: , [443,444]"
    },
    {
      "src": "variable_declaration [8738,8761]",
      "dest": "variable_declaration [8241,8264]"
    },
    {
      "src": "memory: memory [8663,8669]",
      "dest": "memory: memory [8180,8186]"
    },
    {
      "src": "(: ( [1537,1538]",
      "dest": "(: ( [1407,1408]"
    },
    {
      "src": "expression_statement [6798,6960]",
      "dest": "expression_statement [6315,6477]"
    },
    {
      "src": "): ) [9420,9421]",
      "dest": "): ) [8386,8387]"
    },
    {
      "src": "primitive_type [5892,5896]",
      "dest": "primitive_type [5409,5413]"
    },
    {
      "src": "(: ( [6866,6867]",
      "dest": "(: ( [6383,6384]"
    },
    {
      "src": "}: } [9444,9445]",
      "dest": "}: } [8410,8411]"
    },
    {
      "src": "function_body [2747,2801]",
      "dest": "function_body [2617,2671]"
    },
    {
      "src": "): ) [6785,6786]",
      "dest": "): ) [6302,6303]"
    },
    {
      "src": ".: . [9371,9372]",
      "dest": ".: . [8337,8338]"
    },
    {
      "src": "type_name [5100,5104]",
      "dest": "type_name [4970,4974]"
    },
    {
      "src": "comment: /*** Safe Token ***/ [5585,5605]",
      "dest": "comment: /*** Safe Token ***/ [5102,5122]"
    },
    {
      "src": "visibility [6680,6688]",
      "dest": "visibility [6197,6205]"
    },
    {
      "src": "uint: uint [6698,6702]",
      "dest": "uint: uint [6215,6219]"
    },
    {
      "src": "): ) [6702,6703]",
      "dest": "): ) [6219,6220]"
    },
    {
      "src": "identifier: returndata [8751,8761]",
      "dest": "identifier: returndata [8254,8264]"
    },
    {
      "src": "identifier: name_ [1602,1607]",
      "dest": "identifier: name_ [1472,1477]"
    },
    {
      "src": "call_argument [1609,1616]",
      "dest": "call_argument [1479,1486]"
    },
    {
      "src": "return: return [5969,5975]",
      "dest": "return: return [5486,5492]"
    },
    {
      "src": "expression_statement [1521,1672]",
      "dest": "expression_statement [1391,1542]"
    },
    {
      "src": "uint: uint [2704,2708]",
      "dest": "uint: uint [2574,2578]"
    },
    {
      "src": "returns: returns [5883,5890]",
      "dest": "returns: returns [5400,5407]"
    },
    {
      "src": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param data The call data (encoded using abi.encode or one of its variants).      * @param errorMessage The revert string to return on failure.      */ [8230,8622]",
      "dest": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param data The call data (encoded using abi.encode or one of its variants).      * @param errorMessage The revert string to return on failure.      */ [7747,8139]"
    },
    {
      "src": "uint: uint [6667,6671]",
      "dest": "uint: uint [6184,6188]"
    },
    {
      "src": "identifier: encodeWithSelector [8097,8115]",
      "dest": "identifier: encodeWithSelector [7614,7632]"
    },
    {
      "src": "(: ( [3986,3987]",
      "dest": "(: ( [3856,3857]"
    },
    {
      "src": ",: , [5163,5164]",
      "dest": ",: , [5033,5034]"
    },
    {
      "src": "primitive_type [2704,2708]",
      "dest": "primitive_type [2574,2578]"
    },
    {
      "src": "): ) [7186,7187]",
      "dest": "): ) [6703,6704]"
    },
    {
      "src": ",: , [9422,9423]",
      "dest": ",: , [8388,8389]"
    },
    {
      "src": "identifier: adminFeeMantissa_ [1653,1670]",
      "dest": "identifier: adminFeeMantissa_ [1523,1540]"
    },
    {
      "src": "parameter [6653,6665]",
      "dest": "parameter [6170,6182]"
    },
    {
      "src": "type_name [3936,3940]",
      "dest": "type_name [3806,3810]"
    },
    {
      "src": "identifier: underlying_ [1744,1755]",
      "dest": "identifier: underlying_ [1614,1625]"
    },
    {
      "src": "primitive_type [8657,8662]",
      "dest": "primitive_type [8174,8179]"
    },
    {
      "src": "external: external [5082,5090]",
      "dest": "external: external [4952,4960]"
    },
    {
      "src": "}: } [3670,3671]",
      "dest": "}: } [3540,3541]"
    },
    {
      "src": ",: , [1246,1247]",
      "dest": ",: , [1083,1084]"
    },
    {
      "src": "parameter [1104,1140]",
      "dest": "parameter [953,989]"
    },
    {
      "src": "identifier: underlying [1731,1741]",
      "dest": "identifier: underlying [1601,1611]"
    },
    {
      "src": "call_argument [8177,8183]",
      "dest": "call_argument [7694,7700]"
    },
    {
      "src": "parameter [998,1017]",
      "dest": "parameter [847,866]"
    },
    {
      "src": "internal: internal [8053,8061]",
      "dest": "internal: internal [7570,7578]"
    },
    {
      "src": "identifier: CToken [438,444]",
      "dest": "identifier: CToken [437,443]"
    },
    {
      "src": "primitive_type [4397,4401]",
      "dest": "primitive_type [4267,4271]"
    },
    {
      "src": "primitive_type [8738,8743]",
      "dest": "primitive_type [8241,8246]"
    },
    {
      "src": "returns: returns [6689,6696]",
      "dest": "returns: returns [6206,6213]"
    },
    {
      "src": "identifier: repayBorrowInternal [3967,3986]",
      "dest": "identifier: repayBorrowInternal [3837,3856]"
    },
    {
      "src": "}: } [2800,2801]",
      "dest": "}: } [2670,2671]"
    },
    {
      "src": "uint: uint [5030,5034]",
      "dest": "uint: uint [4900,4904]"
    },
    {
      "src": "call_argument [1602,1607]",
      "dest": "call_argument [1472,1477]"
    },
    {
      "src": "address: address [6653,6660]",
      "dest": "address: address [6170,6177]"
    },
    {
      "src": "type_name [8676,8682]",
      "dest": "type_name [8193,8199]"
    },
    {
      "src": "parameter [1044,1077]",
      "dest": "parameter [893,926]"
    },
    {
      "src": "identifier: symbol_ [1609,1616]",
      "dest": "identifier: symbol_ [1479,1486]"
    },
    {
      "src": ".: . [8153,8154]",
      "dest": ".: . [7670,7671]"
    },
    {
      "src": "): ) [7106,7107]",
      "dest": "): ) [6623,6624]"
    },
    {
      "src": "type_name [8738,8743]",
      "dest": "type_name [8241,8246]"
    },
    {
      "src": "(: ( [5011,5012]",
      "dest": "(: ( [4881,4882]"
    },
    {
      "src": "uint: uint [5892,5896]",
      "dest": "uint: uint [5409,5413]"
    },
    {
      "src": "bytes: bytes [8738,8743]",
      "dest": "bytes: bytes [8241,8246]"
    },
    {
      "src": "type_name [4361,4365]",
      "dest": "type_name [4231,4235]"
    },
    {
      "src": "identifier: borrow [3567,3573]",
      "dest": "identifier: borrow [3437,3443]"
    },
    {
      "src": ",: , [3962,3963]",
      "dest": ",: , [3832,3833]"
    },
    {
      "src": "call_argument [4454,4462]",
      "dest": "call_argument [4324,4332]"
    },
    {
      "src": "return_statement [5206,5217]",
      "dest": "return_statement [5076,5087]"
    },
    {
      "src": "call_argument [7072,7082]",
      "dest": "call_argument [6589,6599]"
    },
    {
      "src": "primitive_type [7094,7101]",
      "dest": "primitive_type [6611,6618]"
    },
    {
      "src": "call_argument [3987,3998]",
      "dest": "call_argument [3857,3868]"
    },
    {
      "src": "return_statement [2319,2330]",
      "dest": "return_statement [2189,2200]"
    },
    {
      "src": "return_statement [5969,6007]",
      "dest": "return_statement [5486,5524]"
    },
    {
      "src": "memory: memory [8744,8750]",
      "dest": "memory: memory [8247,8253]"
    },
    {
      "src": "return: return [3628,3634]",
      "dest": "return: return [3498,3504]"
    },
    {
      "src": "visibility [3202,3210]",
      "dest": "visibility [3072,3080]"
    },
    {
      "src": ",: , [9413,9414]",
      "dest": ",: , [8379,8380]"
    },
    {
      "src": "call_argument [2297,2307]",
      "dest": "call_argument [2167,2177]"
    },
    {
      "src": "comment: /**      * @notice Initialize the new money market      * @param underlying_ The address of the underlying asset      * @param comptroller_ The address of the Comptroller      * @param interestRateModel_ The address of the interest rate model      * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18      * @param name_ ERC-20 name of this token      * @param symbol_ ERC-20 symbol of this token      * @param decimals_ ERC-20 decimal precision of this token      */ [469,972]",
      "dest": "comment: /**      * @notice Initialize the new money market      * @param underlying_ The address of the underlying asset      * @param comptroller_ The address of the Comptroller      * @param interestRateModel_ The address of the interest rate model      * @param name_ ERC-20 name of this token      * @param symbol_ ERC-20 symbol of this token      */ [468,821]"
    },
    {
      "src": "primitive_type [3900,3904]",
      "dest": "primitive_type [3770,3774]"
    },
    {
      "src": "{: { [2259,2260]",
      "dest": "{: { [2129,2130]"
    },
    {
      "src": "{: { [3226,3227]",
      "dest": "{: { [3096,3097]"
    },
    {
      "src": "identifier: balanceBefore [7143,7156]",
      "dest": "identifier: balanceBefore [6660,6673]"
    },
    {
      "src": "call_argument [8173,8175]",
      "dest": "call_argument [7690,7692]"
    },
    {
      "src": "identifier: this [6916,6920]",
      "dest": "identifier: this [6433,6437]"
    },
    {
      "src": "if: if [9357,9359]",
      "dest": "if: if [8323,8325]"
    },
    {
      "src": "(: ( [2270,2271]",
      "dest": "(: ( [2140,2141]"
    },
    {
      "src": "memory: memory [1280,1286]",
      "dest": "memory: memory [1069,1075]"
    },
    {
      "src": "call_argument [8116,8171]",
      "dest": "call_argument [7633,7688]"
    },
    {
      "src": "address: address [4343,4350]",
      "dest": "address: address [4213,4220]"
    },
    {
      "src": ",: , [6930,6931]",
      "dest": ",: , [6447,6448]"
    },
    {
      "src": "identifier: totalSupply [1793,1804]",
      "dest": "identifier: totalSupply [1663,1674]"
    },
    {
      "src": "): ) [5867,5868]",
      "dest": "): ) [5384,5385]"
    },
    {
      "src": "member_expression [6841,6900]",
      "dest": "member_expression [6358,6417]"
    },
    {
      "src": "type_name [4415,4419]",
      "dest": "type_name [4285,4289]"
    },
    {
      "src": "identifier: CErc20Interface [446,461]",
      "dest": "identifier: CErc20Interface [445,460]"
    },
    {
      "src": "call_argument [8093,8184]",
      "dest": "call_argument [7610,7701]"
    },
    {
      "src": "(: ( [3899,3900]",
      "dest": "(: ( [3769,3770]"
    },
    {
      "src": "variable_declaration_statement [6715,6788]",
      "dest": "variable_declaration_statement [6232,6305]"
    },
    {
      "src": ",: , [4462,4463]",
      "dest": ",: , [4332,4333]"
    },
    {
      "src": "): ) [2792,2793]",
      "dest": "): ) [2662,2663]"
    },
    {
      "src": "address: address [6773,6780]",
      "dest": "address: address [6290,6297]"
    },
    {
      "src": "identifier: amount [8045,8051]",
      "dest": "identifier: amount [7562,7568]"
    },
    {
      "src": "identifier: redeem [2697,2703]",
      "dest": "identifier: redeem [2567,2573]"
    },
    {
      "src": "type_name [3900,3904]",
      "dest": "type_name [3770,3774]"
    },
    {
      "src": "call_expression [7057,7083]",
      "dest": "call_expression [6574,6600]"
    },
    {
      "src": "type_name [6653,6660]",
      "dest": "type_name [6170,6177]"
    },
    {
      "src": "call_argument [6867,6877]",
      "dest": "call_argument [6384,6394]"
    },
    {
      "src": "return_statement [3237,3283]",
      "dest": "return_statement [3107,3153]"
    },
    {
      "src": "identifier: borrowAmount [3579,3591]",
      "dest": "identifier: borrowAmount [3449,3461]"
    },
    {
      "src": "(: ( [7071,7072]",
      "dest": "(: ( [6588,6589]"
    },
    {
      "src": "(: ( [6697,6698]",
      "dest": "(: ( [6214,6215]"
    },
    {
      "src": "primitive_type [2741,2745]",
      "dest": "primitive_type [2611,2615]"
    },
    {
      "src": "call_expression [1766,1792]",
      "dest": "call_expression [1636,1662]"
    },
    {
      "src": ",: , [1651,1652]",
      "dest": ",: , [1521,1522]"
    },
    {
      "src": "memory: memory [1234,1240]",
      "dest": "memory: memory [1023,1029]"
    },
    {
      "src": ",: , [1077,1078]",
      "dest": ",: , [926,927]"
    },
    {
      "src": ",: , [6921,6922]",
      "dest": ",: , [6438,6439]"
    },
    {
      "src": "call_argument [7102,7106]",
      "dest": "call_argument [6619,6623]"
    },
    {
      "src": ">=: >= [7140,7142]",
      "dest": ">=: >= [6657,6659]"
    },
    {
      "src": "parameter [5100,5104]",
      "dest": "parameter [4970,4974]"
    },
    {
      "src": "return: return [4487,4493]",
      "dest": "return: return [4357,4363]"
    },
    {
      "src": "member_expression [7057,7093]",
      "dest": "member_expression [6574,6610]"
    },
    {
      "src": "variable_declaration_tuple [3953,3964]",
      "dest": "variable_declaration_tuple [3823,3834]"
    },
    {
      "src": "call_argument [7127,7156]",
      "dest": "call_argument [6644,6673]"
    },
    {
      "src": "uint: uint [8040,8044]",
      "dest": "uint: uint [7557,7561]"
    },
    {
      "src": "function_definition [2204,2337]",
      "dest": "function_definition [2074,2207]"
    },
    {
      "src": "call_argument [6781,6785]",
      "dest": "call_argument [6298,6302]"
    },
    {
      "src": "parameter [4361,4377]",
      "dest": "parameter [4231,4247]"
    },
    {
      "src": "}: } [3289,3290]",
      "dest": "}: } [3159,3160]"
    },
    {
      "src": "identifier: encodeWithSelector [6822,6840]",
      "dest": "identifier: encodeWithSelector [6339,6357]"
    },
    {
      "src": "{: { [5898,5899]",
      "dest": "{: { [5415,5416]"
    },
    {
      "src": "call_argument [7094,7107]",
      "dest": "call_argument [6611,6624]"
    },
    {
      "src": "): ) [1791,1792]",
      "dest": "): ) [1661,1662]"
    },
    {
      "src": "{: { [1454,1455]",
      "dest": "{: { [1201,1202]"
    },
    {
      "src": "type_name [1104,1121]",
      "dest": "type_name [953,970]"
    },
    {
      "src": "primitive_type [4361,4365]",
      "dest": "primitive_type [4231,4235]"
    },
    {
      "src": "call_expression [9392,9422]",
      "dest": "call_expression [8358,8388]"
    },
    {
      "src": "expression_statement [1731,1756]",
      "dest": "expression_statement [1601,1626]"
    },
    {
      "src": "identifier: name_ [1241,1246]",
      "dest": "identifier: name_ [1030,1035]"
    },
    {
      "src": "call_argument [9403,9413]",
      "dest": "call_argument [8369,8379]"
    },
    {
      "src": "{: { [5106,5107]",
      "dest": "{: { [4976,4977]"
    },
    {
      "src": "identifier: underlying [8142,8152]",
      "dest": "identifier: underlying [7659,7669]"
    },
    {
      "src": "(: ( [9402,9403]",
      "dest": "(: ( [8368,8369]"
    },
    {
      "src": "{: { [2747,2748]",
      "dest": "{: { [2617,2618]"
    },
    {
      "src": "): ) [1445,1446]",
      "dest": "): ) [1192,1193]"
    },
    {
      "src": "member_expression [1766,1804]",
      "dest": "member_expression [1636,1674]"
    },
    {
      "src": "): ) [6877,6878]",
      "dest": "): ) [6394,6395]"
    },
    {
      "src": "visibility [2723,2731]",
      "dest": "visibility [2593,2601]"
    },
    {
      "src": "identifier: ComptrollerInterface [1044,1064]",
      "dest": "identifier: ComptrollerInterface [893,913]"
    },
    {
      "src": "variable_declaration_tuple [5117,5128]",
      "dest": "variable_declaration_tuple [4987,4998]"
    },
    {
      "src": ",: , [6906,6907]",
      "dest": ",: , [6423,6424]"
    },
    {
      "src": "type_name [7037,7041]",
      "dest": "type_name [6554,6558]"
    },
    {
      "src": "): ) [2233,2234]",
      "dest": "): ) [2103,2104]"
    },
    {
      "src": "function: function [3157,3165]",
      "dest": "function: function [3027,3035]"
    },
    {
      "src": "comment: /**      * @notice Sender repays a borrow belonging to borrower      * @param borrower the account with the debt being payed off      * @param repayAmount The amount to repay      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [4036,4310]",
      "dest": "comment: /**      * @notice Sender repays a borrow belonging to borrower      * @param borrower the account with the debt being payed off      * @param repayAmount The amount to repay      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [3906,4180]"
    },
    {
      "src": "returns: returns [2732,2739]",
      "dest": "returns: returns [2602,2609]"
    },
    {
      "src": "uint: uint [3936,3940]",
      "dest": "uint: uint [3806,3810]"
    },
    {
      "src": "type_name [998,1005]",
      "dest": "type_name [847,854]"
    },
    {
      "src": "solidity_pragma_token [7,23]",
      "dest": "solidity_pragma_token [7,23]"
    },
    {
      "src": "type_name [1273,1279]",
      "dest": "type_name [1062,1068]"
    },
    {
      "src": "identifier: this [7102,7106]",
      "dest": "identifier: this [6619,6623]"
    },
    {
      "src": "external: external [2723,2731]",
      "dest": "external: external [2593,2601]"
    },
    {
      "src": "(: ( [5099,5100]",
      "dest": "(: ( [4969,4970]"
    },
    {
      "src": "primitive_type [6715,6719]",
      "dest": "primitive_type [6232,6236]"
    },
    {
      "src": "call_argument [6902,6906]",
      "dest": "call_argument [6419,6423]"
    },
    {
      "src": "primitive_type [1273,1279]",
      "dest": "primitive_type [1062,1068]"
    },
    {
      "src": "return_statement [4487,4498]",
      "dest": "return_statement [4357,4368]"
    },
    {
      "src": ",: , [1550,1551]",
      "dest": ",: , [1420,1421]"
    },
    {
      "src": "function_definition [5458,5577]",
      "dest": "function_definition [8650,8867]"
    },
    {
      "src": "(: ( [7093,7094]",
      "dest": "(: ( [6610,6611]"
    },
    {
      "src": "identifier: borrower [5155,5163]",
      "dest": "identifier: borrower [5025,5033]"
    },
    {
      "src": "): ) [3591,3592]",
      "dest": "): ) [3461,3462]"
    },
    {
      "src": "parameter [5030,5046]",
      "dest": "parameter [4900,4916]"
    },
    {
      "src": "return_type_definition [3211,3225]",
      "dest": "return_type_definition [3081,3095]"
    },
    {
      "src": "string [8186,8213]",
      "dest": "string [7703,7730]"
    },
    {
      "src": "function_body [1454,1814]",
      "dest": "function_body [1201,1684]"
    },
    {
      "src": "call_expression [3967,3999]",
      "dest": "call_expression [3837,3869]"
    },
    {
      "src": "}: } [5576,5577]",
      "dest": "}: } [8866,8867]"
    },
    {
      "src": "pragma_directive [0,24]",
      "dest": "pragma_directive [0,24]"
    },
    {
      "src": "parameter [8040,8051]",
      "dest": "parameter [7557,7568]"
    },
    {
      "src": "comment: /**       * @notice Sender borrows assets from the protocol to their own address       * @param borrowAmount The amount of the underlying asset to borrow       * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)       */ [3298,3552]",
      "dest": "comment: /**       * @notice Sender borrows assets from the protocol to their own address       * @param borrowAmount The amount of the underlying asset to borrow       * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)       */ [3168,3422]"
    },
    {
      "src": "uint: uint [3611,3615]",
      "dest": "uint: uint [3481,3485]"
    },
    {
      "src": "identifier: CErc20 [428,434]",
      "dest": "identifier: CErc20 [427,433]"
    },
    {
      "src": "(: ( [3219,3220]",
      "dest": "(: ( [3089,3090]"
    },
    {
      "src": "type_name [6698,6702]",
      "dest": "type_name [6215,6219]"
    },
    {
      "src": "identifier: balanceAfter [7127,7139]",
      "dest": "identifier: balanceAfter [6644,6656]"
    },
    {
      "src": ",: , [7156,7157]",
      "dest": ",: , [6673,6674]"
    },
    {
      "src": "type_name [3954,3958]",
      "dest": "type_name [3824,3828]"
    },
    {
      "src": "primitive_type [5480,5484]",
      "dest": "primitive_type [8679,8686]"
    },
    {
      "src": "variable_declaration [5909,5929]",
      "dest": "variable_declaration [5426,5446]"
    },
    {
      "src": "function: function [4987,4995]",
      "dest": "function: function [4857,4865]"
    },
    {
      "src": "): ) [8183,8184]",
      "dest": "): ) [7700,7701]"
    },
    {
      "src": "primitive_type [4343,4350]",
      "dest": "primitive_type [4213,4220]"
    },
    {
      "src": "parameter [4343,4359]",
      "dest": "parameter [4213,4229]"
    },
    {
      "src": "{: { [8712,8713]",
      "dest": "{: { [8230,8231]"
    },
    {
      "src": "parameter [5012,5028]",
      "dest": "parameter [4882,4898]"
    },
    {
      "src": "{: { [8062,8063]",
      "dest": "{: { [7579,7580]"
    },
    {
      "src": "returns: returns [3211,3218]",
      "dest": "returns: returns [3081,3088]"
    },
    {
      "src": "function_body [6704,7293]",
      "dest": "function_body [6221,6810]"
    },
    {
      "src": "call_expression [1521,1671]",
      "dest": "call_expression [1391,1541]"
    },
    {
      "src": "uint: uint [4397,4401]",
      "dest": "uint: uint [4267,4271]"
    },
    {
      "src": "binary_expression [9361,9382]",
      "dest": "binary_expression [8327,8348]"
    },
    {
      "src": "): ) [6929,6930]",
      "dest": "): ) [6446,6447]"
    },
    {
      "src": "uint256: uint256 [1420,1427]",
      "dest": "uint256: uint256 [1167,1174]"
    },
    {
      "src": "payable: payable [8028,8035]",
      "dest": "payable: payable [7545,7552]"
    },
    {
      "src": "identifier: underlying [7072,7082]",
      "dest": "identifier: underlying [6589,6599]"
    },
    {
      "src": "parameter [8657,8674]",
      "dest": "parameter [8174,8191]"
    },
    {
      "src": "identifier: doTransferOut [8006,8019]",
      "dest": "identifier: doTransferOut [7523,7536]"
    },
    {
      "src": "(: ( [9415,9416]",
      "dest": "(: ( [8381,8382]"
    },
    {
      "src": "}: } [8221,8222]",
      "dest": "}: } [7738,7739]"
    },
    {
      "src": "parameter [4397,4401]",
      "dest": "parameter [4267,4271]"
    },
    {
      "src": "identifier: underlying [6867,6877]",
      "dest": "identifier: underlying [6384,6394]"
    },
    {
      "src": "function: function [6631,6639]",
      "dest": "function: function [6148,6156]"
    },
    {
      "src": "function_definition [8628,9445]",
      "dest": "function_definition [8145,8411]"
    },
    {
      "src": "visibility [2235,2243]",
      "dest": "visibility [2105,2113]"
    },
    {
      "src": "variable_declaration [7037,7054]",
      "dest": "variable_declaration [6554,6571]"
    },
    {
      "src": "\": \" [8212,8213]",
      "dest": "\": \" [7729,7730]"
    },
    {
      "src": "function_body [3617,3671]",
      "dest": "function_body [3487,3541]"
    },
    {
      "src": "function_body [2259,2337]",
      "dest": "function_body [2129,2207]"
    },
    {
      "src": "=: = [5930,5931]",
      "dest": "=: = [5447,5448]"
    },
    {
      "src": "primitive_type [5100,5104]",
      "dest": "primitive_type [4970,4974]"
    },
    {
      "src": "call_argument [1629,1651]",
      "dest": "call_argument [1499,1521]"
    },
    {
      "src": "identifier: balanceAfter [7205,7217]",
      "dest": "identifier: balanceAfter [6722,6734]"
    },
    {
      "src": "identifier: balanceOf [5982,5991]",
      "dest": "identifier: balanceOf [5499,5508]"
    },
    {
      "src": ",: , [8184,8185]",
      "dest": ",: , [7701,7702]"
    },
    {
      "src": "parameter [2704,2721]",
      "dest": "parameter [2574,2591]"
    },
    {
      "src": "uint: uint [3900,3904]",
      "dest": "uint: uint [3770,3774]"
    },
    {
      "src": "): ) [3615,3616]",
      "dest": "): ) [3485,3486]"
    },
    {
      "src": "type_name [1321,1326]",
      "dest": "type_name [1324,1329]"
    },
    {
      "src": "}: } [9447,9448]",
      "dest": "}: } [8869,8870]"
    },
    {
      "src": "parameter [2741,2745]",
      "dest": "parameter [2611,2615]"
    },
    {
      "src": "(: ( [9391,9392]",
      "dest": "(: ( [8357,8358]"
    },
    {
      "src": "function_body [3226,3290]",
      "dest": "function_body [3096,3160]"
    },
    {
      "src": ",: , [5028,5029]",
      "dest": ",: , [4898,4899]"
    },
    {
      "src": ",: , [6665,6666]",
      "dest": ",: , [6182,6183]"
    },
    {
      "src": "function_body [4403,4505]",
      "dest": "function_body [4273,4375]"
    },
    {
      "src": "): ) [3662,3663]",
      "dest": "): ) [3532,3533]"
    },
    {
      "src": "identifier: err [4420,4423]",
      "dest": "identifier: err [4290,4293]"
    },
    {
      "src": "=: = [2282,2283]",
      "dest": "=: = [2152,2153]"
    },
    {
      "src": "call_expression [3244,3282]",
      "dest": "call_expression [3114,3152]"
    },
    {
      "src": "identifier: initialize [1527,1537]",
      "dest": "identifier: initialize [1397,1407]"
    },
    {
      "src": ",: , [6900,6901]",
      "dest": ",: , [6417,6418]"
    },
    {
      "src": "function_definition [5845,6014]",
      "dest": "function_definition [5362,5531]"
    },
    {
      "src": "): ) [5127,5128]",
      "dest": "): ) [4997,4998]"
    },
    {
      "src": "identifier: abi [6818,6821]",
      "dest": "identifier: abi [6335,6338]"
    },
    {
      "src": "type_name [3183,3187]",
      "dest": "type_name [3053,3057]"
    },
    {
      "src": ",: , [5176,5177]",
      "dest": ",: , [5046,5047]"
    },
    {
      "src": "): ) [3281,3282]",
      "dest": "): ) [3151,3152]"
    },
    {
      "src": "comment: /**      * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.      *      This will revert due to insufficient balance or insufficient allowance.      *      This function returns the actual amount received,      *      which may be less than `amount` if there is a fee attached to the transfer.      *      *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.      *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca      */ [6022,6625]",
      "dest": "comment: /**      * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.      *      This will revert due to insufficient balance or insufficient allowance.      *      This function returns the actual amount received,      *      which may be less than `amount` if there is a fee attached to the transfer.      *      *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.      *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca      */ [5539,6142]"
    },
    {
      "src": "call_argument [6751,6761]",
      "dest": "call_argument [6268,6278]"
    },
    {
      "src": "identifier: returndata [9403,9413]",
      "dest": "identifier: returndata [8369,8379]"
    },
    {
      "src": "): ) [8785,8786]",
      "dest": "): ) [8311,8312]"
    },
    {
      "src": "identifier: underlying [1781,1791]",
      "dest": "identifier: underlying [1651,1661]"
    },
    {
      "src": "pragma: pragma [0,6]",
      "dest": "pragma: pragma [0,6]"
    },
    {
      "src": "external: external [4379,4387]",
      "dest": "external: external [4249,4257]"
    },
    {
      "src": "inheritance_specifier [438,444]",
      "dest": "inheritance_specifier [437,443]"
    },
    {
      "src": "comment: /**      * @notice Sender redeems cTokens in exchange for the underlying asset      * @dev Accrues interest whether or not the operation succeeds, unless reverted      * @param redeemTokens The number of cTokens to redeem into underlying      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [2345,2682]",
      "dest": "comment: /**      * @notice Sender redeems cTokens in exchange for the underlying asset      * @dev Accrues interest whether or not the operation succeeds, unless reverted      * @param redeemTokens The number of cTokens to redeem into underlying      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [2215,2552]"
    },
    {
      "src": ".: . [8162,8163]",
      "dest": ".: . [7679,7680]"
    },
    {
      "src": "function_definition [3157,3290]",
      "dest": "function_definition [3027,3160]"
    },
    {
      "src": "call_expression [5976,6006]",
      "dest": "call_expression [5493,5523]"
    },
    {
      "src": "comment: // Calculate the amount that was *actually* transferred [6972,7027]",
      "dest": "comment: // Calculate the amount that was *actually* transferred [6489,6544]"
    },
    {
      "src": "(: ( [1780,1781]",
      "dest": "(: ( [1650,1651]"
    },
    {
      "src": "identifier: redeemUnderlying [3166,3182]",
      "dest": "identifier: redeemUnderlying [3036,3052]"
    },
    {
      "src": "external: external [5496,5504]",
      "dest": "external: external [8706,8714]"
    },
    {
      "src": "identifier: this [6781,6785]",
      "dest": "identifier: this [6298,6302]"
    },
    {
      "src": "identifier: _callOptionalReturn [6798,6817]",
      "dest": "identifier: _callOptionalReturn [6315,6334]"
    },
    {
      "src": "call_expression [4428,4476]",
      "dest": "call_expression [4298,4346]"
    },
    {
      "src": "(: ( [2217,2218]",
      "dest": "(: ( [2087,2088]"
    },
    {
      "src": "member_expression [5976,5991]",
      "dest": "member_expression [5493,5508]"
    },
    {
      "src": "identifier: redeemInternal [2765,2779]",
      "dest": "identifier: redeemInternal [2635,2649]"
    },
    {
      "src": "primitive_type [6698,6702]",
      "dest": "primitive_type [6215,6219]"
    },
    {
      "src": "(: ( [5154,5155]",
      "dest": "(: ( [5024,5025]"
    },
    {
      "src": "primitive_type [8040,8044]",
      "dest": "primitive_type [7557,7561]"
    },
    {
      "src": "(: ( [4396,4397]",
      "dest": "(: ( [4266,4267]"
    },
    {
      "src": "identifier: reserveFactorMantissa_ [1629,1651]",
      "dest": "identifier: reserveFactorMantissa_ [1499,1521]"
    },
    {
      "src": "identifier: errorMessage [8690,8702]",
      "dest": "identifier: errorMessage [8207,8219]"
    },
    {
      "src": "): ) [9436,9437]",
      "dest": "): ) [8402,8403]"
    },
    {
      "src": "comment: /**      * @notice The sender liquidates the borrowers collateral.      *  The collateral seized is transferred to the liquidator.      * @param borrower The borrower of this cToken to be liquidated      * @param repayAmount The amount of the underlying borrowed asset to repay      * @param cTokenCollateral The market in which to seize collateral from the borrower      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [4513,4981]",
      "dest": "comment: /**      * @notice The sender liquidates the borrowers collateral.      *  The collateral seized is transferred to the liquidator.      * @param borrower The borrower of this cToken to be liquidated      * @param repayAmount The amount of the underlying borrowed asset to repay      * @param cTokenCollateral The market in which to seize collateral from the borrower      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [4383,4851]"
    },
    {
      "src": "call_expression [9384,9437]",
      "dest": "call_expression [8350,8403]"
    },
    {
      "src": "source_file [0,9450]",
      "dest": "source_file [0,8872]"
    },
    {
      "src": "memory: memory [8683,8689]",
      "dest": "memory: memory [8200,8206]"
    },
    {
      "src": "identifier: abi [9392,9395]",
      "dest": "identifier: abi [8358,8361]"
    },
    {
      "src": "return: return [2319,2325]",
      "dest": "return: return [2189,2195]"
    },
    {
      "src": "parameter [5048,5080]",
      "dest": "parameter [4918,4950]"
    },
    {
      "src": "): ) [4377,4378]",
      "dest": "): ) [4247,4248]"
    },
    {
      "src": "): ) [6786,6787]",
      "dest": "): ) [6303,6304]"
    },
    {
      "src": "call_argument [1653,1670]",
      "dest": "call_argument [1523,1540]"
    },
    {
      "src": "comment: /**      * @notice Sender repays their own borrow      * @param repayAmount The amount to repay      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [3679,3873]",
      "dest": "comment: /**      * @notice Sender repays their own borrow      * @param repayAmount The amount to repay      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [3549,3743]"
    },
    {
      "src": "identifier: balanceAfter [7042,7054]",
      "dest": "identifier: balanceAfter [6559,6571]"
    },
    {
      "src": "call_argument [1552,1570]",
      "dest": "call_argument [1422,1440]"
    },
    {
      "src": "): ) [2307,2308]",
      "dest": "): ) [2177,2178]"
    },
    {
      "src": "expression_statement [9384,9438]",
      "dest": "expression_statement [8350,8404]"
    },
    {
      "src": "call_argument [5947,5957]",
      "dest": "call_argument [5464,5474]"
    },
    {
      "src": "return: return [7198,7204]",
      "dest": "return: return [6715,6721]"
    },
    {
      "src": "call_expression [2284,2308]",
      "dest": "call_expression [2154,2178]"
    },
    {
      "src": "return_type_definition [6689,6703]",
      "dest": "return_type_definition [6206,6220]"
    },
    {
      "src": "{: { [5520,5521]",
      "dest": "{: { [8715,8716]"
    },
    {
      "src": "uint: uint [3574,3578]",
      "dest": "uint: uint [3444,3448]"
    },
    {
      "src": "call_argument [6923,6929]",
      "dest": "call_argument [6440,6446]"
    },
    {
      "src": "variable_declaration_tuple [4414,4425]",
      "dest": "variable_declaration_tuple [4284,4295]"
    },
    {
      "src": "return_statement [2758,2794]",
      "dest": "return_statement [2628,2664]"
    },
    {
      "src": "(: ( [2296,2297]",
      "dest": "(: ( [2166,2167]"
    },
    {
      "src": "primitive_type [5118,5122]",
      "dest": "primitive_type [4988,4992]"
    },
    {
      "src": "function_body [8712,9445]",
      "dest": "function_body [8230,8411]"
    },
    {
      "src": "returns: returns [2244,2251]",
      "dest": "returns: returns [2114,2121]"
    },
    {
      "src": "type_name [8040,8044]",
      "dest": "type_name [7557,7561]"
    },
    {
      "src": "=: = [4426,4427]",
      "dest": "=: = [4296,4297]"
    },
    {
      "src": "identifier: redeemTokens [2709,2721]",
      "dest": "identifier: redeemTokens [2579,2591]"
    },
    {
      "src": "user_defined_type [5048,5063]",
      "dest": "user_defined_type [4918,4933]"
    },
    {
      "src": "variable_declaration_tuple [2270,2281]",
      "dest": "variable_declaration_tuple [2140,2151]"
    },
    {
      "src": "external: external [3202,3210]",
      "dest": "external: external [3072,3080]"
    },
    {
      "src": "identifier: InterestRateModel [1104,1121]",
      "dest": "identifier: InterestRateModel [953,970]"
    },
    {
      "src": "string: string [1273,1279]",
      "dest": "string: string [1062,1068]"
    },
    {
      "src": "return_type_definition [5091,5105]",
      "dest": "return_type_definition [4961,4975]"
    },
    {
      "src": "primitive_type [2271,2275]",
      "dest": "primitive_type [2141,2145]"
    },
    {
      "src": "primitive_type [5012,5019]",
      "dest": "primitive_type [4882,4889]"
    },
    {
      "src": "visibility [5869,5877]",
      "dest": "visibility [5386,5394]"
    },
    {
      "src": "call_expression [5131,5195]",
      "dest": "call_expression [5001,5065]"
    },
    {
      "src": "identifier: balanceBefore [6720,6733]",
      "dest": "identifier: balanceBefore [6237,6250]"
    },
    {
      "src": "function_definition [978,1814]",
      "dest": "function_definition [827,1684]"
    },
    {
      "src": "parameter [3936,3940]",
      "dest": "parameter [3806,3810]"
    },
    {
      "src": "call_argument [1572,1600]",
      "dest": "call_argument [1442,1470]"
    },
    {
      "src": "identifier: _addReserves [5467,5479]",
      "dest": "identifier: _delegateCompLikeTo [8659,8678]"
    },
    {
      "src": "): ) [3998,3999]",
      "dest": "): ) [3868,3869]"
    },
    {
      "src": "call_argument [1618,1627]",
      "dest": "call_argument [1488,1497]"
    },
    {
      "src": "primitive_type [1321,1326]",
      "dest": "primitive_type [1324,1329]"
    },
    {
      "src": "=: = [8763,8764]",
      "dest": "=: = [8265,8266]"
    },
    {
      "src": ".: . [5981,5982]",
      "dest": ".: . [5498,5499]"
    },
    {
      "src": "(: ( [6750,6751]",
      "dest": "(: ( [6267,6268]"
    },
    {
      "src": "): ) [6761,6762]",
      "dest": "): ) [6278,6279]"
    },
    {
      "src": "call_argument [5155,5163]",
      "dest": "call_argument [5025,5033]"
    },
    {
      "src": "type_name [2704,2708]",
      "dest": "type_name [2574,2578]"
    },
    {
      "src": "identifier: EIP20Interface [1766,1780]",
      "dest": "identifier: EIP20Interface [1636,1650]"
    },
    {
      "src": "primitive_type [6653,6660]",
      "dest": "primitive_type [6170,6177]"
    },
    {
      "src": "): ) [1805,1806]",
      "dest": "): ) [1675,1676]"
    },
    {
      "src": ",: , [1616,1617]",
      "dest": ",: , [1486,1487]"
    },
    {
      "src": "parameter [1273,1294]",
      "dest": "parameter [1062,1083]"
    },
    {
      "src": "identifier: _callOptionalReturn [8637,8656]",
      "dest": "identifier: _callOptionalReturn [8154,8173]"
    },
    {
      "src": "(: ( [8141,8142]",
      "dest": "(: ( [7658,7659]"
    },
    {
      "src": "call_argument [9392,9422]",
      "dest": "call_argument [8358,8388]"
    },
    {
      "src": "identifier: mintAmount [2223,2233]",
      "dest": "identifier: mintAmount [2093,2103]"
    },
    {
      "src": ",: , [1607,1608]",
      "dest": ",: , [1477,1478]"
    },
    {
      "src": "{: { [462,463]",
      "dest": "{: { [461,462]"
    },
    {
      "src": "parameter [1363,1393]",
      "dest": "parameter [1110,1140]"
    },
    {
      "src": ",: , [1200,1201]",
      "dest": ",: , [1035,1036]"
    },
    {
      "src": "type_name [5480,5484]",
      "dest": "type_name [8679,8686]"
    },
    {
      "src": "identifier: mintInternal [2284,2296]",
      "dest": "identifier: mintInternal [2154,2166]"
    },
    {
      "src": "call_expression [6736,6787]",
      "dest": "call_expression [6253,6304]"
    },
    {
      "src": "type_name [4343,4350]",
      "dest": "type_name [4213,4220]"
    },
    {
      "src": "primitive_type [2253,2257]",
      "dest": "primitive_type [2123,2127]"
    },
    {
      "src": "parameter [2218,2233]",
      "dest": "parameter [2088,2103]"
    },
    {
      "src": "): ) [2745,2746]",
      "dest": "): ) [2615,2616]"
    },
    {
      "src": "primitive_type [5030,5034]",
      "dest": "primitive_type [4900,4904]"
    },
    {
      "src": "member_expression [1521,1537]",
      "dest": "member_expression [1391,1407]"
    },
    {
      "src": "uint: uint [5100,5104]",
      "dest": "uint: uint [4970,4974]"
    },
    {
      "src": "internal: internal [5869,5877]",
      "dest": "internal: internal [5386,5394]"
    },
    {
      "src": "identifier: err [2276,2279]",
      "dest": "identifier: err [2146,2149]"
    },
    {
      "src": "}: } [5223,5224]",
      "dest": "}: } [5093,5094]"
    },
    {
      "src": "solidity_version: 0.5.16 [17,23]",
      "dest": "solidity_version: 0.5.16 [17,23]"
    },
    {
      "src": "identifier: balanceOf [7084,7093]",
      "dest": "identifier: balanceOf [6601,6610]"
    },
    {
      "src": "identifier: initialize [987,997]",
      "dest": "identifier: initialize [836,846]"
    },
    {
      "src": "identifier: err [3959,3962]",
      "dest": "identifier: err [3829,3832]"
    },
    {
      "src": "identifier: require [9384,9391]",
      "dest": "identifier: require [8350,8357]"
    },
    {
      "src": "): ) [5957,5958]",
      "dest": "): ) [5474,5475]"
    },
    {
      "src": "binary_expression [7127,7156]",
      "dest": "binary_expression [6644,6673]"
    },
    {
      "src": "\": \" [6932,6933]",
      "dest": "\": \" [6449,6450]"
    },
    {
      "src": "call_expression [8093,8184]",
      "dest": "call_expression [7610,7701]"
    },
    {
      "src": "address: address [5992,5999]",
      "dest": "address: address [5509,5516]"
    },
    {
      "src": "\": \" [48,49]",
      "dest": "\": \" [48,49]"
    },
    {
      "src": "identifier: err [4017,4020]",
      "dest": "identifier: err [3887,3890]"
    },
    {
      "src": "type_name [1227,1233]",
      "dest": "type_name [1016,1022]"
    },
    {
      "src": "call_argument [9415,9421]",
      "dest": "call_argument [8381,8387]"
    },
    {
      "src": "identifier: EIP20NonStandardInterface [8116,8141]",
      "dest": "identifier: EIP20NonStandardInterface [7633,7658]"
    },
    {
      "src": "(: ( [5479,5480]",
      "dest": "(: ( [8678,8679]"
    },
    {
      "src": "is: is [435,437]",
      "dest": "is: is [434,436]"
    },
    {
      "src": "call_argument [8781,8785]",
      "dest": "call_argument [8293,8297]"
    },
    {
      "src": "binary_expression [7205,7233]",
      "dest": "binary_expression [6722,6750]"
    },
    {
      "src": "user_defined_type [1044,1064]",
      "dest": "user_defined_type [893,913]"
    },
    {
      "src": "}: } [4027,4028]",
      "dest": "}: } [3897,3898]"
    },
    {
      "src": "call_argument [6932,6958]",
      "dest": "call_argument [6449,6475]"
    },
    {
      "src": "function: function [7997,8005]",
      "dest": "function: function [7514,7522]"
    },
    {
      "src": "type_name [5892,5896]",
      "dest": "type_name [5409,5413]"
    },
    {
      "src": "identifier: amount [6672,6678]",
      "dest": "identifier: amount [6189,6195]"
    },
    {
      "src": "=: = [1742,1743]",
      "dest": "=: = [1612,1613]"
    },
    {
      "src": "external: external [2235,2243]",
      "dest": "external: external [2105,2113]"
    },
    {
      "src": "(: ( [5946,5947]",
      "dest": "(: ( [5463,5464]"
    },
    {
      "src": "identifier: from [6661,6665]",
      "dest": "identifier: from [6178,6182]"
    },
    {
      "src": "(: ( [6915,6916]",
      "dest": "(: ( [6432,6433]"
    },
    {
      "src": "): ) [4475,4476]",
      "dest": "): ) [4345,4346]"
    },
    {
      "src": "): ) [3963,3964]",
      "dest": "): ) [3833,3834]"
    },
    {
      "src": "identifier: comptroller_ [1065,1077]",
      "dest": "identifier: comptroller_ [914,926]"
    },
    {
      "src": "external: external [3918,3926]",
      "dest": "external: external [3788,3796]"
    },
    {
      "src": "inheritance_specifier [446,461]",
      "dest": "inheritance_specifier [445,460]"
    },
    {
      "src": "function: function [5458,5466]",
      "dest": "function: function [8650,8658]"
    },
    {
      "src": "=: = [7055,7056]",
      "dest": "=: = [6572,6573]"
    },
    {
      "src": "call_expression [2765,2793]",
      "dest": "call_expression [2635,2663]"
    },
    {
      "src": "identifier: err [4494,4497]",
      "dest": "identifier: err [4364,4367]"
    },
    {
      "src": "identifier: transfer [8154,8162]",
      "dest": "identifier: transfer [7671,7679]"
    },
    {
      "src": "(: ( [5999,6000]",
      "dest": "(: ( [5516,5517]"
    },
    {
      "src": "=: = [6734,6735]",
      "dest": "=: = [6251,6252]"
    },
    {
      "src": "): ) [5104,5105]",
      "dest": "): ) [4974,4975]"
    },
    {
      "src": ",: , [1017,1018]",
      "dest": ",: , [866,867]"
    },
    {
      "src": "function: function [8628,8636]",
      "dest": "function: function [8145,8153]"
    },
    {
      "src": "string_literal [7158,7186]",
      "dest": "string_literal [6675,6703]"
    },
    {
      "src": "visibility [8704,8711]",
      "dest": "visibility [8221,8229]"
    },
    {
      "src": "(: ( [1804,1805]",
      "dest": "(: ( [1674,1675]"
    },
    {
      "src": "identifier: liquidateBorrow [4996,5011]",
      "dest": "identifier: liquidateBorrow [4866,4881]"
    },
    {
      "src": "): ) [8213,8214]",
      "dest": "): ) [7730,7731]"
    },
    {
      "src": "visibility [1447,1453]",
      "dest": "visibility [1194,1200]"
    },
    {
      "src": "type_name [5030,5034]",
      "dest": "type_name [4900,4904]"
    },
    {
      "src": "function_definition [6631,7293]",
      "dest": "function_definition [6148,6810]"
    },
    {
      "src": "): ) [3224,3225]",
      "dest": "): ) [3094,3095]"
    },
    {
      "src": "call_expression [8073,8214]",
      "dest": "call_expression [7590,7731]"
    },
    {
      "src": "bytes: bytes [8657,8662]",
      "dest": "bytes: bytes [8174,8179]"
    },
    {
      "src": "variable_declaration [3954,3962]",
      "dest": "variable_declaration [3824,3832]"
    },
    {
      "src": "(: ( [5117,5118]",
      "dest": "(: ( [4987,4988]"
    },
    {
      "src": "identifier: this [6000,6004]",
      "dest": "identifier: this [5517,5521]"
    },
    {
      "src": "parenthesized_expression [9415,9421]",
      "dest": "parenthesized_expression [8381,8387]"
    },
    {
      "src": "function: function [3558,3566]",
      "dest": "function: function [3428,3436]"
    },
    {
      "src": "uint: uint [5118,5122]",
      "dest": "uint: uint [4988,4992]"
    },
    {
      "src": "string [35,49]",
      "dest": "string [35,49]"
    },
    {
      "src": "-: - [7218,7219]",
      "dest": "-: - [6735,6736]"
    },
    {
      "src": "return: return [2758,2764]",
      "dest": "return: return [2628,2634]"
    }
  ],
  "actions": [
    {
      "action": "insert-tree",
      "tree": "interface_declaration [54,127]",
      "parent": "source_file [0,8872]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Compound's CErc20 Contract  * @notice CTokens which wrap an EIP-20 underlying  * @dev This contract should not to be deployed on its own; instead, deploy:  * 1) `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).  * 2) `CErc20Immutable` to deploy without the proxy storage pattern.  * @author Compound  */ [54,417]",
      "label": "/**  * @title Compound's CErc20 Contract  * @notice CTokens which wrap an EIP-20 underlying  * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).  * @author Compound  */"
    },
    {
      "action": "move-tree",
      "tree": "comment: /**      * @notice The sender adds to reserves.      * @param addAmount The amount fo underlying token to add as reserves      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [5232,5452]",
      "parent": "contract_body [461,8870]",
      "at": 28
    },
    {
      "action": "move-tree",
      "tree": "function_definition [5458,5577]",
      "parent": "contract_body [461,8870]",
      "at": 28
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @notice Initialize the new money market      * @param underlying_ The address of the underlying asset      * @param comptroller_ The address of the Comptroller      * @param interestRateModel_ The address of the interest rate model      * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18      * @param name_ ERC-20 name of this token      * @param symbol_ ERC-20 symbol of this token      * @param decimals_ ERC-20 decimal precision of this token      */ [469,972]",
      "label": "/**      * @notice Initialize the new money market      * @param underlying_ The address of the underlying asset      * @param comptroller_ The address of the Comptroller      * @param interestRateModel_ The address of the interest rate model      * @param name_ ERC-20 name of this token      * @param symbol_ ERC-20 symbol of this token      */"
    },
    {
      "action": "move-tree",
      "tree": ",: , [1200,1201]",
      "parent": "function_definition [827,1684]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": ",: , [1246,1247]",
      "parent": "function_definition [827,1684]",
      "at": 13
    },
    {
      "action": "move-tree",
      "tree": ",: , [1294,1295]",
      "parent": "function_definition [827,1684]",
      "at": 17
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @notice The sender adds to reserves.      * @param addAmount The amount fo underlying token to add as reserves      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)      */ [5232,5452]",
      "label": "/**     * @notice Admin call to delegate the votes of the COMP-like underlying     * @param compLikeDelegatee The address to delegate votes to     * @dev CTokens whose underlying are not CompLike should revert here     */"
    },
    {
      "action": "update-node",
      "tree": "identifier: _addReserves [5467,5479]",
      "label": "_delegateCompLikeTo"
    },
    {
      "action": "insert-tree",
      "tree": "variable_declaration_statement [1268,1314]",
      "parent": "function_body [1201,1684]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [1324,1381]",
      "parent": "function_body [1201,1684]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "internal: internal [8221,8229]",
      "parent": "visibility [8221,8229]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: addAmount [5485,5494]",
      "label": "compLikeDelegatee"
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [8726,8801]",
      "parent": "function_body [8715,8867]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [8811,8860]",
      "parent": "function_body [8715,8867]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [1324,1339]",
      "parent": "variable_declaration_statement [1324,1381]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [1340,1341]",
      "parent": "variable_declaration_statement [1324,1381]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [1342,1380]",
      "parent": "variable_declaration_statement [1324,1381]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [8738,8761]",
      "parent": "variable_declaration_statement [8241,8313]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "type_name [1321,1326]",
      "parent": "variable_declaration [1324,1339]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: decimals_ [1330,1339]",
      "parent": "variable_declaration [1324,1339]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: _functionCall [8267,8280]",
      "parent": "call_expression [8267,8312]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [8281,8291]",
      "parent": "call_expression [8267,8312]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [8291,8292]",
      "parent": "call_expression [8267,8312]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [8297,8298]",
      "parent": "call_expression [8267,8312]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [8299,8311]",
      "parent": "call_expression [8267,8312]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "address: address [8679,8686]",
      "parent": "primitive_type [8679,8686]",
      "at": 0
    },
    {
      "action": "delete-tree",
      "tree": "parameter [1167,1200]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: decimals_ [1327,1336]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [1321,1336]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1336,1337]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1393,1394]"
    },
    {
      "action": "delete-node",
      "tree": "private: private [8704,8711]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [8723,8724]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [8724,8736]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [8736,8737]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [8761,8762]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_tuple [8723,8762]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [8765,8780]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [8799,9345]"
    },
    {
      "action": "delete-node",
      "tree": "uint: uint [5480,5484]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [5505,5519]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [5531,5570]"
    }
  ]
}