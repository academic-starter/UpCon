{
  "matches": [
    {
      "src": "return_statement [3970,3979]",
      "dest": "return_statement [3970,3979]"
    },
    {
      "src": "identifier: c [3977,3978]",
      "dest": "identifier: c [3977,3978]"
    },
    {
      "src": "): ) [3166,3167]",
      "dest": "): ) [3166,3167]"
    },
    {
      "src": "visibility [909,917]",
      "dest": "visibility [909,917]"
    },
    {
      "src": "return_statement [3178,3225]",
      "dest": "return_statement [3178,3225]"
    },
    {
      "src": "internal: internal [909,917]",
      "dest": "internal: internal [909,917]"
    },
    {
      "src": "number_literal: 0 [5153,5154]",
      "dest": "number_literal: 0 [5153,5154]"
    },
    {
      "src": "uint256: uint256 [5048,5055]",
      "dest": "uint256: uint256 [5048,5055]"
    },
    {
      "src": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [2257,2336]",
      "dest": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [2257,2336]"
    },
    {
      "src": "\": \" [3195,3196]",
      "dest": "\": \" [3195,3196]"
    },
    {
      "src": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [3883,3960]",
      "dest": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [3883,3960]"
    },
    {
      "src": "): ) [4469,4470]",
      "dest": "): ) [4469,4470]"
    },
    {
      "src": "function: function [3101,3109]",
      "dest": "function: function [3101,3109]"
    },
    {
      "src": "number_literal: 0 [2484,2485]",
      "dest": "number_literal: 0 [2484,2485]"
    },
    {
      "src": "primitive_type [2204,2211]",
      "dest": "primitive_type [2204,2211]"
    },
    {
      "src": "call_argument [2577,2612]",
      "dest": "call_argument [2577,2612]"
    },
    {
      "src": "identifier: a [963,964]",
      "dest": "identifier: a [963,964]"
    },
    {
      "src": "return_type_definition [1370,1387]",
      "dest": "return_type_definition [1370,1387]"
    },
    {
      "src": "type_name [4460,4467]",
      "dest": "type_name [4460,4467]"
    },
    {
      "src": "type_name [887,894]",
      "dest": "type_name [887,894]"
    },
    {
      "src": "identifier: errorMessage [1795,1807]",
      "dest": "identifier: errorMessage [1795,1807]"
    },
    {
      "src": "}: } [1932,1933]",
      "dest": "}: } [1932,1933]"
    },
    {
      "src": "type_name [5048,5055]",
      "dest": "type_name [5048,5055]"
    },
    {
      "src": "function_body [5130,5198]",
      "dest": "function_body [5130,5198]"
    },
    {
      "src": ",: , [992,993]",
      "dest": ",: , [992,993]"
    },
    {
      "src": "primitive_type [4494,4501]",
      "dest": "primitive_type [4494,4501]"
    },
    {
      "src": "call_argument [3826,3831]",
      "dest": "call_argument [3826,3831]"
    },
    {
      "src": "^:  ^ [48,50]",
      "dest": "^:  ^ [48,50]"
    },
    {
      "src": "visibility [3136,3144]",
      "dest": "visibility [3136,3144]"
    },
    {
      "src": "pure: pure [1818,1822]",
      "dest": "pure: pure [1818,1822]"
    },
    {
      "src": "number_literal: 0 [3830,3831]",
      "dest": "number_literal: 0 [3830,3831]"
    },
    {
      "src": "identifier: SafeMath [630,638]",
      "dest": "identifier: SafeMath [630,638]"
    },
    {
      "src": "return: return [3178,3184]",
      "dest": "return: return [3178,3184]"
    },
    {
      "src": "(: ( [3798,3799]",
      "dest": "(: ( [3798,3799]"
    },
    {
      "src": "primitive_type [5048,5055]",
      "dest": "primitive_type [5048,5055]"
    },
    {
      "src": "identifier: add [883,886]",
      "dest": "identifier: add [883,886]"
    },
    {
      "src": "return_type_definition [1823,1840]",
      "dest": "return_type_definition [1823,1840]"
    },
    {
      "src": "internal: internal [2215,2223]",
      "dest": "internal: internal [2215,2223]"
    },
    {
      "src": "state_mutability [1365,1369]",
      "dest": "state_mutability [1365,1369]"
    },
    {
      "src": "primitive_type [5121,5128]",
      "dest": "primitive_type [5121,5128]"
    },
    {
      "src": "primitive_type [1832,1839]",
      "dest": "primitive_type [1832,1839]"
    },
    {
      "src": "type_name [1890,1897]",
      "dest": "type_name [1890,1897]"
    },
    {
      "src": "primitive_type [4460,4467]",
      "dest": "primitive_type [4460,4467]"
    },
    {
      "src": "identifier: b [3826,3827]",
      "dest": "identifier: b [3826,3827]"
    },
    {
      "src": "call_argument [3189,3190]",
      "dest": "call_argument [3189,3190]"
    },
    {
      "src": "type_name [898,905]",
      "dest": "type_name [898,905]"
    },
    {
      "src": "): ) [3806,3807]",
      "dest": "): ) [3806,3807]"
    },
    {
      "src": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */ [645,869]",
      "dest": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */ [645,869]"
    },
    {
      "src": ",: , [2202,2203]",
      "dest": ",: , [2202,2203]"
    },
    {
      "src": ",: , [1768,1769]",
      "dest": ",: , [1768,1769]"
    },
    {
      "src": "identifier: mod [5044,5047]",
      "dest": "identifier: mod [5044,5047]"
    },
    {
      "src": "/: / [3870,3871]",
      "dest": "/: / [3870,3871]"
    },
    {
      "src": "returns: returns [3790,3797]",
      "dest": "returns: returns [3790,3797]"
    },
    {
      "src": "uint256: uint256 [5059,5066]",
      "dest": "uint256: uint256 [5059,5066]"
    },
    {
      "src": "parameter [3125,3134]",
      "dest": "parameter [3125,3134]"
    },
    {
      "src": "returns: returns [4485,4492]",
      "dest": "returns: returns [4485,4492]"
    },
    {
      "src": "visibility [2215,2223]",
      "dest": "visibility [2215,2223]"
    },
    {
      "src": "state_mutability [4480,4484]",
      "dest": "state_mutability [4480,4484]"
    },
    {
      "src": "return: return [4513,4519]",
      "dest": "return: return [4513,4519]"
    },
    {
      "src": "binary_expression [2479,2485]",
      "dest": "binary_expression [2479,2485]"
    },
    {
      "src": "identifier: a [3122,3123]",
      "dest": "identifier: a [3122,3123]"
    },
    {
      "src": "\": \" [1022,1023]",
      "dest": "\": \" [1022,1023]"
    },
    {
      "src": "parameter [4449,4458]",
      "dest": "parameter [4449,4458]"
    },
    {
      "src": "state_mutability [5107,5111]",
      "dest": "state_mutability [5107,5111]"
    },
    {
      "src": "type_name [3125,3132]",
      "dest": "type_name [3125,3132]"
    },
    {
      "src": "type_name [5121,5128]",
      "dest": "type_name [5121,5128]"
    },
    {
      "src": ",: , [2575,2576]",
      "dest": ",: , [2575,2576]"
    },
    {
      "src": "type_name [1334,1341]",
      "dest": "type_name [1334,1341]"
    },
    {
      "src": "returns: returns [923,930]",
      "dest": "returns: returns [923,930]"
    },
    {
      "src": "\": \" [1446,1447]",
      "dest": "\": \" [1446,1447]"
    },
    {
      "src": "parameter [1759,1768]",
      "dest": "parameter [1759,1768]"
    },
    {
      "src": "call_argument [4524,4525]",
      "dest": "call_argument [4524,4525]"
    },
    {
      "src": "string [2577,2612]",
      "dest": "string [2577,2612]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [1461,1741]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [1461,1741]"
    },
    {
      "src": "uint256: uint256 [1770,1777]",
      "dest": "uint256: uint256 [1770,1777]"
    },
    {
      "src": "): ) [1354,1355]",
      "dest": "): ) [1354,1355]"
    },
    {
      "src": "string: string [1781,1787]",
      "dest": "string: string [1781,1787]"
    },
    {
      "src": "internal: internal [3136,3144]",
      "dest": "internal: internal [3136,3144]"
    },
    {
      "src": "identifier: b [2212,2213]",
      "dest": "identifier: b [2212,2213]"
    },
    {
      "src": "uint256: uint256 [4460,4467]",
      "dest": "uint256: uint256 [4460,4467]"
    },
    {
      "src": "parameter [5048,5057]",
      "dest": "parameter [5048,5057]"
    },
    {
      "src": "pure: pure [1365,1369]",
      "dest": "pure: pure [1365,1369]"
    },
    {
      "src": "(: ( [1758,1759]",
      "dest": "(: ( [1758,1759]"
    },
    {
      "src": "\": \" [2611,2612]",
      "dest": "\": \" [2611,2612]"
    },
    {
      "src": "identifier: b [1859,1860]",
      "dest": "identifier: b [1859,1860]"
    },
    {
      "src": "function_definition [5035,5198]",
      "dest": "function_definition [5035,5198]"
    },
    {
      "src": "function_definition [2180,2639]",
      "dest": "function_definition [2180,2639]"
    },
    {
      "src": "primitive_type [1379,1386]",
      "dest": "primitive_type [1379,1386]"
    },
    {
      "src": "identifier: c [1042,1043]",
      "dest": "identifier: c [1042,1043]"
    },
    {
      "src": "primitive_type [3726,3733]",
      "dest": "primitive_type [3726,3733]"
    },
    {
      "src": "pure: pure [918,922]",
      "dest": "pure: pure [918,922]"
    },
    {
      "src": "return_statement [4513,4558]",
      "dest": "return_statement [4513,4558]"
    },
    {
      "src": "identifier: errorMessage [5084,5096]",
      "dest": "identifier: errorMessage [5084,5096]"
    },
    {
      "src": "-: - [1904,1905]",
      "dest": "-: - [1904,1905]"
    },
    {
      "src": "return_type_definition [923,940]",
      "dest": "return_type_definition [923,940]"
    },
    {
      "src": "parameter [3159,3166]",
      "dest": "parameter [3159,3166]"
    },
    {
      "src": "+: + [965,966]",
      "dest": "+: + [965,966]"
    },
    {
      "src": "internal: internal [3776,3784]",
      "dest": "internal: internal [3776,3784]"
    },
    {
      "src": "expression_statement [978,1025]",
      "dest": "expression_statement [978,1025]"
    },
    {
      "src": "): ) [1879,1880]",
      "dest": "): ) [1879,1880]"
    },
    {
      "src": "primitive_type [3737,3744]",
      "dest": "primitive_type [3737,3744]"
    },
    {
      "src": "uint256: uint256 [3114,3121]",
      "dest": "uint256: uint256 [3114,3121]"
    },
    {
      "src": "string_literal [1415,1447]",
      "dest": "string_literal [1415,1447]"
    },
    {
      "src": "uint256: uint256 [3737,3744]",
      "dest": "uint256: uint256 [3737,3744]"
    },
    {
      "src": "contract_body [639,5200]",
      "dest": "contract_body [639,5200]"
    },
    {
      "src": "identifier: sub [1330,1333]",
      "dest": "identifier: sub [1330,1333]"
    },
    {
      "src": "}: } [2519,2520]",
      "dest": "}: } [2519,2520]"
    },
    {
      "src": "identifier: errorMessage [5156,5168]",
      "dest": "identifier: errorMessage [5156,5168]"
    },
    {
      "src": "\": \" [1415,1416]",
      "dest": "\": \" [1415,1416]"
    },
    {
      "src": "(: ( [3158,3159]",
      "dest": "(: ( [3158,3159]"
    },
    {
      "src": "call_expression [5140,5169]",
      "dest": "call_expression [5140,5169]"
    },
    {
      "src": "primitive_type [898,905]",
      "dest": "primitive_type [898,905]"
    },
    {
      "src": "(: ( [3188,3189]",
      "dest": "(: ( [3188,3189]"
    },
    {
      "src": "expression_statement [3818,3847]",
      "dest": "expression_statement [3818,3847]"
    },
    {
      "src": "=: = [961,962]",
      "dest": "=: = [961,962]"
    },
    {
      "src": "type_name [3737,3744]",
      "dest": "type_name [3737,3744]"
    },
    {
      "src": "binary_expression [2542,2547]",
      "dest": "binary_expression [2542,2547]"
    },
    {
      "src": ",: , [3831,3832]",
      "dest": ",: , [3831,3832]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [3991,4431]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [3991,4431]"
    },
    {
      "src": ",: , [1413,1414]",
      "dest": ",: , [1413,1414]"
    },
    {
      "src": "returns: returns [1370,1377]",
      "dest": "returns: returns [1370,1377]"
    },
    {
      "src": "return_statement [1398,1449]",
      "dest": "return_statement [1398,1449]"
    },
    {
      "src": ",: , [1410,1411]",
      "dest": ",: , [1410,1411]"
    },
    {
      "src": "visibility [3776,3784]",
      "dest": "visibility [3776,3784]"
    },
    {
      "src": "uint256: uint256 [1759,1766]",
      "dest": "uint256: uint256 [1759,1766]"
    },
    {
      "src": "primitive_type [1781,1787]",
      "dest": "primitive_type [1781,1787]"
    },
    {
      "src": "uint256: uint256 [3856,3863]",
      "dest": "uint256: uint256 [3856,3863]"
    },
    {
      "src": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */ [1939,2175]",
      "dest": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */ [1939,2175]"
    },
    {
      "src": ",: , [3746,3747]",
      "dest": ",: , [3746,3747]"
    },
    {
      "src": "library: library [622,629]",
      "dest": "library: library [622,629]"
    },
    {
      "src": "call_argument [1415,1447]",
      "dest": "call_argument [1415,1447]"
    },
    {
      "src": ",: , [1779,1780]",
      "dest": ",: , [1779,1780]"
    },
    {
      "src": "identifier: errorMessage [1867,1879]",
      "dest": "identifier: errorMessage [1867,1879]"
    },
    {
      "src": "identifier: a [2569,2570]",
      "dest": "identifier: a [2569,2570]"
    },
    {
      "src": "}: } [4563,4564]",
      "dest": "}: } [4563,4564]"
    },
    {
      "src": "identifier: require [978,985]",
      "dest": "identifier: require [978,985]"
    },
    {
      "src": "identifier: b [3133,3134]",
      "dest": "identifier: b [3133,3134]"
    },
    {
      "src": "identifier: b [4468,4469]",
      "dest": "identifier: b [4468,4469]"
    },
    {
      "src": "==: == [2571,2573]",
      "dest": "==: == [2571,2573]"
    },
    {
      "src": "type_name [3856,3863]",
      "dest": "type_name [3856,3863]"
    },
    {
      "src": "): ) [1023,1024]",
      "dest": "): ) [1023,1024]"
    },
    {
      "src": "returns: returns [5112,5119]",
      "dest": "returns: returns [5112,5119]"
    },
    {
      "src": "identifier: sub [1755,1758]",
      "dest": "identifier: sub [1755,1758]"
    },
    {
      "src": "string_literal [4530,4556]",
      "dest": "string_literal [4530,4556]"
    },
    {
      "src": "function_definition [1321,1455]",
      "dest": "function_definition [1321,1455]"
    },
    {
      "src": "string [994,1023]",
      "dest": "string [994,1023]"
    },
    {
      "src": "): ) [1839,1840]",
      "dest": "): ) [1839,1840]"
    },
    {
      "src": "parameter [5121,5128]",
      "dest": "parameter [5121,5128]"
    },
    {
      "src": "identifier: b [4527,4528]",
      "dest": "identifier: b [4527,4528]"
    },
    {
      "src": "identifier: require [3818,3825]",
      "dest": "identifier: require [3818,3825]"
    },
    {
      "src": "comment: // benefit is lost if 'b' is also tested. [2345,2386]",
      "dest": "comment: // benefit is lost if 'b' is also tested. [2345,2386]"
    },
    {
      "src": "(: ( [4493,4494]",
      "dest": "(: ( [4493,4494]"
    },
    {
      "src": "return_statement [1918,1927]",
      "dest": "return_statement [1918,1927]"
    },
    {
      "src": "call_expression [3185,3224]",
      "dest": "call_expression [3185,3224]"
    },
    {
      "src": "function: function [2180,2188]",
      "dest": "function: function [2180,2188]"
    },
    {
      "src": "return_type_definition [5112,5129]",
      "dest": "return_type_definition [5112,5129]"
    },
    {
      "src": "uint256: uint256 [2193,2200]",
      "dest": "uint256: uint256 [2193,2200]"
    },
    {
      "src": "): ) [2485,2486]",
      "dest": "): ) [2485,2486]"
    },
    {
      "src": "): ) [5168,5169]",
      "dest": "): ) [5168,5169]"
    },
    {
      "src": "visibility [1356,1364]",
      "dest": "visibility [1356,1364]"
    },
    {
      "src": "if_statement [2475,2520]",
      "dest": "if_statement [2475,2520]"
    },
    {
      "src": "parameter [1334,1343]",
      "dest": "parameter [1334,1343]"
    },
    {
      "src": "binary_expression [5148,5154]",
      "dest": "binary_expression [5148,5154]"
    },
    {
      "src": "uint256: uint256 [2530,2537]",
      "dest": "uint256: uint256 [2530,2537]"
    },
    {
      "src": "primitive_type [1345,1352]",
      "dest": "primitive_type [1345,1352]"
    },
    {
      "src": "identifier: a [4524,4525]",
      "dest": "identifier: a [4524,4525]"
    },
    {
      "src": "}: } [5199,5200]",
      "dest": "}: } [5199,5200]"
    },
    {
      "src": "(: ( [3725,3726]",
      "dest": "(: ( [3725,3726]"
    },
    {
      "src": "string: string [5070,5076]",
      "dest": "string: string [5070,5076]"
    },
    {
      "src": "call_argument [1409,1410]",
      "dest": "call_argument [1409,1410]"
    },
    {
      "src": "binary_expression [1902,1907]",
      "dest": "binary_expression [1902,1907]"
    },
    {
      "src": "}: } [5197,5198]",
      "dest": "}: } [5197,5198]"
    },
    {
      "src": "function_definition [4436,4564]",
      "dest": "function_definition [4436,4564]"
    },
    {
      "src": "identifier: c [959,960]",
      "dest": "identifier: c [959,960]"
    },
    {
      "src": "): ) [3134,3135]",
      "dest": "): ) [3134,3135]"
    },
    {
      "src": "call_expression [4520,4557]",
      "dest": "call_expression [4520,4557]"
    },
    {
      "src": "type_name [2238,2245]",
      "dest": "type_name [2238,2245]"
    },
    {
      "src": ",: , [3193,3194]",
      "dest": ",: , [3193,3194]"
    },
    {
      "src": "type_name [4449,4456]",
      "dest": "type_name [4449,4456]"
    },
    {
      "src": "string [1415,1447]",
      "dest": "string [1415,1447]"
    },
    {
      "src": "function_body [3168,3231]",
      "dest": "function_body [3168,3231]"
    },
    {
      "src": "return_statement [2624,2633]",
      "dest": "return_statement [2624,2633]"
    },
    {
      "src": "pure: pure [3145,3149]",
      "dest": "pure: pure [3145,3149]"
    },
    {
      "src": "(: ( [2478,2479]",
      "dest": "(: ( [2478,2479]"
    },
    {
      "src": "identifier: a [1767,1768]",
      "dest": "identifier: a [1767,1768]"
    },
    {
      "src": "): ) [5096,5097]",
      "dest": "): ) [5096,5097]"
    },
    {
      "src": "expression_statement [5140,5170]",
      "dest": "expression_statement [5140,5170]"
    },
    {
      "src": "(: ( [1858,1859]",
      "dest": "(: ( [1858,1859]"
    },
    {
      "src": "parameter [932,939]",
      "dest": "parameter [932,939]"
    },
    {
      "src": "uint256: uint256 [3125,3132]",
      "dest": "uint256: uint256 [3125,3132]"
    },
    {
      "src": "uint256: uint256 [887,894]",
      "dest": "uint256: uint256 [887,894]"
    },
    {
      "src": "parameter [1345,1354]",
      "dest": "parameter [1345,1354]"
    },
    {
      "src": "type_name [3748,3754]",
      "dest": "type_name [3748,3754]"
    },
    {
      "src": "(: ( [5147,5148]",
      "dest": "(: ( [5147,5148]"
    },
    {
      "src": "function: function [1746,1754]",
      "dest": "function: function [1746,1754]"
    },
    {
      "src": "primitive_type [3748,3754]",
      "dest": "primitive_type [3748,3754]"
    },
    {
      "src": "=: = [2540,2541]",
      "dest": "=: = [2540,2541]"
    },
    {
      "src": "identifier: b [5190,5191]",
      "dest": "identifier: b [5190,5191]"
    },
    {
      "src": "expression_statement [1851,1881]",
      "dest": "expression_statement [1851,1881]"
    },
    {
      "src": "parameter [2238,2245]",
      "dest": "parameter [2238,2245]"
    },
    {
      "src": "primitive_type [1759,1766]",
      "dest": "primitive_type [1759,1766]"
    },
    {
      "src": "string: string [3748,3754]",
      "dest": "string: string [3748,3754]"
    },
    {
      "src": "solidity: solidity [40,48]",
      "dest": "solidity: solidity [40,48]"
    },
    {
      "src": "expression_statement [2557,2614]",
      "dest": "expression_statement [2557,2614]"
    },
    {
      "src": "primitive_type [3114,3121]",
      "dest": "primitive_type [3114,3121]"
    },
    {
      "src": "identifier: a [1864,1865]",
      "dest": "identifier: a [1864,1865]"
    },
    {
      "src": "function_definition [3713,3985]",
      "dest": "function_definition [3713,3985]"
    },
    {
      "src": "function_body [1388,1455]",
      "dest": "function_body [1388,1455]"
    },
    {
      "src": "identifier: b [2546,2547]",
      "dest": "identifier: b [2546,2547]"
    },
    {
      "src": "(: ( [5120,5121]",
      "dest": "(: ( [5120,5121]"
    },
    {
      "src": "identifier: b [906,907]",
      "dest": "identifier: b [906,907]"
    },
    {
      "src": "type_name [1781,1787]",
      "dest": "type_name [1781,1787]"
    },
    {
      "src": "identifier: b [1778,1779]",
      "dest": "identifier: b [1778,1779]"
    },
    {
      "src": "uint256: uint256 [4494,4501]",
      "dest": "uint256: uint256 [4494,4501]"
    },
    {
      "src": "memory: memory [1788,1794]",
      "dest": "memory: memory [1788,1794]"
    },
    {
      "src": "returns: returns [2229,2236]",
      "dest": "returns: returns [2229,2236]"
    },
    {
      "src": "identifier: mul [2189,2192]",
      "dest": "identifier: mul [2189,2192]"
    },
    {
      "src": "binary_expression [5186,5191]",
      "dest": "binary_expression [5186,5191]"
    },
    {
      "src": "{: { [2247,2248]",
      "dest": "{: { [2247,2248]"
    },
    {
      "src": ",: , [896,897]",
      "dest": ",: , [896,897]"
    },
    {
      "src": "pure: pure [2224,2228]",
      "dest": "pure: pure [2224,2228]"
    },
    {
      "src": "(: ( [4448,4449]",
      "dest": "(: ( [4448,4449]"
    },
    {
      "src": "(: ( [4523,4524]",
      "dest": "(: ( [4523,4524]"
    },
    {
      "src": "identifier: require [2557,2564]",
      "dest": "identifier: require [2557,2564]"
    },
    {
      "src": "uint256: uint256 [1890,1897]",
      "dest": "uint256: uint256 [1890,1897]"
    },
    {
      "src": "state_mutability [918,922]",
      "dest": "state_mutability [918,922]"
    },
    {
      "src": "type_name [1379,1386]",
      "dest": "type_name [1379,1386]"
    },
    {
      "src": "\": \" [2577,2578]",
      "dest": "\": \" [2577,2578]"
    },
    {
      "src": "}: } [2638,2639]",
      "dest": "}: } [2638,2639]"
    },
    {
      "src": "binary_expression [1859,1865]",
      "dest": "binary_expression [1859,1865]"
    },
    {
      "src": "call_expression [1851,1880]",
      "dest": "call_expression [1851,1880]"
    },
    {
      "src": "): ) [1447,1448]",
      "dest": "): ) [1447,1448]"
    },
    {
      "src": "): ) [2612,2613]",
      "dest": "): ) [2612,2613]"
    },
    {
      "src": "{: { [1841,1842]",
      "dest": "{: { [1841,1842]"
    },
    {
      "src": "identifier: b [967,968]",
      "dest": "identifier: b [967,968]"
    },
    {
      "src": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [2645,3096]",
      "dest": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [2645,3096]"
    },
    {
      "src": "return_type_definition [3790,3807]",
      "dest": "return_type_definition [3790,3807]"
    },
    {
      "src": "type_name [1345,1352]",
      "dest": "type_name [1345,1352]"
    },
    {
      "src": "call_argument [1859,1865]",
      "dest": "call_argument [1859,1865]"
    },
    {
      "src": "): ) [2245,2246]",
      "dest": "): ) [2245,2246]"
    },
    {
      "src": "block_statement [2487,2520]",
      "dest": "block_statement [2487,2520]"
    },
    {
      "src": "returns: returns [3150,3157]",
      "dest": "returns: returns [3150,3157]"
    },
    {
      "src": "primitive_type [1770,1777]",
      "dest": "primitive_type [1770,1777]"
    },
    {
      "src": "(: ( [1333,1334]",
      "dest": "(: ( [1333,1334]"
    },
    {
      "src": "call_argument [2565,2575]",
      "dest": "call_argument [2565,2575]"
    },
    {
      "src": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [58,621]",
      "dest": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [58,621]"
    },
    {
      "src": "type_name [3114,3121]",
      "dest": "type_name [3114,3121]"
    },
    {
      "src": "(: ( [1408,1409]",
      "dest": "(: ( [1408,1409]"
    },
    {
      "src": "identifier: b [3872,3873]",
      "dest": "identifier: b [3872,3873]"
    },
    {
      "src": "(: ( [2192,2193]",
      "dest": "(: ( [2192,2193]"
    },
    {
      "src": "call_argument [5156,5168]",
      "dest": "call_argument [5156,5168]"
    },
    {
      "src": "primitive_type [2238,2245]",
      "dest": "primitive_type [2238,2245]"
    },
    {
      "src": "==: == [2481,2483]",
      "dest": "==: == [2481,2483]"
    },
    {
      "src": "call_argument [4527,4528]",
      "dest": "call_argument [4527,4528]"
    },
    {
      "src": "{: { [941,942]",
      "dest": "{: { [941,942]"
    },
    {
      "src": ">=: >= [988,990]",
      "dest": ">=: >= [988,990]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [0,31]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "solidity_pragma_token [40,55]",
      "dest": "solidity_pragma_token [40,55]"
    },
    {
      "src": "identifier: b [3745,3746]",
      "dest": "identifier: b [3745,3746]"
    },
    {
      "src": "parameter [1832,1839]",
      "dest": "parameter [1832,1839]"
    },
    {
      "src": "primitive_type [3125,3132]",
      "dest": "primitive_type [3125,3132]"
    },
    {
      "src": "identifier: a [2479,2480]",
      "dest": "identifier: a [2479,2480]"
    },
    {
      "src": "parameter [4494,4501]",
      "dest": "parameter [4494,4501]"
    },
    {
      "src": "return_type_definition [2229,2246]",
      "dest": "return_type_definition [2229,2246]"
    },
    {
      "src": ",: , [5068,5069]",
      "dest": ",: , [5068,5069]"
    },
    {
      "src": "identifier: errorMessage [3833,3845]",
      "dest": "identifier: errorMessage [3833,3845]"
    },
    {
      "src": "binary_expression [2565,2575]",
      "dest": "binary_expression [2565,2575]"
    },
    {
      "src": "primitive_type [2193,2200]",
      "dest": "primitive_type [2193,2200]"
    },
    {
      "src": "string_literal [3195,3223]",
      "dest": "string_literal [3195,3223]"
    },
    {
      "src": "function_body [3808,3985]",
      "dest": "function_body [3808,3985]"
    },
    {
      "src": ",: , [3190,3191]",
      "dest": ",: , [3190,3191]"
    },
    {
      "src": "identifier: b [3192,3193]",
      "dest": "identifier: b [3192,3193]"
    },
    {
      "src": "identifier: a [1902,1903]",
      "dest": "identifier: a [1902,1903]"
    },
    {
      "src": "identifier: a [3734,3735]",
      "dest": "identifier: a [3734,3735]"
    },
    {
      "src": "\": \" [4530,4531]",
      "dest": "\": \" [4530,4531]"
    },
    {
      "src": "return_statement [5179,5192]",
      "dest": "return_statement [5179,5192]"
    },
    {
      "src": "function: function [874,882]",
      "dest": "function: function [874,882]"
    },
    {
      "src": "primitive_type [951,958]",
      "dest": "primitive_type [951,958]"
    },
    {
      "src": "call_expression [2557,2613]",
      "dest": "call_expression [2557,2613]"
    },
    {
      "src": "uint256: uint256 [1345,1352]",
      "dest": "uint256: uint256 [1345,1352]"
    },
    {
      "src": "uint256: uint256 [1832,1839]",
      "dest": "uint256: uint256 [1832,1839]"
    },
    {
      "src": "/: / [2567,2568]",
      "dest": "/: / [2567,2568]"
    },
    {
      "src": ",: , [1343,1344]",
      "dest": ",: , [1343,1344]"
    },
    {
      "src": "parameter [5059,5068]",
      "dest": "parameter [5059,5068]"
    },
    {
      "src": "identifier: b [2574,2575]",
      "dest": "identifier: b [2574,2575]"
    },
    {
      "src": "return_statement [2501,2510]",
      "dest": "return_statement [2501,2510]"
    },
    {
      "src": "\": \" [994,995]",
      "dest": "\": \" [994,995]"
    },
    {
      "src": "!=: != [5150,5152]",
      "dest": "!=: != [5150,5152]"
    },
    {
      "src": "identifier: a [3189,3190]",
      "dest": "identifier: a [3189,3190]"
    },
    {
      "src": "call_argument [3833,3845]",
      "dest": "call_argument [3833,3845]"
    },
    {
      "src": "variable_declaration [1890,1899]",
      "dest": "variable_declaration [1890,1899]"
    },
    {
      "src": "identifier: a [3868,3869]",
      "dest": "identifier: a [3868,3869]"
    },
    {
      "src": "(: ( [2564,2565]",
      "dest": "(: ( [2564,2565]"
    },
    {
      "src": "binary_expression [2565,2570]",
      "dest": "binary_expression [2565,2570]"
    },
    {
      "src": "type_name [951,958]",
      "dest": "type_name [951,958]"
    },
    {
      "src": "): ) [3223,3224]",
      "dest": "): ) [3223,3224]"
    },
    {
      "src": "string [4530,4556]",
      "dest": "string [4530,4556]"
    },
    {
      "src": "identifier: b [1353,1354]",
      "dest": "identifier: b [1353,1354]"
    },
    {
      "src": "type_name [2204,2211]",
      "dest": "type_name [2204,2211]"
    },
    {
      "src": "): ) [2213,2214]",
      "dest": "): ) [2213,2214]"
    },
    {
      "src": "{: { [4503,4504]",
      "dest": "{: { [4503,4504]"
    },
    {
      "src": "uint256: uint256 [2204,2211]",
      "dest": "uint256: uint256 [2204,2211]"
    },
    {
      "src": "identifier: div [3185,3188]",
      "dest": "identifier: div [3185,3188]"
    },
    {
      "src": "}: } [3230,3231]",
      "dest": "}: } [3230,3231]"
    },
    {
      "src": "call_expression [1405,1448]",
      "dest": "call_expression [1405,1448]"
    },
    {
      "src": "call_argument [4530,4556]",
      "dest": "call_argument [4530,4556]"
    },
    {
      "src": "type_name [5070,5076]",
      "dest": "type_name [5070,5076]"
    },
    {
      "src": "(: ( [985,986]",
      "dest": "(: ( [985,986]"
    },
    {
      "src": "identifier: a [991,992]",
      "dest": "identifier: a [991,992]"
    },
    {
      "src": "library_declaration [622,5200]",
      "dest": "library_declaration [622,5200]"
    },
    {
      "src": "(: ( [3825,3826]",
      "dest": "(: ( [3825,3826]"
    },
    {
      "src": "): ) [907,908]",
      "dest": "): ) [907,908]"
    },
    {
      "src": "call_argument [994,1023]",
      "dest": "call_argument [994,1023]"
    },
    {
      "src": "call_argument [1867,1879]",
      "dest": "call_argument [1867,1879]"
    },
    {
      "src": "uint256: uint256 [5121,5128]",
      "dest": "uint256: uint256 [5121,5128]"
    },
    {
      "src": "identifier: mod [4445,4448]",
      "dest": "identifier: mod [4445,4448]"
    },
    {
      "src": "variable_declaration_statement [3856,3874]",
      "dest": "variable_declaration_statement [3856,3874]"
    },
    {
      "src": "function: function [5035,5043]",
      "dest": "function: function [5035,5043]"
    },
    {
      "src": "state_mutability [3145,3149]",
      "dest": "state_mutability [3145,3149]"
    },
    {
      "src": "identifier: c [3864,3865]",
      "dest": "identifier: c [3864,3865]"
    },
    {
      "src": "return_type_definition [4485,4502]",
      "dest": "return_type_definition [4485,4502]"
    },
    {
      "src": "source_file [0,5201]",
      "dest": "source_file [0,5201]"
    },
    {
      "src": "parameter [3799,3806]",
      "dest": "parameter [3799,3806]"
    },
    {
      "src": "parameter [1379,1386]",
      "dest": "parameter [1379,1386]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [1056,1316]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [1056,1316]"
    },
    {
      "src": "uint256: uint256 [4449,4456]",
      "dest": "uint256: uint256 [4449,4456]"
    },
    {
      "src": "type_name [3159,3166]",
      "dest": "type_name [3159,3166]"
    },
    {
      "src": "solidity_version: 0.6.0 [50,55]",
      "dest": "solidity_version: 0.6.0 [50,55]"
    },
    {
      "src": "(: ( [2237,2238]",
      "dest": "(: ( [2237,2238]"
    },
    {
      "src": "variable_declaration [2530,2539]",
      "dest": "variable_declaration [2530,2539]"
    },
    {
      "src": "call_argument [5148,5154]",
      "dest": "call_argument [5148,5154]"
    },
    {
      "src": "primitive_type [3799,3806]",
      "dest": "primitive_type [3799,3806]"
    },
    {
      "src": "}: } [3984,3985]",
      "dest": "}: } [3984,3985]"
    },
    {
      "src": "call_expression [978,1024]",
      "dest": "call_expression [978,1024]"
    },
    {
      "src": "return: return [2624,2630]",
      "dest": "return: return [2624,2630]"
    },
    {
      "src": "function: function [3713,3721]",
      "dest": "function: function [3713,3721]"
    },
    {
      "src": "identifier: errorMessage [3762,3774]",
      "dest": "identifier: errorMessage [3762,3774]"
    },
    {
      "src": "binary_expression [986,992]",
      "dest": "binary_expression [986,992]"
    },
    {
      "src": "variable_declaration_statement [1890,1908]",
      "dest": "variable_declaration_statement [1890,1908]"
    },
    {
      "src": "): ) [4501,4502]",
      "dest": "): ) [4501,4502]"
    },
    {
      "src": "primitive_type [5059,5066]",
      "dest": "primitive_type [5059,5066]"
    },
    {
      "src": "type_name [932,939]",
      "dest": "type_name [932,939]"
    },
    {
      "src": "call_argument [1412,1413]",
      "dest": "call_argument [1412,1413]"
    },
    {
      "src": "(: ( [3113,3114]",
      "dest": "(: ( [3113,3114]"
    },
    {
      "src": "pure: pure [3785,3789]",
      "dest": "pure: pure [3785,3789]"
    },
    {
      "src": "internal: internal [1809,1817]",
      "dest": "internal: internal [1809,1817]"
    },
    {
      "src": "*: * [2544,2545]",
      "dest": "*: * [2544,2545]"
    },
    {
      "src": "internal: internal [5098,5106]",
      "dest": "internal: internal [5098,5106]"
    },
    {
      "src": "identifier: a [1409,1410]",
      "dest": "identifier: a [1409,1410]"
    },
    {
      "src": "\": \" [4555,4556]",
      "dest": "\": \" [4555,4556]"
    },
    {
      "src": "type_name [1770,1777]",
      "dest": "type_name [1770,1777]"
    },
    {
      "src": "identifier: a [2542,2543]",
      "dest": "identifier: a [2542,2543]"
    },
    {
      "src": "return_type_definition [3150,3167]",
      "dest": "return_type_definition [3150,3167]"
    },
    {
      "src": "returns: returns [1823,1830]",
      "dest": "returns: returns [1823,1830]"
    },
    {
      "src": "identifier: c [2631,2632]",
      "dest": "identifier: c [2631,2632]"
    },
    {
      "src": "parameter [898,907]",
      "dest": "parameter [898,907]"
    },
    {
      "src": "(: ( [5047,5048]",
      "dest": "(: ( [5047,5048]"
    },
    {
      "src": "variable_declaration_statement [2530,2548]",
      "dest": "variable_declaration_statement [2530,2548]"
    },
    {
      "src": "%: % [5188,5189]",
      "dest": "%: % [5188,5189]"
    },
    {
      "src": "(: ( [886,887]",
      "dest": "(: ( [886,887]"
    },
    {
      "src": "primitive_type [3856,3863]",
      "dest": "primitive_type [3856,3863]"
    },
    {
      "src": "(: ( [1378,1379]",
      "dest": "(: ( [1378,1379]"
    },
    {
      "src": "identifier: c [1898,1899]",
      "dest": "identifier: c [1898,1899]"
    },
    {
      "src": "<=: <= [1861,1863]",
      "dest": "<=: <= [1861,1863]"
    },
    {
      "src": "function_body [2247,2639]",
      "dest": "function_body [2247,2639]"
    },
    {
      "src": "uint256: uint256 [898,905]",
      "dest": "uint256: uint256 [898,905]"
    },
    {
      "src": "{: { [2487,2488]",
      "dest": "{: { [2487,2488]"
    },
    {
      "src": ",: , [1865,1866]",
      "dest": ",: , [1865,1866]"
    },
    {
      "src": "primitive_type [4449,4456]",
      "dest": "primitive_type [4449,4456]"
    },
    {
      "src": "identifier: div [3722,3725]",
      "dest": "identifier: div [3722,3725]"
    },
    {
      "src": ",: , [4528,4529]",
      "dest": ",: , [4528,4529]"
    },
    {
      "src": "state_mutability [2224,2228]",
      "dest": "state_mutability [2224,2228]"
    },
    {
      "src": "variable_declaration [3856,3865]",
      "dest": "variable_declaration [3856,3865]"
    },
    {
      "src": "): ) [3845,3846]",
      "dest": "): ) [3845,3846]"
    },
    {
      "src": "(: ( [931,932]",
      "dest": "(: ( [931,932]"
    },
    {
      "src": "identifier: c [2538,2539]",
      "dest": "identifier: c [2538,2539]"
    },
    {
      "src": ",: , [3735,3736]",
      "dest": ",: , [3735,3736]"
    },
    {
      "src": "identifier: a [2201,2202]",
      "dest": "identifier: a [2201,2202]"
    },
    {
      "src": "memory: memory [3755,3761]",
      "dest": "memory: memory [3755,3761]"
    },
    {
      "src": "{: { [3168,3169]",
      "dest": "{: { [3168,3169]"
    },
    {
      "src": "primitive_type [932,939]",
      "dest": "primitive_type [932,939]"
    },
    {
      "src": "binary_expression [3826,3831]",
      "dest": "binary_expression [3826,3831]"
    },
    {
      "src": "return: return [1035,1041]",
      "dest": "return: return [1035,1041]"
    },
    {
      "src": "): ) [4556,4557]",
      "dest": "): ) [4556,4557]"
    },
    {
      "src": "function_body [4503,4564]",
      "dest": "function_body [4503,4564]"
    },
    {
      "src": "string [3195,3223]",
      "dest": "string [3195,3223]"
    },
    {
      "src": ",: , [4525,4526]",
      "dest": ",: , [4525,4526]"
    },
    {
      "src": "memory: memory [5077,5083]",
      "dest": "memory: memory [5077,5083]"
    },
    {
      "src": "return: return [1918,1924]",
      "dest": "return: return [1918,1924]"
    },
    {
      "src": "pragma_directive [33,56]",
      "dest": "pragma_directive [33,56]"
    },
    {
      "src": "return: return [3970,3976]",
      "dest": "return: return [3970,3976]"
    },
    {
      "src": "parameter [887,896]",
      "dest": "parameter [887,896]"
    },
    {
      "src": "): ) [1386,1387]",
      "dest": "): ) [1386,1387]"
    },
    {
      "src": "state_mutability [3785,3789]",
      "dest": "state_mutability [3785,3789]"
    },
    {
      "src": "pure: pure [5107,5111]",
      "dest": "pure: pure [5107,5111]"
    },
    {
      "src": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [3237,3708]",
      "dest": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [3237,3708]"
    },
    {
      "src": "uint256: uint256 [3726,3733]",
      "dest": "uint256: uint256 [3726,3733]"
    },
    {
      "src": "primitive_type [1890,1897]",
      "dest": "primitive_type [1890,1897]"
    },
    {
      "src": "type_name [3726,3733]",
      "dest": "type_name [3726,3733]"
    },
    {
      "src": "call_expression [3818,3846]",
      "dest": "call_expression [3818,3846]"
    },
    {
      "src": ",: , [5154,5155]",
      "dest": ",: , [5154,5155]"
    },
    {
      "src": "variable_declaration [951,960]",
      "dest": "variable_declaration [951,960]"
    },
    {
      "src": "{: { [3808,3809]",
      "dest": "{: { [3808,3809]"
    },
    {
      "src": "uint256: uint256 [951,958]",
      "dest": "uint256: uint256 [951,958]"
    },
    {
      "src": "visibility [1809,1817]",
      "dest": "visibility [1809,1817]"
    },
    {
      "src": "{: { [639,640]",
      "dest": "{: { [639,640]"
    },
    {
      "src": "uint256: uint256 [3159,3166]",
      "dest": "uint256: uint256 [3159,3166]"
    },
    {
      "src": "function_body [941,1050]",
      "dest": "function_body [941,1050]"
    },
    {
      "src": "string_literal [2577,2612]",
      "dest": "string_literal [2577,2612]"
    },
    {
      "src": "identifier: a [5056,5057]",
      "dest": "identifier: a [5056,5057]"
    },
    {
      "src": "uint256: uint256 [1334,1341]",
      "dest": "uint256: uint256 [1334,1341]"
    },
    {
      "src": "solidity_version_comparison_operator [48,50]",
      "dest": "solidity_version_comparison_operator [48,50]"
    },
    {
      "src": "}: } [1454,1455]",
      "dest": "}: } [1454,1455]"
    },
    {
      "src": "type_name [2193,2200]",
      "dest": "type_name [2193,2200]"
    },
    {
      "src": "variable_declaration_statement [951,969]",
      "dest": "variable_declaration_statement [951,969]"
    },
    {
      "src": "parameter [1770,1779]",
      "dest": "parameter [1770,1779]"
    },
    {
      "src": "identifier: a [5186,5187]",
      "dest": "identifier: a [5186,5187]"
    },
    {
      "src": "}: } [1049,1050]",
      "dest": "}: } [1049,1050]"
    },
    {
      "src": "): ) [3774,3775]",
      "dest": "): ) [3774,3775]"
    },
    {
      "src": "): ) [939,940]",
      "dest": "): ) [939,940]"
    },
    {
      "src": "type_name [2530,2537]",
      "dest": "type_name [2530,2537]"
    },
    {
      "src": "identifier: require [5140,5147]",
      "dest": "identifier: require [5140,5147]"
    },
    {
      "src": "identifier: mod [4520,4523]",
      "dest": "identifier: mod [4520,4523]"
    },
    {
      "src": "number_literal: 0 [2508,2509]",
      "dest": "number_literal: 0 [2508,2509]"
    },
    {
      "src": "binary_expression [3868,3873]",
      "dest": "binary_expression [3868,3873]"
    },
    {
      "src": "type_name [5059,5066]",
      "dest": "type_name [5059,5066]"
    },
    {
      "src": "string_literal [994,1023]",
      "dest": "string_literal [994,1023]"
    },
    {
      "src": "state_mutability [1818,1822]",
      "dest": "state_mutability [1818,1822]"
    },
    {
      "src": "parameter [3726,3735]",
      "dest": "parameter [3726,3735]"
    },
    {
      "src": ">: > [3828,3829]",
      "dest": ">: > [3828,3829]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [4570,5030]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [4570,5030]"
    },
    {
      "src": "function_definition [1746,1933]",
      "dest": "function_definition [1746,1933]"
    },
    {
      "src": "visibility [4471,4479]",
      "dest": "visibility [4471,4479]"
    },
    {
      "src": "return_statement [1035,1044]",
      "dest": "return_statement [1035,1044]"
    },
    {
      "src": "return: return [1398,1404]",
      "dest": "return: return [1398,1404]"
    },
    {
      "src": "identifier: c [1925,1926]",
      "dest": "identifier: c [1925,1926]"
    },
    {
      "src": "parameter [1781,1807]",
      "dest": "parameter [1781,1807]"
    },
    {
      "src": "{: { [1388,1389]",
      "dest": "{: { [1388,1389]"
    },
    {
      "src": "identifier: b [1906,1907]",
      "dest": "identifier: b [1906,1907]"
    },
    {
      "src": "parameter [4460,4469]",
      "dest": "parameter [4460,4469]"
    },
    {
      "src": "binary_expression [963,968]",
      "dest": "binary_expression [963,968]"
    },
    {
      "src": "parameter [3114,3123]",
      "dest": "parameter [3114,3123]"
    },
    {
      "src": "{: { [5130,5131]",
      "dest": "{: { [5130,5131]"
    },
    {
      "src": "identifier: c [2565,2566]",
      "dest": "identifier: c [2565,2566]"
    },
    {
      "src": "=: = [3866,3867]",
      "dest": "=: = [3866,3867]"
    },
    {
      "src": "parameter [2193,2202]",
      "dest": "parameter [2193,2202]"
    },
    {
      "src": "parameter [3737,3746]",
      "dest": "parameter [3737,3746]"
    },
    {
      "src": "(: ( [1831,1832]",
      "dest": "(: ( [1831,1832]"
    },
    {
      "src": "uint256: uint256 [1379,1386]",
      "dest": "uint256: uint256 [1379,1386]"
    },
    {
      "src": "function_body [1841,1933]",
      "dest": "function_body [1841,1933]"
    },
    {
      "src": ",: , [3123,3124]",
      "dest": ",: , [3123,3124]"
    },
    {
      "src": "identifier: a [1342,1343]",
      "dest": "identifier: a [1342,1343]"
    },
    {
      "src": "primitive_type [887,894]",
      "dest": "primitive_type [887,894]"
    },
    {
      "src": ",: , [4458,4459]",
      "dest": ",: , [4458,4459]"
    },
    {
      "src": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [2395,2466]",
      "dest": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [2395,2466]"
    },
    {
      "src": "type_name [3799,3806]",
      "dest": "type_name [3799,3806]"
    },
    {
      "src": "identifier: require [1851,1858]",
      "dest": "identifier: require [1851,1858]"
    },
    {
      "src": "primitive_type [3159,3166]",
      "dest": "primitive_type [3159,3166]"
    },
    {
      "src": "primitive_type [1334,1341]",
      "dest": "primitive_type [1334,1341]"
    },
    {
      "src": "function_definition [874,1050]",
      "dest": "function_definition [874,1050]"
    },
    {
      "src": "internal: internal [1356,1364]",
      "dest": "internal: internal [1356,1364]"
    },
    {
      "src": ",: , [5057,5058]",
      "dest": ",: , [5057,5058]"
    },
    {
      "src": "if: if [2475,2477]",
      "dest": "if: if [2475,2477]"
    },
    {
      "src": "call_argument [3195,3223]",
      "dest": "call_argument [3195,3223]"
    },
    {
      "src": "parameter [5070,5096]",
      "dest": "parameter [5070,5096]"
    },
    {
      "src": "return: return [5179,5185]",
      "dest": "return: return [5179,5185]"
    },
    {
      "src": "primitive_type [2530,2537]",
      "dest": "primitive_type [2530,2537]"
    },
    {
      "src": "): ) [5128,5129]",
      "dest": "): ) [5128,5129]"
    },
    {
      "src": "identifier: b [1412,1413]",
      "dest": "identifier: b [1412,1413]"
    },
    {
      "src": "parameter [2204,2213]",
      "dest": "parameter [2204,2213]"
    },
    {
      "src": "uint256: uint256 [932,939]",
      "dest": "uint256: uint256 [932,939]"
    },
    {
      "src": "internal: internal [4471,4479]",
      "dest": "internal: internal [4471,4479]"
    },
    {
      "src": "visibility [5098,5106]",
      "dest": "visibility [5098,5106]"
    },
    {
      "src": "identifier: sub [1405,1408]",
      "dest": "identifier: sub [1405,1408]"
    },
    {
      "src": "): ) [1807,1808]",
      "dest": "): ) [1807,1808]"
    },
    {
      "src": "uint256: uint256 [3799,3806]",
      "dest": "uint256: uint256 [3799,3806]"
    },
    {
      "src": "parameter [3748,3774]",
      "dest": "parameter [3748,3774]"
    },
    {
      "src": "type_name [4494,4501]",
      "dest": "type_name [4494,4501]"
    },
    {
      "src": "uint256: uint256 [2238,2245]",
      "dest": "uint256: uint256 [2238,2245]"
    },
    {
      "src": "function_definition [3101,3231]",
      "dest": "function_definition [3101,3231]"
    },
    {
      "src": "type_name [1759,1766]",
      "dest": "type_name [1759,1766]"
    },
    {
      "src": "call_argument [3192,3193]",
      "dest": "call_argument [3192,3193]"
    },
    {
      "src": "return: return [2501,2507]",
      "dest": "return: return [2501,2507]"
    },
    {
      "src": "identifier: c [986,987]",
      "dest": "identifier: c [986,987]"
    },
    {
      "src": "function: function [4436,4444]",
      "dest": "function: function [4436,4444]"
    },
    {
      "src": "identifier: a [4457,4458]",
      "dest": "identifier: a [4457,4458]"
    },
    {
      "src": "pure: pure [4480,4484]",
      "dest": "pure: pure [4480,4484]"
    },
    {
      "src": "=: = [1900,1901]",
      "dest": "=: = [1900,1901]"
    },
    {
      "src": "identifier: b [5148,5149]",
      "dest": "identifier: b [5148,5149]"
    },
    {
      "src": "primitive_type [5070,5076]",
      "dest": "primitive_type [5070,5076]"
    },
    {
      "src": "\": \" [3222,3223]",
      "dest": "\": \" [3222,3223]"
    },
    {
      "src": "identifier: b [5067,5068]",
      "dest": "identifier: b [5067,5068]"
    },
    {
      "src": "function: function [1321,1329]",
      "dest": "function: function [1321,1329]"
    },
    {
      "src": "call_argument [986,992]",
      "dest": "call_argument [986,992]"
    },
    {
      "src": "identifier: div [3110,3113]",
      "dest": "identifier: div [3110,3113]"
    },
    {
      "src": "pragma: pragma [33,39]",
      "dest": "pragma: pragma [33,39]"
    },
    {
      "src": "identifier: a [895,896]",
      "dest": "identifier: a [895,896]"
    },
    {
      "src": "type_name [1832,1839]",
      "dest": "type_name [1832,1839]"
    }
  ],
  "actions": []
}