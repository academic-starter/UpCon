{
  "matches": [
    {
      "src": "private: private [985,992]",
      "dest": "private: private [985,992]"
    },
    {
      "src": "): ) [1364,1365]",
      "dest": "): ) [1364,1365]"
    },
    {
      "src": "): ) [2431,2432]",
      "dest": "): ) [2431,2432]"
    },
    {
      "src": "assignment_expression [1573,1593]",
      "dest": "assignment_expression [1573,1593]"
    },
    {
      "src": "primitive_type [2127,2134]",
      "dest": "primitive_type [2127,2134]"
    },
    {
      "src": "variable_declaration [2150,2160]",
      "dest": "variable_declaration [2150,2160]"
    },
    {
      "src": "unary_expression [1398,1411]",
      "dest": "unary_expression [1398,1411]"
    },
    {
      "src": "true: true [1502,1506]",
      "dest": "true: true [1502,1506]"
    },
    {
      "src": "boolean_literal [1470,1474]",
      "dest": "boolean_literal [1470,1474]"
    },
    {
      "src": "if: if [1539,1541]",
      "dest": "if: if [1539,1541]"
    },
    {
      "src": "identifier: self [2211,2215]",
      "dest": "identifier: self [2211,2215]"
    },
    {
      "src": "identifier: this [2135,2139]",
      "dest": "identifier: this [2135,2139]"
    },
    {
      "src": "comment: /**      * @dev Indicates that the contract has been initialized.      */ [902,975]",
      "dest": "comment: /**      * @dev Indicates that the contract has been initialized.      */ [902,975]"
    },
    {
      "src": "||: || [1280,1282]",
      "dest": "||: || [1280,1282]"
    },
    {
      "src": "true: true [1470,1474]",
      "dest": "true: true [1470,1474]"
    },
    {
      "src": "}: } [2255,2256]",
      "dest": "}: } [2255,2256]"
    },
    {
      "src": "block_statement [1559,1604]",
      "dest": "block_statement [1559,1604]"
    },
    {
      "src": "comment: // under construction or not. [2074,2103]",
      "dest": "comment: // under construction or not. [2074,2103]"
    },
    {
      "src": "type_name [2150,2157]",
      "dest": "type_name [2150,2157]"
    },
    {
      "src": "assignment_expression [1455,1474]",
      "dest": "assignment_expression [1455,1474]"
    },
    {
      "src": "bool: bool [1107,1111]",
      "dest": "bool: bool [1107,1111]"
    },
    {
      "src": "}: } [2225,2226]",
      "dest": "}: } [2225,2226]"
    },
    {
      "src": "comment: // Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol [0,126]",
      "dest": "comment: // Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol [0,126]"
    },
    {
      "src": "number_literal: 50 [2582,2584]",
      "dest": "number_literal: 50 [2582,2584]"
    },
    {
      "src": "parameter [1747,1751]",
      "dest": "parameter [1747,1751]"
    },
    {
      "src": "yul_assignment [2193,2216]",
      "dest": "yul_assignment [2193,2216]"
    },
    {
      "src": "primitive_type [2574,2581]",
      "dest": "primitive_type [2574,2581]"
    },
    {
      "src": "function_definition [1700,2256]",
      "dest": "function_definition [1700,2256]"
    },
    {
      "src": "yul_path [2211,2215]",
      "dest": "yul_path [2211,2215]"
    },
    {
      "src": "identifier: require [1259,1266]",
      "dest": "identifier: require [1259,1266]"
    },
    {
      "src": "||: || [1299,1301]",
      "dest": "||: || [1299,1301]"
    },
    {
      "src": "}: } [1516,1517]",
      "dest": "}: } [1516,1517]"
    },
    {
      "src": "identifier: isTopLevelCall [1381,1395]",
      "dest": "identifier: isTopLevelCall [1381,1395]"
    },
    {
      "src": "identifier: isConstructor [1709,1722]",
      "dest": "identifier: isConstructor [1709,1722]"
    },
    {
      "src": ",: , [1314,1315]",
      "dest": ",: , [1314,1315]"
    },
    {
      "src": "): ) [1439,1440]",
      "dest": "): ) [1439,1440]"
    },
    {
      "src": "true [1470,1474]",
      "dest": "true [1470,1474]"
    },
    {
      "src": "modifier_definition [1226,1610]",
      "dest": "modifier_definition [1226,1610]"
    },
    {
      "src": "yul_path [2193,2195]",
      "dest": "yul_path [2193,2195]"
    },
    {
      "src": "comment: // Reserved storage space to allow for layout changes in the future. [2501,2569]",
      "dest": "comment: // Reserved storage space to allow for layout changes in the future. [2501,2569]"
    },
    {
      "src": "): ) [1723,1724]",
      "dest": "): ) [1723,1724]"
    },
    {
      "src": "modifier: modifier [1226,1234]",
      "dest": "modifier: modifier [1226,1234]"
    },
    {
      "src": "primitive_type [2150,2157]",
      "dest": "primitive_type [2150,2157]"
    },
    {
      "src": "type_cast_expression [2127,2140]",
      "dest": "type_cast_expression [2127,2140]"
    },
    {
      "src": "call_argument [1316,1364]",
      "dest": "call_argument [1316,1364]"
    },
    {
      "src": "(: ( [2210,2211]",
      "dest": "(: ( [2210,2211]"
    },
    {
      "src": "visibility [1725,1732]",
      "dest": "visibility [1725,1732]"
    },
    {
      "src": "=: = [1468,1469]",
      "dest": "=: = [1468,1469]"
    },
    {
      "src": "variable_declaration_statement [1376,1412]",
      "dest": "variable_declaration_statement [1376,1412]"
    },
    {
      "src": "identifier: cs [2193,2195]",
      "dest": "identifier: cs [2193,2195]"
    },
    {
      "src": "variable_declaration [2112,2124]",
      "dest": "variable_declaration [2112,2124]"
    },
    {
      "src": "return_type_definition [2445,2459]",
      "dest": "return_type_definition [2445,2459]"
    },
    {
      "src": "primitive_type [980,984]",
      "dest": "primitive_type [980,984]"
    },
    {
      "src": "yul_evm_builtin [2199,2210]",
      "dest": "yul_evm_builtin [2199,2210]"
    },
    {
      "src": "if_statement [1421,1517]",
      "dest": "if_statement [1421,1517]"
    },
    {
      "src": "binary_expression [2242,2249]",
      "dest": "binary_expression [2242,2249]"
    },
    {
      "src": "(: ( [1246,1247]",
      "dest": "(: ( [1246,1247]"
    },
    {
      "src": "unary_expression [1302,1314]",
      "dest": "unary_expression [1302,1314]"
    },
    {
      "src": "type_name [1747,1751]",
      "dest": "type_name [1747,1751]"
    },
    {
      "src": "(: ( [2430,2431]",
      "dest": "(: ( [2430,2431]"
    },
    {
      "src": "pragma: pragma [226,232]",
      "dest": "pragma: pragma [226,232]"
    },
    {
      "src": "return_statement [2470,2489]",
      "dest": "return_statement [2470,2489]"
    },
    {
      "src": "): ) [1557,1558]",
      "dest": "): ) [1557,1558]"
    },
    {
      "src": "string_literal [1316,1364]",
      "dest": "string_literal [1316,1364]"
    },
    {
      "src": "comment: // deployed when running a constructor, any checks on its code size will [1916,1988]",
      "dest": "comment: // deployed when running a constructor, any checks on its code size will [1916,1988]"
    },
    {
      "src": "private: private [2586,2593]",
      "dest": "private: private [2586,2593]"
    },
    {
      "src": "private: private [1725,1732]",
      "dest": "private: private [1725,1732]"
    },
    {
      "src": "function_body [1249,1610]",
      "dest": "function_body [1249,1610]"
    },
    {
      "src": "address: address [2112,2119]",
      "dest": "address: address [2112,2119]"
    },
    {
      "src": "{: { [2460,2461]",
      "dest": "{: { [2460,2461]"
    },
    {
      "src": "yul_function_call [2199,2216]",
      "dest": "yul_function_call [2199,2216]"
    },
    {
      "src": "): ) [1751,1752]",
      "dest": "): ) [1751,1752]"
    },
    {
      "src": "bool: bool [2454,2458]",
      "dest": "bool: bool [2454,2458]"
    },
    {
      "src": "boolean_literal [1588,1593]",
      "dest": "boolean_literal [1588,1593]"
    },
    {
      "src": "expression_statement [1488,1507]",
      "dest": "expression_statement [1488,1507]"
    },
    {
      "src": "{: { [1753,1754]",
      "dest": "{: { [1753,1754]"
    },
    {
      "src": "]: ] [2584,2585]",
      "dest": "]: ] [2584,2585]"
    },
    {
      "src": "primitive_type [1107,1111]",
      "dest": "primitive_type [1107,1111]"
    },
    {
      "src": "identifier: initializing [1455,1467]",
      "dest": "identifier: initializing [1455,1467]"
    },
    {
      "src": "assignment_expression [1488,1506]",
      "dest": "assignment_expression [1488,1506]"
    },
    {
      "src": "pragma_directive [226,249]",
      "dest": "pragma_directive [226,249]"
    },
    {
      "src": "comment: /// @dev Returns true if and only if the function is running in the constructor [1616,1695]",
      "dest": "comment: /// @dev Returns true if and only if the function is running in the constructor [1616,1695]"
    },
    {
      "src": "comment: /**      * @dev Indicates that the contract is in the process of being initialized.      */ [1011,1102]",
      "dest": "comment: /**      * @dev Indicates that the contract is in the process of being initialized.      */ [1011,1102]"
    },
    {
      "src": "identifier: _ [1527,1528]",
      "dest": "identifier: _ [1527,1528]"
    },
    {
      "src": "expression_statement [1259,1366]",
      "dest": "expression_statement [1259,1366]"
    },
    {
      "src": "=: = [1586,1587]",
      "dest": "=: = [1586,1587]"
    },
    {
      "src": "state_variable_declaration [1107,1133]",
      "dest": "state_variable_declaration [1107,1133]"
    },
    {
      "src": "view: view [1733,1737]",
      "dest": "view: view [1733,1737]"
    },
    {
      "src": "assembly_statement [2170,2226]",
      "dest": "assembly_statement [2170,2226]"
    },
    {
      "src": "=: = [1500,1501]",
      "dest": "=: = [1500,1501]"
    },
    {
      "src": "variable_declaration [1376,1395]",
      "dest": "variable_declaration [1376,1395]"
    },
    {
      "src": "public: public [2433,2439]",
      "dest": "public: public [2433,2439]"
    },
    {
      "src": "visibility [2586,2593]",
      "dest": "visibility [2586,2593]"
    },
    {
      "src": "if_statement [1539,1604]",
      "dest": "if_statement [1539,1604]"
    },
    {
      "src": "identifier: initialized [1303,1314]",
      "dest": "identifier: initialized [1303,1314]"
    },
    {
      "src": "{: { [1559,1560]",
      "dest": "{: { [1559,1560]"
    },
    {
      "src": "identifier: isTopLevelCall [1425,1439]",
      "dest": "identifier: isTopLevelCall [1425,1439]"
    },
    {
      "src": "bool: bool [1376,1380]",
      "dest": "bool: bool [1376,1380]"
    },
    {
      "src": "true [1502,1506]",
      "dest": "true [1502,1506]"
    },
    {
      "src": "function_body [2460,2495]",
      "dest": "function_body [2460,2495]"
    },
    {
      "src": "type_name [1107,1111]",
      "dest": "type_name [1107,1111]"
    },
    {
      "src": "identifier: initializing [1399,1411]",
      "dest": "identifier: initializing [1399,1411]"
    },
    {
      "src": "): ) [1247,1248]",
      "dest": "): ) [1247,1248]"
    },
    {
      "src": "!: ! [1302,1303]",
      "dest": "!: ! [1302,1303]"
    },
    {
      "src": "type_name [2454,2458]",
      "dest": "type_name [2454,2458]"
    },
    {
      "src": "block_statement [1441,1517]",
      "dest": "block_statement [1441,1517]"
    },
    {
      "src": "!: ! [1398,1399]",
      "dest": "!: ! [1398,1399]"
    },
    {
      "src": "variable_declaration_statement [2150,2161]",
      "dest": "variable_declaration_statement [2150,2161]"
    },
    {
      "src": "type_name [2574,2585]",
      "dest": "type_name [2574,2585]"
    },
    {
      "src": "function: function [1700,1708]",
      "dest": "function: function [1700,1708]"
    },
    {
      "src": "(: ( [2453,2454]",
      "dest": "(: ( [2453,2454]"
    },
    {
      "src": "primitive_type [1376,1380]",
      "dest": "primitive_type [1376,1380]"
    },
    {
      "src": "comment: // Added public isInitialized() view of private initialized bool. [127,192]",
      "dest": "comment: // Added public isInitialized() view of private initialized bool. [127,192]"
    },
    {
      "src": "binary_expression [1267,1314]",
      "dest": "binary_expression [1267,1314]"
    },
    {
      "src": "assembly: assembly [2170,2178]",
      "dest": "assembly: assembly [2170,2178]"
    },
    {
      "src": "view: view [2440,2444]",
      "dest": "view: view [2440,2444]"
    },
    {
      "src": "expression_statement [1573,1594]",
      "dest": "expression_statement [1573,1594]"
    },
    {
      "src": "comment: /**      * @dev Modifier to use in the initializer function of a contract.      */ [1139,1221]",
      "dest": "comment: /**      * @dev Modifier to use in the initializer function of a contract.      */ [1139,1221]"
    },
    {
      "src": "expression_statement [1455,1475]",
      "dest": "expression_statement [1455,1475]"
    },
    {
      "src": "): ) [2215,2216]",
      "dest": "): ) [2215,2216]"
    },
    {
      "src": "identifier: initializing [1120,1132]",
      "dest": "identifier: initializing [1120,1132]"
    },
    {
      "src": "=: = [1396,1397]",
      "dest": "=: = [1396,1397]"
    },
    {
      "src": "visibility [1112,1119]",
      "dest": "visibility [1112,1119]"
    },
    {
      "src": "function_definition [2408,2495]",
      "dest": "function_definition [2408,2495]"
    },
    {
      "src": "\": \" [1363,1364]",
      "dest": "\": \" [1363,1364]"
    },
    {
      "src": "{: { [896,897]",
      "dest": "{: { [896,897]"
    },
    {
      "src": "{: { [2179,2180]",
      "dest": "{: { [2179,2180]"
    },
    {
      "src": "primitive_type [1747,1751]",
      "dest": "primitive_type [1747,1751]"
    },
    {
      "src": "identifier: cs [2242,2244]",
      "dest": "identifier: cs [2242,2244]"
    },
    {
      "src": "comment: // yield zero, making it an effective way to detect if a contract is [1997,2065]",
      "dest": "comment: // yield zero, making it an effective way to detect if a contract is [1997,2065]"
    },
    {
      "src": "variable_declaration_statement [2112,2141]",
      "dest": "variable_declaration_statement [2112,2141]"
    },
    {
      "src": "binary_expression [1267,1298]",
      "dest": "binary_expression [1267,1298]"
    },
    {
      "src": "contract_body [896,2606]",
      "dest": "contract_body [896,2606]"
    },
    {
      "src": "identifier: Initializable [882,895]",
      "dest": "identifier: Initializable [882,895]"
    },
    {
      "src": "identifier: initialized [1488,1499]",
      "dest": "identifier: initialized [1488,1499]"
    },
    {
      "src": "contract: contract [873,881]",
      "dest": "contract: contract [873,881]"
    },
    {
      "src": "string [1316,1364]",
      "dest": "string [1316,1364]"
    },
    {
      "src": "comment: /**      * @dev Return true if and only if the contract has been initialized      * @return whether the contract has been initialized      */ [2262,2403]",
      "dest": "comment: /**      * @dev Return true if and only if the contract has been initialized      * @return whether the contract has been initialized      */ [2262,2403]"
    },
    {
      "src": "primitive_type [2454,2458]",
      "dest": "primitive_type [2454,2458]"
    },
    {
      "src": "bool: bool [980,984]",
      "dest": "bool: bool [980,984]"
    },
    {
      "src": "comment: /**  * @title Initializable  *  * @dev Helper contract to support initializer functions. To use it, replace  * the constructor with a function that has the `initializer` modifier.  * WARNING: Unlike constructors, initializer functions must be manually  * invoked. This applies both to deploying an Initializable contract, as well  * as extending an Initializable contract via inheritance.  * WARNING: When used with inheritance, manual care must be taken to not invoke  * a parent initializer twice, or ensure that all initializers are idempotent,  * because this is not dealt with automatically as with constructors.  */ [251,872]",
      "dest": "comment: /**  * @title Initializable  *  * @dev Helper contract to support initializer functions. To use it, replace  * the constructor with a function that has the `initializer` modifier.  * WARNING: Unlike constructors, initializer functions must be manually  * invoked. This applies both to deploying an Initializable contract, as well  * as extending an Initializable contract via inheritance.  * WARNING: When used with inheritance, manual care must be taken to not invoke  * a parent initializer twice, or ensure that all initializers are idempotent,  * because this is not dealt with automatically as with constructors.  */ [251,872]"
    },
    {
      "src": "(: ( [1722,1723]",
      "dest": "(: ( [1722,1723]"
    },
    {
      "src": "function_body [1753,2256]",
      "dest": "function_body [1753,2256]"
    },
    {
      "src": "identifier: isConstructor [1283,1296]",
      "dest": "identifier: isConstructor [1283,1296]"
    },
    {
      "src": "type_name [1376,1380]",
      "dest": "type_name [1376,1380]"
    },
    {
      "src": "uint256: uint256 [2150,2157]",
      "dest": "uint256: uint256 [2150,2157]"
    },
    {
      "src": "type_name [2112,2119]",
      "dest": "type_name [2112,2119]"
    },
    {
      "src": "uint256: uint256 [2574,2581]",
      "dest": "uint256: uint256 [2574,2581]"
    },
    {
      "src": "number_literal: 0 [2248,2249]",
      "dest": "number_literal: 0 [2248,2249]"
    },
    {
      "src": "}: } [1603,1604]",
      "dest": "}: } [1603,1604]"
    },
    {
      "src": "returns: returns [1738,1745]",
      "dest": "returns: returns [1738,1745]"
    },
    {
      "src": "return_statement [2235,2250]",
      "dest": "return_statement [2235,2250]"
    },
    {
      "src": "false [1588,1593]",
      "dest": "false [1588,1593]"
    },
    {
      "src": "if: if [1421,1423]",
      "dest": "if: if [1421,1423]"
    },
    {
      "src": "solidity_pragma_token [233,248]",
      "dest": "solidity_pragma_token [233,248]"
    },
    {
      "src": "type_name [980,984]",
      "dest": "type_name [980,984]"
    },
    {
      "src": "{: { [1249,1250]",
      "dest": "{: { [1249,1250]"
    },
    {
      "src": "(: ( [1424,1425]",
      "dest": "(: ( [1424,1425]"
    },
    {
      "src": "yul_identifier [2211,2215]",
      "dest": "yul_identifier [2211,2215]"
    },
    {
      "src": "(: ( [1746,1747]",
      "dest": "(: ( [1746,1747]"
    },
    {
      "src": "bool: bool [1747,1751]",
      "dest": "bool: bool [1747,1751]"
    },
    {
      "src": "identifier: isTopLevelCall [1543,1557]",
      "dest": "identifier: isTopLevelCall [1543,1557]"
    },
    {
      "src": "call_expression [1259,1365]",
      "dest": "call_expression [1259,1365]"
    },
    {
      "src": "parameter [2454,2458]",
      "dest": "parameter [2454,2458]"
    },
    {
      "src": "function: function [2408,2416]",
      "dest": "function: function [2408,2416]"
    },
    {
      "src": "identifier: isInitialized [2417,2430]",
      "dest": "identifier: isInitialized [2417,2430]"
    },
    {
      "src": "}: } [2605,2606]",
      "dest": "}: } [2605,2606]"
    },
    {
      "src": "return: return [2235,2241]",
      "dest": "return: return [2235,2241]"
    },
    {
      "src": "false: false [1588,1593]",
      "dest": "false: false [1588,1593]"
    },
    {
      "src": "state_mutability [2440,2444]",
      "dest": "state_mutability [2440,2444]"
    },
    {
      "src": "contract_declaration [873,2606]",
      "dest": "contract_declaration [873,2606]"
    },
    {
      "src": "identifier: self [2120,2124]",
      "dest": "identifier: self [2120,2124]"
    },
    {
      "src": "==: == [2245,2247]",
      "dest": "==: == [2245,2247]"
    },
    {
      "src": "identifier: initializing [1267,1279]",
      "dest": "identifier: initializing [1267,1279]"
    },
    {
      "src": "yul_identifier [2193,2195]",
      "dest": "yul_identifier [2193,2195]"
    },
    {
      "src": "identifier: cs [2158,2160]",
      "dest": "identifier: cs [2158,2160]"
    },
    {
      "src": "}: } [1609,1610]",
      "dest": "}: } [1609,1610]"
    },
    {
      "src": "visibility [985,992]",
      "dest": "visibility [985,992]"
    },
    {
      "src": "state_variable_declaration [2574,2604]",
      "dest": "state_variable_declaration [2574,2604]"
    },
    {
      "src": "visibility [2433,2439]",
      "dest": "visibility [2433,2439]"
    },
    {
      "src": "comment: // address returns the current address. Since the code is still not [1840,1907]",
      "dest": "comment: // address returns the current address. Since the code is still not [1840,1907]"
    },
    {
      "src": "identifier: initializer [1235,1246]",
      "dest": "identifier: initializer [1235,1246]"
    },
    {
      "src": "\": \" [1316,1317]",
      "dest": "\": \" [1316,1317]"
    },
    {
      "src": "private: private [1112,1119]",
      "dest": "private: private [1112,1119]"
    },
    {
      "src": "extcodesize: extcodesize [2199,2210]",
      "dest": "extcodesize: extcodesize [2199,2210]"
    },
    {
      "src": "{: { [1441,1442]",
      "dest": "{: { [1441,1442]"
    },
    {
      "src": "(: ( [1266,1267]",
      "dest": "(: ( [1266,1267]"
    },
    {
      "src": "=: = [2125,2126]",
      "dest": "=: = [2125,2126]"
    },
    {
      "src": "return: return [2470,2476]",
      "dest": "return: return [2470,2476]"
    },
    {
      "src": "call_expression [1283,1298]",
      "dest": "call_expression [1283,1298]"
    },
    {
      "src": "state_mutability [1733,1737]",
      "dest": "state_mutability [1733,1737]"
    },
    {
      "src": "source_file [0,2607]",
      "dest": "source_file [0,2607]"
    },
    {
      "src": "): ) [1297,1298]",
      "dest": "): ) [1297,1298]"
    },
    {
      "src": "comment: // extcodesize checks the size of the code stored in an address, and [1763,1831]",
      "dest": "comment: // extcodesize checks the size of the code stored in an address, and [1763,1831]"
    },
    {
      "src": "type_name [2574,2581]",
      "dest": "type_name [2574,2581]"
    },
    {
      "src": "boolean_literal [1502,1506]",
      "dest": "boolean_literal [1502,1506]"
    },
    {
      "src": "expression_statement [1527,1529]",
      "dest": "expression_statement [1527,1529]"
    },
    {
      "src": "(: ( [1296,1297]",
      "dest": "(: ( [1296,1297]"
    },
    {
      "src": "): ) [2458,2459]",
      "dest": "): ) [2458,2459]"
    },
    {
      "src": "(: ( [1542,1543]",
      "dest": "(: ( [1542,1543]"
    },
    {
      "src": "identifier: initializing [1573,1585]",
      "dest": "identifier: initializing [1573,1585]"
    },
    {
      "src": "): ) [2139,2140]",
      "dest": "): ) [2139,2140]"
    },
    {
      "src": "identifier: initialized [2477,2488]",
      "dest": "identifier: initialized [2477,2488]"
    },
    {
      "src": "call_argument [1267,1314]",
      "dest": "call_argument [1267,1314]"
    },
    {
      "src": "(: ( [2134,2135]",
      "dest": "(: ( [2134,2135]"
    },
    {
      "src": "return_type_definition [1738,1752]",
      "dest": "return_type_definition [1738,1752]"
    },
    {
      "src": "identifier: initialized [993,1004]",
      "dest": "identifier: initialized [993,1004]"
    },
    {
      "src": "returns: returns [2445,2452]",
      "dest": "returns: returns [2445,2452]"
    },
    {
      "src": "solidity: solidity [233,241]",
      "dest": "solidity: solidity [233,241]"
    },
    {
      "src": "state_variable_declaration [980,1005]",
      "dest": "state_variable_declaration [980,1005]"
    },
    {
      "src": "identifier: ______gap [2594,2603]",
      "dest": "identifier: ______gap [2594,2603]"
    },
    {
      "src": ":=: := [2196,2198]",
      "dest": ":=: := [2196,2198]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [194,225]",
      "dest": "comment: // SPDX-License-Identifier: MIT [194,225]"
    },
    {
      "src": "address: address [2127,2134]",
      "dest": "address: address [2127,2134]"
    },
    {
      "src": "call_argument [2135,2139]",
      "dest": "call_argument [2135,2139]"
    },
    {
      "src": "solidity_version:  0.6.10 [241,248]",
      "dest": "solidity_version:  0.6.10 [241,248]"
    },
    {
      "src": "}: } [2494,2495]",
      "dest": "}: } [2494,2495]"
    },
    {
      "src": "[: [ [2581,2582]",
      "dest": "[: [ [2581,2582]"
    },
    {
      "src": "primitive_type [2112,2119]",
      "dest": "primitive_type [2112,2119]"
    }
  ],
  "actions": []
}