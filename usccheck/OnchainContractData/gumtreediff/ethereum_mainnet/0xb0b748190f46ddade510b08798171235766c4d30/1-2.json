{
  "matches": [
    {
      "src": "parameter [26132,26139]",
      "dest": "parameter [900,912]"
    },
    {
      "src": "returns: returns [26123,26130]",
      "dest": "returns: returns [891,898]"
    },
    {
      "src": "identifier: newOwner [40352,40360]",
      "dest": "identifier: impl [429,433]"
    },
    {
      "src": "yul_evm_builtin [37266,37272]",
      "dest": "yul_evm_builtin [2442,2448]"
    },
    {
      "src": "primitive_type [480,487]",
      "dest": "primitive_type [1066,1073]"
    },
    {
      "src": "address: address [480,487]",
      "dest": "address: address [1066,1073]"
    },
    {
      "src": "parameter [769,783]",
      "dest": "parameter [1355,1369]"
    },
    {
      "src": "bytes32: bytes32 [291,298]",
      "dest": "bytes32: bytes32 [278,285]"
    },
    {
      "src": "(: ( [517,518]",
      "dest": "(: ( [1103,1104]"
    },
    {
      "src": "call_argument [347,413]",
      "dest": "call_argument [333,399]"
    },
    {
      "src": "): ) [553,554]",
      "dest": "): ) [1139,1140]"
    },
    {
      "src": "identifier: _setSlotValue [740,753]",
      "dest": "identifier: _setSlotValue [1326,1339]"
    },
    {
      "src": "bytes32: bytes32 [632,639]",
      "dest": "bytes32: bytes32 [1218,1225]"
    },
    {
      "src": "state_mutability [43469,43476]",
      "dest": "state_mutability [2810,2817]"
    },
    {
      "src": ",: , [767,768]",
      "dest": ",: , [1353,1354]"
    },
    {
      "src": "type_name [769,776]",
      "dest": "type_name [1355,1362]"
    },
    {
      "src": "identifier: sender [46211,46217]",
      "dest": "identifier: sender [618,624]"
    },
    {
      "src": "type_name [40130,40137]",
      "dest": "type_name [671,678]"
    },
    {
      "src": "state_mutability [26086,26090]",
      "dest": "state_mutability [886,890]"
    },
    {
      "src": "}: } [860,861]",
      "dest": "}: } [1446,1447]"
    },
    {
      "src": "parameter [40130,40146]",
      "dest": "parameter [671,686]"
    },
    {
      "src": "identifier: _getAddress [41659,41670]",
      "dest": "identifier: _getAddress [728,739]"
    },
    {
      "src": "uint256: uint256 [526,533]",
      "dest": "uint256: uint256 [1112,1119]"
    },
    {
      "src": "expression_statement [25823,25935]",
      "dest": "expression_statement [446,474]"
    },
    {
      "src": "identifier: key [452,455]",
      "dest": "identifier: key [1038,1041]"
    },
    {
      "src": "internal: internal [609,617]",
      "dest": "internal: internal [1195,1203]"
    },
    {
      "src": "}: } [562,563]",
      "dest": "}: } [1148,1149]"
    },
    {
      "src": "parameter [444,455]",
      "dest": "parameter [1030,1041]"
    },
    {
      "src": "uint160: uint160 [518,525]",
      "dest": "uint160: uint160 [1104,1111]"
    },
    {
      "src": "yul_path [843,849]",
      "dest": "yul_path [1429,1435]"
    },
    {
      "src": "function_body [648,723]",
      "dest": "function_body [1234,1309]"
    },
    {
      "src": "pragma_directive [42,64]",
      "dest": "pragma_directive [36,58]"
    },
    {
      "src": "(: ( [631,632]",
      "dest": "(: ( [1217,1218]"
    },
    {
      "src": "identifier: owner [25731,25736]",
      "dest": "identifier: implementation__ [1690,1706]"
    },
    {
      "src": "type_cast_expression [339,414]",
      "dest": "type_cast_expression [325,400]"
    },
    {
      "src": "address: address [40344,40351]",
      "dest": "address: address [421,428]"
    },
    {
      "src": "==: == [41656,41658]",
      "dest": "==: == [725,727]"
    },
    {
      "src": "): ) [783,784]",
      "dest": "): ) [1369,1370]"
    },
    {
      "src": "type_name [444,451]",
      "dest": "type_name [1030,1037]"
    },
    {
      "src": "comment: // Storage for this proxy [130,155]",
      "dest": "comment: // Storage for this proxy [118,143]"
    },
    {
      "src": "parameter [632,646]",
      "dest": "parameter [1218,1232]"
    },
    {
      "src": "identifier: IMPLEMENTATION_SLOT [187,206]",
      "dest": "identifier: IMPLEMENTATION_SLOT [174,193]"
    },
    {
      "src": "{: { [26146,26147]",
      "dest": "{: { [914,915]"
    },
    {
      "src": "(: ( [25830,25831]",
      "dest": "(: ( [453,454]"
    },
    {
      "src": "}: } [715,716]",
      "dest": "}: } [1301,1302]"
    },
    {
      "src": "primitive_type [45640,45647]",
      "dest": "primitive_type [932,939]"
    },
    {
      "src": "identifier: value_ [843,849]",
      "dest": "identifier: value_ [1429,1435]"
    },
    {
      "src": "}: } [867,868]",
      "dest": "}: } [1453,1454]"
    },
    {
      "src": "primitive_type [518,525]",
      "dest": "primitive_type [1104,1111]"
    },
    {
      "src": "): ) [646,647]",
      "dest": "): ) [1232,1233]"
    },
    {
      "src": "}: } [722,723]",
      "dest": "}: } [1308,1309]"
    },
    {
      "src": "type_name [40344,40351]",
      "dest": "type_name [421,428]"
    },
    {
      "src": ".: . [41648,41649]",
      "dest": ".: . [717,718]"
    },
    {
      "src": "bytes32: bytes32 [161,168]",
      "dest": "bytes32: bytes32 [149,156]"
    },
    {
      "src": "parameter [25723,25736]",
      "dest": "parameter [1682,1706]"
    },
    {
      "src": "function: function [26038,26046]",
      "dest": "function: function [853,861]"
    },
    {
      "src": "return_type_definition [471,492]",
      "dest": "return_type_definition [1057,1078]"
    },
    {
      "src": "): ) [41681,41682]",
      "dest": "): ) [750,751]"
    },
    {
      "src": "primitive_type [5556,5563]",
      "dest": "primitive_type [529,536]"
    },
    {
      "src": "uint256: uint256 [2009,2016]",
      "dest": "uint256: uint256 [598,605]"
    },
    {
      "src": "primitive_type [209,216]",
      "dest": "primitive_type [196,203]"
    },
    {
      "src": "visibility [40148,40154]",
      "dest": "visibility [688,694]"
    },
    {
      "src": "number_literal: 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc [217,283]",
      "dest": "number_literal: 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc [204,270]"
    },
    {
      "src": "identifier: ownerOf [26047,26054]",
      "dest": "identifier: implementation [862,876]"
    },
    {
      "src": "(: ( [346,347]",
      "dest": "(: ( [332,333]"
    },
    {
      "src": "identifier: _getAddress [432,443]",
      "dest": "identifier: _getAddress [1018,1029]"
    },
    {
      "src": "call_argument [548,551]",
      "dest": "call_argument [1134,1137]"
    },
    {
      "src": "): ) [554,555]",
      "dest": "): ) [1140,1141]"
    },
    {
      "src": "payable: payable [43469,43476]",
      "dest": "payable: payable [2810,2817]"
    },
    {
      "src": "type_name [480,487]",
      "dest": "type_name [1066,1073]"
    },
    {
      "src": "identifier: ProxyTarget [109,120]",
      "dest": "identifier: Proxy [103,108]"
    },
    {
      "src": "): ) [413,414]",
      "dest": "): ) [399,400]"
    },
    {
      "src": "member_expression [46207,46217]",
      "dest": "member_expression [614,624]"
    },
    {
      "src": "yul_path [699,704]",
      "dest": "yul_path [1285,1290]"
    },
    {
      "src": "solidity: solidity [49,57]",
      "dest": "solidity: solidity [43,51]"
    },
    {
      "src": "identifier: slot_ [762,767]",
      "dest": "identifier: slot_ [1348,1353]"
    },
    {
      "src": "address: address [26132,26139]",
      "dest": "address: address [900,907]"
    },
    {
      "src": "member_expression [41645,41655]",
      "dest": "member_expression [714,724]"
    },
    {
      "src": "revert: revert [37266,37272]",
      "dest": "revert: revert [2442,2448]"
    },
    {
      "src": "primitive_type [40130,40137]",
      "dest": "primitive_type [671,678]"
    },
    {
      "src": "{: { [25812,25813]",
      "dest": "{: { [435,436]"
    },
    {
      "src": "}: } [872,873]",
      "dest": "}: } [2892,2893]"
    },
    {
      "src": "number_literal: 0 [25862,25863]",
      "dest": "number_literal: 0 [470,471]"
    },
    {
      "src": "type_name [26132,26139]",
      "dest": "type_name [900,907]"
    },
    {
      "src": "{: { [493,494]",
      "dest": "{: { [1079,1080]"
    },
    {
      "src": "): ) [283,284]",
      "dest": "): ) [270,271]"
    },
    {
      "src": "assembly_statement [805,861]",
      "dest": "assembly_statement [1391,1447]"
    },
    {
      "src": "): ) [26067,26068]",
      "dest": "): ) [877,878]"
    },
    {
      "src": "primitive_type [2374,2381]",
      "dest": "primitive_type [806,813]"
    },
    {
      "src": "identifier: _getSlotValue [534,547]",
      "dest": "identifier: _getSlotValue [1120,1133]"
    },
    {
      "src": "(: ( [593,594]",
      "dest": "(: ( [1179,1180]"
    },
    {
      "src": "): ) [607,608]",
      "dest": "): ) [1193,1194]"
    },
    {
      "src": "): ) [551,552]",
      "dest": "): ) [1137,1138]"
    },
    {
      "src": "): ) [704,705]",
      "dest": "): ) [1290,1291]"
    },
    {
      "src": "primitive_type [2009,2016]",
      "dest": "primitive_type [598,605]"
    },
    {
      "src": "address: address [25854,25861]",
      "dest": "address: address [462,469]"
    },
    {
      "src": "identifier: add [504,507]",
      "dest": "identifier: add [1090,1093]"
    },
    {
      "src": "primitive_type [25854,25861]",
      "dest": "primitive_type [462,469]"
    },
    {
      "src": "identifier: ADMIN_SLOT [317,327]",
      "dest": "identifier: ADMIN_SLOT [303,313]"
    },
    {
      "src": "call_argument [217,283]",
      "dest": "call_argument [204,270]"
    },
    {
      "src": "internal: internal [24039,24047]",
      "dest": "internal: internal [1708,1716]"
    },
    {
      "src": "yul_function_call [693,705]",
      "dest": "yul_function_call [1279,1291]"
    },
    {
      "src": "return_type_definition [623,647]",
      "dest": "return_type_definition [1209,1233]"
    },
    {
      "src": "yul_identifier [836,841]",
      "dest": "yul_identifier [1422,1427]"
    },
    {
      "src": "binary_expression [25845,25864]",
      "dest": "binary_expression [454,472]"
    },
    {
      "src": "address: address [40130,40137]",
      "dest": "address: address [671,678]"
    },
    {
      "src": "uint256: uint256 [2374,2381]",
      "dest": "uint256: uint256 [806,813]"
    },
    {
      "src": "visibility [26074,26080]",
      "dest": "visibility [879,885]"
    },
    {
      "src": "call_argument [46207,46217]",
      "dest": "call_argument [614,624]"
    },
    {
      "src": "): ) [491,492]",
      "dest": "): ) [1077,1078]"
    },
    {
      "src": "function_body [493,563]",
      "dest": "function_body [1079,1149]"
    },
    {
      "src": "function_definition [26038,26341]",
      "dest": "function_definition [853,1001]"
    },
    {
      "src": "call_expression [41637,41696]",
      "dest": "call_expression [706,752]"
    },
    {
      "src": "(: ( [533,534]",
      "dest": "(: ( [1119,1120]"
    },
    {
      "src": "function: function [571,579]",
      "dest": "function: function [1157,1165]"
    },
    {
      "src": "(: ( [25861,25862]",
      "dest": "(: ( [469,470]"
    },
    {
      "src": "yul_path [836,841]",
      "dest": "yul_path [1422,1427]"
    },
    {
      "src": ".: . [46210,46211]",
      "dest": ".: . [617,618]"
    },
    {
      "src": "call_expression [534,552]",
      "dest": "call_expression [1120,1138]"
    },
    {
      "src": "identifier: slot_ [699,704]",
      "dest": "identifier: slot_ [1285,1290]"
    },
    {
      "src": "type_name [632,639]",
      "dest": "type_name [1218,1225]"
    },
    {
      "src": "view: view [466,470]",
      "dest": "view: view [1052,1056]"
    },
    {
      "src": "(: ( [216,217]",
      "dest": "(: ( [203,204]"
    },
    {
      "src": "function_body [794,868]",
      "dest": "function_body [1380,1454]"
    },
    {
      "src": "{: { [794,795]",
      "dest": "{: { [1380,1381]"
    },
    {
      "src": "primitive_type [444,451]",
      "dest": "primitive_type [1030,1037]"
    },
    {
      "src": "type_name [291,298]",
      "dest": "type_name [278,285]"
    },
    {
      "src": "returns: returns [471,478]",
      "dest": "returns: returns [1057,1064]"
    },
    {
      "src": "{: { [121,122]",
      "dest": "{: { [109,110]"
    },
    {
      "src": "(: ( [26054,26055]",
      "dest": "(: ( [876,877]"
    },
    {
      "src": "type_cast_expression [526,553]",
      "dest": "type_cast_expression [1112,1139]"
    },
    {
      "src": "(: ( [41644,41645]",
      "dest": "(: ( [713,714]"
    },
    {
      "src": "return_type_definition [26123,26140]",
      "dest": "return_type_definition [891,913]"
    },
    {
      "src": "yul_evm_builtin [693,698]",
      "dest": "yul_evm_builtin [1279,1284]"
    },
    {
      "src": "(: ( [835,836]",
      "dest": "(: ( [1421,1422]"
    },
    {
      "src": "type_name [161,168]",
      "dest": "type_name [149,156]"
    },
    {
      "src": "call_argument [25845,25864]",
      "dest": "call_argument [454,472]"
    },
    {
      "src": "address: address [45640,45647]",
      "dest": "address: address [932,939]"
    },
    {
      "src": "(: ( [479,480]",
      "dest": "(: ( [1065,1066]"
    },
    {
      "src": "identifier: value_ [777,783]",
      "dest": "identifier: value_ [1363,1369]"
    },
    {
      "src": "primitive_type [339,346]",
      "dest": "primitive_type [325,332]"
    },
    {
      "src": "identifier: slot_ [602,607]",
      "dest": "identifier: slot_ [1188,1193]"
    },
    {
      "src": "constant: constant [178,186]",
      "dest": "constant: constant [165,173]"
    },
    {
      "src": "comment: /// @dev Proxy for NFT Factory [68,98]",
      "dest": "comment: /// @dev Proxy for NFT Factory [62,92]"
    },
    {
      "src": "(: ( [698,699]",
      "dest": "(: ( [1284,1285]"
    },
    {
      "src": "private: private [24897,24904]",
      "dest": "private: private [286,293]"
    },
    {
      "src": "type_name [594,601]",
      "dest": "type_name [1180,1187]"
    },
    {
      "src": "yul_identifier [699,704]",
      "dest": "yul_identifier [1285,1290]"
    },
    {
      "src": "(: ( [547,548]",
      "dest": "(: ( [1133,1134]"
    },
    {
      "src": "number_literal: 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103 [347,413]",
      "dest": "number_literal: 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103 [333,399]"
    },
    {
      "src": "expression_statement [504,556]",
      "dest": "expression_statement [1090,1142]"
    },
    {
      "src": "yul_evm_builtin [829,835]",
      "dest": "yul_evm_builtin [1415,1421]"
    },
    {
      "src": "identifier: sender [41649,41655]",
      "dest": "identifier: sender [718,724]"
    },
    {
      "src": "primitive_type [3657,3664]",
      "dest": "primitive_type [948,955]"
    },
    {
      "src": "=: = [508,509]",
      "dest": "=: = [1094,1095]"
    },
    {
      "src": "identifier: owner [25845,25850]",
      "dest": "identifier: impl [454,458]"
    },
    {
      "src": "address: address [25723,25730]",
      "dest": "address: address [1682,1689]"
    },
    {
      "src": "{: { [648,649]",
      "dest": "{: { [1234,1235]"
    },
    {
      "src": "bytes32: bytes32 [444,451]",
      "dest": "bytes32: bytes32 [1030,1037]"
    },
    {
      "src": "(: ( [753,754]",
      "dest": "(: ( [1339,1340]"
    },
    {
      "src": "}: } [25975,25976]",
      "dest": "}: } [635,636]"
    },
    {
      "src": "type_cast_expression [209,284]",
      "dest": "type_cast_expression [196,271]"
    },
    {
      "src": "function_definition [423,563]",
      "dest": "function_definition [1009,1149]"
    },
    {
      "src": "function_definition [731,868]",
      "dest": "function_definition [1317,1454]"
    },
    {
      "src": "uint256: uint256 [3657,3664]",
      "dest": "uint256: uint256 [948,955]"
    },
    {
      "src": "primitive_type [769,776]",
      "dest": "primitive_type [1355,1362]"
    },
    {
      "src": "identifier: require [41637,41644]",
      "dest": "identifier: require [706,713]"
    },
    {
      "src": "type_cast_expression [518,554]",
      "dest": "type_cast_expression [1104,1140]"
    },
    {
      "src": "call_argument [25862,25863]",
      "dest": "call_argument [470,471]"
    },
    {
      "src": "(: ( [525,526]",
      "dest": "(: ( [1111,1112]"
    },
    {
      "src": "view: view [618,622]",
      "dest": "view: view [1204,1208]"
    },
    {
      "src": "type_name [754,761]",
      "dest": "type_name [1340,1347]"
    },
    {
      "src": "external: external [43460,43468]",
      "dest": "external: external [2801,2809]"
    },
    {
      "src": "function: function [423,431]",
      "dest": "function: function [1009,1017]"
    },
    {
      "src": "address: address [510,517]",
      "dest": "address: address [1096,1103]"
    },
    {
      "src": "yul_function_call [829,850]",
      "dest": "yul_function_call [1415,1436]"
    },
    {
      "src": "solidity_version:  0.8.7 [57,63]",
      "dest": "solidity_version:  0.8.7 [51,57]"
    },
    {
      "src": "identifier: newOwner [40138,40146]",
      "dest": "identifier: newImpl [679,686]"
    },
    {
      "src": "expression_statement [26200,26311]",
      "dest": "expression_statement [925,994]"
    },
    {
      "src": "visibility [24897,24904]",
      "dest": "visibility [286,293]"
    },
    {
      "src": "call_argument [518,554]",
      "dest": "call_argument [1104,1140]"
    },
    {
      "src": "function_definition [571,723]",
      "dest": "function_definition [1157,1309]"
    },
    {
      "src": "pragma: pragma [42,48]",
      "dest": "pragma: pragma [36,42]"
    },
    {
      "src": "visibility [43460,43468]",
      "dest": "visibility [2801,2809]"
    },
    {
      "src": "call_argument [526,553]",
      "dest": "call_argument [1112,1139]"
    },
    {
      "src": "solidity_pragma_token [49,63]",
      "dest": "solidity_pragma_token [43,57]"
    },
    {
      "src": "public: public [40148,40154]",
      "dest": "public: public [688,694]"
    },
    {
      "src": "primitive_type [510,517]",
      "dest": "primitive_type [1096,1103]"
    },
    {
      "src": "): ) [25933,25934]",
      "dest": "): ) [472,473]"
    },
    {
      "src": "assembly: assembly [805,813]",
      "dest": "assembly: assembly [1391,1399]"
    },
    {
      "src": "identifier: ADMIN_SLOT [41671,41681]",
      "dest": "identifier: ADMIN_SLOT [740,750]"
    },
    {
      "src": "=: = [337,338]",
      "dest": "=: = [323,324]"
    },
    {
      "src": "bytes32: bytes32 [754,761]",
      "dest": "bytes32: bytes32 [1340,1347]"
    },
    {
      "src": "!=: != [25851,25853]",
      "dest": "!=: != [459,461]"
    },
    {
      "src": "visibility [24039,24047]",
      "dest": "visibility [1708,1716]"
    },
    {
      "src": "internal: internal [785,793]",
      "dest": "internal: internal [1371,1379]"
    },
    {
      "src": "state_variable_declaration [161,285]",
      "dest": "state_variable_declaration [149,272]"
    },
    {
      "src": "yul_identifier [683,689]",
      "dest": "yul_identifier [1269,1275]"
    },
    {
      "src": "}: } [26340,26341]",
      "dest": "}: } [1000,1001]"
    },
    {
      "src": "assignment_expression [504,555]",
      "dest": "assignment_expression [1090,1141]"
    },
    {
      "src": "visibility [457,465]",
      "dest": "visibility [1043,1051]"
    },
    {
      "src": "primitive_type [291,298]",
      "dest": "primitive_type [278,285]"
    },
    {
      "src": "returns: returns [623,630]",
      "dest": "returns: returns [1209,1216]"
    },
    {
      "src": "view: view [26086,26090]",
      "dest": "view: view [886,890]"
    },
    {
      "src": "function_body [25812,25976]",
      "dest": "function_body [435,636]"
    },
    {
      "src": "sstore: sstore [829,835]",
      "dest": "sstore: sstore [1415,1421]"
    },
    {
      "src": "type_cast_expression [25854,25864]",
      "dest": "type_cast_expression [462,472]"
    },
    {
      "src": "identifier: msg [46207,46210]",
      "dest": "identifier: msg [614,617]"
    },
    {
      "src": "(: ( [41670,41671]",
      "dest": "(: ( [739,740]"
    },
    {
      "src": "{: { [668,669]",
      "dest": "{: { [1254,1255]"
    },
    {
      "src": "primitive_type [594,601]",
      "dest": "primitive_type [1180,1187]"
    },
    {
      "src": "expression_statement [41637,41697]",
      "dest": "expression_statement [706,753]"
    },
    {
      "src": "contract_declaration [100,873]",
      "dest": "contract_declaration [94,2893]"
    },
    {
      "src": "primitive_type [526,533]",
      "dest": "primitive_type [1112,1119]"
    },
    {
      "src": ",: , [841,842]",
      "dest": ",: , [1427,1428]"
    },
    {
      "src": "constant: constant [308,316]",
      "dest": "constant: constant [294,302]"
    },
    {
      "src": "sload: sload [693,698]",
      "dest": "sload: sload [1279,1284]"
    },
    {
      "src": "identifier: slot_ [836,841]",
      "dest": "identifier: slot_ [1422,1427]"
    },
    {
      "src": "): ) [41695,41696]",
      "dest": "): ) [751,752]"
    },
    {
      "src": "primitive_type [632,639]",
      "dest": "primitive_type [1218,1225]"
    },
    {
      "src": "parameter [480,491]",
      "dest": "parameter [1066,1077]"
    },
    {
      "src": "bytes32: bytes32 [594,601]",
      "dest": "bytes32: bytes32 [1180,1187]"
    },
    {
      "src": "bytes32: bytes32 [209,216]",
      "dest": "bytes32: bytes32 [196,203]"
    },
    {
      "src": "call_expression [25823,25934]",
      "dest": "call_expression [446,473]"
    },
    {
      "src": "assembly_statement [659,716]",
      "dest": "assembly_statement [1245,1302]"
    },
    {
      "src": "primitive_type [40344,40351]",
      "dest": "primitive_type [421,428]"
    },
    {
      "src": "): ) [455,456]",
      "dest": "): ) [1041,1042]"
    },
    {
      "src": "parameter [594,607]",
      "dest": "parameter [1180,1193]"
    },
    {
      "src": "bytes32: bytes32 [339,346]",
      "dest": "bytes32: bytes32 [325,332]"
    },
    {
      "src": "visibility [609,617]",
      "dest": "visibility [1195,1203]"
    },
    {
      "src": "parameter [754,767]",
      "dest": "parameter [1340,1353]"
    },
    {
      "src": "yul_path [683,689]",
      "dest": "yul_path [1269,1275]"
    },
    {
      "src": "(: ( [443,444]",
      "dest": "(: ( [1029,1030]"
    },
    {
      "src": "visibility [24991,24998]",
      "dest": "visibility [157,164]"
    },
    {
      "src": "function: function [731,739]",
      "dest": "function: function [1317,1325]"
    },
    {
      "src": "state_mutability [466,470]",
      "dest": "state_mutability [1052,1056]"
    },
    {
      "src": "primitive_type [754,761]",
      "dest": "primitive_type [1340,1347]"
    },
    {
      "src": "{: { [814,815]",
      "dest": "{: { [1400,1401]"
    },
    {
      "src": "comment: // File: TestContracts/ProxyTarget.sol [0,38]",
      "dest": "comment: // File: TestContracts/Proxy.sol [0,32]"
    },
    {
      "src": "yul_identifier [843,849]",
      "dest": "yul_identifier [1429,1435]"
    },
    {
      "src": "identifier: require [25823,25830]",
      "dest": "identifier: require [446,453]"
    },
    {
      "src": "uint256: uint256 [5556,5563]",
      "dest": "uint256: uint256 [529,536]"
    },
    {
      "src": "private: private [24991,24998]",
      "dest": "private: private [157,164]"
    },
    {
      "src": "primitive_type [161,168]",
      "dest": "primitive_type [149,156]"
    },
    {
      "src": "type_cast_expression [510,555]",
      "dest": "type_cast_expression [1096,1141]"
    },
    {
      "src": "identifier: msg [41645,41648]",
      "dest": "identifier: msg [714,717]"
    },
    {
      "src": "): ) [26139,26140]",
      "dest": "): ) [912,913]"
    },
    {
      "src": "state_mutability [618,622]",
      "dest": "state_mutability [1204,1208]"
    },
    {
      "src": "identifier: add [488,491]",
      "dest": "identifier: add [1074,1077]"
    },
    {
      "src": "binary_expression [41645,41682]",
      "dest": "binary_expression [714,751]"
    },
    {
      "src": "public: public [26074,26080]",
      "dest": "public: public [879,885]"
    },
    {
      "src": ":=: := [690,692]",
      "dest": ":=: := [1276,1278]"
    },
    {
      "src": "yul_assignment [683,705]",
      "dest": "yul_assignment [1269,1291]"
    },
    {
      "src": "function_body [26146,26341]",
      "dest": "function_body [914,1001]"
    },
    {
      "src": "call_argument [41671,41681]",
      "dest": "call_argument [740,750]"
    },
    {
      "src": "(: ( [26131,26132]",
      "dest": "(: ( [899,900]"
    },
    {
      "src": "visibility [785,793]",
      "dest": "visibility [1371,1379]"
    },
    {
      "src": "): ) [552,553]",
      "dest": "): ) [1138,1139]"
    },
    {
      "src": "): ) [25863,25864]",
      "dest": "): ) [471,472]"
    },
    {
      "src": "=: = [207,208]",
      "dest": "=: = [194,195]"
    },
    {
      "src": "assembly: assembly [659,667]",
      "dest": "assembly: assembly [1245,1253]"
    },
    {
      "src": "primitive_type [25723,25730]",
      "dest": "primitive_type [1682,1689]"
    },
    {
      "src": "call_argument [534,552]",
      "dest": "call_argument [1120,1138]"
    },
    {
      "src": "parameter [40344,40360]",
      "dest": "parameter [421,433]"
    },
    {
      "src": "identifier: value_ [683,689]",
      "dest": "identifier: value_ [1269,1275]"
    },
    {
      "src": "call_expression [41659,41682]",
      "dest": "call_expression [728,751]"
    },
    {
      "src": "bytes32: bytes32 [769,776]",
      "dest": "bytes32: bytes32 [1355,1362]"
    },
    {
      "src": "identifier: _getSlotValue [580,593]",
      "dest": "identifier: _getSlotValue [1166,1179]"
    },
    {
      "src": "type_name [25723,25730]",
      "dest": "type_name [1682,1689]"
    },
    {
      "src": "identifier: key [548,551]",
      "dest": "identifier: key [1134,1137]"
    },
    {
      "src": "): ) [849,850]",
      "dest": "): ) [1435,1436]"
    },
    {
      "src": "contract_body [121,873]",
      "dest": "contract_body [109,2893]"
    },
    {
      "src": "primitive_type [26132,26139]",
      "dest": "primitive_type [900,907]"
    },
    {
      "src": "state_variable_declaration [291,415]",
      "dest": "state_variable_declaration [278,401]"
    },
    {
      "src": "contract: contract [100,108]",
      "dest": "contract: contract [94,102]"
    },
    {
      "src": "call_argument [41645,41682]",
      "dest": "call_argument [714,751]"
    },
    {
      "src": "internal: internal [457,465]",
      "dest": "internal: internal [1043,1051]"
    },
    {
      "src": "identifier: value_ [640,646]",
      "dest": "identifier: value_ [1226,1232]"
    },
    {
      "src": "source_file [0,48335]",
      "dest": "source_file [0,2893]"
    }
  ],
  "actions": [
    {
      "action": "update-node",
      "tree": "comment: // File: TestContracts/ProxyTarget.sol [0,38]",
      "label": "// File: TestContracts/Proxy.sol"
    },
    {
      "action": "update-node",
      "tree": "identifier: ProxyTarget [109,120]",
      "label": "Proxy"
    },
    {
      "action": "insert-node",
      "tree": "constructor_definition [409,636]",
      "parent": "contract_body [109,2893]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "function_definition [644,841]",
      "parent": "contract_body [109,2893]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "function_definition [26038,26341]",
      "parent": "contract_body [109,2893]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Delegates the current call to `implementation`.      *      * This function does not return to its internall call site, it will return directly to the external caller.      */ [1462,1657]",
      "parent": "contract_body [109,2893]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_definition [1663,2585]",
      "parent": "contract_body [109,2893]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other      * function in the contract matches the call data.      */ [2595,2784]",
      "parent": "contract_body [109,2893]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "fallback_receive_definition [2790,2888]",
      "parent": "contract_body [109,2893]",
      "at": 13
    },
    {
      "action": "move-tree",
      "tree": "visibility [24991,24998]",
      "parent": "state_variable_declaration [149,272]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "visibility [24897,24904]",
      "parent": "state_variable_declaration [278,401]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "constructor: constructor [409,420]",
      "parent": "constructor_definition [409,636]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [420,421]",
      "parent": "constructor_definition [409,636]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "parameter [40344,40360]",
      "parent": "constructor_definition [409,636]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [433,434]",
      "parent": "constructor_definition [409,636]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "function_body [25812,25976]",
      "parent": "constructor_definition [409,636]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "function: function [644,652]",
      "parent": "function_definition [644,841]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setImplementation [653,670]",
      "parent": "function_definition [644,841]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [670,671]",
      "parent": "function_definition [644,841]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [40130,40146]",
      "parent": "function_definition [644,841]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [686,687]",
      "parent": "function_definition [644,841]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [40148,40154]",
      "parent": "function_definition [644,841]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "function_body [695,841]",
      "parent": "function_definition [644,841]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: ownerOf [26047,26054]",
      "label": "implementation"
    },
    {
      "action": "insert-node",
      "tree": "function: function [1663,1671]",
      "parent": "function_definition [1663,2585]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _delegate [1672,1681]",
      "parent": "function_definition [1663,2585]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1681,1682]",
      "parent": "function_definition [1663,2585]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [25723,25736]",
      "parent": "function_definition [1663,2585]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [1706,1707]",
      "parent": "function_definition [1663,2585]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [24039,24047]",
      "parent": "function_definition [1663,2585]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [1717,1724]",
      "parent": "function_definition [1663,2585]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "function_body [1725,2585]",
      "parent": "function_definition [1663,2585]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "fallback: fallback [2790,2798]",
      "parent": "fallback_receive_definition [2790,2888]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2798,2799]",
      "parent": "fallback_receive_definition [2790,2888]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "): ) [2799,2800]",
      "parent": "fallback_receive_definition [2790,2888]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "visibility [43460,43468]",
      "parent": "fallback_receive_definition [2790,2888]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [43469,43476]",
      "parent": "fallback_receive_definition [2790,2888]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [2818,2825]",
      "parent": "fallback_receive_definition [2790,2888]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "function_body [2826,2888]",
      "parent": "fallback_receive_definition [2790,2888]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [40352,40360]",
      "label": "impl"
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [486,554]",
      "parent": "function_body [435,636]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [564,629]",
      "parent": "function_body [435,636]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [40138,40146]",
      "label": "newImpl"
    },
    {
      "action": "insert-node",
      "tree": "{: { [695,696]",
      "parent": "function_body [695,841]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [41637,41697]",
      "parent": "function_body [695,841]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [763,834]",
      "parent": "function_body [695,841]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [840,841]",
      "parent": "function_body [695,841]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: owner [25731,25736]",
      "label": "implementation__"
    },
    {
      "action": "insert-node",
      "tree": "{: { [1725,1726]",
      "parent": "function_body [1725,2585]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assembly_statement [1736,2578]",
      "parent": "function_body [1725,2585]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [2584,2585]",
      "parent": "function_body [1725,2585]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "call_expression [486,553]",
      "parent": "expression_statement [486,554]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [564,628]",
      "parent": "expression_statement [564,629]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [763,833]",
      "parent": "expression_statement [763,834]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: impl [908,912]",
      "parent": "parameter [900,912]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "assignment_expression [925,993]",
      "parent": "expression_statement [925,994]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assembly: assembly [1736,1744]",
      "parent": "assembly_statement [1736,2578]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [1745,1746]",
      "parent": "assembly_statement [1736,2578]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // Copy msg.data. We take full control of memory in this inline assembly [1760,1832]",
      "parent": "assembly_statement [1736,2578]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // block because it will not return to Solidity code. We overwrite the [1846,1916]",
      "parent": "assembly_statement [1736,2578]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: // Solidity scratch pad at memory position 0. [1930,1975]",
      "parent": "assembly_statement [1736,2578]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "yul_function_call [1989,2023]",
      "parent": "assembly_statement [1736,2578]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: // Call the implementation. [2039,2066]",
      "parent": "assembly_statement [1736,2578]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: // out and outsize are 0 because we don't know the size yet. [2080,2140]",
      "parent": "assembly_statement [1736,2578]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "yul_variable_declaration [2154,2230]",
      "parent": "assembly_statement [1736,2578]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: // Copy the returned data. [2246,2272]",
      "parent": "assembly_statement [1736,2578]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "yul_function_call [2286,2324]",
      "parent": "assembly_statement [1736,2578]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "yul_switch_statement [2340,2567]",
      "parent": "assembly_statement [1736,2578]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "}: } [2577,2578]",
      "parent": "assembly_statement [1736,2578]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "identifier: _setSlotValue [486,499]",
      "parent": "call_expression [486,553]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [499,500]",
      "parent": "call_expression [486,553]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [500,519]",
      "parent": "call_expression [486,553]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [519,520]",
      "parent": "call_expression [486,553]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "call_argument [521,552]",
      "parent": "call_expression [486,553]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [552,553]",
      "parent": "call_expression [486,553]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "identifier: _setSlotValue [564,577]",
      "parent": "call_expression [564,628]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [577,578]",
      "parent": "call_expression [564,628]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [578,588]",
      "parent": "call_expression [564,628]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [588,589]",
      "parent": "call_expression [564,628]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "call_argument [590,627]",
      "parent": "call_expression [564,628]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [627,628]",
      "parent": "call_expression [564,628]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "identifier: _setSlotValue [763,776]",
      "parent": "call_expression [763,833]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [776,777]",
      "parent": "call_expression [763,833]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [777,796]",
      "parent": "call_expression [763,833]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [796,797]",
      "parent": "call_expression [763,833]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "call_argument [798,832]",
      "parent": "call_expression [763,833]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [832,833]",
      "parent": "call_expression [763,833]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "identifier: impl [925,929]",
      "parent": "assignment_expression [925,993]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [930,931]",
      "parent": "assignment_expression [925,993]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [932,993]",
      "parent": "assignment_expression [925,993]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "switch: switch [2340,2346]",
      "parent": "yul_switch_statement [2340,2567]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [2347,2353]",
      "parent": "yul_switch_statement [2340,2567]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // delegatecall returns 0 on error. [2367,2402]",
      "parent": "yul_switch_statement [2340,2567]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "case: case [2416,2420]",
      "parent": "yul_switch_statement [2340,2567]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "yul_decimal_number: 0 [2421,2422]",
      "parent": "yul_switch_statement [2340,2567]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "yul_block [2423,2484]",
      "parent": "yul_switch_statement [2340,2567]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "default: default [2498,2505]",
      "parent": "yul_switch_statement [2340,2567]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "yul_block [2506,2567]",
      "parent": "yul_switch_statement [2340,2567]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [521,552]",
      "parent": "call_argument [521,552]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [590,627]",
      "parent": "call_argument [590,627]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [798,832]",
      "parent": "call_argument [798,832]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [45640,45647]",
      "parent": "type_cast_expression [932,993]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [939,940]",
      "parent": "type_cast_expression [932,993]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [940,992]",
      "parent": "type_cast_expression [932,993]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [992,993]",
      "parent": "type_cast_expression [932,993]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "{: { [2423,2424]",
      "parent": "yul_block [2423,2484]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [2442,2469]",
      "parent": "yul_block [2423,2484]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [2483,2484]",
      "parent": "yul_block [2423,2484]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: owner [25845,25850]",
      "label": "impl"
    },
    {
      "action": "insert-tree",
      "tree": "primitive_type [521,528]",
      "parent": "type_cast_expression [521,552]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [528,529]",
      "parent": "type_cast_expression [521,552]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [529,551]",
      "parent": "type_cast_expression [521,552]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [551,552]",
      "parent": "type_cast_expression [521,552]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "primitive_type [590,597]",
      "parent": "type_cast_expression [590,627]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [597,598]",
      "parent": "type_cast_expression [590,627]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [598,626]",
      "parent": "type_cast_expression [590,627]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [626,627]",
      "parent": "type_cast_expression [590,627]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "primitive_type [798,805]",
      "parent": "type_cast_expression [798,832]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [805,806]",
      "parent": "type_cast_expression [798,832]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [806,831]",
      "parent": "type_cast_expression [798,832]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [831,832]",
      "parent": "type_cast_expression [798,832]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [940,992]",
      "parent": "call_argument [940,992]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [37266,37272]",
      "parent": "yul_function_call [2442,2469]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2448,2449]",
      "parent": "yul_function_call [2442,2469]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_decimal_number: 0 [2449,2450]",
      "parent": "yul_function_call [2442,2469]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2450,2451]",
      "parent": "yul_function_call [2442,2469]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_function_call [2452,2468]",
      "parent": "yul_function_call [2442,2469]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [2468,2469]",
      "parent": "yul_function_call [2442,2469]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [529,551]",
      "parent": "call_argument [529,551]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [598,626]",
      "parent": "call_argument [598,626]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [806,831]",
      "parent": "call_argument [806,831]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "primitive_type [940,947]",
      "parent": "type_cast_expression [940,992]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [947,948]",
      "parent": "type_cast_expression [940,992]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [948,991]",
      "parent": "type_cast_expression [940,992]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [991,992]",
      "parent": "type_cast_expression [940,992]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [5556,5563]",
      "parent": "type_cast_expression [529,551]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [536,537]",
      "parent": "type_cast_expression [529,551]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [537,550]",
      "parent": "type_cast_expression [529,551]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [550,551]",
      "parent": "type_cast_expression [529,551]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [2009,2016]",
      "parent": "type_cast_expression [598,626]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [605,606]",
      "parent": "type_cast_expression [598,626]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [606,625]",
      "parent": "type_cast_expression [598,626]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [625,626]",
      "parent": "type_cast_expression [598,626]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [2374,2381]",
      "parent": "type_cast_expression [806,831]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [813,814]",
      "parent": "type_cast_expression [806,831]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [814,830]",
      "parent": "type_cast_expression [806,831]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [830,831]",
      "parent": "type_cast_expression [806,831]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [948,991]",
      "parent": "call_argument [948,991]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [606,625]",
      "parent": "call_argument [606,625]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [3657,3664]",
      "parent": "type_cast_expression [948,991]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [955,956]",
      "parent": "type_cast_expression [948,991]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [956,990]",
      "parent": "type_cast_expression [948,991]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [990,991]",
      "parent": "type_cast_expression [948,991]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "primitive_type [606,613]",
      "parent": "type_cast_expression [606,625]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [613,614]",
      "parent": "type_cast_expression [606,625]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [46207,46217]",
      "parent": "type_cast_expression [606,625]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [624,625]",
      "parent": "type_cast_expression [606,625]",
      "at": 3
    },
    {
      "action": "delete-tree",
      "tree": "visibility [169,177]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [299,307]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [25864,25865]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [25879,25923]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [25945,25969]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41682,41683]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41684,41695]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [26055,26067]"
    },
    {
      "action": "delete-node",
      "tree": "virtual: virtual [26096,26103]"
    },
    {
      "action": "delete-tree",
      "tree": "override_specifier [26109,26117]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [26157,26190]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [26200,26310]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [26321,26334]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IVRF.sol [875,897]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //SPDX-License-Identifier: UNLICENSED [901,938]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [942,965]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [969,1204]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/Counters.sol [1206,1232]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // OpenZeppelin Contracts v4.4.1 (utils/Counters.sol) [1238,1291]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [1295,1318]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Counters  * @author Matt Condon (@shrugs)  * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number  * of elements in a mapping, issuing ERC721 ids, or counting request ids.  *  * Include with `using Counters for Counters.Counter;`  */ [1322,1640]"
    },
    {
      "action": "delete-node",
      "tree": "library: library [1642,1649]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Counters [1650,1658]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [1659,1660]"
    },
    {
      "action": "delete-node",
      "tree": "struct: struct [1666,1672]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Counter [1673,1680]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [1681,1682]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // This variable should never be directly accessed by users of the library: interactions must be restricted to [1692,1802]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add [1812,1920]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // this feature: see https://github.com/ethereum/solidity/issues/4637 [1930,1999]"
    },
    {
      "action": "delete-node",
      "tree": "type_name [2009,2016]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _value [2017,2023]"
    },
    {
      "action": "delete-node",
      "tree": "struct_member [2009,2024]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // default: 0 [2025,2038]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [2044,2045]"
    },
    {
      "action": "delete-node",
      "tree": "struct_declaration [1666,2045]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [2053,2167]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [2175,2302]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [2310,2318]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: decrement [2319,2328]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2328,2329]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [2329,2352]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [2352,2353]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [2354,2362]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [2363,2364]"
    },
    {
      "action": "delete-node",
      "tree": "type_name [2374,2381]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: value [2382,2387]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [2374,2387]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [2388,2389]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [2390,2404]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [2374,2405]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [2415,2465]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [2475,2538]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [2544,2545]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [2363,2545]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [2310,2545]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [2553,2639]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [2641,2642]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [1659,2642]"
    },
    {
      "action": "delete-node",
      "tree": "library_declaration [1642,2642]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IWhitelist.sol [2644,2672]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [2676,2699]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [2703,2903]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IGameEngine.sol [2905,2934]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [2942,2965]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [2969,3090]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IMetadata.sol [3092,3119]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [3123,3146]"
    },
    {
      "action": "delete-node",
      "tree": "interface: interface [3150,3159]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: IMetadata [3160,3169]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [3169,3170]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [3178,3250]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [3256,3337]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [3343,3426]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [3432,3505]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [3511,3633]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [3639,3647]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: getToken [3648,3656]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [3656,3657]"
    },
    {
      "action": "delete-node",
      "tree": "type_name [3657,3664]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _tokenId [3665,3673]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [3657,3673]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [3673,3674]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [3675,3683]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [3684,3688]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [3689,3727]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [3639,3728]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [3730,3731]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [3169,3731]"
    },
    {
      "action": "delete-node",
      "tree": "interface_declaration [3150,3731]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IERC721Receiver.sol [3733,3766]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [3772,3795]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title ERC721 token receiver interface  * @dev Interface for any contract that wants to support safeTransfers  * from ERC721 asset contracts.  */ [3799,3955]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [3957,4654]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IERC165.sol [4656,4681]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [4689,4712]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [4714,5171]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IERC721.sol [5173,5198]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol) [5204,5263]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [5267,5290]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @dev Required interface of an ERC721 compliant contract.  */ [5296,5365]"
    },
    {
      "action": "delete-node",
      "tree": "interface: interface [5367,5376]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: IERC721 [5377,5384]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [5385,5387]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [5388,5395]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [5396,5397]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.      */ [5403,5493]"
    },
    {
      "action": "delete-node",
      "tree": "event: event [5499,5504]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Transfer [5505,5513]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5513,5514]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [5514,5534]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5534,5535]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [5536,5554]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5554,5555]"
    },
    {
      "action": "delete-node",
      "tree": "type_name [5556,5563]"
    },
    {
      "action": "delete-node",
      "tree": "indexed: indexed [5564,5571]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: tokenId [5572,5579]"
    },
    {
      "action": "delete-node",
      "tree": "event_paramater [5556,5579]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [5579,5580]"
    },
    {
      "action": "delete-node",
      "tree": "event_definition [5499,5581]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.      */ [5589,5685]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [5691,5780]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.      */ [5788,5907]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [5913,5998]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Returns the number of tokens in ``owner``'s account.      */ [6006,6084]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [6090,6164]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Returns the owner of the `tokenId` token.      *      * Requirements:      *      * - `tokenId` must exist.      */ [6172,6309]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [6315,6387]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients      * are aware of the ERC721 protocol to prevent tokens from being forever locked.      *      * Requirements:      *      * - `from` cannot be the zero address.      * - `to` cannot be the zero address.      * - `tokenId` token must exist and be owned by `from`.      * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.      *      * Emits a {Transfer} event.      */ [6395,7098]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [7104,7216]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfers `tokenId` token from `from` to `to`.      *      * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.      *      * Requirements:      *      * - `from` cannot be the zero address.      * - `to` cannot be the zero address.      * - `tokenId` token must be owned by `from`.      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.      *      * Emits a {Transfer} event.      */ [7224,7741]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [7747,7855]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Gives permission to `to` to transfer `tokenId` token to another account.      * The approval is cleared when the token is transferred.      *      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.      *      * Requirements:      *      * - The caller must own the token or be an approved operator.      * - `tokenId` must exist.      *      * Emits an {Approval} event.      */ [7863,8327]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [8333,8388]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Returns the account approved for `tokenId` token.      *      * Requirements:      *      * - `tokenId` must exist.      */ [8396,8541]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [8547,8626]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Approve or remove `operator` as an operator for the caller.      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.      *      * Requirements:      *      * - The `operator` cannot be the caller.      *      * Emits an {ApprovalForAll} event.      */ [8634,8952]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [8958,9028]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.      *      * See {setApprovalForAll}      */ [9036,9178]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [9184,9272]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Safely transfers `tokenId` token from `from` to `to`.      *      * Requirements:      *      * - `from` cannot be the zero address.      * - `to` cannot be the zero address.      * - `tokenId` token must exist and be owned by `from`.      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.      *      * Emits a {Transfer} event.      */ [9280,9848]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [9854,9996]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [9998,9999]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [5396,9999]"
    },
    {
      "action": "delete-node",
      "tree": "interface_declaration [5367,9999]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IERC721Metadata.sol [10001,10034]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [10040,10063]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension  * @dev See https://eips.ethereum.org/EIPS/eip-721  */ [10067,10203]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [10205,10680]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/ERC165.sol [10684,10708]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [10716,10739]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @dev Implementation of the {IERC165} interface.  *  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check  * for the additional interface id that will be supported. For example:  *  * ```solidity  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);  * }  * ```  *  * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.  */ [10745,11334]"
    },
    {
      "action": "delete-tree",
      "tree": "contract_declaration [11336,11633]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/Strings.sol [11639,11664]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [11672,11695]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @dev String operations.  */ [11697,11733]"
    },
    {
      "action": "delete-tree",
      "tree": "library_declaration [11735,13659]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/Address.sol [13661,13686]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [13694,13717]"
    },
    {
      "action": "delete-tree",
      "tree": "library_declaration [13719,20194]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/IERC20.sol [20196,20220]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol) [20226,20283]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [20287,20310]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @dev Interface of the ERC20 standard as defined in the EIP.  */ [20314,20386]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [20388,23121]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/Context.sol [23125,23150]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [23158,23181]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /*  * @dev Provides information about the current execution context, including the  * sender of the transaction and its data. While these are generally available  * via msg.sender and msg.data, they should not be accessed in such a direct  * manner, since when dealing with GSN meta-transactions the account sending and  * paying for execution may not be the actual sender (as far as an application  * is concerned).  *  * This contract is only required for intermediate, library-like contracts.  */ [23183,23691]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [23695,23703]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Context [23704,23711]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [23712,23713]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Empty internal constructor, to prevent people from mistakenly deploying [23721,23795]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // an instance of this contract, which should be used via inheritance. [23801,23871]"
    },
    {
      "action": "delete-tree",
      "tree": "constructor_definition [23877,23895]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [23903,24011]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [24019,24027]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _msgData [24028,24036]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [24036,24037]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [24037,24038]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [24048,24052]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [24053,24075]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [24076,24253]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [24019,24253]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [24255,24256]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [23712,24256]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [23695,24256]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/ERC721.sol [24258,24282]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [24290,24313]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including  * the Metadata extension, but not including the Enumerable extension, which is available separately as  * {ERC721Enumerable}.  */ [24331,24581]"
    },
    {
      "action": "delete-node",
      "tree": "abstract: abstract [24583,24591]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [24592,24600]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ERC721 [24601,24607]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [24608,24610]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [24611,24618]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [24618,24619]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [24620,24626]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [24626,24627]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [24628,24635]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [24635,24636]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [24637,24652]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [24653,24654]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [24660,24686]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [24692,24715]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Token name [24723,24736]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [24742,24764]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Token symbol [24772,24787]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [24793,24817]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Mapping from token ID to owner address [24825,24866]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [24872,24896]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _owners [24905,24912]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [24872,24913]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Mapping owner address to token count [24921,24960]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [24966,24990]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _balances [24999,25008]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [24966,25009]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Mapping from token ID to approved address [25017,25061]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [25067,25116]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Mapping from owner to operator approvals [25124,25167]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [25173,25245]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC165-supportsInterface}.      */ [25253,25311]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [25317,25640]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-balanceOf}.      */ [25648,25698]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [25704,25712]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: balanceOf [25713,25722]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [25722,25723]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [25736,25737]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [25743,25749]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [25755,25759]"
    },
    {
      "action": "delete-node",
      "tree": "virtual: virtual [25765,25772]"
    },
    {
      "action": "delete-tree",
      "tree": "override_specifier [25778,25786]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [25792,25806]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [25704,25976]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-ownerOf}.      */ [25984,26032]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721Metadata-name}.      */ [26349,26402]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [26408,26508]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721Metadata-symbol}.      */ [26516,26571]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [26577,26681]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721Metadata-tokenURI}.      */ [26689,26746]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [26752,27177]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each      * token will be the concatenation of the `baseURI` and the `tokenId`. Empty      * by default, can be overriden in child contracts.      */ [27185,27419]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [27425,27519]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-approve}.      */ [27527,27575]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [27581,27989]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-getApproved}.      */ [27997,28049]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [28055,28340]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-setApprovalForAll}.      */ [28348,28406]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [28412,28727]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-isApprovedForAll}.      */ [28735,28792]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [28798,28992]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-transferFrom}.      */ [29000,29053]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [29059,29432]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-safeTransferFrom}.      */ [29440,29497]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [29503,29685]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev See {IERC721-safeTransferFrom}.      */ [29693,29750]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [29756,30118]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients      * are aware of the ERC721 protocol to prevent tokens from being forever locked.      *      * `_data` is additional data, it has no specified format and it is sent in call to `to`.      *      * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.      * implement alternative mechanisms to perform token transfer, such as signature-based.      *      * Requirements:      *      * - `from` cannot be the zero address.      * - `to` cannot be the zero address.      * - `tokenId` token must exist and be owned by `from`.      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.      *      * Emits a {Transfer} event.      */ [30126,30994]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [31000,31349]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Returns whether `tokenId` exists.      *      * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.      *      * Tokens start existing when they are minted (`_mint`),      * and stop existing when they are burned (`_burn`).      */ [31357,31656]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [31662,31786]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Returns whether `spender` is allowed to manage `tokenId`.      *      * Requirements:      *      * - `tokenId` must exist.      */ [31794,31947]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [31953,32378]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Safely mints `tokenId` and transfers it to `to`.      *      * Requirements:      *      * - `tokenId` must not exist.      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.      *      * Emits a {Transfer} event.      */ [32386,32714]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [32720,32827]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Same as {xref-ERC721-_safeMint-address-uint-}[`_safeMint`], with an additional `data` parameter which is      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.      */ [32835,33045]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [33051,33369]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Mints `tokenId` and transfers it to `to`.      *      * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible      *      * Requirements:      *      * - `tokenId` must not exist.      * - `to` cannot be the zero address.      *      * Emits a {Transfer} event.      */ [33377,33699]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [33705,34084]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Destroys `tokenId`.      * The approval is cleared when the token is burned.      *      * Requirements:      *      * - `tokenId` must exist.      *      * Emits a {Transfer} event.      */ [34092,34307]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [34313,34670]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfers `tokenId` from `from` to `to`.      *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.      *      * Requirements:      *      * - `to` cannot be the zero address.      * - `tokenId` token must be owned by `from`.      *      * Emits a {Transfer} event.      */ [34678,35001]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [35007,35619]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Approve `to` to operate on `tokenId`      *      * Emits a {Approval} event.      */ [35627,35731]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [35737,35908]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.      * The call is not executed if the target address is not a contract.      *      * @param from address representing the previous owner of the given token ID      * @param to target address that will receive the tokens      * @param tokenId uint ID of the token to be transferred      * @param _data bytes optional data to send along with the call      * @return bool whether the call correctly returned the expected magic value      */ [35916,36464]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [36470,36478]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _checkOnERC721Received [36479,36501]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [36501,36502]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36512,36524]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [36524,36525]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36535,36545]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [36545,36546]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36556,36568]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [36568,36569]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36579,36597]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [36603,36604]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [36605,36612]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [36613,36627]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [36628,36629]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [36639,36641]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [36642,36643]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [36643,36658]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [36658,36659]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [36660,36661]"
    },
    {
      "action": "delete-node",
      "tree": "try: try [36675,36678]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [36692,36847]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [36861,36868]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [36869,36870]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36870,36883]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [36883,36884]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [36885,36982]"
    },
    {
      "action": "delete-node",
      "tree": "catch: catch [36983,36988]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [36989,36990]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [36990,37009]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [37009,37010]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [37011,37012]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [37030,37032]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [37033,37034]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [37034,37052]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [37052,37053]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [37054,37201]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [37202,37206]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [37207,37208]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [37230,37238]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [37239,37240]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [37272,37273]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [37273,37288]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37288,37289]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [37290,37303]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [37303,37304]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [37266,37304]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [37326,37327]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [37230,37327]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [37345,37346]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [37207,37346]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [37030,37346]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [37360,37361]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [37011,37361]"
    },
    {
      "action": "delete-node",
      "tree": "catch_clause [36983,37361]"
    },
    {
      "action": "delete-node",
      "tree": "try_statement [36675,37361]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [37371,37372]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [36660,37372]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [37373,37377]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [37378,37416]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [36639,37416]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [37422,37423]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [36628,37423]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [36470,37423]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Hook that is called before any token transfer. This includes minting      * and burning.      *      * Calling conditions:      *      * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be      * transferred to `to`.      * - When `from` is zero, `tokenId` will be minted for `to`.      * - When `to` is zero, ``from``'s `tokenId` will be burned.      * - `from` and `to` are never both zero.      *      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].      */ [37431,37989]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [37995,38118]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [38120,38121]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [24653,38121]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [24583,38121]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: base/Ownable.sol [38125,38150]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [38160,38183]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @dev Contract module which provides a basic access control mechanism, where  * there is an account (an owner) that can be granted exclusive access to  * specific functions.  *  * By default, the owner account will be the one that deploys the contract. This  * can later be changed with {transferOwnership}.  *  * This module is used through inheritance. It will make available the modifier  * `onlyOwner`, which can be applied to your functions to restrict their use to  * the owner.  */ [38185,38690]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [38692,38700]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Ownable [38701,38708]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [38709,38711]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [38712,38719]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [38720,38721]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [38727,38751]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [38759,38843]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Initializes the contract setting the deployer as the initial owner.    */ [38851,38942]"
    },
    {
      "action": "delete-tree",
      "tree": "constructor_definition [38948,39103]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Returns the address of the current owner.    */ [39111,39176]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [39182,39261]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Throws if called by any account other than the owner.    */ [39269,39346]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [39352,39471]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Leaves the contract without owner. It will not be possible to call    * `onlyOwner` functions anymore. Can only be called by the current owner.    *    * NOTE: Renouncing ownership will leave the contract without an owner,    * thereby removing any functionality that is only available to the owner.    */ [39479,39806]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [39812,39952]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfers ownership of the contract to a new account (`newOwner`).    * Can only be called by the current owner.    */ [39960,40097]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [40103,40111]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferOwnership [40112,40129]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40129,40130]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40146,40147]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [40155,40164]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [40165,40212]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [40103,40212]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfers ownership of the contract to a new account (`newOwner`).    */ [40220,40310]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [40316,40324]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferOwnership [40325,40343]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40343,40344]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40360,40361]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40362,40370]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [40371,40545]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [40316,40545]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [40547,40548]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [38720,40548]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [38692,40548]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: TestContracts/testnftFactory.sol [40552,40593]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * Author : Lil Ye, Ace, Anyx, Elmontos  */ [40599,40648]"
    },
    {
      "action": "delete-tree",
      "tree": "pragma_directive [40650,40673]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [40695,40703]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: testNftFactory [40704,40718]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [40719,40721]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [40722,40729]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40729,40730]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [40731,40737]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40737,40738]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [40739,40750]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [40751,40752]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [40760,40783]"
    },
    {
      "action": "delete-node",
      "tree": "comment: ////nfts [40791,40799]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [40805,40849]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [40855,40899]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //COUNTS [40907,40915]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [40921,40957]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [40963,40997]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //SALES [41005,41012]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41018,41047]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41053,41087]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //todo place the finalised price [41095,41127]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // To-change -> from 0 eth to 0.069 eth [41133,41172]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41178,41232]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //priceInMainSale [41233,41250]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41258,41301]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //AMOUNT [41309,41317]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41323,41345]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //CONTRACT [41353,41363]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41369,41385]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41391,41402]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41408,41429]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41435,41461]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [41467,41494]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [41502,41510]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: initialize [41511,41521]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41521,41522]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41522,41542]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41542,41543]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41544,41565]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41565,41566]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41566,41584]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41584,41585]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41585,41602]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41602,41603]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41603,41615]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41615,41616]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [41617,41625]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [41626,41627]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41709,41734]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41744,41760]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41770,41791]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41803,41845]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41855,41872]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41882,41904]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41916,41948]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41958,41986]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [41996,42031]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [42041,42080]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [42090,42125]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42131,42132]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [41626,42132]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [41502,42132]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [42140,42237]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [42245,42406]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [42414,42776]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [42784,42967]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [42975,43152]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [43160,43250]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [43258,43368]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [43376,43384]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: buyAndStake [43385,43396]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [43396,43397]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [43397,43407]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [43407,43408]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [43408,43423]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [43423,43424]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [43425,43441]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [43441,43442]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [43442,43458]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [43458,43459]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [43477,45221]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [43376,45221]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [45229,45237]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: buyUsingSUPAndStake [45238,45257]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [45257,45258]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [45258,45268]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [45268,45269]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [45270,45285]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [45285,45286]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [45287,45303]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [45303,45304]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [45305,45313]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [45314,45315]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //  By calling this function, you agreed that you have read and accepted the terms & conditions [45325,45420]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // available at this link: https://hungerbrainz.com/terms [45426,45483]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [45492,45530]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [45539,45599]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [45609,45625]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [45625,45626]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [45626,45638]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [45638,45639]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [45647,45648]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [45648,45652]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [45652,45653]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [45640,45653]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [45640,45653]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [45653,45654]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [45655,45677]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [45677,45678]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [45609,45678]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [45609,45679]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [45689,45723]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //1000 ether [45724,45736]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [45746,45796]"
    },
    {
      "action": "delete-node",
      "tree": "for: for [45808,45811]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [45812,45813]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [45813,45822]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [45823,45838]"
    },
    {
      "action": "delete-tree",
      "tree": "update_expression [45839,45842]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [45842,45843]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [45844,45845]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [45859,45861]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [45862,45863]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: stake [45863,45868]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [45868,45869]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [45870,46120]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [46134,46138]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [46139,46140]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [46158,46179]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _safeMint [46197,46206]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [46206,46207]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [46217,46218]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [46218,46236]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [46236,46237]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [46197,46237]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [46197,46238]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [46256,46316]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [46330,46331]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [46139,46331]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [45859,46331]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [46345,46387]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [46397,46398]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [45844,46398]"
    },
    {
      "action": "delete-node",
      "tree": "for_statement [45808,46398]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [46404,46405]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [45314,46405]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [45229,46405]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [46413,46528]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [46536,46890]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //Better if Game Address directly calls metadata contract [46898,46955]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [46961,47260]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //#endregion [47270,47282]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [47288,47506]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [47514,47640]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [47648,47918]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [47926,48103]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [48111,48332]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [48334,48335]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [40751,48335]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [40695,48335]"
    }
  ]
}