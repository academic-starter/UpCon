{
  "matches": [
    {
      "src": "(: ( [878,879]",
      "dest": "(: ( [352,353]"
    },
    {
      "src": "user_defined_type [879,892]",
      "dest": "user_defined_type [353,366]"
    },
    {
      "src": "[: [ [68386,68387]",
      "dest": "[: [ [9222,9223]"
    },
    {
      "src": "identifier: info [57524,57528]",
      "dest": "identifier: info [8404,8408]"
    },
    {
      "src": "identifier: history [70111,70118]",
      "dest": "identifier: history [10993,11000]"
    },
    {
      "src": "address: address [4409,4416]",
      "dest": "address: address [2433,2440]"
    },
    {
      "src": "): ) [72471,72472]",
      "dest": "): ) [12348,12349]"
    },
    {
      "src": "variable_declaration [72543,72557]",
      "dest": "variable_declaration [12420,12434]"
    },
    {
      "src": "identifier: lockedValue [69166,69177]",
      "dest": "identifier: lockedValue [10002,10013]"
    },
    {
      "src": "identifier: stakerInfo [15909,15919]",
      "dest": "identifier: stakerInfo [5550,5560]"
    },
    {
      "src": ".: . [33933,33934]",
      "dest": ".: . [7632,7633]"
    },
    {
      "src": "external: external [16246,16254]",
      "dest": "external: external [6011,6019]"
    },
    {
      "src": "public: public [10971,10977]",
      "dest": "public: public [4478,4484]"
    },
    {
      "src": "override_specifier [2927,2935]",
      "dest": "override_specifier [1683,1691]"
    },
    {
      "src": "(: ( [68129,68130]",
      "dest": "(: ( [8957,8958]"
    },
    {
      "src": "type_name [69338,69345]",
      "dest": "type_name [10174,10181]"
    },
    {
      "src": "identifier: nextCommittedPeriod [9315,9334]",
      "dest": "identifier: nextCommittedPeriod [3399,3418]"
    },
    {
      "src": "call_argument [70282,70294]",
      "dest": "call_argument [11238,11250]"
    },
    {
      "src": "binary_expression [72693,72751]",
      "dest": "binary_expression [12583,12641]"
    },
    {
      "src": ",: , [38097,38098]",
      "dest": ",: , [7834,7835]"
    },
    {
      "src": "(: ( [71856,71857]",
      "dest": "(: ( [12029,12030]"
    },
    {
      "src": "identifier: RESERVED_PERIOD [9963,9978]",
      "dest": "identifier: currentMintingPeriod [4325,4345]"
    },
    {
      "src": "view: view [16255,16259]",
      "dest": "view: view [6020,6024]"
    },
    {
      "src": "is: is [1086,1088]",
      "dest": "is: is [561,563]"
    },
    {
      "src": "}: } [8780,8781]",
      "dest": "}: } [3212,3213]"
    },
    {
      "src": "string [130,140]",
      "dest": "string [137,147]"
    },
    {
      "src": "(: ( [72393,72394]",
      "dest": "(: ( [12270,12271]"
    },
    {
      "src": "parameter [33550,33564]",
      "dest": "parameter [7332,7346]"
    },
    {
      "src": "identifier: _staker [33679,33686]",
      "dest": "identifier: _staker [7548,7555]"
    },
    {
      "src": "assembly_statement [70769,70825]",
      "dest": "assembly_statement [11772,11828]"
    },
    {
      "src": "assignment_expression [15140,15176]",
      "dest": "assignment_expression [5374,5388]"
    },
    {
      "src": "for: for [4062,4065]",
      "dest": "for: for [2147,2150]"
    },
    {
      "src": "struct_member [8755,8775]",
      "dest": "struct_member [3187,3207]"
    },
    {
      "src": "comment: /**     * @notice Signals that a sub-stake was divided     * @param staker Staker address     * @param oldValue Old sub-stake value (in NuNits)     * @param lastPeriod Final locked period of old sub-stake     * @param newValue New sub-stake value (in NuNits)     * @param periods Number of periods to extend sub-stake     */ [4818,5142]",
      "dest": "comment: // indices for flags (0-4 were in use, skip it in future) [3991,4048]"
    },
    {
      "src": "visibility [2920,2926]",
      "dest": "visibility [1676,1682]"
    },
    {
      "src": "primitive_type [71784,71791]",
      "dest": "primitive_type [11957,11964]"
    },
    {
      "src": "(: ( [57615,57616]",
      "dest": "(: ( [8443,8444]"
    },
    {
      "src": "identifier: StakerInfo [8877,8887]",
      "dest": "identifier: StakerInfo [3309,3319]"
    },
    {
      "src": "uint256: uint256 [11484,11491]",
      "dest": "uint256: uint256 [6553,6560]"
    },
    {
      "src": "primitive_type [72560,72567]",
      "dest": "primitive_type [12437,12444]"
    },
    {
      "src": "identifier: totalStakedAt [70165,70178]",
      "dest": "identifier: totalStakedAt [11075,11088]"
    },
    {
      "src": "solidity_pragma_token [54,69]",
      "dest": "solidity_pragma_token [54,69]"
    },
    {
      "src": "(: ( [69688,69689]",
      "dest": "(: ( [10524,10525]"
    },
    {
      "src": "number_literal: 0 [70757,70758]",
      "dest": "number_literal: 0 [11760,11761]"
    },
    {
      "src": "identifier: delegateGetStakerInfo [70548,70569]",
      "dest": "identifier: delegateGetStakerInfo [11551,11572]"
    },
    {
      "src": "event: event [4393,4398]",
      "dest": "event: event [2417,2422]"
    },
    {
      "src": "primitive_type [69531,69538]",
      "dest": "primitive_type [10367,10374]"
    },
    {
      "src": "expression_statement [2655,2708]",
      "dest": "expression_statement [1411,1464]"
    },
    {
      "src": "primitive_type [16409,16416]",
      "dest": "primitive_type [6513,6520]"
    },
    {
      "src": "array_access [33668,33687]",
      "dest": "array_access [7537,7556]"
    },
    {
      "src": "identifier: startPeriod [69696,69707]",
      "dest": "identifier: startPeriod [10532,10543]"
    },
    {
      "src": "expression_statement [15357,15654]",
      "dest": "expression_statement [5182,5364]"
    },
    {
      "src": "primitive_type [11272,11278]",
      "dest": "primitive_type [4530,4536]"
    },
    {
      "src": "primitive_type [39442,39449]",
      "dest": "primitive_type [4206,4213]"
    },
    {
      "src": "type_name [2140,2147]",
      "dest": "type_name [1247,1254]"
    },
    {
      "src": "]: ] [69787,69788]",
      "dest": "]: ] [10623,10624]"
    },
    {
      "src": "type_name [11075,11084]",
      "dest": "type_name [4595,4604]"
    },
    {
      "src": "uint128: uint128 [42818,42825]",
      "dest": "uint128: uint128 [4259,4266]"
    },
    {
      "src": "comment: /**     * @notice Return the length of the array of sub stakes     */ [68208,68277]",
      "dest": "comment: /**     * @notice Return the length of the array of sub stakes     */ [9044,9113]"
    },
    {
      "src": "address: address [11215,11222]",
      "dest": "address: address [4698,4705]"
    },
    {
      "src": "storage: storage [69750,69757]",
      "dest": "storage: storage [10586,10593]"
    },
    {
      "src": "type_name [10877,10887]",
      "dest": "type_name [4384,4394]"
    },
    {
      "src": "struct_member [9777,9799]",
      "dest": "struct_member [3861,3883]"
    },
    {
      "src": "identifier: _staker [23971,23978]",
      "dest": "identifier: _staker [6894,6901]"
    },
    {
      "src": "(: ( [11446,11447]",
      "dest": "(: ( [6512,6513]"
    },
    {
      "src": "identifier: length [72252,72258]",
      "dest": "identifier: length [12129,12135]"
    },
    {
      "src": "identifier: sender [15924,15930]",
      "dest": "identifier: sender [5565,5571]"
    },
    {
      "src": "identifier: minLockedPeriods [15140,15156]",
      "dest": "identifier: token [5374,5379]"
    },
    {
      "src": "): ) [68130,68131]",
      "dest": "): ) [8958,8959]"
    },
    {
      "src": "=: = [2742,2743]",
      "dest": "=: = [1498,1499]"
    },
    {
      "src": "uint128: uint128 [8755,8762]",
      "dest": "uint128: uint128 [3187,3194]"
    },
    {
      "src": "visibility [1395,1401]",
      "dest": "visibility [818,824]"
    },
    {
      "src": "block_statement [33960,34138]",
      "dest": "block_statement [7659,7705]"
    },
    {
      "src": "visibility [70037,70043]",
      "dest": "visibility [10873,10879]"
    },
    {
      "src": "virtual: virtual [68767,68774]",
      "dest": "virtual: virtual [9603,9610]"
    },
    {
      "src": "uint128: uint128 [68898,68905]",
      "dest": "uint128: uint128 [9734,9741]"
    },
    {
      "src": "parameter [16409,16424]",
      "dest": "parameter [6513,6528]"
    },
    {
      "src": "function: function [839,847]",
      "dest": "function: function [313,321]"
    },
    {
      "src": "primitive_type [9777,9784]",
      "dest": "primitive_type [3861,3868]"
    },
    {
      "src": "call_argument [59206,59219]",
      "dest": "call_argument [8747,8760]"
    },
    {
      "src": ".: . [68989,68990]",
      "dest": ".: . [9825,9826]"
    },
    {
      "src": "(: ( [3133,3134]",
      "dest": "(: ( [1889,1890]"
    },
    {
      "src": "return_statement [70249,70296]",
      "dest": "return_statement [11205,11252]"
    },
    {
      "src": "): ) [70294,70295]",
      "dest": "): ) [11250,11251]"
    },
    {
      "src": "comment: //-------------------------Slashing------------------------- [56940,57000]",
      "dest": "comment: //-------------------------Slashing------------------------- [7856,7916]"
    },
    {
      "src": "call_expression [2198,2218]",
      "dest": "call_expression [1305,1325]"
    },
    {
      "src": "type_name [70015,70022]",
      "dest": "type_name [10851,10858]"
    },
    {
      "src": "!=: != [33627,33629]",
      "dest": "!=: != [7447,7449]"
    },
    {
      "src": "primitive_type [24017,24024]",
      "dest": "primitive_type [6961,6968]"
    },
    {
      "src": "bytes32: bytes32 [72560,72567]",
      "dest": "bytes32: bytes32 [12437,12444]"
    },
    {
      "src": "identifier: getPastDowntime [69498,69513]",
      "dest": "identifier: getPastDowntime [10334,10349]"
    },
    {
      "src": "member_expression [2198,2216]",
      "dest": "member_expression [1305,1323]"
    },
    {
      "src": "identifier: verifyState [71772,71783]",
      "dest": "identifier: verifyState [11945,11956]"
    },
    {
      "src": "expression_statement [57765,57784]",
      "dest": "expression_statement [8593,8612]"
    },
    {
      "src": "assignment_expression [57765,57783]",
      "dest": "assignment_expression [8593,8611]"
    },
    {
      "src": "): ) [72453,72454]",
      "dest": "): ) [12330,12331]"
    },
    {
      "src": "expression_statement [72378,72473]",
      "dest": "expression_statement [12255,12350]"
    },
    {
      "src": "function: function [70539,70547]",
      "dest": "function: function [11542,11550]"
    },
    {
      "src": "\": \" [139,140]",
      "dest": "\": \" [146,147]"
    },
    {
      "src": "call_argument [72427,72448]",
      "dest": "call_argument [12304,12325]"
    },
    {
      "src": "): ) [33994,33995]",
      "dest": "): ) [7693,7694]"
    },
    {
      "src": "(: ( [72183,72184]",
      "dest": "(: ( [12060,12061]"
    },
    {
      "src": "inheritance_specifier [1089,1100]",
      "dest": "inheritance_specifier [564,575]"
    },
    {
      "src": "function: function [68104,68112]",
      "dest": "function: function [8932,8940]"
    },
    {
      "src": "(: ( [3075,3076]",
      "dest": "(: ( [1831,1832]"
    },
    {
      "src": "state_variable_declaration [1286,1327]",
      "dest": "state_variable_declaration [705,750]"
    },
    {
      "src": "identifier: _penalty [57709,57717]",
      "dest": "identifier: _penalty [8537,8545]"
    },
    {
      "src": "state_variable_declaration [1240,1281]",
      "dest": "state_variable_declaration [4206,4242]"
    },
    {
      "src": "identifier: verifyState [2887,2898]",
      "dest": "identifier: verifyState [1643,1654]"
    },
    {
      "src": "function_body [24026,24410]",
      "dest": "function_body [5723,5831]"
    },
    {
      "src": "{: { [8656,8657]",
      "dest": "{: { [3088,3089]"
    },
    {
      "src": "visibility [47527,47535]",
      "dest": "visibility [7396,7404]"
    },
    {
      "src": "variable_declaration [68942,68967]",
      "dest": "variable_declaration [9778,9803]"
    },
    {
      "src": "identifier: firstPeriod [8673,8684]",
      "dest": "identifier: firstPeriod [3105,3116]"
    },
    {
      "src": "=>: => [10874,10876]",
      "dest": "=>: => [4381,4383]"
    },
    {
      "src": "identifier: info [69161,69165]",
      "dest": "identifier: info [9997,10001]"
    },
    {
      "src": "comment: /**     * @notice Get the value of locked tokens for a staker in a specified period     * @dev Information may be incorrect for rewarded or not committed surpassed period     * @param _info Staker structure     * @param _currentPeriod Current period     * @param _period Next period     */ [18630,18919]",
      "dest": "comment: /**     * @dev Checks caller is WorkLock contract     */ [5634,5690]"
    },
    {
      "src": "returns: returns [16260,16267]",
      "dest": "returns: returns [6025,6032]"
    },
    {
      "src": "identifier: require [72685,72692]",
      "dest": "identifier: require [12562,12569]"
    },
    {
      "src": "binary_expression [2198,2222]",
      "dest": "binary_expression [1305,1329]"
    },
    {
      "src": "number_literal: 0 [15570,15571]",
      "dest": "number_literal: 0 [5213,5214]"
    },
    {
      "src": "expression_statement [69819,69854]",
      "dest": "expression_statement [10655,10690]"
    },
    {
      "src": "uint256: uint256 [68155,68162]",
      "dest": "uint256: uint256 [8991,8998]"
    },
    {
      "src": "public: public [10716,10722]",
      "dest": "public: public [4128,4134]"
    },
    {
      "src": "true [70389,70393]",
      "dest": "true [11392,11396]"
    },
    {
      "src": "identifier: _testTarget [72655,72666]",
      "dest": "identifier: _testTarget [12532,12543]"
    },
    {
      "src": "identifier: Slashed [7173,7180]",
      "dest": "identifier: Slashed [2967,2974]"
    },
    {
      "src": "address: address [23963,23970]",
      "dest": "address: address [6886,6893]"
    },
    {
      "src": "call_expression [72184,72240]",
      "dest": "call_expression [12061,12117]"
    },
    {
      "src": "state_variable_declaration [10807,10851]",
      "dest": "state_variable_declaration [4156,4200]"
    },
    {
      "src": "user_defined_type [72482,72492]",
      "dest": "user_defined_type [12359,12369]"
    },
    {
      "src": "type_name [9269,9275]",
      "dest": "type_name [3353,3359]"
    },
    {
      "src": "address: address [2899,2906]",
      "dest": "address: address [1655,1662]"
    },
    {
      "src": "uint256: uint256 [68535,68542]",
      "dest": "uint256: uint256 [9371,9378]"
    },
    {
      "src": "event_paramater [7205,7220]",
      "dest": "event_paramater [2999,3014]"
    },
    {
      "src": "struct_member [9684,9706]",
      "dest": "struct_member [3768,3790]"
    },
    {
      "src": "identifier: balanceHistory [70256,70270]",
      "dest": "identifier: balanceHistory [11212,11226]"
    },
    {
      "src": "): ) [16276,16277]",
      "dest": "): ) [6041,6042]"
    },
    {
      "src": "type_name [9308,9314]",
      "dest": "type_name [3392,3398]"
    },
    {
      "src": "type_name [9746,9753]",
      "dest": "type_name [3830,3837]"
    },
    {
      "src": ",: , [1982,1983]",
      "dest": ",: , [1194,1195]"
    },
    {
      "src": "user_defined_type [1089,1100]",
      "dest": "user_defined_type [564,575]"
    },
    {
      "src": "parameter [68518,68533]",
      "dest": "parameter [9354,9369]"
    },
    {
      "src": "visibility [10109,10115]",
      "dest": "visibility [4824,4830]"
    },
    {
      "src": "type_name [4066,4073]",
      "dest": "type_name [2151,2158]"
    },
    {
      "src": "identifier: verifyState [2960,2971]",
      "dest": "identifier: verifyState [1716,1727]"
    },
    {
      "src": "member_expression [69769,69801]",
      "dest": "member_expression [10605,10637]"
    },
    {
      "src": "address: address [70570,70577]",
      "dest": "address: address [11573,11580]"
    },
    {
      "src": "identifier: token [3106,3111]",
      "dest": "identifier: token [1862,1867]"
    },
    {
      "src": "primitive_type [9444,9451]",
      "dest": "primitive_type [3528,3535]"
    },
    {
      "src": "type_cast_expression [72386,72454]",
      "dest": "type_cast_expression [12263,12331]"
    },
    {
      "src": "address: address [6222,6229]",
      "dest": "address: address [2658,2665]"
    },
    {
      "src": ".: . [72921,72922]",
      "dest": ".: . [12655,12656]"
    },
    {
      "src": "type_cast_expression [15588,15606]",
      "dest": "type_cast_expression [5231,5249]"
    },
    {
      "src": "member_expression [69070,69085]",
      "dest": "member_expression [9906,9921]"
    },
    {
      "src": "return_type_definition [11475,11492]",
      "dest": "return_type_definition [6544,6561]"
    },
    {
      "src": "expression_statement [24036,24077]",
      "dest": "expression_statement [5733,5814]"
    },
    {
      "src": "identifier: genesisSecondsPerPeriod [1211,1234]",
      "dest": "identifier: secondsPerPeriod [679,695]"
    },
    {
      "src": "using: using [4111,4116]",
      "dest": "using: using [2196,2201]"
    },
    {
      "src": "struct_member [9809,9833]",
      "dest": "struct_member [3893,3917]"
    },
    {
      "src": "address: address [10866,10873]",
      "dest": "address: address [4373,4380]"
    },
    {
      "src": "]: ] [4138,4139]",
      "dest": "]: ] [2223,2224]"
    },
    {
      "src": "variable_declaration_statement [69741,69810]",
      "dest": "variable_declaration_statement [10577,10646]"
    },
    {
      "src": "primitive_type [4066,4073]",
      "dest": "primitive_type [2151,2158]"
    },
    {
      "src": "identifier: workLock [24066,24074]",
      "dest": "identifier: workLock [5763,5771]"
    },
    {
      "src": "identifier: staker [4425,4431]",
      "dest": "identifier: staker [2449,2455]"
    },
    {
      "src": "): ) [3139,3140]",
      "dest": "): ) [1895,1896]"
    },
    {
      "src": "identifier: lastPeriod [8701,8711]",
      "dest": "identifier: lastPeriod [3133,3143]"
    },
    {
      "src": "type_name [70179,70186]",
      "dest": "type_name [11089,11096]"
    },
    {
      "src": "{: { [68164,68165]",
      "dest": "{: { [9000,9001]"
    },
    {
      "src": "uint256: uint256 [69338,69345]",
      "dest": "uint256: uint256 [10174,10181]"
    },
    {
      "src": "identifier: staker [72551,72557]",
      "dest": "identifier: staker [12428,12434]"
    },
    {
      "src": "external: external [70335,70343]",
      "dest": "external: external [11337,11345]"
    },
    {
      "src": "struct_member [8841,8858]",
      "dest": "struct_member [3273,3290]"
    },
    {
      "src": "\": \" [99,100]",
      "dest": "\": \" [99,100]"
    },
    {
      "src": "(: ( [58966,58967]",
      "dest": "(: ( [8644,8645]"
    },
    {
      "src": "{: { [70372,70373]",
      "dest": "{: { [11375,11376]"
    },
    {
      "src": "comment: /**     * @dev Checks the existence of a staker in the contract     */ [15772,15842]",
      "dest": "comment: /**     * @dev Checks the existence of a staker in the contract     */ [5431,5501]"
    },
    {
      "src": "(: ( [15564,15565]",
      "dest": "(: ( [5208,5209]"
    },
    {
      "src": "identifier: info [34262,34266]",
      "dest": "identifier: info [7781,7785]"
    },
    {
      "src": "identifier: _penalty [58976,58984]",
      "dest": "identifier: _penalty [8654,8662]"
    },
    {
      "src": "primitive_type [8841,8847]",
      "dest": "primitive_type [3273,3279]"
    },
    {
      "src": "binary_expression [15588,15651]",
      "dest": "binary_expression [5231,5294]"
    },
    {
      "src": "function: function [68493,68501]",
      "dest": "function: function [9329,9337]"
    },
    {
      "src": "uint256: uint256 [11282,11289]",
      "dest": "uint256: uint256 [4540,4547]"
    },
    {
      "src": "function_definition [2878,3749]",
      "dest": "function_definition [1634,1904]"
    },
    {
      "src": "type_name [9566,9573]",
      "dest": "type_name [3650,3657]"
    },
    {
      "src": "if_statement [57612,57686]",
      "dest": "if_statement [8440,8514]"
    },
    {
      "src": "function_body [70372,70400]",
      "dest": "function_body [11375,11403]"
    },
    {
      "src": "address: address [71784,71791]",
      "dest": "address: address [11957,11964]"
    },
    {
      "src": ".: . [70270,70271]",
      "dest": ".: . [11226,11227]"
    },
    {
      "src": "immutable: immutable [1347,1356]",
      "dest": "immutable: immutable [770,779]"
    },
    {
      "src": "(: ( [72195,72196]",
      "dest": "(: ( [12072,12073]"
    },
    {
      "src": "for: for [4161,4164]",
      "dest": "for: for [2246,2249]"
    },
    {
      "src": ",: , [58984,58985]",
      "dest": ",: , [8662,8663]"
    },
    {
      "src": "uint256: uint256 [72568,72575]",
      "dest": "uint256: uint256 [12445,12452]"
    },
    {
      "src": "identifier: firstPeriod [68804,68815]",
      "dest": "identifier: firstPeriod [9640,9651]"
    },
    {
      "src": "primitive_type [8694,8700]",
      "dest": "primitive_type [3126,3132]"
    },
    {
      "src": "primitive_type [9876,9883]",
      "dest": "primitive_type [3960,3967]"
    },
    {
      "src": "public: public [10497,10503]",
      "dest": "public: public [4318,4324]"
    },
    {
      "src": "primitive_type [42818,42825]",
      "dest": "primitive_type [4259,4266]"
    },
    {
      "src": "): ) [72258,72259]",
      "dest": "): ) [12135,12136]"
    },
    {
      "src": "immutable: immutable [1166,1175]",
      "dest": "immutable: immutable [603,612]"
    },
    {
      "src": "type_name [10536,10542]",
      "dest": "type_name [4259,4266]"
    },
    {
      "src": "identifier: getStakersLength [68113,68129]",
      "dest": "identifier: getStakersLength [8941,8957]"
    },
    {
      "src": "identifier: endPeriod [69884,69893]",
      "dest": "identifier: endPeriod [10720,10729]"
    },
    {
      "src": "primitive_type [11020,11027]",
      "dest": "primitive_type [4815,4822]"
    },
    {
      "src": "call_argument [70719,70743]",
      "dest": "call_argument [11722,11746]"
    },
    {
      "src": "number_literal: 0 [72291,72292]",
      "dest": "number_literal: 0 [12168,12169]"
    },
    {
      "src": "identifier: getValueAt [70271,70281]",
      "dest": "identifier: getValueAt [11227,11237]"
    },
    {
      "src": "if_statement [57727,57794]",
      "dest": "if_statement [8555,8622]"
    },
    {
      "src": "): ) [69545,69546]",
      "dest": "): ) [10381,10382]"
    },
    {
      "src": "==: == [24055,24057]",
      "dest": "==: == [5752,5754]"
    },
    {
      "src": "type_name [9444,9451]",
      "dest": "type_name [3528,3535]"
    },
    {
      "src": "state_variable_declaration [11113,11127]",
      "dest": "state_variable_declaration [4748,4762]"
    },
    {
      "src": "function: function [11422,11430]",
      "dest": "function: function [6487,6495]"
    },
    {
      "src": "identifier: infoToCheck [72619,72630]",
      "dest": "identifier: infoToCheck [12496,12507]"
    },
    {
      "src": "return_type_definition [69329,69346]",
      "dest": "return_type_definition [10165,10182]"
    },
    {
      "src": "return_type_definition [68341,68358]",
      "dest": "return_type_definition [9177,9194]"
    },
    {
      "src": "expression_statement [3060,3142]",
      "dest": "expression_statement [1816,1898]"
    },
    {
      "src": "public: public [1194,1200]",
      "dest": "public: public [662,668]"
    },
    {
      "src": ".: . [71844,71845]",
      "dest": ".: . [12017,12018]"
    },
    {
      "src": "primitive_type [6246,6253]",
      "dest": "primitive_type [2682,2689]"
    },
    {
      "src": "primitive_type [69689,69695]",
      "dest": "primitive_type [10525,10531]"
    },
    {
      "src": "comment: // former slot for WorkLock [11230,11257]",
      "dest": "comment: // former slot for WorkLock [4763,4790]"
    },
    {
      "src": "type_name [68535,68542]",
      "dest": "type_name [9371,9378]"
    },
    {
      "src": "identifier: getSubStakesLength [68291,68309]",
      "dest": "identifier: getSubStakesLength [9127,9145]"
    },
    {
      "src": "immutable: immutable [1201,1210]",
      "dest": "immutable: immutable [669,678]"
    },
    {
      "src": "yul_assignment [70792,70815]",
      "dest": "yul_assignment [11795,11818]"
    },
    {
      "src": "identifier: info [48348,48352]",
      "dest": "identifier: info [7628,7632]"
    },
    {
      "src": "user_defined_type [9842,9854]",
      "dest": "user_defined_type [3926,3938]"
    },
    {
      "src": "type_name [72601,72611]",
      "dest": "type_name [12478,12488]"
    },
    {
      "src": "primitive_type [9380,9386]",
      "dest": "primitive_type [3464,3470]"
    },
    {
      "src": "primitive_type [6222,6229]",
      "dest": "primitive_type [2658,2665]"
    },
    {
      "src": ",: , [70743,70744]",
      "dest": ",: , [11746,11747]"
    },
    {
      "src": "parameter [70570,70585]",
      "dest": "parameter [11573,11588]"
    },
    {
      "src": "primitive_type [8666,8672]",
      "dest": "primitive_type [3098,3104]"
    },
    {
      "src": "struct_member [8694,8712]",
      "dest": "struct_member [3126,3144]"
    },
    {
      "src": "identifier: minLockedPeriods [1310,1326]",
      "dest": "identifier: minLockedPeriods [729,745]"
    },
    {
      "src": "indexed: indexed [4417,4424]",
      "dest": "indexed: indexed [2441,2448]"
    },
    {
      "src": "): ) [16244,16245]",
      "dest": "): ) [6009,6010]"
    },
    {
      "src": "primitive_type [33550,33557]",
      "dest": "primitive_type [7332,7339]"
    },
    {
      "src": "[: [ [69779,69780]",
      "dest": "[: [ [10615,10616]"
    },
    {
      "src": "identifier: token [1176,1181]",
      "dest": "identifier: token [613,618]"
    },
    {
      "src": "(: ( [70066,70067]",
      "dest": "(: ( [10902,10903]"
    },
    {
      "src": "identifier: stakerAddress [72576,72589]",
      "dest": "identifier: stakerAddress [12453,12466]"
    },
    {
      "src": "state_variable_declaration [10693,10747]",
      "dest": "state_variable_declaration [4114,4151]"
    },
    {
      "src": "identifier: _index [69539,69545]",
      "dest": "identifier: _index [10375,10381]"
    },
    {
      "src": "[: [ [15919,15920]",
      "dest": "[: [ [5560,5561]"
    },
    {
      "src": "identifier: startPeriod [69819,69830]",
      "dest": "identifier: startPeriod [10655,10666]"
    },
    {
      "src": "identifier: stakerInfo [68970,68980]",
      "dest": "identifier: stakerInfo [9806,9816]"
    },
    {
      "src": "identifier: info [69115,69119]",
      "dest": "identifier: info [9951,9955]"
    },
    {
      "src": "member_expression [69364,69396]",
      "dest": "member_expression [10200,10232]"
    },
    {
      "src": "function: function [16207,16215]",
      "dest": "function: function [5972,5980]"
    },
    {
      "src": "primitive_type [10962,10969]",
      "dest": "primitive_type [4469,4476]"
    },
    {
      "src": "uint16: uint16 [9308,9314]",
      "dest": "uint16: uint16 [3392,3398]"
    },
    {
      "src": "emit_statement [38078,38140]",
      "dest": "emit_statement [7812,7844]"
    },
    {
      "src": "address: address [69999,70006]",
      "dest": "address: address [10835,10842]"
    },
    {
      "src": "parameter [69298,69313]",
      "dest": "parameter [10134,10149]"
    },
    {
      "src": "function_body [69347,69410]",
      "dest": "function_body [10183,10246]"
    },
    {
      "src": "(: ( [72654,72655]",
      "dest": "(: ( [12531,12532]"
    },
    {
      "src": "): ) [2217,2218]",
      "dest": "): ) [1324,1325]"
    },
    {
      "src": "primitive_type [7222,7229]",
      "dest": "primitive_type [3016,3023]"
    },
    {
      "src": "identifier: _reward [59001,59008]",
      "dest": "identifier: _reward [8679,8686]"
    },
    {
      "src": "using_directive [4111,4140]",
      "dest": "using_directive [2196,2225]"
    },
    {
      "src": "function_definition [70156,70302]",
      "dest": "function_definition [11066,11304]"
    },
    {
      "src": "immutable: immutable [10723,10732]",
      "dest": "immutable: immutable [4135,4144]"
    },
    {
      "src": "identifier: _staker [70748,70755]",
      "dest": "identifier: _staker [11751,11758]"
    },
    {
      "src": "): ) [10887,10888]",
      "dest": "): ) [4394,4395]"
    },
    {
      "src": "function: function [57244,57252]",
      "dest": "function: function [8160,8168]"
    },
    {
      "src": "[: [ [9817,9818]",
      "dest": "[: [ [3901,3902]"
    },
    {
      "src": "yul_identifier [70792,70798]",
      "dest": "yul_identifier [11795,11801]"
    },
    {
      "src": "identifier: lockedValue [68906,68917]",
      "dest": "identifier: lockedValue [9742,9753]"
    },
    {
      "src": "identifier: value [57621,57626]",
      "dest": "identifier: value [8449,8454]"
    },
    {
      "src": "(: ( [15364,15365]",
      "dest": "(: ( [5189,5190]"
    },
    {
      "src": ",: , [57346,57347]",
      "dest": ",: , [8262,8263]"
    },
    {
      "src": "identifier: _lockedPerPeriod [11291,11307]",
      "dest": "identifier: stub1 [4549,4554]"
    },
    {
      "src": "comment: // TODO \"virtual\" only for tests, probably will be removed after #1512 [68674,68744]",
      "dest": "comment: // TODO \"virtual\" only for tests, probably will be removed after #1512 [9510,9580]"
    },
    {
      "src": ".: . [69074,69075]",
      "dest": ".: . [9910,9911]"
    },
    {
      "src": "number_literal: 0 [48331,48332]",
      "dest": "number_literal: 0 [7623,7624]"
    },
    {
      "src": ".: . [2204,2205]",
      "dest": ".: . [1311,1312]"
    },
    {
      "src": "uint16: uint16 [8666,8672]",
      "dest": "uint16: uint16 [3098,3104]"
    },
    {
      "src": "identifier: _testTarget [72196,72207]",
      "dest": "identifier: _testTarget [12073,12084]"
    },
    {
      "src": "identifier: history [9886,9893]",
      "dest": "identifier: history [3970,3977]"
    },
    {
      "src": "call_expression [70694,70759]",
      "dest": "call_expression [11697,11762]"
    },
    {
      "src": "identifier: _value [38099,38105]",
      "dest": "identifier: _value [7836,7842]"
    },
    {
      "src": "parameter [57356,57371]",
      "dest": "parameter [8272,8287]"
    },
    {
      "src": "identifier: stakers [72244,72251]",
      "dest": "identifier: stakers [12121,12128]"
    },
    {
      "src": "\": \" [80,81]",
      "dest": "\": \" [80,81]"
    },
    {
      "src": ",: , [70717,70718]",
      "dest": ",: , [11720,11721]"
    },
    {
      "src": "comment: // we have to use real values even though this is a stub [2995,3051]",
      "dest": "comment: // we have to use real values even though this is a stub [1751,1807]"
    },
    {
      "src": "function: function [69488,69496]",
      "dest": "function: function [10324,10332]"
    },
    {
      "src": "type_name [57325,57332]",
      "dest": "type_name [8241,8248]"
    },
    {
      "src": "identifier: info [69031,69035]",
      "dest": "identifier: info [9867,9871]"
    },
    {
      "src": "address: address [33501,33508]",
      "dest": "address: address [7307,7314]"
    },
    {
      "src": "]: ] [15930,15931]",
      "dest": "]: ] [5571,5572]"
    },
    {
      "src": "return_type_definition [69680,69726]",
      "dest": "return_type_definition [10516,10562]"
    },
    {
      "src": "identifier: supportsHistory [70317,70332]",
      "dest": "identifier: supportsHistory [11319,11334]"
    },
    {
      "src": "identifier: staker [7197,7203]",
      "dest": "identifier: staker [2991,2997]"
    },
    {
      "src": "call_argument [59001,59008]",
      "dest": "call_argument [8679,8686]"
    },
    {
      "src": "): ) [854,855]",
      "dest": "): ) [328,329]"
    },
    {
      "src": "identifier: subStakes [68990,68999]",
      "dest": "identifier: subStakes [9826,9835]"
    },
    {
      "src": "identifier: _owner [70007,70013]",
      "dest": "identifier: _owner [10843,10849]"
    },
    {
      "src": "number_literal: 0 [2221,2222]",
      "dest": "number_literal: 0 [1328,1329]"
    },
    {
      "src": "=: = [69873,69874]",
      "dest": "=: = [10709,10710]"
    },
    {
      "src": "bytes32: bytes32 [72543,72550]",
      "dest": "bytes32: bytes32 [12420,12427]"
    },
    {
      "src": "uint256: uint256 [11020,11027]",
      "dest": "uint256: uint256 [4815,4822]"
    },
    {
      "src": "yul_path [70802,70815]",
      "dest": "yul_path [11805,11818]"
    },
    {
      "src": "uint16: uint16 [69689,69695]",
      "dest": "uint16: uint16 [10525,10531]"
    },
    {
      "src": "function_definition [33484,34676]",
      "dest": "function_definition [7269,7850]"
    },
    {
      "src": "(: ( [6221,6222]",
      "dest": "(: ( [2657,2658]"
    },
    {
      "src": "array_access [70092,70110]",
      "dest": "array_access [10974,10992]"
    },
    {
      "src": "): ) [11289,11290]",
      "dest": "): ) [4547,4548]"
    },
    {
      "src": "comment: // former slot for Adjudicator [11180,11210]",
      "dest": "comment: // former slot for Adjudicator [4713,4743]"
    },
    {
      "src": "parameter [23963,23978]",
      "dest": "parameter [6886,6901]"
    },
    {
      "src": "address: address [69298,69305]",
      "dest": "address: address [10134,10141]"
    },
    {
      "src": "using: using [4145,4150]",
      "dest": "using: using [2230,2235]"
    },
    {
      "src": "visibility [10716,10722]",
      "dest": "visibility [4128,4134]"
    },
    {
      "src": "state_variable_declaration [11215,11229]",
      "dest": "state_variable_declaration [4698,4712]"
    },
    {
      "src": "identifier: Upgradeable [1089,1100]",
      "dest": "identifier: Upgradeable [564,575]"
    },
    {
      "src": "(: ( [70178,70179]",
      "dest": "(: ( [11088,11089]"
    },
    {
      "src": "type_name [69741,69749]",
      "dest": "type_name [10577,10585]"
    },
    {
      "src": "\": \" [185,186]",
      "dest": "\": \" [195,196]"
    },
    {
      "src": "if: if [33895,33897]",
      "dest": "if: if [7605,7607]"
    },
    {
      "src": "(: ( [57264,57265]",
      "dest": "(: ( [8180,8181]"
    },
    {
      "src": "identifier: _staker [33987,33994]",
      "dest": "identifier: _staker [7686,7693]"
    },
    {
      "src": "memory: memory [70641,70647]",
      "dest": "memory: memory [11644,11650]"
    },
    {
      "src": "{: { [68932,68933]",
      "dest": "{: { [9768,9769]"
    },
    {
      "src": "identifier: secondsPerPeriod [1264,1280]",
      "dest": "identifier: previousPeriodSupply [4221,4241]"
    },
    {
      "src": "type_name [879,892]",
      "dest": "type_name [353,366]"
    },
    {
      "src": "{: { [8888,8889]",
      "dest": "{: { [3320,3321]"
    },
    {
      "src": "comment: /**     * @notice Set `windDown` parameter.     * If true then stake's duration will be decreasing in each period with `commitToNextPeriod()`     * @param _windDown Value for parameter     */ [27186,27377]",
      "dest": "comment: //        StakerInfo storage info = stakerInfo[_staker]; [6282,6338]"
    },
    {
      "src": "view: view [69675,69679]",
      "dest": "view: view [10511,10515]"
    },
    {
      "src": "function_definition [68493,69184]",
      "dest": "function_definition [9329,10020]"
    },
    {
      "src": "): ) [7266,7267]",
      "dest": "): ) [3060,3061]"
    },
    {
      "src": "identifier: stakerInfo [68376,68386]",
      "dest": "identifier: stakerInfo [9212,9222]"
    },
    {
      "src": "type_name [9715,9722]",
      "dest": "type_name [3799,3806]"
    },
    {
      "src": "identifier: stakers [72432,72439]",
      "dest": "identifier: stakers [12309,12316]"
    },
    {
      "src": "expression_statement [33974,33996]",
      "dest": "expression_statement [7673,7695]"
    },
    {
      "src": "string [172,186]",
      "dest": "string [179,196]"
    },
    {
      "src": "identifier: stakerFromWorker [10978,10994]",
      "dest": "identifier: stakerFromWorker [4485,4501]"
    },
    {
      "src": "user_defined_type [70630,70640]",
      "dest": "user_defined_type [11633,11643]"
    },
    {
      "src": "call_argument [2972,2983]",
      "dest": "call_argument [1728,1739]"
    },
    {
      "src": "parameter [13987,14007]",
      "dest": "parameter [5108,5128]"
    },
    {
      "src": "identifier: stub1 [11121,11126]",
      "dest": "identifier: stub4 [4756,4761]"
    },
    {
      "src": "): ) [72451,72452]",
      "dest": "): ) [12328,12329]"
    },
    {
      "src": "public: public [70037,70043]",
      "dest": "public: public [10873,10879]"
    },
    {
      "src": "): ) [3121,3122]",
      "dest": "): ) [1877,1878]"
    },
    {
      "src": "identifier: Locked [38083,38089]",
      "dest": "identifier: Deposited [7817,7826]"
    },
    {
      "src": "member_expression [68970,68999]",
      "dest": "member_expression [9806,9835]"
    },
    {
      "src": "identifier: length [69397,69403]",
      "dest": "identifier: length [10233,10239]"
    },
    {
      "src": "]: ] [9818,9819]",
      "dest": "]: ] [3902,3903]"
    },
    {
      "src": "identifier: maxAllowableLockedTokens [2717,2741]",
      "dest": "identifier: maxAllowableLockedTokens [1473,1497]"
    },
    {
      "src": "identifier: lockedPerPeriod [11431,11446]",
      "dest": "identifier: getCompletedWork [6496,6512]"
    },
    {
      "src": "==: == [33954,33956]",
      "dest": "==: == [7653,7655]"
    },
    {
      "src": "type_name [57505,57515]",
      "dest": "type_name [8385,8395]"
    },
    {
      "src": "type_name [4433,4440]",
      "dest": "type_name [2457,2464]"
    },
    {
      "src": "external: external [68327,68335]",
      "dest": "external: external [9163,9171]"
    },
    {
      "src": "block_statement [59173,59240]",
      "dest": "block_statement [8714,8781]"
    },
    {
      "src": "struct_declaration [8787,8864]",
      "dest": "struct_declaration [3219,3296]"
    },
    {
      "src": "identifier: length [72281,72287]",
      "dest": "identifier: length [12158,12164]"
    },
    {
      "src": "==: == [72711,72713]",
      "dest": "==: == [12601,12603]"
    },
    {
      "src": "type_name [57356,57363]",
      "dest": "type_name [8272,8279]"
    },
    {
      "src": "primitive_type [1187,1193]",
      "dest": "primitive_type [655,661]"
    },
    {
      "src": "array_access [68970,69007]",
      "dest": "array_access [9806,9843]"
    },
    {
      "src": "(: ( [68517,68518]",
      "dest": "(: ( [9353,9354]"
    },
    {
      "src": "identifier: _testTarget [2972,2983]",
      "dest": "identifier: _testTarget [1728,1739]"
    },
    {
      "src": ".: . [34204,34205]",
      "dest": ".: . [7719,7720]"
    },
    {
      "src": "^:  ^ [62,64]",
      "dest": "^:  ^ [62,64]"
    },
    {
      "src": "contract: contract [3920,3928]",
      "dest": "contract: contract [2075,2083]"
    },
    {
      "src": "): ) [70758,70759]",
      "dest": "): ) [11761,11762]"
    },
    {
      "src": "type_name [4165,4178]",
      "dest": "type_name [2250,2263]"
    },
    {
      "src": "call_argument [3076,3121]",
      "dest": "call_argument [1832,1877]"
    },
    {
      "src": "type_name [72482,72492]",
      "dest": "type_name [12359,12369]"
    },
    {
      "src": "parenthesized_expression [15587,15652]",
      "dest": "parenthesized_expression [5230,5295]"
    },
    {
      "src": "}: } [70824,70825]",
      "dest": "}: } [11827,11828]"
    },
    {
      "src": "storage: storage [68955,68962]",
      "dest": "storage: storage [9791,9798]"
    },
    {
      "src": "type_name [1387,1394]",
      "dest": "type_name [810,817]"
    },
    {
      "src": "expression_statement [72685,73187]",
      "dest": "expression_statement [12562,12672]"
    },
    {
      "src": ".: . [72213,72214]",
      "dest": ".: . [12090,12091]"
    },
    {
      "src": "struct_member [9653,9675]",
      "dest": "struct_member [3737,3759]"
    },
    {
      "src": "[: [ [33678,33679]",
      "dest": "[: [ [7547,7548]"
    },
    {
      "src": "}: } [24409,24410]",
      "dest": "}: } [5830,5831]"
    },
    {
      "src": "number_literal: 0 [33957,33958]",
      "dest": "number_literal: 0 [7656,7657]"
    },
    {
      "src": "view: view [70044,70048]",
      "dest": "view: view [10880,10884]"
    },
    {
      "src": "call_argument [72394,72453]",
      "dest": "call_argument [12271,12330]"
    },
    {
      "src": ".: . [70723,70724]",
      "dest": ".: . [11726,11727]"
    },
    {
      "src": "event_paramater [6246,6259]",
      "dest": "event_paramater [2682,2695]"
    },
    {
      "src": "identifier: workLock [10842,10850]",
      "dest": "identifier: workLock [4191,4199]"
    },
    {
      "src": "[: [ [68980,68981]",
      "dest": "[: [ [9816,9817]"
    },
    {
      "src": "type_name [7222,7229]",
      "dest": "type_name [3016,3023]"
    },
    {
      "src": "identifier: rewardCoefficient [15547,15564]",
      "dest": "identifier: _token [5190,5196]"
    },
    {
      "src": "override: override [70049,70057]",
      "dest": "override: override [10885,10893]"
    },
    {
      "src": "expression_statement [2717,2770]",
      "dest": "expression_statement [1473,1526]"
    },
    {
      "src": ".: . [69883,69884]",
      "dest": ".: . [10719,10720]"
    },
    {
      "src": "identifier: delegateGet [3076,3087]",
      "dest": "identifier: delegateGet [1832,1843]"
    },
    {
      "src": "type_name [70670,70677]",
      "dest": "type_name [11673,11680]"
    },
    {
      "src": "visibility [70201,70207]",
      "dest": "visibility [11111,11117]"
    },
    {
      "src": "mapping: mapping [10857,10864]",
      "dest": "mapping: mapping [4364,4371]"
    },
    {
      "src": "): ) [15640,15641]",
      "dest": "): ) [5283,5284]"
    },
    {
      "src": ".: . [70110,70111]",
      "dest": ".: . [10992,10993]"
    },
    {
      "src": "address: address [16229,16236]",
      "dest": "address: address [5994,6001]"
    },
    {
      "src": "[: [ [16305,16306]",
      "dest": "[: [ [6070,6071]"
    },
    {
      "src": "\": \" [109,110]",
      "dest": "\": \" [109,110]"
    },
    {
      "src": "type_name [70570,70577]",
      "dest": "type_name [11573,11580]"
    },
    {
      "src": "identifier: flags [72922,72927]",
      "dest": "identifier: flags [12656,12661]"
    },
    {
      "src": "state_mutability [70044,70048]",
      "dest": "state_mutability [10880,10884]"
    },
    {
      "src": "solidity: solidity [54,62]",
      "dest": "solidity: solidity [54,62]"
    },
    {
      "src": "[: [ [4137,4138]",
      "dest": "[: [ [2222,2223]"
    },
    {
      "src": "primitive_type [69298,69305]",
      "dest": "primitive_type [10134,10141]"
    },
    {
      "src": "contract_declaration [3920,75464]",
      "dest": "contract_declaration [2075,12681]"
    },
    {
      "src": "<=: <= [57627,57629]",
      "dest": "<=: <= [8455,8457]"
    },
    {
      "src": "[: [ [9854,9855]",
      "dest": "[: [ [3938,3939]"
    },
    {
      "src": "user_defined_type [10693,10715]",
      "dest": "user_defined_type [4114,4127]"
    },
    {
      "src": "function_body [68359,68419]",
      "dest": "function_body [9195,9255]"
    },
    {
      "src": "): ) [15605,15606]",
      "dest": "): ) [5248,5249]"
    },
    {
      "src": "identifier: info [72714,72718]",
      "dest": "identifier: info [12604,12608]"
    },
    {
      "src": "identifier: value [8906,8911]",
      "dest": "identifier: value [3338,3343]"
    },
    {
      "src": "return_type_definition [70358,70372]",
      "dest": "return_type_definition [11360,11374]"
    },
    {
      "src": "struct_member [9566,9580]",
      "dest": "struct_member [3650,3664]"
    },
    {
      "src": "identifier: minWorkerPeriods [10560,10576]",
      "dest": "identifier: currentPeriodSupply [4274,4293]"
    },
    {
      "src": "binary_expression [15365,15571]",
      "dest": "binary_expression [5190,5214]"
    },
    {
      "src": "): ) [57749,57750]",
      "dest": "): ) [8577,8578]"
    },
    {
      "src": "public: public [1247,1253]",
      "dest": "public: public [4214,4220]"
    },
    {
      "src": "parameter [70015,70035]",
      "dest": "parameter [10851,10871]"
    },
    {
      "src": "identifier: firstPeriod [69036,69047]",
      "dest": "identifier: firstPeriod [9872,9883]"
    },
    {
      "src": "member_expression [57665,57675]",
      "dest": "member_expression [8493,8503]"
    },
    {
      "src": "uint256: uint256 [9444,9451]",
      "dest": "uint256: uint256 [3528,3535]"
    },
    {
      "src": "solidity_version: 0.7.0 [64,69]",
      "dest": "solidity_version: 0.7.0 [64,69]"
    },
    {
      "src": "): ) [68325,68326]",
      "dest": "): ) [9161,9162]"
    },
    {
      "src": "user_defined_type [4165,4178]",
      "dest": "user_defined_type [2250,2263]"
    },
    {
      "src": "public: public [1340,1346]",
      "dest": "public: public [763,769]"
    },
    {
      "src": "import: import [165,171]",
      "dest": "import: import [172,178]"
    },
    {
      "src": "comment: /**     * @notice Set `reStake` parameter. If true then all staking rewards will be added to locked stake     * @param _reStake Value for parameter     */ [25761,25915]",
      "dest": "comment: //    { [6274,6281]"
    },
    {
      "src": "identifier: value [72705,72710]",
      "dest": "identifier: value [12595,12600]"
    },
    {
      "src": "constructor_definition [1941,2776]",
      "dest": "constructor_definition [1153,1532]"
    },
    {
      "src": "): ) [2983,2984]",
      "dest": "): ) [1739,1740]"
    },
    {
      "src": "assignment_expression [2717,2769]",
      "dest": "assignment_expression [1473,1525]"
    },
    {
      "src": "import_directive [102,122]",
      "dest": "import_directive [102,129]"
    },
    {
      "src": ",: , [70755,70756]",
      "dest": ",: , [11758,11759]"
    },
    {
      "src": "identifier: _index [69802,69808]",
      "dest": "identifier: _index [10638,10644]"
    },
    {
      "src": "identifier: _staker [68318,68325]",
      "dest": "identifier: _staker [9154,9161]"
    },
    {
      "src": "(: ( [10950,10951]",
      "dest": "(: ( [4457,4458]"
    },
    {
      "src": "identifier: _staker [33509,33516]",
      "dest": "identifier: _staker [7315,7322]"
    },
    {
      "src": ".: . [69396,69397]",
      "dest": ".: . [10232,10233]"
    },
    {
      "src": "type_name [8813,8819]",
      "dest": "type_name [3245,3251]"
    },
    {
      "src": "member_expression [16295,16320]",
      "dest": "member_expression [6060,6085]"
    },
    {
      "src": "identifier: NuCypherToken [879,892]",
      "dest": "identifier: NuCypherToken [353,366]"
    },
    {
      "src": ",: , [72666,72667]",
      "dest": ",: , [12543,12544]"
    },
    {
      "src": "(: ( [24065,24066]",
      "dest": "(: ( [5762,5763]"
    },
    {
      "src": "identifier: Bits [4057,4061]",
      "dest": "identifier: Bits [2142,2146]"
    },
    {
      "src": "number_literal: 0 [72366,72367]",
      "dest": "number_literal: 0 [12243,12244]"
    },
    {
      "src": "variable_declaration [33642,33665]",
      "dest": "variable_declaration [7511,7534]"
    },
    {
      "src": "uint128: uint128 [39442,39449]",
      "dest": "uint128: uint128 [4206,4213]"
    },
    {
      "src": "function: function [70308,70316]",
      "dest": "function: function [11310,11318]"
    },
    {
      "src": "!=: != [2437,2439]",
      "dest": "!=: != [1371,1373]"
    },
    {
      "src": "call_expression [72378,72472]",
      "dest": "call_expression [12255,12349]"
    },
    {
      "src": "=>: => [11017,11019]",
      "dest": "=>: => [4812,4814]"
    },
    {
      "src": "uint256: uint256 [2097,2104]",
      "dest": "uint256: uint256 [1204,1211]"
    },
    {
      "src": "identifier: _minAllowableLockedTokens [2105,2130]",
      "dest": "identifier: _minAllowableLockedTokens [1212,1237]"
    },
    {
      "src": "emit_statement [58954,59010]",
      "dest": "emit_statement [8632,8688]"
    },
    {
      "src": "(: ( [70332,70333]",
      "dest": "(: ( [11334,11335]"
    },
    {
      "src": ",: , [7203,7204]",
      "dest": ",: , [2997,2998]"
    },
    {
      "src": "type_name [9842,9856]",
      "dest": "type_name [3926,3940]"
    },
    {
      "src": "state_mutability [69675,69679]",
      "dest": "state_mutability [10511,10515]"
    },
    {
      "src": "uint256: uint256 [24017,24024]",
      "dest": "uint256: uint256 [6961,6968]"
    },
    {
      "src": "identifier: selector [70735,70743]",
      "dest": "identifier: selector [11738,11746]"
    },
    {
      "src": "event_paramater [4409,4431]",
      "dest": "event_paramater [2433,2455]"
    },
    {
      "src": "(: ( [72385,72386]",
      "dest": "(: ( [12262,12263]"
    },
    {
      "src": ",: , [72425,72426]",
      "dest": ",: , [12302,12303]"
    },
    {
      "src": ".: . [69383,69384]",
      "dest": ".: . [10219,10220]"
    },
    {
      "src": "type_name [11001,11028]",
      "dest": "type_name [4796,4823]"
    },
    {
      "src": "{: { [16278,16279]",
      "dest": "{: { [6043,6044]"
    },
    {
      "src": "identifier: downtime [69833,69841]",
      "dest": "identifier: downtime [10669,10677]"
    },
    {
      "src": "indexed: indexed [7230,7237]",
      "dest": "indexed: indexed [3024,3031]"
    },
    {
      "src": "event_paramater [4433,4446]",
      "dest": "event_paramater [2457,2470]"
    },
    {
      "src": "identifier: info [57695,57699]",
      "dest": "identifier: info [8523,8527]"
    },
    {
      "src": "): ) [15565,15566]",
      "dest": "): ) [5209,5210]"
    },
    {
      "src": "call_argument [3134,3139]",
      "dest": "call_argument [1890,1895]"
    },
    {
      "src": "type_name [11113,11120]",
      "dest": "type_name [4748,4755]"
    },
    {
      "src": "=: = [68968,68969]",
      "dest": "=: = [9804,9805]"
    },
    {
      "src": "identifier: _staker [16306,16313]",
      "dest": "identifier: _staker [6071,6078]"
    },
    {
      "src": ",: , [27128,27129]",
      "dest": ",: , [7762,7763]"
    },
    {
      "src": "comment: // TODO change to structure when ABIEncoderV2 is released (#1501) [68555,68620]",
      "dest": "comment: // TODO change to structure when ABIEncoderV2 is released (#1501) [9391,9456]"
    },
    {
      "src": "primitive_type [15588,15595]",
      "dest": "primitive_type [5231,5238]"
    },
    {
      "src": "=: = [69068,69069]",
      "dest": "=: = [9904,9905]"
    },
    {
      "src": "member_expression [69115,69137]",
      "dest": "member_expression [9951,9973]"
    },
    {
      "src": "block_statement [57751,57794]",
      "dest": "block_statement [8579,8622]"
    },
    {
      "src": "(: ( [2971,2972]",
      "dest": "(: ( [1727,1728]"
    },
    {
      "src": "comment: /**     * @notice Signals that the staker was slashed     * @param staker Staker address     * @param penalty Slashing penalty     * @param investigator Investigator address     * @param reward Value of reward provided to investigator (in NuNits)     */ [6909,7162]",
      "dest": "comment: /**     * @notice Signals that the staker was slashed     * @param staker Staker address     * @param penalty Slashing penalty     * @param investigator Investigator address     * @param reward Value of reward provided to investigator (in NuNits)     */ [2703,2956]"
    },
    {
      "src": "call_argument [3068,3140]",
      "dest": "call_argument [1824,1896]"
    },
    {
      "src": "function_body [16278,16327]",
      "dest": "function_body [6043,6092]"
    },
    {
      "src": "variable_declaration_statement [72482,72534]",
      "dest": "variable_declaration_statement [12359,12411]"
    },
    {
      "src": "if: if [57612,57614]",
      "dest": "if: if [8440,8442]"
    },
    {
      "src": "comment: //------------------------Main getters------------------------ [16072,16134]",
      "dest": "comment: //------------------------Main getters------------------------ [5837,5899]"
    },
    {
      "src": "): ) [57376,57377]",
      "dest": "): ) [8292,8293]"
    },
    {
      "src": "user_defined_type [57505,57515]",
      "dest": "user_defined_type [8385,8395]"
    },
    {
      "src": "identifier: PolicyManagerInterface [10693,10715]",
      "dest": "identifier: NuCypherToken [4114,4127]"
    },
    {
      "src": "type_name [10962,10969]",
      "dest": "type_name [4469,4476]"
    },
    {
      "src": ".: . [33981,33982]",
      "dest": ".: . [7680,7681]"
    },
    {
      "src": "identifier: lastPeriod [69057,69067]",
      "dest": "identifier: lastPeriod [9893,9903]"
    },
    {
      "src": "identifier: _workLock [14125,14134]",
      "dest": "identifier: _workLock [5156,5165]"
    },
    {
      "src": "type_name [23963,23970]",
      "dest": "type_name [6886,6893]"
    },
    {
      "src": "primitive_type [9269,9275]",
      "dest": "primitive_type [3353,3359]"
    },
    {
      "src": "comment: //        public view returns (SubStakeInfo) [68621,68665]",
      "dest": "comment: //        public view returns (SubStakeInfo) [9457,9501]"
    },
    {
      "src": "uint16: uint16 [33566,33572]",
      "dest": "uint16: uint16 [7356,7362]"
    },
    {
      "src": "identifier: subStakes [9857,9866]",
      "dest": "identifier: subStakes [3941,3950]"
    },
    {
      "src": ".: . [3111,3112]",
      "dest": ".: . [1867,1868]"
    },
    {
      "src": "external: external [856,864]",
      "dest": "external: external [330,338]"
    },
    {
      "src": "binary_expression [2411,2441]",
      "dest": "binary_expression [1345,1375]"
    },
    {
      "src": "primitive_type [68350,68357]",
      "dest": "primitive_type [9186,9193]"
    },
    {
      "src": "number_literal: 1 [70745,70746]",
      "dest": "number_literal: 1 [11748,11749]"
    },
    {
      "src": "type_name [14107,14124]",
      "dest": "type_name [5138,5155]"
    },
    {
      "src": "\": \" [149,150]",
      "dest": "\": \" [156,157]"
    },
    {
      "src": "): ) [70654,70655]",
      "dest": "): ) [11657,11658]"
    },
    {
      "src": "identifier: workLock [15739,15747]",
      "dest": "identifier: workLock [5398,5406]"
    },
    {
      "src": "uint16: uint16 [8841,8847]",
      "dest": "uint16: uint16 [3273,3279]"
    },
    {
      "src": "type_name [1240,1246]",
      "dest": "type_name [4206,4213]"
    },
    {
      "src": "primitive_type [4130,4137]",
      "dest": "primitive_type [2215,2222]"
    },
    {
      "src": "primitive_type [8721,8727]",
      "dest": "primitive_type [3153,3159]"
    },
    {
      "src": "variable_declaration [70670,70691]",
      "dest": "variable_declaration [11673,11694]"
    },
    {
      "src": "member_expression [57616,57626]",
      "dest": "member_expression [8444,8454]"
    },
    {
      "src": "identifier: this [3101,3105]",
      "dest": "identifier: this [1857,1861]"
    },
    {
      "src": "): ) [69345,69346]",
      "dest": "): ) [10181,10182]"
    },
    {
      "src": "contract_body [833,896]",
      "dest": "contract_body [307,370]"
    },
    {
      "src": "view: view [70208,70212]",
      "dest": "view: view [11118,11122]"
    },
    {
      "src": "primitive_type [9684,9691]",
      "dest": "primitive_type [3768,3775]"
    },
    {
      "src": ",: , [57289,57290]",
      "dest": ",: , [8205,8206]"
    },
    {
      "src": "parameter [68829,68846]",
      "dest": "parameter [9665,9682]"
    },
    {
      "src": "primitive_type [10866,10873]",
      "dest": "primitive_type [4373,4380]"
    },
    {
      "src": "identifier: _value [33620,33626]",
      "dest": "identifier: _value [7440,7446]"
    },
    {
      "src": "type_name [70367,70371]",
      "dest": "type_name [11369,11373]"
    },
    {
      "src": "identifier: stub1 [9387,9392]",
      "dest": "identifier: stub1 [3471,3476]"
    },
    {
      "src": "identifier: _workLock [15624,15633]",
      "dest": "identifier: _workLock [5267,5276]"
    },
    {
      "src": "): ) [892,893]",
      "dest": "): ) [366,367]"
    },
    {
      "src": "event_paramater [7252,7266]",
      "dest": "event_paramater [3046,3060]"
    },
    {
      "src": "primitive_type [69999,70006]",
      "dest": "primitive_type [10835,10842]"
    },
    {
      "src": "(: ( [4408,4409]",
      "dest": "(: ( [2432,2433]"
    },
    {
      "src": "identifier: _token [15645,15651]",
      "dest": "identifier: _token [5288,5294]"
    },
    {
      "src": "variable_declaration [69741,69766]",
      "dest": "variable_declaration [10577,10602]"
    },
    {
      "src": "==: == [15642,15644]",
      "dest": "==: == [5285,5287]"
    },
    {
      "src": "}: } [34675,34676]",
      "dest": "}: } [7849,7850]"
    },
    {
      "src": "primitive_type [72543,72550]",
      "dest": "primitive_type [12420,12427]"
    },
    {
      "src": "primitive_type [4433,4440]",
      "dest": "primitive_type [2457,2464]"
    },
    {
      "src": "visibility [11085,11091]",
      "dest": "visibility [4605,4611]"
    },
    {
      "src": ".: . [59192,59193]",
      "dest": ".: . [8733,8734]"
    },
    {
      "src": "returns: returns [70621,70628]",
      "dest": "returns: returns [11624,11631]"
    },
    {
      "src": "}: } [75084,75085]",
      "dest": "}: } [12677,12678]"
    },
    {
      "src": "call_argument [3088,3099]",
      "dest": "call_argument [1844,1855]"
    },
    {
      "src": "parameter [71784,71803]",
      "dest": "parameter [11957,11976]"
    },
    {
      "src": "visibility [10971,10977]",
      "dest": "visibility [4478,4484]"
    },
    {
      "src": "identifier: SafeMath [4085,4093]",
      "dest": "identifier: SafeMath [2170,2178]"
    },
    {
      "src": "comment: /**     * @notice Activate/deactivate taking snapshots of balances     * @param _enableSnapshots True to activate snapshots, False to deactivate     */ [28844,28995]",
      "dest": "comment: //        snapshots = !info.flags.bitSet(SNAPSHOTS_DISABLED_INDEX); [6339,6406]"
    },
    {
      "src": "primitive_type [4409,4416]",
      "dest": "primitive_type [2433,2440]"
    },
    {
      "src": "return: return [70249,70255]",
      "dest": "return: return [11205,11211]"
    },
    {
      "src": "): ) [70142,70143]",
      "dest": "): ) [11024,11025]"
    },
    {
      "src": "call_argument [34238,34242]",
      "dest": "call_argument [7757,7761]"
    },
    {
      "src": "parameter [11484,11491]",
      "dest": "parameter [6553,6560]"
    },
    {
      "src": "): ) [70199,70200]",
      "dest": "): ) [11109,11110]"
    },
    {
      "src": "function: function [69973,69981]",
      "dest": "function: function [10809,10817]"
    },
    {
      "src": "identifier: _penalty [57482,57490]",
      "dest": "identifier: _penalty [8333,8341]"
    },
    {
      "src": "uint32: uint32 [1187,1193]",
      "dest": "uint32: uint32 [655,661]"
    },
    {
      "src": "assignment_expression [57654,57675]",
      "dest": "assignment_expression [8482,8503]"
    },
    {
      "src": "call_expression [72685,73186]",
      "dest": "call_expression [12562,12671]"
    },
    {
      "src": "(: ( [68154,68155]",
      "dest": "(: ( [8990,8991]"
    },
    {
      "src": "comment: /**     * @notice Get all tokens belonging to the staker     */ [16139,16202]",
      "dest": "comment: /**     * @notice Get all tokens belonging to the staker     */ [5904,5967]"
    },
    {
      "src": "type_cast_expression [72568,72590]",
      "dest": "type_cast_expression [12445,12467]"
    },
    {
      "src": "primitive_type [70179,70186]",
      "dest": "primitive_type [11089,11096]"
    },
    {
      "src": "identifier: WorkLockInterface [815,832]",
      "dest": "identifier: WorkLockInterface [289,306]"
    },
    {
      "src": ">: > [2219,2220]",
      "dest": ">: > [1326,1327]"
    },
    {
      "src": "primitive_type [70670,70677]",
      "dest": "primitive_type [11673,11680]"
    },
    {
      "src": "member_expression [48317,48327]",
      "dest": "member_expression [7609,7619]"
    },
    {
      "src": ".: . [69165,69166]",
      "dest": ".: . [10001,10002]"
    },
    {
      "src": "identifier: token [34199,34204]",
      "dest": "identifier: token [7714,7719]"
    },
    {
      "src": "identifier: downtime [69875,69883]",
      "dest": "identifier: downtime [10711,10719]"
    },
    {
      "src": "identifier: slashStaker [57253,57264]",
      "dest": "identifier: slashStaker [8169,8180]"
    },
    {
      "src": "[: [ [69801,69802]",
      "dest": "[: [ [10637,10638]"
    },
    {
      "src": "returns: returns [69329,69336]",
      "dest": "returns: returns [10165,10172]"
    },
    {
      "src": "primitive_type [2140,2147]",
      "dest": "primitive_type [1247,1254]"
    },
    {
      "src": "source_file [0,75465]",
      "dest": "source_file [0,12682]"
    },
    {
      "src": "comment: //        public view returns (Downtime) [69617,69657]",
      "dest": "comment: //        public view returns (Downtime) [10453,10493]"
    },
    {
      "src": "assignment_expression [69863,69893]",
      "dest": "assignment_expression [10699,10729]"
    },
    {
      "src": "identifier: _staker [16417,16424]",
      "dest": "identifier: _staker [6521,6528]"
    },
    {
      "src": "function: function [70156,70164]",
      "dest": "function: function [11066,11074]"
    },
    {
      "src": "identifier: value [57700,57705]",
      "dest": "identifier: value [8528,8533]"
    },
    {
      "src": "(: ( [72401,72402]",
      "dest": "(: ( [12278,12279]"
    },
    {
      "src": ".: . [72718,72719]",
      "dest": ".: . [12608,12609]"
    },
    {
      "src": "return: return [70382,70388]",
      "dest": "return: return [11385,11391]"
    },
    {
      "src": "constructor: constructor [13966,13977]",
      "dest": "constructor: constructor [5087,5098]"
    },
    {
      "src": "visibility [70612,70620]",
      "dest": "visibility [11615,11623]"
    },
    {
      "src": ",: , [68533,68534]",
      "dest": ",: , [9369,9370]"
    },
    {
      "src": "memory: memory [72612,72618]",
      "dest": "memory: memory [12489,12495]"
    },
    {
      "src": "(: ( [2216,2217]",
      "dest": "(: ( [1323,1324]"
    },
    {
      "src": "identifier: infoToCheck [72740,72751]",
      "dest": "identifier: infoToCheck [12630,12641]"
    },
    {
      "src": "identifier: _staker [38090,38097]",
      "dest": "identifier: _staker [7827,7834]"
    },
    {
      "src": "{: { [11493,11494]",
      "dest": "{: { [6562,6563]"
    },
    {
      "src": "identifier: lastPeriod [69075,69085]",
      "dest": "identifier: lastPeriod [9911,9921]"
    },
    {
      "src": "identifier: _investigator [58986,58999]",
      "dest": "identifier: _investigator [8664,8677]"
    },
    {
      "src": "identifier: flags [9574,9579]",
      "dest": "identifier: flags [3658,3663]"
    },
    {
      "src": "identifier: Issuer [3946,3952]",
      "dest": "identifier: Upgradeable [2101,2112]"
    },
    {
      "src": "override_specifier [70349,70357]",
      "dest": "override_specifier [11351,11359]"
    },
    {
      "src": "call_argument [72414,72425]",
      "dest": "call_argument [12291,12302]"
    },
    {
      "src": ".: . [72230,72231]",
      "dest": ".: . [12107,12108]"
    },
    {
      "src": ".: . [2959,2960]",
      "dest": ".: . [1715,1716]"
    },
    {
      "src": "identifier: _index [69000,69006]",
      "dest": "identifier: _index [9836,9842]"
    },
    {
      "src": "identifier: StakingEscrow [3929,3942]",
      "dest": "identifier: StakingEscrow [2084,2097]"
    },
    {
      "src": "type_name [1286,1292]",
      "dest": "type_name [705,711]"
    },
    {
      "src": "): ) [33958,33959]",
      "dest": "): ) [7657,7658]"
    },
    {
      "src": "type_name [69531,69538]",
      "dest": "type_name [10367,10374]"
    },
    {
      "src": "identifier: stakerInfo [10896,10906]",
      "dest": "identifier: stakerInfo [4403,4413]"
    },
    {
      "src": "[: [ [9883,9884]",
      "dest": "[: [ [3967,3968]"
    },
    {
      "src": "call_expression [2954,2984]",
      "dest": "call_expression [1710,1740]"
    },
    {
      "src": "primitive_type [70067,70074]",
      "dest": "primitive_type [10903,10910]"
    },
    {
      "src": "identifier: _staker [68526,68533]",
      "dest": "identifier: _staker [9362,9369]"
    },
    {
      "src": "(: ( [15595,15596]",
      "dest": "(: ( [5238,5239]"
    },
    {
      "src": "identifier: NuCypherToken [1145,1158]",
      "dest": "identifier: NuCypherToken [582,595]"
    },
    {
      "src": "immutable: immutable [10832,10841]",
      "dest": "immutable: immutable [4181,4190]"
    },
    {
      "src": "identifier: _value [34276,34282]",
      "dest": "identifier: _value [7795,7801]"
    },
    {
      "src": "): ) [3120,3121]",
      "dest": "): ) [1876,1877]"
    },
    {
      "src": "assignment_expression [69017,69047]",
      "dest": "assignment_expression [9853,9883]"
    },
    {
      "src": "identifier: require [72176,72183]",
      "dest": "identifier: require [12053,12060]"
    },
    {
      "src": "(: ( [69998,69999]",
      "dest": "(: ( [10834,10835]"
    },
    {
      "src": "type_name [9777,9784]",
      "dest": "type_name [3861,3868]"
    },
    {
      "src": "comment: /**     * @notice Get the last committed staker's period     * @param _staker Staker     */ [20176,20267]",
      "dest": "comment: //    * @notice Get all flags for the staker [6104,6148]"
    },
    {
      "src": "primitive_type [70367,70371]",
      "dest": "primitive_type [11369,11373]"
    },
    {
      "src": "identifier: StakerInfo [72601,72611]",
      "dest": "identifier: StakerInfo [12478,12488]"
    },
    {
      "src": "address: address [11165,11172]",
      "dest": "address: address [4646,4653]"
    },
    {
      "src": "uint256: uint256 [4066,4073]",
      "dest": "uint256: uint256 [2151,2158]"
    },
    {
      "src": "assignment_expression [69057,69085]",
      "dest": "assignment_expression [9893,9921]"
    },
    {
      "src": "parameter [69338,69345]",
      "dest": "parameter [10174,10181]"
    },
    {
      "src": "contract_declaration [1059,3751]",
      "dest": "contract_declaration [534,1906]"
    },
    {
      "src": "call_argument [38090,38097]",
      "dest": "call_argument [7827,7834]"
    },
    {
      "src": "array_access [72508,72533]",
      "dest": "array_access [12385,12410]"
    },
    {
      "src": "identifier: unlockingDuration [8728,8745]",
      "dest": "identifier: unlockingDuration [3160,3177]"
    },
    {
      "src": "uint256: uint256 [33550,33557]",
      "dest": "uint256: uint256 [7332,7339]"
    },
    {
      "src": "variable_declaration [72601,72630]",
      "dest": "variable_declaration [12478,12507]"
    },
    {
      "src": "function_definition [16207,16327]",
      "dest": "function_definition [5972,6092]"
    },
    {
      "src": "): ) [69725,69726]",
      "dest": "): ) [10561,10562]"
    },
    {
      "src": "comment: /**     * @notice Constructor sets address of token contract and coefficients for minting     * @param _token Token contract     * @param _policyManager Policy Manager contract     * @param _adjudicator Adjudicator contract     * @param _workLock WorkLock contract. Zero address if there is no WorkLock     * @param _genesisHoursPerPeriod Size of period in hours at genesis     * @param _hoursPerPeriod Size of period in hours     * @param _issuanceDecayCoefficient (d) Coefficient which modifies the rate at which the maximum issuance decays,     * only applicable to Phase 2. d = 365 * half-life / LOG2 where default half-life = 2.     * See Equation 10 in Staking Protocol & Economics paper     * @param _lockDurationCoefficient1 (k1) Numerator of the coefficient which modifies the extent     * to which a stake's lock duration affects the subsidy it receives. Affects stakers differently.     * Applicable to Phase 1 and Phase 2. k1 = k2 * small_stake_multiplier where default small_stake_multiplier = 0.5.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _lockDurationCoefficient2 (k2) Denominator of the coefficient which modifies the extent     * to which a stake's lock duration affects the subsidy it receives. Affects stakers differently.     * Applicable to Phase 1 and Phase 2. k2 = maximum_rewarded_periods / (1 - small_stake_multiplier)     * where default maximum_rewarded_periods = 365 and default small_stake_multiplier = 0.5.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _maximumRewardedPeriods (kmax) Number of periods beyond which a stake's lock duration     * no longer increases the subsidy it receives. kmax = reward_saturation * 365 where default reward_saturation = 1.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _firstPhaseTotalSupply Total supply for the first phase     * @param _firstPhaseMaxIssuance (Imax) Maximum number of new tokens minted per period during Phase 1.     * See Equation 7 in Staking Protocol & Economics paper.     * @param _minLockedPeriods Min amount of periods during which tokens can be locked     * @param _minAllowableLockedTokens Min amount of tokens that can be locked     * @param _maxAllowableLockedTokens Max amount of tokens that can be locked     * @param _minWorkerPeriods Min amount of periods while a worker can't be changed     */ [11583,13961]",
      "dest": "comment: // outdated [4347,4358]"
    },
    {
      "src": "variable_declaration_statement [70670,70760]",
      "dest": "variable_declaration_statement [11673,11763]"
    },
    {
      "src": "call_expression [57474,57495]",
      "dest": "call_expression [8325,8375]"
    },
    {
      "src": "comment: /** * @notice Adjudicator interface */ [628,666]",
      "dest": "comment: /** * @title StakingEscrow * @notice Contract holds and locks stakers tokens. * Each staker that locks their tokens will receive some compensation * @dev |v6.1.1| */ [1909,2074]"
    },
    {
      "src": "parameter [68350,68357]",
      "dest": "parameter [9186,9193]"
    },
    {
      "src": "): ) [68549,68550]",
      "dest": "): ) [9385,9386]"
    },
    {
      "src": "comment: // TODO change to structure when ABIEncoderV2 is released (#1501) [69551,69616]",
      "dest": "comment: // TODO change to structure when ABIEncoderV2 is released (#1501) [10387,10452]"
    },
    {
      "src": "primitive_type [8755,8762]",
      "dest": "primitive_type [3187,3194]"
    },
    {
      "src": "primitive_type [70570,70577]",
      "dest": "primitive_type [11573,11580]"
    },
    {
      "src": "(: ( [2197,2198]",
      "dest": "(: ( [1304,1305]"
    },
    {
      "src": "=: = [69159,69160]",
      "dest": "=: = [9995,9996]"
    },
    {
      "src": "visibility [68753,68761]",
      "dest": "visibility [9589,9597]"
    },
    {
      "src": "(: ( [72692,72693]",
      "dest": "(: ( [12569,12570]"
    },
    {
      "src": "comment: /**     * @notice Get the value of locked tokens for a staker in a future period     * @dev This function is used by PreallocationEscrow so its signature can't be updated.     * @param _staker Staker     * @param _offsetPeriods Amount of periods that will be added to the current period     */ [19508,19801]",
      "dest": "comment: //    /** [6094,6103]"
    },
    {
      "src": "type_name [68155,68162]",
      "dest": "type_name [8991,8998]"
    },
    {
      "src": "uint16: uint16 [1286,1292]",
      "dest": "uint16: uint16 [705,711]"
    },
    {
      "src": "uint128: uint128 [11075,11082]",
      "dest": "uint128: uint128 [4595,4602]"
    },
    {
      "src": "type_name [11263,11290]",
      "dest": "type_name [4521,4548]"
    },
    {
      "src": "struct_member [8813,8832]",
      "dest": "struct_member [3245,3264]"
    },
    {
      "src": "identifier: this [72209,72213]",
      "dest": "identifier: this [12086,12090]"
    },
    {
      "src": "identifier: stub4 [11029,11034]",
      "dest": "identifier: lockedPerPeriod [4831,4846]"
    },
    {
      "src": "return_type_definition [68775,68927]",
      "dest": "return_type_definition [9611,9763]"
    },
    {
      "src": "parameter [70067,70074]",
      "dest": "parameter [10903,10910]"
    },
    {
      "src": "event_definition [7167,7268]",
      "dest": "event_definition [2961,3062]"
    },
    {
      "src": "if_statement [33895,34138]",
      "dest": "if_statement [7605,7705]"
    },
    {
      "src": "primitive_type [57299,57306]",
      "dest": "primitive_type [8215,8222]"
    },
    {
      "src": "): ) [15651,15652]",
      "dest": "): ) [5294,5295]"
    },
    {
      "src": ",: , [68815,68816]",
      "dest": ",: , [9651,9652]"
    },
    {
      "src": "type_name [6246,6253]",
      "dest": "type_name [2682,2689]"
    },
    {
      "src": "struct: struct [8636,8642]",
      "dest": "struct: struct [3068,3074]"
    },
    {
      "src": "struct_member [8721,8746]",
      "dest": "struct_member [3153,3178]"
    },
    {
      "src": "comment: /** * @notice PolicyManager interface */ [214,254]",
      "dest": "comment: /** * @title StakingEscrowStub * @notice Stub is used to deploy main StakingEscrow after all other contract and make some variables immutable * @dev |v1.1.0| */ [373,533]"
    },
    {
      "src": "return_statement [70382,70394]",
      "dest": "return_statement [11385,11397]"
    },
    {
      "src": "identifier: value [6254,6259]",
      "dest": "identifier: value [2690,2695]"
    },
    {
      "src": "primitive_type [70231,70238]",
      "dest": "primitive_type [11141,11148]"
    },
    {
      "src": "member_expression [69875,69893]",
      "dest": "member_expression [10711,10729]"
    },
    {
      "src": "type_name [9809,9817]",
      "dest": "type_name [3893,3901]"
    },
    {
      "src": "}: } [57793,57794]",
      "dest": "}: } [8621,8622]"
    },
    {
      "src": "}: } [895,896]",
      "dest": "}: } [369,370]"
    },
    {
      "src": "call_expression [3076,3121]",
      "dest": "call_expression [1832,1877]"
    },
    {
      "src": "uint16: uint16 [68797,68803]",
      "dest": "uint16: uint16 [9633,9639]"
    },
    {
      "src": "identifier: subStakes [68396,68405]",
      "dest": "identifier: subStakes [9232,9241]"
    },
    {
      "src": "comment: /**     * @notice Return the information about past downtime     */ [69416,69483]",
      "dest": "comment: /**     * @notice Return the information about past downtime     */ [10252,10319]"
    },
    {
      "src": "visibility [1293,1299]",
      "dest": "visibility [712,718]"
    },
    {
      "src": "if: if [72269,72271]",
      "dest": "if: if [12146,12148]"
    },
    {
      "src": "address: address [9542,9549]",
      "dest": "address: address [3626,3633]"
    },
    {
      "src": "(: ( [16228,16229]",
      "dest": "(: ( [5993,5994]"
    },
    {
      "src": "function_definition [11422,11577]",
      "dest": "function_definition [6487,6605]"
    },
    {
      "src": "identifier: token [848,853]",
      "dest": "identifier: token [322,327]"
    },
    {
      "src": "(: ( [72272,72273]",
      "dest": "(: ( [12149,12150]"
    },
    {
      "src": "uint256: uint256 [70231,70238]",
      "dest": "uint256: uint256 [11141,11148]"
    },
    {
      "src": "call_argument [15618,15619]",
      "dest": "call_argument [5261,5262]"
    },
    {
      "src": "type_name [4098,4105]",
      "dest": "type_name [2183,2190]"
    },
    {
      "src": "contract: contract [1059,1067]",
      "dest": "contract: contract [534,542]"
    },
    {
      "src": "return_statement [11503,11571]",
      "dest": "return_statement [6572,6599]"
    },
    {
      "src": "(: ( [13977,13978]",
      "dest": "(: ( [5098,5099]"
    },
    {
      "src": ".: . [72431,72432]",
      "dest": ".: . [12308,12309]"
    },
    {
      "src": "identifier: token [15634,15639]",
      "dest": "identifier: token [5277,5282]"
    },
    {
      "src": ",: , [59219,59220]",
      "dest": ",: , [8760,8761]"
    },
    {
      "src": "]: ] [9884,9885]",
      "dest": "]: ] [3968,3969]"
    },
    {
      "src": "call_argument [57482,57494]",
      "dest": "call_argument [8333,8345]"
    },
    {
      "src": "comment: /**     * @notice Return the length of the array of past downtime     */ [69190,69262]",
      "dest": "comment: /**     * @notice Return the length of the array of past downtime     */ [10026,10098]"
    },
    {
      "src": "type_name [72543,72550]",
      "dest": "type_name [12420,12427]"
    },
    {
      "src": "\": \" [172,173]",
      "dest": "\": \" [179,180]"
    },
    {
      "src": "call_argument [38099,38105]",
      "dest": "call_argument [7836,7842]"
    },
    {
      "src": "identifier: _testTarget [71857,71868]",
      "dest": "identifier: _testTarget [12030,12041]"
    },
    {
      "src": "}: } [70301,70302]",
      "dest": "}: } [11303,11304]"
    },
    {
      "src": "primitive_type [11484,11491]",
      "dest": "primitive_type [6553,6560]"
    },
    {
      "src": "using_directive [4079,4106]",
      "dest": "using_directive [2164,2191]"
    },
    {
      "src": "comment: /**     * @notice Get the last period of the sub stake     * @param _subStake Sub stake structure     * @param _startPeriod Pre-calculated start period     */ [17530,17688]",
      "dest": "comment: // outdated [4848,4859]"
    },
    {
      "src": "uint16: uint16 [9938,9944]",
      "dest": "uint16: uint16 [4311,4317]"
    },
    {
      "src": "identifier: _maxAllowableLockedTokens [2411,2436]",
      "dest": "identifier: _maxAllowableLockedTokens [1345,1370]"
    },
    {
      "src": "(: ( [34237,34238]",
      "dest": "(: ( [7756,7757]"
    },
    {
      "src": "uint256: uint256 [57299,57306]",
      "dest": "uint256: uint256 [8215,8222]"
    },
    {
      "src": "primitive_type [72386,72393]",
      "dest": "primitive_type [12263,12270]"
    },
    {
      "src": ".: . [70118,70119]",
      "dest": ".: . [11000,11001]"
    },
    {
      "src": "function_body [57411,59295]",
      "dest": "function_body [8315,8787]"
    },
    {
      "src": "number_literal: 0 [72450,72451]",
      "dest": "number_literal: 0 [12327,12328]"
    },
    {
      "src": "(: ( [15617,15618]",
      "dest": "(: ( [5260,5261]"
    },
    {
      "src": "&&: && [2223,2225]",
      "dest": "&&: && [1330,1332]"
    },
    {
      "src": "struct_member [8666,8685]",
      "dest": "struct_member [3098,3117]"
    },
    {
      "src": "constructor_definition [13966,15766]",
      "dest": "constructor_definition [5087,5425]"
    },
    {
      "src": "identifier: reservedSlot3 [9723,9736]",
      "dest": "identifier: reservedSlot3 [3807,3820]"
    },
    {
      "src": "type_cast_expression [72560,72591]",
      "dest": "type_cast_expression [12437,12468]"
    },
    {
      "src": "member_expression [72427,72448]",
      "dest": "member_expression [12304,12325]"
    },
    {
      "src": "identifier: info [48317,48321]",
      "dest": "identifier: info [7609,7613]"
    },
    {
      "src": "is: is [3943,3945]",
      "dest": "is: is [2098,2100]"
    },
    {
      "src": "return_statement [70085,70144]",
      "dest": "return_statement [10967,11026]"
    },
    {
      "src": "expression_statement [15140,15177]",
      "dest": "expression_statement [5374,5389]"
    },
    {
      "src": "binary_expression [72184,72258]",
      "dest": "binary_expression [12061,12135]"
    },
    {
      "src": "return_statement [68369,68413]",
      "dest": "return_statement [9205,9249]"
    },
    {
      "src": "identifier: penalty [7213,7220]",
      "dest": "identifier: penalty [3007,3014]"
    },
    {
      "src": "=: = [69767,69768]",
      "dest": "=: = [10603,10604]"
    },
    {
      "src": "identifier: getStakersLength [72214,72230]",
      "dest": "identifier: getStakersLength [12091,12107]"
    },
    {
      "src": "uint16: uint16 [9344,9350]",
      "dest": "uint16: uint16 [3428,3434]"
    },
    {
      "src": "type_name [7252,7259]",
      "dest": "type_name [3046,3053]"
    },
    {
      "src": "event_definition [4393,4464]",
      "dest": "event_definition [2417,2472]"
    },
    {
      "src": "[: [ [10919,10920]",
      "dest": "[: [ [4426,4427]"
    },
    {
      "src": "type_name [1187,1193]",
      "dest": "type_name [655,661]"
    },
    {
      "src": "identifier: _staker [16237,16244]",
      "dest": "identifier: _staker [6002,6009]"
    },
    {
      "src": "user_defined_type [9809,9817]",
      "dest": "user_defined_type [3893,3901]"
    },
    {
      "src": "{: { [71829,71830]",
      "dest": "{: { [12002,12003]"
    },
    {
      "src": "type_name [10912,10919]",
      "dest": "type_name [4419,4426]"
    },
    {
      "src": "address: address [34230,34237]",
      "dest": "address: address [7749,7756]"
    },
    {
      "src": "=: = [70692,70693]",
      "dest": "=: = [11695,11696]"
    },
    {
      "src": "type_name [11165,11172]",
      "dest": "type_name [4646,4653]"
    },
    {
      "src": "identifier: selector [72440,72448]",
      "dest": "identifier: selector [12317,12325]"
    },
    {
      "src": "identifier: value [48322,48327]",
      "dest": "identifier: value [7614,7619]"
    },
    {
      "src": "type_alias [4085,4093]",
      "dest": "type_alias [2170,2178]"
    },
    {
      "src": "call_expression [59187,59229]",
      "dest": "call_expression [8728,8770]"
    },
    {
      "src": "identifier: Withdrawn [6212,6221]",
      "dest": "identifier: Withdrawn [2648,2657]"
    },
    {
      "src": "[: [ [70102,70103]",
      "dest": "[: [ [10984,10985]"
    },
    {
      "src": "{: { [57411,57412]",
      "dest": "{: { [8315,8316]"
    },
    {
      "src": "parameter [16269,16276]",
      "dest": "parameter [6034,6041]"
    },
    {
      "src": "parameter [70630,70654]",
      "dest": "parameter [11633,11657]"
    },
    {
      "src": "function_definition [68282,68419]",
      "dest": "function_definition [9118,9255]"
    },
    {
      "src": "call_argument [70745,70746]",
      "dest": "call_argument [11748,11749]"
    },
    {
      "src": "type_name [9876,9883]",
      "dest": "type_name [3960,3967]"
    },
    {
      "src": "returns: returns [68146,68153]",
      "dest": "returns: returns [8982,8989]"
    },
    {
      "src": "address: address [68310,68317]",
      "dest": "address: address [9146,9153]"
    },
    {
      "src": "type_name [11075,11082]",
      "dest": "type_name [4595,4602]"
    },
    {
      "src": "import_directive [188,211]",
      "dest": "import_directive [198,216]"
    },
    {
      "src": "returns: returns [870,877]",
      "dest": "returns: returns [344,351]"
    },
    {
      "src": "identifier: lastPeriod [68836,68846]",
      "dest": "identifier: lastPeriod [9672,9682]"
    },
    {
      "src": "view: view [69324,69328]",
      "dest": "view: view [10160,10164]"
    },
    {
      "src": "user_defined_type [14107,14124]",
      "dest": "user_defined_type [5138,5155]"
    },
    {
      "src": "function_body [68164,68202]",
      "dest": "function_body [9000,9038]"
    },
    {
      "src": ",: , [3952,3953]",
      "dest": ",: , [2112,2113]"
    },
    {
      "src": "): ) [72239,72240]",
      "dest": "): ) [12116,12117]"
    },
    {
      "src": "expression_statement [57654,57676]",
      "dest": "expression_statement [8482,8504]"
    },
    {
      "src": "state_variable_declaration [11165,11179]",
      "dest": "state_variable_declaration [4646,4660]"
    },
    {
      "src": "parameter [2899,2918]",
      "dest": "parameter [1655,1674]"
    },
    {
      "src": "identifier: delegateGetData [70694,70709]",
      "dest": "identifier: delegateGetData [11697,11712]"
    },
    {
      "src": "mapping: mapping [10942,10949]",
      "dest": "mapping: mapping [4449,4456]"
    },
    {
      "src": "+=: += [34273,34275]",
      "dest": "+=: += [7792,7794]"
    },
    {
      "src": "using: using [4079,4084]",
      "dest": "using: using [2164,2169]"
    },
    {
      "src": "identifier: currentCommittedPeriod [9276,9298]",
      "dest": "identifier: currentCommittedPeriod [3360,3382]"
    },
    {
      "src": "): ) [68357,68358]",
      "dest": "): ) [9193,9194]"
    },
    {
      "src": "function_definition [68104,68202]",
      "dest": "function_definition [8932,9038]"
    },
    {
      "src": "function_body [69731,69900]",
      "dest": "function_body [10567,10736]"
    },
    {
      "src": "import: import [73,79]",
      "dest": "import: import [73,79]"
    },
    {
      "src": "return: return [72308,72314]",
      "dest": "return: return [12185,12191]"
    },
    {
      "src": "primitive_type [9715,9722]",
      "dest": "primitive_type [3799,3806]"
    },
    {
      "src": "): ) [24024,24025]",
      "dest": "): ) [6968,6969]"
    },
    {
      "src": "expression_statement [69863,69894]",
      "dest": "expression_statement [10699,10730]"
    },
    {
      "src": "identifier: stub2 [11173,11178]",
      "dest": "identifier: stub2 [4654,4659]"
    },
    {
      "src": "type_cast_expression [3126,3140]",
      "dest": "type_cast_expression [1882,1896]"
    },
    {
      "src": "]: ] [16313,16314]",
      "dest": "]: ] [6078,6079]"
    },
    {
      "src": "{: { [57751,57752]",
      "dest": "{: { [8579,8580]"
    },
    {
      "src": "number_literal: 0 [15618,15619]",
      "dest": "number_literal: 0 [5261,5262]"
    },
    {
      "src": "struct_member [9876,9894]",
      "dest": "struct_member [3960,3978]"
    },
    {
      "src": "identifier: reservedSlot1 [9661,9674]",
      "dest": "identifier: reservedSlot1 [3745,3758]"
    },
    {
      "src": "variable_declaration_statement [57505,57551]",
      "dest": "variable_declaration_statement [8385,8431]"
    },
    {
      "src": "address: address [3068,3075]",
      "dest": "address: address [1824,1831]"
    },
    {
      "src": "==: == [48328,48330]",
      "dest": "==: == [7620,7622]"
    },
    {
      "src": "struct_declaration [8870,9901]",
      "dest": "struct_declaration [3302,3985]"
    },
    {
      "src": "uint256: uint256 [8898,8905]",
      "dest": "uint256: uint256 [3330,3337]"
    },
    {
      "src": ".: . [15546,15547]",
      "dest": ".: . [5196,5197]"
    },
    {
      "src": "identifier: reservedSlot2 [9692,9705]",
      "dest": "identifier: reservedSlot2 [3776,3789]"
    },
    {
      "src": "view: view [68141,68145]",
      "dest": "view: view [8969,8973]"
    },
    {
      "src": "identifier: result [70648,70654]",
      "dest": "identifier: result [11651,11657]"
    },
    {
      "src": ".: . [72439,72440]",
      "dest": ".: . [12316,12317]"
    },
    {
      "src": "): ) [11027,11028]",
      "dest": "): ) [4822,4823]"
    },
    {
      "src": "binary_expression [3068,3140]",
      "dest": "binary_expression [1824,1896]"
    },
    {
      "src": "expression_statement [72176,72260]",
      "dest": "expression_statement [12053,12137]"
    },
    {
      "src": "state_mutability [16255,16259]",
      "dest": "state_mutability [6020,6024]"
    },
    {
      "src": "identifier: _reward [59221,59228]",
      "dest": "identifier: _reward [8762,8769]"
    },
    {
      "src": "=: = [69113,69114]",
      "dest": "=: = [9949,9950]"
    },
    {
      "src": "expression_statement [2190,2443]",
      "dest": "expression_statement [1297,1377]"
    },
    {
      "src": "comment: // only to make verifyState from previous version work, temporary [11313,11378]",
      "dest": "comment: // outdated [4243,4254]"
    },
    {
      "src": "member_expression [24044,24054]",
      "dest": "member_expression [5741,5751]"
    },
    {
      "src": "{: { [33960,33961]",
      "dest": "{: { [7659,7660]"
    },
    {
      "src": "identifier: stakerInfo [69364,69374]",
      "dest": "identifier: stakerInfo [10200,10210]"
    },
    {
      "src": "call_expression [72402,72452]",
      "dest": "call_expression [12279,12329]"
    },
    {
      "src": "identifier: _testTarget [2907,2918]",
      "dest": "identifier: _testTarget [1663,1674]"
    },
    {
      "src": "comment: // former slot for lockReStakeUntilPeriod [9394,9435]",
      "dest": "comment: // former slot for lockReStakeUntilPeriod [3478,3519]"
    },
    {
      "src": "return_type_definition [870,893]",
      "dest": "return_type_definition [344,367]"
    },
    {
      "src": "identifier: _penalty [57741,57749]",
      "dest": "identifier: _penalty [8569,8577]"
    },
    {
      "src": "primitive_type [9475,9481]",
      "dest": "primitive_type [3559,3565]"
    },
    {
      "src": ".: . [72751,72752]",
      "dest": ".: . [12641,12642]"
    },
    {
      "src": "state_mutability [11470,11474]",
      "dest": "state_mutability [6539,6543]"
    },
    {
      "src": "parameter [16229,16244]",
      "dest": "parameter [5994,6009]"
    },
    {
      "src": "(: ( [69513,69514]",
      "dest": "(: ( [10349,10350]"
    },
    {
      "src": "identifier: delegateGetStakerInfo [72633,72654]",
      "dest": "identifier: delegateGetStakerInfo [12510,12531]"
    },
    {
      "src": "import_directive [165,187]",
      "dest": "import_directive [172,197]"
    },
    {
      "src": "identifier: _investigator [57333,57346]",
      "dest": "identifier: _investigator [8249,8262]"
    },
    {
      "src": "identifier: _target [70578,70585]",
      "dest": "identifier: _target [11581,11588]"
    },
    {
      "src": "uint256: uint256 [70067,70074]",
      "dest": "uint256: uint256 [10903,10910]"
    },
    {
      "src": "primitive_type [57274,57281]",
      "dest": "primitive_type [8190,8197]"
    },
    {
      "src": "call_argument [72568,72590]",
      "dest": "call_argument [12445,12467]"
    },
    {
      "src": "member_expression [3101,3120]",
      "dest": "member_expression [1857,1876]"
    },
    {
      "src": "primitive_type [69514,69521]",
      "dest": "primitive_type [10350,10357]"
    },
    {
      "src": "(: ( [70129,70130]",
      "dest": "(: ( [11011,11012]"
    },
    {
      "src": "contract_body [3969,75464]",
      "dest": "contract_body [2129,12681]"
    },
    {
      "src": "type_name [1332,1339]",
      "dest": "type_name [755,762]"
    },
    {
      "src": "comment: //------------------------Main methods------------------------ [23662,23724]",
      "dest": "comment: //------------------------Main methods------------------------ [6612,6674]"
    },
    {
      "src": "=: = [33666,33667]",
      "dest": "=: = [7535,7536]"
    },
    {
      "src": "{: { [69731,69732]",
      "dest": "{: { [10567,10568]"
    },
    {
      "src": "return: return [70085,70091]",
      "dest": "return: return [10967,10973]"
    },
    {
      "src": "uint16: uint16 [68829,68835]",
      "dest": "uint16: uint16 [9665,9671]"
    },
    {
      "src": "identifier: _penalty [57307,57315]",
      "dest": "identifier: _penalty [8223,8231]"
    },
    {
      "src": ",: , [57315,57316]",
      "dest": ",: , [8231,8232]"
    },
    {
      "src": "visibility [10543,10549]",
      "dest": "visibility [4267,4273]"
    },
    {
      "src": "external: external [68132,68140]",
      "dest": "external: external [8960,8968]"
    },
    {
      "src": "primitive_type [1387,1394]",
      "dest": "primitive_type [810,817]"
    },
    {
      "src": "identifier: Slashed [58959,58966]",
      "dest": "identifier: Slashed [8637,8644]"
    },
    {
      "src": "call_argument [33620,33631]",
      "dest": "call_argument [7440,7451]"
    },
    {
      "src": "(: ( [33898,33899]",
      "dest": "(: ( [7608,7609]"
    },
    {
      "src": "identifier: _index [68543,68549]",
      "dest": "identifier: _index [9379,9385]"
    },
    {
      "src": "storage: storage [33653,33660]",
      "dest": "storage: storage [7522,7529]"
    },
    {
      "src": "type_name [9542,9549]",
      "dest": "type_name [3626,3633]"
    },
    {
      "src": "type_name [6222,6229]",
      "dest": "type_name [2658,2665]"
    },
    {
      "src": "comment: /**     * @notice Signals that tokens were deposited     * @param staker Staker address     * @param value Amount deposited (in NuNits)     * @param periods Number of periods tokens will be locked     */ [4185,4388]",
      "dest": "comment: /**     * @notice Signals that tokens were deposited     * @param staker Staker address     * @param value Amount deposited (in NuNits)     */ [2270,2412]"
    },
    {
      "src": "comment: // TODO remove after upgrade #2579 [11383,11417]",
      "dest": "comment: // outdated [4295,4306]"
    },
    {
      "src": "identifier: startPeriod [8820,8831]",
      "dest": "identifier: startPeriod [3252,3263]"
    },
    {
      "src": "call_argument [24044,24075]",
      "dest": "call_argument [5741,5772]"
    },
    {
      "src": "primitive_type [9566,9573]",
      "dest": "primitive_type [3650,3657]"
    },
    {
      "src": "identifier: _token [1976,1982]",
      "dest": "identifier: _token [1188,1194]"
    },
    {
      "src": "function_definition [69973,70150]",
      "dest": "function_definition [10809,11060]"
    },
    {
      "src": "call_expression [15588,15641]",
      "dest": "call_expression [5231,5284]"
    },
    {
      "src": ",: , [68846,68847]",
      "dest": ",: , [9682,9683]"
    },
    {
      "src": "array_access [69769,69809]",
      "dest": "array_access [10605,10645]"
    },
    {
      "src": "identifier: reservedSlot5 [9785,9798]",
      "dest": "identifier: reservedSlot5 [3869,3882]"
    },
    {
      "src": "return: return [68369,68375]",
      "dest": "return: return [9205,9211]"
    },
    {
      "src": "function_definition [69488,69900]",
      "dest": "function_definition [10324,10736]"
    },
    {
      "src": ".: . [68405,68406]",
      "dest": ".: . [9241,9242]"
    },
    {
      "src": "uint256: uint256 [16269,16276]",
      "dest": "uint256: uint256 [6034,6041]"
    },
    {
      "src": "type_name [69999,70006]",
      "dest": "type_name [10835,10842]"
    },
    {
      "src": ",: , [72448,72449]",
      "dest": ",: , [12325,12326]"
    },
    {
      "src": "expression_statement [16058,16060]",
      "dest": "expression_statement [5620,5622]"
    },
    {
      "src": "binary_expression [2198,2258]",
      "dest": "binary_expression [1305,1375]"
    },
    {
      "src": "comment: //-------------Additional getters for stakers info------------- [67965,68028]",
      "dest": "comment: //-------------Additional getters for stakers info------------- [8793,8856]"
    },
    {
      "src": "identifier: StakerInfo [10877,10887]",
      "dest": "identifier: StakerInfo [4384,4394]"
    },
    {
      "src": "primitive_type [1286,1292]",
      "dest": "primitive_type [705,711]"
    },
    {
      "src": "call_argument [72402,72452]",
      "dest": "call_argument [12279,12329]"
    },
    {
      "src": "{: { [8803,8804]",
      "dest": "{: { [3235,3236]"
    },
    {
      "src": "primitive_type [68898,68905]",
      "dest": "primitive_type [9734,9741]"
    },
    {
      "src": "if: if [59156,59158]",
      "dest": "if: if [8697,8699]"
    },
    {
      "src": "primitive_type [8813,8819]",
      "dest": "primitive_type [3245,3251]"
    },
    {
      "src": "using_directive [4051,4074]",
      "dest": "using_directive [2136,2159]"
    },
    {
      "src": "call_argument [15596,15605]",
      "dest": "call_argument [5239,5248]"
    },
    {
      "src": "identifier: token [2453,2458]",
      "dest": "identifier: token [1387,1392]"
    },
    {
      "src": "binary_expression [57482,57494]",
      "dest": "binary_expression [8333,8345]"
    },
    {
      "src": "}: } [69183,69184]",
      "dest": "}: } [10019,10020]"
    },
    {
      "src": "address: address [72334,72341]",
      "dest": "address: address [12211,12218]"
    },
    {
      "src": "returns: returns [11475,11482]",
      "dest": "returns: returns [6544,6551]"
    },
    {
      "src": "function_body [71829,75085]",
      "dest": "function_body [12002,12678]"
    },
    {
      "src": "identifier: stakerInfo [70092,70102]",
      "dest": "identifier: stakerInfo [10974,10984]"
    },
    {
      "src": "public: public [70201,70207]",
      "dest": "public: public [11111,11117]"
    },
    {
      "src": "identifier: selector [72231,72239]",
      "dest": "identifier: selector [12108,12116]"
    },
    {
      "src": ".: . [48321,48322]",
      "dest": ".: . [7613,7614]"
    },
    {
      "src": "identifier: stakerInfo [33668,33678]",
      "dest": "identifier: stakerInfo [7537,7547]"
    },
    {
      "src": "primitive_type [8898,8905]",
      "dest": "primitive_type [3330,3337]"
    },
    {
      "src": "): ) [71803,71804]",
      "dest": "): ) [11976,11977]"
    },
    {
      "src": "function_definition [839,894]",
      "dest": "function_definition [313,368]"
    },
    {
      "src": "identifier: _testTarget [72414,72425]",
      "dest": "identifier: _testTarget [12291,12302]"
    },
    {
      "src": "number_literal: 0 [59170,59171]",
      "dest": "number_literal: 0 [8711,8712]"
    },
    {
      "src": "}: } [59294,59295]",
      "dest": "}: } [8786,8787]"
    },
    {
      "src": "solidity_version_comparison_operator [62,64]",
      "dest": "solidity_version_comparison_operator [62,64]"
    },
    {
      "src": "=: = [72506,72507]",
      "dest": "=: = [12383,12384]"
    },
    {
      "src": "pragma_directive [47,70]",
      "dest": "pragma_directive [47,70]"
    },
    {
      "src": "member_expression [72427,72439]",
      "dest": "member_expression [12304,12316]"
    },
    {
      "src": "public: public [11085,11091]",
      "dest": "public: public [4605,4611]"
    },
    {
      "src": "member_expression [70719,70734]",
      "dest": "member_expression [11722,11737]"
    },
    {
      "src": "true: true [70389,70393]",
      "dest": "true: true [11392,11396]"
    },
    {
      "src": "identifier: value [72719,72724]",
      "dest": "identifier: value [12609,12614]"
    },
    {
      "src": "member_expression [69161,69177]",
      "dest": "member_expression [9997,10013]"
    },
    {
      "src": "type_name [11020,11027]",
      "dest": "type_name [4815,4822]"
    },
    {
      "src": "storage: storage [72493,72500]",
      "dest": "storage: storage [12370,12377]"
    },
    {
      "src": "identifier: _workLock [15596,15605]",
      "dest": "identifier: _workLock [5239,5248]"
    },
    {
      "src": "expression_statement [57695,57718]",
      "dest": "expression_statement [8523,8546]"
    },
    {
      "src": "call_expression [33612,33632]",
      "dest": "call_expression [7432,7501]"
    },
    {
      "src": "comment: /**     * @notice Slash the staker's stake and reward the investigator     * @param _staker Staker's address     * @param _penalty Penalty     * @param _investigator Investigator     * @param _reward Reward for the investigator     */ [57005,57239]",
      "dest": "comment: /**     * @notice Slash the staker's stake and reward the investigator     * @param _staker Staker's address     * @param _penalty Penalty     * @param _investigator Investigator     * @param _reward Reward for the investigator     */ [7921,8155]"
    },
    {
      "src": "type_cast_expression [15610,15620]",
      "dest": "type_cast_expression [5253,5263]"
    },
    {
      "src": "type_name [68829,68835]",
      "dest": "type_name [9665,9671]"
    },
    {
      "src": ",: , [7220,7221]",
      "dest": ",: , [3014,3015]"
    },
    {
      "src": "identifier: endPeriod [69863,69872]",
      "dest": "identifier: endPeriod [10699,10708]"
    },
    {
      "src": "struct: struct [8870,8876]",
      "dest": "struct: struct [3302,3308]"
    },
    {
      "src": "struct: struct [8787,8793]",
      "dest": "struct: struct [3219,3225]"
    },
    {
      "src": "primitive_type [7181,7188]",
      "dest": "primitive_type [2975,2982]"
    },
    {
      "src": "\": \" [130,131]",
      "dest": "\": \" [137,138]"
    },
    {
      "src": "]: ] [57549,57550]",
      "dest": "]: ] [8429,8430]"
    },
    {
      "src": "}: } [72324,72325]",
      "dest": "}: } [12201,12202]"
    },
    {
      "src": "(: ( [33500,33501]",
      "dest": "(: ( [7297,7298]"
    },
    {
      "src": "comment: /**     * @notice Start or stop measuring the work of a staker     * @param _staker Staker     * @param _measureWork Value for `measureWork` parameter     * @return Work that was previously done     */ [23729,23930]",
      "dest": "comment: //            bool snapshots [6233,6261]"
    },
    {
      "src": "using: using [4051,4056]",
      "dest": "using: using [2136,2141]"
    },
    {
      "src": "type_name [68310,68317]",
      "dest": "type_name [9146,9153]"
    },
    {
      "src": "primitive_type [10951,10958]",
      "dest": "primitive_type [4458,4465]"
    },
    {
      "src": "address: address [16409,16416]",
      "dest": "address: address [6513,6520]"
    },
    {
      "src": "comment: /**     * @notice Get worker using staker's address     */ [22629,22687]",
      "dest": "comment: //    function getFlags(address _staker) [6158,6198]"
    },
    {
      "src": ",: , [72207,72208]",
      "dest": ",: , [12084,12085]"
    },
    {
      "src": "identifier: stakerInfo [72508,72518]",
      "dest": "identifier: stakerInfo [12385,12395]"
    },
    {
      "src": "primitive_type [68535,68542]",
      "dest": "primitive_type [9371,9378]"
    },
    {
      "src": "primitive_type [11215,11222]",
      "dest": "primitive_type [4698,4705]"
    },
    {
      "src": "visibility [1340,1346]",
      "dest": "visibility [763,769]"
    },
    {
      "src": "type_name [10693,10715]",
      "dest": "type_name [4114,4127]"
    },
    {
      "src": "primitive_type [68860,68866]",
      "dest": "primitive_type [9696,9702]"
    },
    {
      "src": "identifier: WorkLockInterface [14107,14124]",
      "dest": "identifier: WorkLockInterface [5138,5155]"
    },
    {
      "src": "member_expression [15588,15639]",
      "dest": "member_expression [5231,5282]"
    },
    {
      "src": "=: = [72631,72632]",
      "dest": "=: = [12508,12509]"
    },
    {
      "src": "identifier: unlockingDuration [69120,69137]",
      "dest": "identifier: unlockingDuration [9956,9973]"
    },
    {
      "src": "string [149,163]",
      "dest": "string [156,170]"
    },
    {
      "src": "uint256: uint256 [6246,6253]",
      "dest": "uint256: uint256 [2682,2689]"
    },
    {
      "src": "): ) [2178,2179]",
      "dest": "): ) [1285,1286]"
    },
    {
      "src": "==: == [3123,3125]",
      "dest": "==: == [1879,1881]"
    },
    {
      "src": "using_directive [4145,4179]",
      "dest": "using_directive [2230,2264]"
    },
    {
      "src": "member_expression [71839,71856]",
      "dest": "member_expression [12012,12029]"
    },
    {
      "src": "): ) [59008,59009]",
      "dest": "): ) [8686,8687]"
    },
    {
      "src": "identifier: delegateGet [72184,72195]",
      "dest": "identifier: delegateGet [12061,12072]"
    },
    {
      "src": "override: override [70349,70357]",
      "dest": "override: override [11351,11359]"
    },
    {
      "src": "binary_expression [72693,72805]",
      "dest": "binary_expression [12583,12661]"
    },
    {
      "src": "): ) [72674,72675]",
      "dest": "): ) [12551,12552]"
    },
    {
      "src": "constructor: constructor [1941,1952]",
      "dest": "constructor: constructor [1153,1164]"
    },
    {
      "src": "call_argument [72655,72666]",
      "dest": "call_argument [12532,12543]"
    },
    {
      "src": "identifier: SubStakeInfo [8643,8655]",
      "dest": "identifier: SubStakeInfo [3075,3087]"
    },
    {
      "src": ",: , [33532,33533]",
      "dest": ",: , [7346,7347]"
    },
    {
      "src": ".: . [69035,69036]",
      "dest": ".: . [9871,9872]"
    },
    {
      "src": "expression_statement [69057,69086]",
      "dest": "expression_statement [9893,9922]"
    },
    {
      "src": "primitive_type [7205,7212]",
      "dest": "primitive_type [2999,3006]"
    },
    {
      "src": "event_paramater [7222,7250]",
      "dest": "event_paramater [3016,3044]"
    },
    {
      "src": "override: override [70213,70221]",
      "dest": "override: override [11123,11131]"
    },
    {
      "src": ".: . [57669,57670]",
      "dest": ".: . [8497,8498]"
    },
    {
      "src": "uint256: uint256 [4433,4440]",
      "dest": "uint256: uint256 [2457,2464]"
    },
    {
      "src": "call_expression [2190,2442]",
      "dest": "call_expression [1297,1376]"
    },
    {
      "src": ",: , [4431,4432]",
      "dest": ",: , [2455,2456]"
    },
    {
      "src": "): ) [68926,68927]",
      "dest": "): ) [9762,9763]"
    },
    {
      "src": "type_name [69709,69715]",
      "dest": "type_name [10545,10551]"
    },
    {
      "src": "identifier: maxAllowableLockedTokens [1412,1436]",
      "dest": "identifier: maxAllowableLockedTokens [835,859]"
    },
    {
      "src": "comment: /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState` [2782,2873]",
      "dest": "comment: /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState` [1538,1629]"
    },
    {
      "src": "state_mutability [865,869]",
      "dest": "state_mutability [339,343]"
    },
    {
      "src": "=: = [69831,69832]",
      "dest": "=: = [10667,10668]"
    },
    {
      "src": "(: ( [57730,57731]",
      "dest": "(: ( [8558,8559]"
    },
    {
      "src": "type_name [1962,1975]",
      "dest": "type_name [1174,1187]"
    },
    {
      "src": "(: ( [2898,2899]",
      "dest": "(: ( [1654,1655]"
    },
    {
      "src": "identifier: getValueAt [70119,70129]",
      "dest": "identifier: getValueAt [11001,11011]"
    },
    {
      "src": "uint256: uint256 [70179,70186]",
      "dest": "uint256: uint256 [11089,11096]"
    },
    {
      "src": "function_body [70660,70831]",
      "dest": "function_body [11663,11834]"
    },
    {
      "src": "identifier: NuCypherToken [4165,4178]",
      "dest": "identifier: NuCypherToken [2250,2263]"
    },
    {
      "src": "identifier: msg [24044,24047]",
      "dest": "identifier: msg [5741,5744]"
    },
    {
      "src": ".: . [69841,69842]",
      "dest": ".: . [10677,10678]"
    },
    {
      "src": "import: import [123,129]",
      "dest": "import: import [130,136]"
    },
    {
      "src": "comment: /**     * @notice Adds a new snapshot to both the staker and global balance histories,     * assuming the staker's balance was already changed     * @param _info Reference to affected staker's struct     * @param _addition Variance in balance. It can be positive or negative.     */ [29727,30009]",
      "dest": "comment: //    } [6407,6414]"
    },
    {
      "src": "{: { [70660,70661]",
      "dest": "{: { [11663,11664]"
    },
    {
      "src": "}: } [9900,9901]",
      "dest": "}: } [3984,3985]"
    },
    {
      "src": "uint256: uint256 [9777,9784]",
      "dest": "uint256: uint256 [3861,3868]"
    },
    {
      "src": "identifier: _owner [70103,70109]",
      "dest": "identifier: _owner [10985,10991]"
    },
    {
      "src": "parameter [57299,57315]",
      "dest": "parameter [8215,8231]"
    },
    {
      "src": "call_argument [72386,72471]",
      "dest": "call_argument [12263,12348]"
    },
    {
      "src": "binary_expression [15588,15633]",
      "dest": "binary_expression [5231,5276]"
    },
    {
      "src": "identifier: stakerInfo [57531,57541]",
      "dest": "identifier: stakerInfo [8411,8421]"
    },
    {
      "src": "array_access [68376,68395]",
      "dest": "array_access [9212,9231]"
    },
    {
      "src": "uint128: uint128 [9876,9883]",
      "dest": "uint128: uint128 [3960,3967]"
    },
    {
      "src": "state_mutability [69324,69328]",
      "dest": "state_mutability [10160,10164]"
    },
    {
      "src": "bool: bool [70367,70371]",
      "dest": "bool: bool [11369,11373]"
    },
    {
      "src": "): ) [33591,33592]",
      "dest": "): ) [7386,7387]"
    },
    {
      "src": "parameter [68535,68549]",
      "dest": "parameter [9371,9385]"
    },
    {
      "src": "member_expression [3101,3111]",
      "dest": "member_expression [1857,1867]"
    },
    {
      "src": "expression_statement [59187,59230]",
      "dest": "expression_statement [8728,8771]"
    },
    {
      "src": "identifier: _staker [69306,69313]",
      "dest": "identifier: _staker [10142,10149]"
    },
    {
      "src": ",: , [3099,3100]",
      "dest": ",: , [1855,1856]"
    },
    {
      "src": "type_name [33501,33508]",
      "dest": "type_name [7307,7314]"
    },
    {
      "src": "[: [ [57541,57542]",
      "dest": "[: [ [8421,8422]"
    },
    {
      "src": "returns: returns [70222,70229]",
      "dest": "returns: returns [11132,11139]"
    },
    {
      "src": "yul_identifier [70802,70815]",
      "dest": "yul_identifier [11805,11818]"
    },
    {
      "src": "visibility [16246,16254]",
      "dest": "visibility [6011,6019]"
    },
    {
      "src": "state_variable_declaration [11001,11035]",
      "dest": "state_variable_declaration [4796,4847]"
    },
    {
      "src": "uint16: uint16 [9380,9386]",
      "dest": "uint16: uint16 [3464,3470]"
    },
    {
      "src": "member_expression [72714,72724]",
      "dest": "member_expression [12604,12614]"
    },
    {
      "src": "inheritance_specifier [3946,3952]",
      "dest": "inheritance_specifier [2101,2112]"
    },
    {
      "src": "(: ( [68783,68784]",
      "dest": "(: ( [9619,9620]"
    },
    {
      "src": "{: { [70239,70240]",
      "dest": "{: { [11150,11151]"
    },
    {
      "src": "primitive_type [34230,34237]",
      "dest": "primitive_type [7749,7756]"
    },
    {
      "src": "identifier: require [24036,24043]",
      "dest": "identifier: require [5733,5740]"
    },
    {
      "src": "identifier: stakerAddress [72458,72471]",
      "dest": "identifier: stakerAddress [12335,12348]"
    },
    {
      "src": "[: [ [68999,69000]",
      "dest": "[: [ [9835,9836]"
    },
    {
      "src": "state_variable_declaration [11075,11107]",
      "dest": "state_variable_declaration [4595,4627]"
    },
    {
      "src": "member_expression [72693,72710]",
      "dest": "member_expression [12583,12600]"
    },
    {
      "src": "primitive_type [10912,10919]",
      "dest": "primitive_type [4419,4426]"
    },
    {
      "src": "visibility [70335,70343]",
      "dest": "visibility [11337,11345]"
    },
    {
      "src": "identifier: _token [2198,2204]",
      "dest": "identifier: _token [1305,1311]"
    },
    {
      "src": "binary_expression [72693,72724]",
      "dest": "binary_expression [12583,12614]"
    },
    {
      "src": "type_name [68860,68866]",
      "dest": "type_name [9696,9702]"
    },
    {
      "src": "member_expression [69833,69853]",
      "dest": "member_expression [10669,10689]"
    },
    {
      "src": "==: == [15607,15609]",
      "dest": "==: == [5250,5252]"
    },
    {
      "src": "}: } [68201,68202]",
      "dest": "}: } [9037,9038]"
    },
    {
      "src": "comment: // former slot for lockedPerPeriod [11036,11070]",
      "dest": "comment: // former slot for lockedPerPeriod [4556,4590]"
    },
    {
      "src": "identifier: getSubStakeInfo [68502,68517]",
      "dest": "identifier: getSubStakeInfo [9338,9353]"
    },
    {
      "src": "uint256: uint256 [57356,57363]",
      "dest": "uint256: uint256 [8272,8279]"
    },
    {
      "src": "identifier: verifyState [71845,71856]",
      "dest": "identifier: verifyState [12018,12029]"
    },
    {
      "src": "view: view [11470,11474]",
      "dest": "view: view [6539,6543]"
    },
    {
      "src": "identifier: pastDowntime [69384,69396]",
      "dest": "identifier: pastDowntime [10220,10232]"
    },
    {
      "src": "state_mutability [68762,68766]",
      "dest": "state_mutability [9598,9602]"
    },
    {
      "src": "struct_member [9308,9335]",
      "dest": "struct_member [3392,3419]"
    },
    {
      "src": "identifier: delegateGet [72402,72413]",
      "dest": "identifier: delegateGet [12279,12290]"
    },
    {
      "src": "}: } [8863,8864]",
      "dest": "}: } [3295,3296]"
    },
    {
      "src": "type_name [4409,4416]",
      "dest": "type_name [2433,2440]"
    },
    {
      "src": "primitive_type [33566,33572]",
      "dest": "primitive_type [7356,7362]"
    },
    {
      "src": "block_statement [57640,57686]",
      "dest": "block_statement [8468,8514]"
    },
    {
      "src": "function_definition [70308,70400]",
      "dest": "function_definition [11310,11403]"
    },
    {
      "src": "import_directive [123,141]",
      "dest": "import_directive [130,148]"
    },
    {
      "src": "visibility [10497,10503]",
      "dest": "visibility [4318,4324]"
    },
    {
      "src": "identifier: require [15357,15364]",
      "dest": "identifier: require [5182,5189]"
    },
    {
      "src": "identifier: stakers [72358,72365]",
      "dest": "identifier: stakers [12235,12242]"
    },
    {
      "src": "call_argument [58976,58984]",
      "dest": "call_argument [8654,8662]"
    },
    {
      "src": "expression_statement [27101,27174]",
      "dest": "expression_statement [7714,7772]"
    },
    {
      "src": "(: ( [70281,70282]",
      "dest": "(: ( [11237,11238]"
    },
    {
      "src": "identifier: info [69070,69074]",
      "dest": "identifier: info [9906,9910]"
    },
    {
      "src": "expression_statement [15739,15760]",
      "dest": "expression_statement [5398,5419]"
    },
    {
      "src": "parameter [879,892]",
      "dest": "parameter [353,366]"
    },
    {
      "src": "type_name [16229,16236]",
      "dest": "type_name [5994,6001]"
    },
    {
      "src": "}: } [15765,15766]",
      "dest": "}: } [5424,5425]"
    },
    {
      "src": "(: ( [853,854]",
      "dest": "(: ( [327,328]"
    },
    {
      "src": "event_paramater [6222,6244]",
      "dest": "event_paramater [2658,2680]"
    },
    {
      "src": "type_name [10807,10824]",
      "dest": "type_name [4156,4173]"
    },
    {
      "src": "): ) [2918,2919]",
      "dest": "): ) [1674,1675]"
    },
    {
      "src": "(: ( [69337,69338]",
      "dest": "(: ( [10173,10174]"
    },
    {
      "src": "identifier: info [68963,68967]",
      "dest": "identifier: info [9799,9803]"
    },
    {
      "src": "(: ( [15587,15588]",
      "dest": "(: ( [5230,5231]"
    },
    {
      "src": "identifier: SubStakeInfo [9842,9854]",
      "dest": "identifier: SubStakeInfo [3926,3938]"
    },
    {
      "src": "(: ( [72567,72568]",
      "dest": "(: ( [12444,12445]"
    },
    {
      "src": "expression_statement [69147,69178]",
      "dest": "expression_statement [9983,10014]"
    },
    {
      "src": "state_variable_declaration [1187,1235]",
      "dest": "state_variable_declaration [655,700]"
    },
    {
      "src": "member_expression [69031,69047]",
      "dest": "member_expression [9867,9883]"
    },
    {
      "src": "external: external [23999,24007]",
      "dest": "external: external [6930,6938]"
    },
    {
      "src": ",: , [2021,2022]",
      "dest": ",: , [1237,1238]"
    },
    {
      "src": "call_expression [70092,70143]",
      "dest": "call_expression [10974,11025]"
    },
    {
      "src": "identifier: unlockingDuration [68867,68884]",
      "dest": "identifier: unlockingDuration [9703,9720]"
    },
    {
      "src": "identifier: value [16315,16320]",
      "dest": "identifier: value [6080,6085]"
    },
    {
      "src": "}: } [2775,2776]",
      "dest": "}: } [1531,1532]"
    },
    {
      "src": "view: view [68762,68766]",
      "dest": "view: view [9598,9602]"
    },
    {
      "src": "identifier: memoryAddress [70678,70691]",
      "dest": "identifier: memoryAddress [11681,11694]"
    },
    {
      "src": "): ) [72589,72590]",
      "dest": "): ) [12466,12467]"
    },
    {
      "src": "identifier: safeTransferFrom [34205,34221]",
      "dest": "identifier: safeTransferFrom [7720,7736]"
    },
    {
      "src": "identifier: _token [2461,2467]",
      "dest": "identifier: _token [1395,1401]"
    },
    {
      "src": "(: ( [7180,7181]",
      "dest": "(: ( [2974,2975]"
    },
    {
      "src": "{: { [3969,3970]",
      "dest": "{: { [2129,2130]"
    },
    {
      "src": "primitive_type [3068,3075]",
      "dest": "primitive_type [1824,1831]"
    },
    {
      "src": "identifier: totalStakedForAt [69982,69998]",
      "dest": "identifier: totalStakedForAt [10818,10834]"
    },
    {
      "src": "identifier: super [2954,2959]",
      "dest": "identifier: super [1710,1715]"
    },
    {
      "src": "state_mutability [70344,70348]",
      "dest": "state_mutability [11346,11350]"
    },
    {
      "src": "binary_expression [15588,15620]",
      "dest": "binary_expression [5231,5263]"
    },
    {
      "src": "): ) [72292,72293]",
      "dest": "): ) [12169,12170]"
    },
    {
      "src": "): ) [15652,15653]",
      "dest": "): ) [5362,5363]"
    },
    {
      "src": "expression_statement [69095,69138]",
      "dest": "expression_statement [9931,9974]"
    },
    {
      "src": "primitive_type [68155,68162]",
      "dest": "primitive_type [8991,8998]"
    },
    {
      "src": "identifier: lastCommittedPeriod [33934,33953]",
      "dest": "identifier: lastCommittedPeriod [7633,7652]"
    },
    {
      "src": "primitive_type [23980,23984]",
      "dest": "primitive_type [6903,6907]"
    },
    {
      "src": "for: for [4126,4129]",
      "dest": "for: for [2211,2214]"
    },
    {
      "src": "comment: // period when worker was bonded [9501,9533]",
      "dest": "comment: // period when worker was bonded [3585,3617]"
    },
    {
      "src": "primitive_type [7252,7259]",
      "dest": "primitive_type [3046,3053]"
    },
    {
      "src": "type_alias [4151,4160]",
      "dest": "type_alias [2236,2245]"
    },
    {
      "src": "): ) [33631,33632]",
      "dest": "): ) [7500,7501]"
    },
    {
      "src": "identifier: getPastDowntimeLength [69276,69297]",
      "dest": "identifier: getPastDowntimeLength [10112,10133]"
    },
    {
      "src": "external: external [47527,47535]",
      "dest": "external: external [7396,7404]"
    },
    {
      "src": "): ) [2441,2442]",
      "dest": "): ) [1375,1376]"
    },
    {
      "src": "identifier: _penalty [57775,57783]",
      "dest": "identifier: _penalty [8603,8611]"
    },
    {
      "src": "array_access [16295,16314]",
      "dest": "array_access [6060,6079]"
    },
    {
      "src": "variable_declaration_statement [72543,72592]",
      "dest": "variable_declaration_statement [12420,12469]"
    },
    {
      "src": "identifier: NuCypherToken [13987,14000]",
      "dest": "identifier: NuCypherToken [5108,5121]"
    },
    {
      "src": "member_expression [72209,72239]",
      "dest": "member_expression [12086,12116]"
    },
    {
      "src": "type_name [10857,10888]",
      "dest": "type_name [4364,4395]"
    },
    {
      "src": "identifier: this [34238,34242]",
      "dest": "identifier: this [7757,7761]"
    },
    {
      "src": "member_expression [33899,33953]",
      "dest": "member_expression [7609,7652]"
    },
    {
      "src": "type_name [68350,68357]",
      "dest": "type_name [9186,9193]"
    },
    {
      "src": "parameter [57274,57289]",
      "dest": "parameter [8190,8205]"
    },
    {
      "src": "struct_declaration [8636,8781]",
      "dest": "struct_declaration [3068,3213]"
    },
    {
      "src": "primitive_type [9542,9549]",
      "dest": "primitive_type [3626,3633]"
    },
    {
      "src": "member_expression [34262,34272]",
      "dest": "member_expression [7781,7791]"
    },
    {
      "src": "public: public [1395,1401]",
      "dest": "public: public [818,824]"
    },
    {
      "src": "import_directive [73,101]",
      "dest": "import_directive [73,101]"
    },
    {
      "src": "visibility [856,864]",
      "dest": "visibility [330,338]"
    },
    {
      "src": "return_statement [72308,72315]",
      "dest": "return_statement [12185,12192]"
    },
    {
      "src": "==: == [72241,72243]",
      "dest": "==: == [12118,12120]"
    },
    {
      "src": "comment: /**     * @notice Return the information about sub stake     */ [68425,68488]",
      "dest": "comment: /**     * @notice Return the information about sub stake     */ [9261,9324]"
    },
    {
      "src": ".: . [72704,72705]",
      "dest": ".: . [12594,12595]"
    },
    {
      "src": "state_variable_declaration [10857,10907]",
      "dest": "state_variable_declaration [4364,4414]"
    },
    {
      "src": "expression_statement [57474,57496]",
      "dest": "expression_statement [8325,8376]"
    },
    {
      "src": "binary_expression [57616,57638]",
      "dest": "binary_expression [8444,8466]"
    },
    {
      "src": "(: ( [15639,15640]",
      "dest": "(: ( [5282,5283]"
    },
    {
      "src": "type_name [69298,69305]",
      "dest": "type_name [10134,10141]"
    },
    {
      "src": "identifier: require [2190,2197]",
      "dest": "identifier: require [1297,1304]"
    },
    {
      "src": "assignment_expression [69147,69177]",
      "dest": "assignment_expression [9983,10013]"
    },
    {
      "src": ".: . [69119,69120]",
      "dest": ".: . [9955,9956]"
    },
    {
      "src": "member_expression [59187,59205]",
      "dest": "member_expression [8728,8746]"
    },
    {
      "src": "external: external [68753,68761]",
      "dest": "external: external [9589,9597]"
    },
    {
      "src": "comment: // former slot for PolicyManager [11128,11160]",
      "dest": "comment: // former slot for PolicyManager [4661,4693]"
    },
    {
      "src": "struct_member [9344,9371]",
      "dest": "struct_member [3428,3455]"
    },
    {
      "src": "type_name [11484,11491]",
      "dest": "type_name [6553,6560]"
    },
    {
      "src": "}: } [69899,69900]",
      "dest": "}: } [10735,10736]"
    },
    {
      "src": "interface: interface [805,814]",
      "dest": "interface: interface [279,288]"
    },
    {
      "src": "identifier: _minLockedPeriods [15159,15176]",
      "dest": "identifier: _token [5382,5388]"
    },
    {
      "src": "{: { [70075,70076]",
      "dest": "{: { [10912,10913]"
    },
    {
      "src": "binary_expression [33899,33958]",
      "dest": "binary_expression [7609,7657]"
    },
    {
      "src": "address: address [24058,24065]",
      "dest": "address: address [5755,5762]"
    },
    {
      "src": "uint16: uint16 [9269,9275]",
      "dest": "uint16: uint16 [3353,3359]"
    },
    {
      "src": "identifier: value [4441,4446]",
      "dest": "identifier: value [2465,2470]"
    },
    {
      "src": "member_expression [72244,72258]",
      "dest": "member_expression [12121,12135]"
    },
    {
      "src": ",: , [70585,70586]",
      "dest": ",: , [11588,11589]"
    },
    {
      "src": "call_expression [71839,71869]",
      "dest": "call_expression [12012,12042]"
    },
    {
      "src": "identifier: Deposited [4399,4408]",
      "dest": "identifier: Deposited [2423,2432]"
    },
    {
      "src": ",: , [58999,59000]",
      "dest": ",: , [8677,8678]"
    },
    {
      "src": "{: { [69347,69348]",
      "dest": "{: { [10183,10184]"
    },
    {
      "src": "primitive_type [69338,69345]",
      "dest": "primitive_type [10174,10181]"
    },
    {
      "src": "user_defined_type [1145,1158]",
      "dest": "user_defined_type [582,595]"
    },
    {
      "src": "primitive_type [57325,57332]",
      "dest": "primitive_type [8241,8248]"
    },
    {
      "src": "==: == [72455,72457]",
      "dest": "==: == [12332,12334]"
    },
    {
      "src": "parameter [70367,70371]",
      "dest": "parameter [11369,11373]"
    },
    {
      "src": "binary_expression [48317,48352]",
      "dest": "binary_expression [7609,7632]"
    },
    {
      "src": "identifier: stakers [33974,33981]",
      "dest": "identifier: stakers [7673,7680]"
    },
    {
      "src": "type_name [57299,57306]",
      "dest": "type_name [8215,8222]"
    },
    {
      "src": "returns: returns [24008,24015]",
      "dest": "returns: returns [6952,6959]"
    },
    {
      "src": "): ) [11461,11462]",
      "dest": "): ) [6528,6529]"
    },
    {
      "src": "=: = [57773,57774]",
      "dest": "=: = [8601,8602]"
    },
    {
      "src": "visibility [1159,1165]",
      "dest": "visibility [596,602]"
    },
    {
      "src": "identifier: _staker [57542,57549]",
      "dest": "identifier: _staker [8422,8429]"
    },
    {
      "src": "address: address [69514,69521]",
      "dest": "address: address [10350,10357]"
    },
    {
      "src": "external: external [69315,69323]",
      "dest": "external: external [10151,10159]"
    },
    {
      "src": ".: . [72280,72281]",
      "dest": ".: . [12157,12158]"
    },
    {
      "src": "pure: pure [70344,70348]",
      "dest": "pure: pure [11346,11350]"
    },
    {
      "src": "identifier: startPeriod [69842,69853]",
      "dest": "identifier: startPeriod [10678,10689]"
    },
    {
      "src": "primitive_type [11075,11082]",
      "dest": "primitive_type [4595,4602]"
    },
    {
      "src": "address: address [15610,15617]",
      "dest": "address: address [5253,5260]"
    },
    {
      "src": "): ) [59171,59172]",
      "dest": "): ) [8712,8713]"
    },
    {
      "src": "return_type_definition [68146,68163]",
      "dest": "return_type_definition [8982,8999]"
    },
    {
      "src": "type_name [11282,11289]",
      "dest": "type_name [4540,4547]"
    },
    {
      "src": "identifier: length [68406,68412]",
      "dest": "identifier: length [9242,9248]"
    },
    {
      "src": "type_name [10912,10921]",
      "dest": "type_name [4419,4428]"
    },
    {
      "src": "type_name [33642,33652]",
      "dest": "type_name [7511,7521]"
    },
    {
      "src": "identifier: _value [34245,34251]",
      "dest": "identifier: _value [7764,7770]"
    },
    {
      "src": "identifier: info [57616,57620]",
      "dest": "identifier: info [8444,8448]"
    },
    {
      "src": "identifier: _staker [70595,70602]",
      "dest": "identifier: _staker [11598,11605]"
    },
    {
      "src": "array_access [69769,69788]",
      "dest": "array_access [10605,10624]"
    },
    {
      "src": ".: . [15633,15634]",
      "dest": ".: . [5276,5277]"
    },
    {
      "src": "): ) [24074,24075]",
      "dest": "): ) [5771,5772]"
    },
    {
      "src": "{: { [57640,57641]",
      "dest": "{: { [8468,8469]"
    },
    {
      "src": "identifier: lockedValue [8763,8774]",
      "dest": "identifier: lockedValue [3195,3206]"
    },
    {
      "src": "primitive_type [15610,15617]",
      "dest": "primitive_type [5253,5260]"
    },
    {
      "src": "identifier: Downtime [8794,8802]",
      "dest": "identifier: Downtime [3226,3234]"
    },
    {
      "src": "function_body [68932,69184]",
      "dest": "function_body [9768,10020]"
    },
    {
      "src": "member_expression [33974,33986]",
      "dest": "member_expression [7673,7685]"
    },
    {
      "src": "identifier: stakers [68181,68188]",
      "dest": "identifier: stakers [9017,9024]"
    },
    {
      "src": "assignment_expression [2655,2707]",
      "dest": "assignment_expression [1411,1463]"
    },
    {
      "src": "identifier: _penalty [57654,57662]",
      "dest": "identifier: _penalty [8482,8490]"
    },
    {
      "src": "type_name [2899,2906]",
      "dest": "type_name [1655,1662]"
    },
    {
      "src": "primitive_type [11282,11289]",
      "dest": "primitive_type [4540,4547]"
    },
    {
      "src": "identifier: downtime [69758,69766]",
      "dest": "identifier: downtime [10594,10602]"
    },
    {
      "src": "identifier: _minAllowableLockedTokens [2682,2707]",
      "dest": "identifier: _minAllowableLockedTokens [1438,1463]"
    },
    {
      "src": "uint16: uint16 [8721,8727]",
      "dest": "uint16: uint16 [3153,3159]"
    },
    {
      "src": "comment: /**     * @notice Implementation of the receiveApproval(address,uint256,address,bytes) method     * (see NuCypherToken contract). Deposit all tokens that were approved to transfer     * @param _from Staker     * @param _value Amount of tokens to deposit     * @param _tokenContract Token contract address     * @notice (param _extraData) Amount of periods during which tokens will be unlocked when wind down is enabled     */ [30379,30804]",
      "dest": "comment: /**     * @notice Stub for WorkLock     * @param _staker Staker     * @param _measureWork Value for `measureWork` parameter     * @return Work that was previously done     */ [6679,6853]"
    },
    {
      "src": "uint16: uint16 [9475,9481]",
      "dest": "uint16: uint16 [3559,3565]"
    },
    {
      "src": "identifier: require [3060,3067]",
      "dest": "identifier: require [1816,1823]"
    },
    {
      "src": "visibility [69315,69323]",
      "dest": "visibility [10151,10159]"
    },
    {
      "src": "binary_expression [72386,72471]",
      "dest": "binary_expression [12263,12348]"
    },
    {
      "src": "identifier: stakerInfo [70724,70734]",
      "dest": "identifier: stakerInfo [11727,11737]"
    },
    {
      "src": "comment: // uint256 to acquire whole slot and minimize operations on it [9581,9643]",
      "dest": "comment: // uint256 to acquire whole slot and minimize operations on it [3665,3727]"
    },
    {
      "src": "uint256: uint256 [2140,2147]",
      "dest": "uint256: uint256 [1247,1254]"
    },
    {
      "src": "type_name [8898,8905]",
      "dest": "type_name [3330,3337]"
    },
    {
      "src": "): ) [38138,38139]",
      "dest": "): ) [7842,7843]"
    },
    {
      "src": "identifier: info [33661,33665]",
      "dest": "identifier: info [7530,7534]"
    },
    {
      "src": "public: public [1159,1165]",
      "dest": "public: public [596,602]"
    },
    {
      "src": "parameter [70231,70238]",
      "dest": "parameter [11141,11148]"
    },
    {
      "src": "[: [ [72365,72366]",
      "dest": "[: [ [12242,12243]"
    },
    {
      "src": "{: { [2180,2181]",
      "dest": "{: { [1287,1288]"
    },
    {
      "src": "{: { [2944,2945]",
      "dest": "{: { [1700,1701]"
    },
    {
      "src": "uint256: uint256 [9566,9573]",
      "dest": "uint256: uint256 [3650,3657]"
    },
    {
      "src": "for: for [4094,4097]",
      "dest": "for: for [2179,2182]"
    },
    {
      "src": "binary_expression [59160,59171]",
      "dest": "binary_expression [8701,8712]"
    },
    {
      "src": "user_defined_type [3946,3952]",
      "dest": "user_defined_type [2101,2112]"
    },
    {
      "src": "}: } [16326,16327]",
      "dest": "}: } [6091,6092]"
    },
    {
      "src": "parameter [70179,70199]",
      "dest": "parameter [11089,11109]"
    },
    {
      "src": "identifier: _testTarget [3088,3099]",
      "dest": "identifier: _testTarget [1844,1855]"
    },
    {
      "src": "return: return [68174,68180]",
      "dest": "return: return [9010,9016]"
    },
    {
      "src": "call_expression [33974,33995]",
      "dest": "call_expression [7673,7694]"
    },
    {
      "src": "address: address [11113,11120]",
      "dest": "address: address [4748,4755]"
    },
    {
      "src": "primitive_type [2097,2104]",
      "dest": "primitive_type [1204,1211]"
    },
    {
      "src": "}: } [70399,70400]",
      "dest": "}: } [11402,11403]"
    },
    {
      "src": "{: { [14955,14956]",
      "dest": "{: { [5172,5173]"
    },
    {
      "src": "indexed: indexed [7189,7196]",
      "dest": "indexed: indexed [2983,2990]"
    },
    {
      "src": "identifier: completedWork [9452,9465]",
      "dest": "identifier: completedWork [3536,3549]"
    },
    {
      "src": "uint16: uint16 [68860,68866]",
      "dest": "uint16: uint16 [9696,9702]"
    },
    {
      "src": "): ) [68162,68163]",
      "dest": "): ) [8998,8999]"
    },
    {
      "src": "): ) [70074,70075]",
      "dest": "): ) [10910,10911]"
    },
    {
      "src": "primitive_type [72334,72341]",
      "dest": "primitive_type [12211,12218]"
    },
    {
      "src": "variable_declaration [57505,57528]",
      "dest": "variable_declaration [8385,8408]"
    },
    {
      "src": "comment: /**     * @notice Get work that completed by the staker     */ [22826,22888]",
      "dest": "comment: /**     * @notice Get work that completed by the staker     */ [6420,6482]"
    },
    {
      "src": "identifier: _reward [59160,59167]",
      "dest": "identifier: _reward [8701,8708]"
    },
    {
      "src": "type_cast_expression [34230,34243]",
      "dest": "type_cast_expression [7749,7762]"
    },
    {
      "src": "immutable: immutable [1300,1309]",
      "dest": "immutable: immutable [719,728]"
    },
    {
      "src": "pragma: pragma [47,53]",
      "dest": "pragma: pragma [47,53]"
    },
    {
      "src": "(: ( [16268,16269]",
      "dest": "(: ( [6033,6034]"
    },
    {
      "src": "identifier: info [57665,57669]",
      "dest": "identifier: info [8493,8497]"
    },
    {
      "src": "event_paramater [7181,7203]",
      "dest": "event_paramater [2975,2997]"
    },
    {
      "src": "state_mutability [70208,70212]",
      "dest": "state_mutability [11118,11122]"
    },
    {
      "src": "]: ] [69006,69007]",
      "dest": "]: ] [9842,9843]"
    },
    {
      "src": "]: ] [70109,70110]",
      "dest": "]: ] [10991,10992]"
    },
    {
      "src": "member_expression [15365,15564]",
      "dest": "member_expression [5190,5208]"
    },
    {
      "src": "member_expression [70256,70281]",
      "dest": "member_expression [11212,11237]"
    },
    {
      "src": "]: ] [69808,69809]",
      "dest": "]: ] [10644,10645]"
    },
    {
      "src": "primitive_type [16229,16236]",
      "dest": "primitive_type [5994,6001]"
    },
    {
      "src": "return_type_definition [70621,70655]",
      "dest": "return_type_definition [11624,11658]"
    },
    {
      "src": "parameter [24017,24024]",
      "dest": "parameter [6961,6968]"
    },
    {
      "src": "yul_path [70792,70798]",
      "dest": "yul_path [11795,11801]"
    },
    {
      "src": "call_argument [70757,70758]",
      "dest": "call_argument [11760,11761]"
    },
    {
      "src": "state_variable_declaration [1332,1382]",
      "dest": "state_variable_declaration [755,805]"
    },
    {
      "src": "identifier: _testTarget [71792,71803]",
      "dest": "identifier: _testTarget [11965,11976]"
    },
    {
      "src": "call_expression [15365,15566]",
      "dest": "call_expression [5190,5210]"
    },
    {
      "src": "type_cast_expression [3068,3122]",
      "dest": "type_cast_expression [1824,1878]"
    },
    {
      "src": "(: ( [68309,68310]",
      "dest": "(: ( [9145,9146]"
    },
    {
      "src": "struct_member [9842,9867]",
      "dest": "struct_member [3926,3951]"
    },
    {
      "src": "identifier: _target [70710,70717]",
      "dest": "identifier: _target [11713,11720]"
    },
    {
      "src": "parameter [1962,1982]",
      "dest": "parameter [1174,1194]"
    },
    {
      "src": "}: } [34137,34138]",
      "dest": "}: } [7704,7705]"
    },
    {
      "src": "comment: //------------------ ERC900 connectors ---------------------- [69906,69967]",
      "dest": "comment: //------------------ ERC900 connectors ---------------------- [10742,10803]"
    },
    {
      "src": "variable_declaration [72482,72505]",
      "dest": "variable_declaration [12359,12382]"
    },
    {
      "src": "): ) [70602,70603]",
      "dest": "): ) [11605,11606]"
    },
    {
      "src": "type_name [69689,69695]",
      "dest": "type_name [10525,10531]"
    },
    {
      "src": "primitive_type [70015,70022]",
      "dest": "primitive_type [10851,10858]"
    },
    {
      "src": "augmented_assignment_expression [57695,57717]",
      "dest": "augmented_assignment_expression [8523,8545]"
    },
    {
      "src": "member_expression [70092,70129]",
      "dest": "member_expression [10974,11011]"
    },
    {
      "src": "member_expression [2954,2971]",
      "dest": "member_expression [1710,1727]"
    },
    {
      "src": "): ) [69313,69314]",
      "dest": "): ) [10149,10150]"
    },
    {
      "src": "type_name [24017,24024]",
      "dest": "type_name [6961,6968]"
    },
    {
      "src": "identifier: lockedValue [69147,69158]",
      "dest": "identifier: lockedValue [9983,9994]"
    },
    {
      "src": "internal: internal [17246,17254]",
      "dest": "internal: internal [8302,8310]"
    },
    {
      "src": "type_name [9876,9885]",
      "dest": "type_name [3960,3969]"
    },
    {
      "src": "import: import [188,194]",
      "dest": "import: import [198,204]"
    },
    {
      "src": "identifier: msg [27118,27121]",
      "dest": "identifier: msg [7737,7740]"
    },
    {
      "src": "array_access [72358,72368]",
      "dest": "array_access [12235,12245]"
    },
    {
      "src": "public: public [10922,10928]",
      "dest": "public: public [4429,4435]"
    },
    {
      "src": "): ) [57638,57639]",
      "dest": "): ) [8466,8467]"
    },
    {
      "src": "call_argument [15365,15652]",
      "dest": "call_argument [5190,5295]"
    },
    {
      "src": "): ) [6259,6260]",
      "dest": "): ) [2695,2696]"
    },
    {
      "src": ",: , [27116,27117]",
      "dest": ",: , [7747,7748]"
    },
    {
      "src": "state_variable_declaration [1387,1437]",
      "dest": "state_variable_declaration [810,860]"
    },
    {
      "src": "expression_statement [34262,34283]",
      "dest": "expression_statement [7781,7802]"
    },
    {
      "src": "identifier: stakerAddress [72519,72532]",
      "dest": "identifier: stakerAddress [12396,12409]"
    },
    {
      "src": "storage: storage [57516,57523]",
      "dest": "storage: storage [8396,8403]"
    },
    {
      "src": "=: = [57529,57530]",
      "dest": "=: = [8409,8410]"
    },
    {
      "src": "struct_member [9269,9299]",
      "dest": "struct_member [3353,3383]"
    },
    {
      "src": "}: } [3750,3751]",
      "dest": "}: } [1905,1906]"
    },
    {
      "src": "member_expression [72273,72287]",
      "dest": "member_expression [12150,12164]"
    },
    {
      "src": "import: import [142,148]",
      "dest": "import: import [149,155]"
    },
    {
      "src": "identifier: Snapshot [4117,4125]",
      "dest": "identifier: Snapshot [2202,2210]"
    },
    {
      "src": "type_name [8841,8847]",
      "dest": "type_name [3273,3279]"
    },
    {
      "src": "identifier: staker [72668,72674]",
      "dest": "identifier: staker [12545,12551]"
    },
    {
      "src": "}: } [11576,11577]",
      "dest": "}: } [6604,6605]"
    },
    {
      "src": "}: } [70830,70831]",
      "dest": "}: } [11833,11834]"
    },
    {
      "src": "primitive_type [4098,4105]",
      "dest": "primitive_type [2183,2190]"
    },
    {
      "src": "immutable: immutable [1402,1411]",
      "dest": "immutable: immutable [825,834]"
    },
    {
      "src": "comment: // initial stake of the staker [33856,33886]",
      "dest": "comment: // initial stake of the staker [7566,7596]"
    },
    {
      "src": "return_statement [69357,69404]",
      "dest": "return_statement [10193,10240]"
    },
    {
      "src": "uint16: uint16 [8813,8819]",
      "dest": "uint16: uint16 [3245,3251]"
    },
    {
      "src": "return_type_definition [70058,70075]",
      "dest": "return_type_definition [10894,10911]"
    },
    {
      "src": "(: ( [68349,68350]",
      "dest": "(: ( [9185,9186]"
    },
    {
      "src": "{: { [1101,1102]",
      "dest": "{: { [576,577]"
    },
    {
      "src": "type_name [10942,10970]",
      "dest": "type_name [4449,4477]"
    },
    {
      "src": "variable_declaration_statement [68942,69008]",
      "dest": "variable_declaration_statement [9778,9844]"
    },
    {
      "src": "function_definition [57244,59295]",
      "dest": "function_definition [8160,8787]"
    },
    {
      "src": "): ) [34242,34243]",
      "dest": "): ) [7761,7762]"
    },
    {
      "src": "type_name [13987,14000]",
      "dest": "type_name [5108,5121]"
    },
    {
      "src": "uint256: uint256 [9746,9753]",
      "dest": "uint256: uint256 [3830,3837]"
    },
    {
      "src": "array_access [68970,68989]",
      "dest": "array_access [9806,9825]"
    },
    {
      "src": "\": \" [195,196]",
      "dest": "\": \" [205,206]"
    },
    {
      "src": "address: address [15588,15595]",
      "dest": "address: address [5231,5238]"
    },
    {
      "src": "}: } [75463,75464]",
      "dest": "}: } [12680,12681]"
    },
    {
      "src": "primitive_type [11165,11172]",
      "dest": "primitive_type [4646,4653]"
    },
    {
      "src": "identifier: require [72378,72385]",
      "dest": "identifier: require [12255,12262]"
    },
    {
      "src": "}: } [69409,69410]",
      "dest": "}: } [10245,10246]"
    },
    {
      "src": "inheritance_specifier [3954,3968]",
      "dest": "inheritance_specifier [2114,2128]"
    },
    {
      "src": "binary_expression [72273,72292]",
      "dest": "binary_expression [12150,12169]"
    },
    {
      "src": "uint256: uint256 [9715,9722]",
      "dest": "uint256: uint256 [3799,3806]"
    },
    {
      "src": "uint256: uint256 [68350,68357]",
      "dest": "uint256: uint256 [9186,9193]"
    },
    {
      "src": ".: . [68188,68189]",
      "dest": ".: . [9024,9025]"
    },
    {
      "src": "(: ( [24043,24044]",
      "dest": "(: ( [5740,5741]"
    },
    {
      "src": "(: ( [33986,33987]",
      "dest": "(: ( [7685,7686]"
    },
    {
      "src": "identifier: currentCommittedPeriod [72752,72774]",
      "dest": "identifier: flags [12642,12647]"
    },
    {
      "src": "{: { [72294,72295]",
      "dest": "{: { [12171,12172]"
    },
    {
      "src": "]: ] [10920,10921]",
      "dest": "]: ] [4427,4428]"
    },
    {
      "src": "type_name [33566,33572]",
      "dest": "type_name [7356,7362]"
    },
    {
      "src": "=: = [15748,15749]",
      "dest": "=: = [5407,5408]"
    },
    {
      "src": "type_name [9380,9386]",
      "dest": "type_name [3464,3470]"
    },
    {
      "src": "address: address [10962,10969]",
      "dest": "address: address [4469,4476]"
    },
    {
      "src": "): ) [11491,11492]",
      "dest": "): ) [6560,6561]"
    },
    {
      "src": "identifier: worker [9550,9556]",
      "dest": "identifier: worker [3634,3640]"
    },
    {
      "src": "user_defined_type [3954,3968]",
      "dest": "user_defined_type [2114,2128]"
    },
    {
      "src": "address: address [7181,7188]",
      "dest": "address: address [2975,2982]"
    },
    {
      "src": "identifier: _measureWork [23985,23997]",
      "dest": "identifier: _measureWork [6908,6920]"
    },
    {
      "src": "parameter [57325,57346]",
      "dest": "parameter [8241,8262]"
    },
    {
      "src": ".: . [70734,70735]",
      "dest": ".: . [11737,11738]"
    },
    {
      "src": "function: function [71763,71771]",
      "dest": "function: function [11936,11944]"
    },
    {
      "src": "address: address [10951,10958]",
      "dest": "address: address [4458,4465]"
    },
    {
      "src": "identifier: token [3134,3139]",
      "dest": "identifier: token [1890,1895]"
    },
    {
      "src": "type_name [8694,8700]",
      "dest": "type_name [3126,3132]"
    },
    {
      "src": "variable_declaration_statement [72334,72369]",
      "dest": "variable_declaration_statement [12211,12246]"
    },
    {
      "src": "event: event [7167,7172]",
      "dest": "event: event [2961,2966]"
    },
    {
      "src": "state_variable_declaration [10536,10577]",
      "dest": "state_variable_declaration [4259,4294]"
    },
    {
      "src": ".: . [57699,57700]",
      "dest": ".: . [8527,8528]"
    },
    {
      "src": "identifier: _staker [57282,57289]",
      "dest": "identifier: _staker [8198,8205]"
    },
    {
      "src": "]: ] [9855,9856]",
      "dest": "]: ] [3939,3940]"
    },
    {
      "src": "public: public [10825,10831]",
      "dest": "public: public [4174,4180]"
    },
    {
      "src": "identifier: minAllowableLockedTokens [1357,1381]",
      "dest": "identifier: minAllowableLockedTokens [780,804]"
    },
    {
      "src": "type_name [4130,4139]",
      "dest": "type_name [2215,2224]"
    },
    {
      "src": "primitive_type [70587,70594]",
      "dest": "primitive_type [11590,11597]"
    },
    {
      "src": "type_name [9809,9819]",
      "dest": "type_name [3893,3903]"
    },
    {
      "src": "comment: /**     * @dev Get StakerInfo structure by delegatecall     */ [70472,70534]",
      "dest": "comment: /**     * @dev Get StakerInfo structure by delegatecall     */ [11475,11537]"
    },
    {
      "src": "comment: /**     * @notice Get the last period of the sub stake     * @param _staker Staker     * @param _index Stake index     */ [18130,18251]",
      "dest": "comment: /**     * @notice Constructor sets address of token contract and parameters for staking     * @param _token NuCypher token contract     * @param _workLock WorkLock contract. Zero address if there is no WorkLock     */ [4865,5082]"
    },
    {
      "src": "parameter [14107,14134]",
      "dest": "parameter [5138,5165]"
    },
    {
      "src": "}: } [57685,57686]",
      "dest": "}: } [8513,8514]"
    },
    {
      "src": "number_literal: 0 [33630,33631]",
      "dest": "number_literal: 0 [7450,7451]"
    },
    {
      "src": "(: ( [10865,10866]",
      "dest": "(: ( [4372,4373]"
    },
    {
      "src": "type_name [8666,8672]",
      "dest": "type_name [3098,3104]"
    },
    {
      "src": "identifier: endPeriod [69716,69725]",
      "dest": "identifier: endPeriod [10552,10561]"
    },
    {
      "src": "public: public [10543,10549]",
      "dest": "public: public [4267,4273]"
    },
    {
      "src": ",: , [58974,58975]",
      "dest": ",: , [8652,8653]"
    },
    {
      "src": "public: public [10889,10895]",
      "dest": "public: public [4396,4402]"
    },
    {
      "src": "user_defined_type [10807,10824]",
      "dest": "user_defined_type [4156,4173]"
    },
    {
      "src": "primitive_type [11010,11016]",
      "dest": "primitive_type [4805,4811]"
    },
    {
      "src": "return: return [69357,69363]",
      "dest": "return: return [10193,10199]"
    },
    {
      "src": "indexed: indexed [6230,6237]",
      "dest": "indexed: indexed [2666,2673]"
    },
    {
      "src": "call_argument [71857,71868]",
      "dest": "call_argument [12030,12041]"
    },
    {
      "src": "identifier: _blockNumber [70130,70142]",
      "dest": "identifier: _blockNumber [11012,11024]"
    },
    {
      "src": "type_name [70587,70594]",
      "dest": "type_name [11590,11597]"
    },
    {
      "src": "(: ( [70366,70367]",
      "dest": "(: ( [11368,11369]"
    },
    {
      "src": "): ) [70238,70239]",
      "dest": "): ) [11148,11149]"
    },
    {
      "src": "type_name [9344,9350]",
      "dest": "type_name [3428,3434]"
    },
    {
      "src": "parameter [2097,2130]",
      "dest": "parameter [1204,1237]"
    },
    {
      "src": "call_argument [33987,33994]",
      "dest": "call_argument [7686,7693]"
    },
    {
      "src": "type_name [23980,23984]",
      "dest": "type_name [6903,6907]"
    },
    {
      "src": "primitive_type [16269,16276]",
      "dest": "primitive_type [6034,6041]"
    },
    {
      "src": "uint256: uint256 [1332,1339]",
      "dest": "uint256: uint256 [755,762]"
    },
    {
      "src": "\": \" [120,121]",
      "dest": "\": \" [127,128]"
    },
    {
      "src": "): ) [57494,57495]",
      "dest": "): ) [8374,8375]"
    },
    {
      "src": "member_expression [72917,72927]",
      "dest": "member_expression [12651,12661]"
    },
    {
      "src": "string [80,100]",
      "dest": "string [80,100]"
    },
    {
      "src": "visibility [16434,16442]",
      "dest": "visibility [6530,6538]"
    },
    {
      "src": "binary_expression [57731,57749]",
      "dest": "binary_expression [8559,8577]"
    },
    {
      "src": "{: { [33602,33603]",
      "dest": "{: { [7422,7423]"
    },
    {
      "src": "struct_member [9715,9737]",
      "dest": "struct_member [3799,3821]"
    },
    {
      "src": "): ) [72590,72591]",
      "dest": "): ) [12467,12468]"
    },
    {
      "src": "type_name [71784,71791]",
      "dest": "type_name [11957,11964]"
    },
    {
      "src": "identifier: super [71839,71844]",
      "dest": "identifier: super [12012,12017]"
    },
    {
      "src": "assignment_expression [15739,15759]",
      "dest": "assignment_expression [5398,5418]"
    },
    {
      "src": "identifier: _workLock [15750,15759]",
      "dest": "identifier: _workLock [5409,5418]"
    },
    {
      "src": ",: , [69707,69708]",
      "dest": ",: , [10543,10544]"
    },
    {
      "src": "]: ] [33686,33687]",
      "dest": "]: ] [7555,7556]"
    },
    {
      "src": "virtual: virtual [71821,71828]",
      "dest": "virtual: virtual [11994,12001]"
    },
    {
      "src": "]: ] [68988,68989]",
      "dest": "]: ] [9824,9825]"
    },
    {
      "src": "primitive_type [57356,57363]",
      "dest": "primitive_type [8272,8279]"
    },
    {
      "src": "identifier: sender [27122,27128]",
      "dest": "identifier: sender [7741,7747]"
    },
    {
      "src": "=: = [69029,69030]",
      "dest": "=: = [9865,9866]"
    },
    {
      "src": "identifier: stub3 [11223,11228]",
      "dest": "identifier: stub3 [4706,4711]"
    },
    {
      "src": "comment: /**     * @notice Bond worker     * @param _worker Worker address. Must be a real address, not a contract     */ [24416,24528]",
      "dest": "comment: //        ) [6262,6273]"
    },
    {
      "src": "function: function [68282,68290]",
      "dest": "function: function [9118,9126]"
    },
    {
      "src": "(: ( [24016,24017]",
      "dest": "(: ( [6960,6961]"
    },
    {
      "src": "identifier: firstPeriod [69017,69028]",
      "dest": "identifier: firstPeriod [9853,9864]"
    },
    {
      "src": "return_statement [16288,16321]",
      "dest": "return_statement [6053,6086]"
    },
    {
      "src": "identifier: stakerAddress [72342,72355]",
      "dest": "identifier: stakerAddress [12219,12232]"
    },
    {
      "src": "identifier: infoToCheck [72693,72704]",
      "dest": "identifier: infoToCheck [12583,12594]"
    },
    {
      "src": "type_name [16409,16416]",
      "dest": "type_name [6513,6520]"
    },
    {
      "src": "=: = [15157,15158]",
      "dest": "=: = [5380,5381]"
    },
    {
      "src": "string [195,210]",
      "dest": "string [205,215]"
    },
    {
      "src": "call_argument [72450,72451]",
      "dest": "call_argument [12327,12328]"
    },
    {
      "src": "uint256: uint256 [9653,9660]",
      "dest": "uint256: uint256 [3737,3744]"
    },
    {
      "src": "]: ] [68394,68395]",
      "dest": "]: ] [9230,9231]"
    },
    {
      "src": "identifier: _penalty [57630,57638]",
      "dest": "identifier: _penalty [8458,8466]"
    },
    {
      "src": "return_type_definition [16260,16277]",
      "dest": "return_type_definition [6025,6042]"
    },
    {
      "src": "uint256: uint256 [70015,70022]",
      "dest": "uint256: uint256 [10851,10858]"
    },
    {
      "src": "primitive_type [2899,2906]",
      "dest": "primitive_type [1655,1662]"
    },
    {
      "src": ",: , [33516,33517]",
      "dest": ",: , [7322,7323]"
    },
    {
      "src": "identifier: StakingEscrowStub [1068,1085]",
      "dest": "identifier: StakingEscrowStub [543,560]"
    },
    {
      "src": "==: == [72288,72290]",
      "dest": "==: == [12165,12167]"
    },
    {
      "src": "identifier: stakers [72273,72280]",
      "dest": "identifier: stakers [12150,12157]"
    },
    {
      "src": "member_expression [70719,70743]",
      "dest": "member_expression [11722,11746]"
    },
    {
      "src": "identifier: _reward [57731,57738]",
      "dest": "identifier: _reward [8559,8566]"
    },
    {
      "src": "identifier: totalSupply [2205,2216]",
      "dest": "identifier: totalSupply [1312,1323]"
    },
    {
      "src": "function_body [70239,70302]",
      "dest": "function_body [11150,11304]"
    },
    {
      "src": "\": \" [162,163]",
      "dest": "\": \" [169,170]"
    },
    {
      "src": "parameter [69531,69545]",
      "dest": "parameter [10367,10381]"
    },
    {
      "src": "number_literal: 0 [2440,2441]",
      "dest": "number_literal: 0 [1374,1375]"
    },
    {
      "src": "user_defined_type [10877,10887]",
      "dest": "user_defined_type [4384,4394]"
    },
    {
      "src": "): ) [73185,73186]",
      "dest": "): ) [12670,12671]"
    },
    {
      "src": "parameter [68860,68884]",
      "dest": "parameter [9696,9720]"
    },
    {
      "src": "member_expression [69364,69403]",
      "dest": "member_expression [10200,10239]"
    },
    {
      "src": "primitive_type [24058,24065]",
      "dest": "primitive_type [5755,5762]"
    },
    {
      "src": "call_argument [34245,34251]",
      "dest": "call_argument [7764,7770]"
    },
    {
      "src": "identifier: selector [3112,3120]",
      "dest": "identifier: selector [1868,1876]"
    },
    {
      "src": "uint256: uint256 [9684,9691]",
      "dest": "uint256: uint256 [3768,3775]"
    },
    {
      "src": "import: import [102,108]",
      "dest": "import: import [102,108]"
    },
    {
      "src": "identifier: staker [6238,6244]",
      "dest": "identifier: staker [2674,2680]"
    },
    {
      "src": "[: [ [72518,72519]",
      "dest": "[: [ [12395,12396]"
    },
    {
      "src": "(: ( [11009,11010]",
      "dest": "(: ( [4804,4805]"
    },
    {
      "src": "public: public [2920,2926]",
      "dest": "public: public [1676,1682]"
    },
    {
      "src": "type_name [68518,68525]",
      "dest": "type_name [9354,9361]"
    },
    {
      "src": "public: public [71805,71811]",
      "dest": "public: public [11978,11984]"
    },
    {
      "src": "): ) [27172,27173]",
      "dest": "): ) [7770,7771]"
    },
    {
      "src": "override_specifier [70213,70221]",
      "dest": "override_specifier [11123,11131]"
    },
    {
      "src": "return_statement [68174,68196]",
      "dest": "return_statement [9010,9032]"
    },
    {
      "src": "member_expression [57695,57705]",
      "dest": "member_expression [8523,8533]"
    },
    {
      "src": "comment: /**     * @notice Predefines some variables for use when deploying other contracts     * @param _token Token contract     * @param _genesisHoursPerPeriod Size of period in hours at genesis     * @param _hoursPerPeriod Size of period in hours     * @param _minLockedPeriods Min amount of periods during which tokens can be locked     * @param _minAllowableLockedTokens Min amount of tokens that can be locked     * @param _maxAllowableLockedTokens Max amount of tokens that can be locked     */ [1443,1936]",
      "dest": "comment: // only to deploy WorkLock [624,650]"
    },
    {
      "src": "(: ( [69297,69298]",
      "dest": "(: ( [10133,10134]"
    },
    {
      "src": "function: function [33484,33492]",
      "dest": "function: function [7269,7277]"
    },
    {
      "src": "member_expression [72693,72774]",
      "dest": "member_expression [12583,12647]"
    },
    {
      "src": "primitive_type [68829,68835]",
      "dest": "primitive_type [9665,9671]"
    },
    {
      "src": "function: function [2878,2886]",
      "dest": "function: function [1634,1642]"
    },
    {
      "src": "type_name [70630,70640]",
      "dest": "type_name [11633,11643]"
    },
    {
      "src": "function_body [2944,3749]",
      "dest": "function_body [1700,1904]"
    },
    {
      "src": "mapping: mapping [11263,11270]",
      "dest": "mapping: mapping [4521,4528]"
    },
    {
      "src": "identifier: getAllTokens [16216,16228]",
      "dest": "identifier: getAllTokens [5981,5993]"
    },
    {
      "src": "call_argument [70710,70717]",
      "dest": "call_argument [11713,11720]"
    },
    {
      "src": "identifier: _staker [68387,68394]",
      "dest": "identifier: _staker [9223,9230]"
    },
    {
      "src": ".: . [57620,57621]",
      "dest": ".: . [8448,8449]"
    },
    {
      "src": "expression_statement [2453,2468]",
      "dest": "expression_statement [1387,1402]"
    },
    {
      "src": "visibility [1194,1200]",
      "dest": "visibility [662,668]"
    },
    {
      "src": "parameter [68310,68325]",
      "dest": "parameter [9146,9161]"
    },
    {
      "src": ".: . [3105,3106]",
      "dest": ".: . [1861,1862]"
    },
    {
      "src": "call_argument [72668,72674]",
      "dest": "call_argument [12545,12551]"
    },
    {
      "src": "uint16: uint16 [11272,11278]",
      "dest": "uint16: uint16 [4530,4536]"
    },
    {
      "src": "override_specifier [70049,70057]",
      "dest": "override_specifier [10885,10893]"
    },
    {
      "src": "): ) [24075,24076]",
      "dest": "): ) [5812,5813]"
    },
    {
      "src": "parameter [68898,68917]",
      "dest": "parameter [9734,9753]"
    },
    {
      "src": "call_argument [72196,72207]",
      "dest": "call_argument [12073,12084]"
    },
    {
      "src": "override_specifier [71812,71820]",
      "dest": "override_specifier [11985,11993]"
    },
    {
      "src": "call_expression [27101,27173]",
      "dest": "call_expression [7714,7771]"
    },
    {
      "src": "variable_declaration_statement [72601,72676]",
      "dest": "variable_declaration_statement [12478,12553]"
    },
    {
      "src": "expression_statement [71839,71870]",
      "dest": "expression_statement [12012,12043]"
    },
    {
      "src": "type_name [68797,68803]",
      "dest": "type_name [9633,9639]"
    },
    {
      "src": "comment: /**     * @notice Get the start period. Use in the calculation of the last period of the sub stake     * @param _info Staker structure     * @param _currentPeriod Current period     */ [16976,17160]",
      "dest": "comment: // outdated [4629,4640]"
    },
    {
      "src": "identifier: StakerInfo [57505,57515]",
      "dest": "identifier: StakerInfo [8385,8395]"
    },
    {
      "src": "expression_statement [24259,24313]",
      "dest": "expression_statement [5823,5825]"
    },
    {
      "src": "assembly: assembly [70769,70777]",
      "dest": "assembly: assembly [11772,11780]"
    },
    {
      "src": "primitive_type [72568,72575]",
      "dest": "primitive_type [12445,12452]"
    },
    {
      "src": "call_argument [72576,72589]",
      "dest": "call_argument [12453,12466]"
    },
    {
      "src": "): ) [72452,72453]",
      "dest": "): ) [12329,12330]"
    },
    {
      "src": "primitive_type [72394,72401]",
      "dest": "primitive_type [12271,12278]"
    },
    {
      "src": "(: ( [70709,70710]",
      "dest": "(: ( [11712,11713]"
    },
    {
      "src": "identifier: _reward [57765,57772]",
      "dest": "identifier: _reward [8593,8600]"
    },
    {
      "src": "): ) [10969,10970]",
      "dest": "): ) [4476,4477]"
    },
    {
      "src": "): ) [3140,3141]",
      "dest": "): ) [1896,1897]"
    },
    {
      "src": "uint16: uint16 [69709,69715]",
      "dest": "uint16: uint16 [10545,10551]"
    },
    {
      "src": "augmented_assignment_expression [34262,34282]",
      "dest": "augmented_assignment_expression [7781,7801]"
    },
    {
      "src": "type_name [69514,69521]",
      "dest": "type_name [10350,10357]"
    },
    {
      "src": "returns: returns [70358,70365]",
      "dest": "returns: returns [11360,11367]"
    },
    {
      "src": "identifier: Downtime [9809,9817]",
      "dest": "identifier: Downtime [3893,3901]"
    },
    {
      "src": "identifier: endPeriod [8848,8857]",
      "dest": "identifier: endPeriod [3280,3289]"
    },
    {
      "src": "comment: /**     * @notice Deposit tokens from WorkLock contract     * @param _staker Staker address     * @param _value Amount of tokens to deposit     * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled     */ [26251,26510]",
      "dest": "comment: /**     * @notice Deposit tokens from WorkLock contract     * @param _staker Staker address     * @param _value Amount of tokens to deposit     * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled     */ [7005,7264]"
    },
    {
      "src": "{: { [24026,24027]",
      "dest": "{: { [5723,5724]"
    },
    {
      "src": ">: > [59168,59169]",
      "dest": ">: > [8709,8710]"
    },
    {
      "src": "returns: returns [68775,68782]",
      "dest": "returns: returns [9611,9618]"
    },
    {
      "src": ":=: := [70799,70801]",
      "dest": ":=: := [11802,11804]"
    },
    {
      "src": "primitive_type [33501,33508]",
      "dest": "primitive_type [7307,7314]"
    },
    {
      "src": "call_argument [27118,27128]",
      "dest": "call_argument [7737,7747]"
    },
    {
      "src": "type_name [33550,33557]",
      "dest": "type_name [7332,7339]"
    },
    {
      "src": "address: address [3126,3133]",
      "dest": "address: address [1882,1889]"
    },
    {
      "src": ">: > [57491,57492]",
      "dest": ">: > [8342,8343]"
    },
    {
      "src": ".: . [24047,24048]",
      "dest": ".: . [5744,5745]"
    },
    {
      "src": "): ) [70333,70334]",
      "dest": "): ) [11335,11336]"
    },
    {
      "src": ",: , [70013,70014]",
      "dest": ",: , [10849,10850]"
    },
    {
      "src": "=: = [2459,2460]",
      "dest": "=: = [1393,1394]"
    },
    {
      "src": "function_body [11493,11577]",
      "dest": "function_body [6562,6605]"
    },
    {
      "src": "call_argument [70748,70755]",
      "dest": "call_argument [11751,11758]"
    },
    {
      "src": "comment: /**     * @notice Get all flags for the staker     */ [16333,16386]",
      "dest": "comment: // outdated [4504,4515]"
    },
    {
      "src": "(: ( [33619,33620]",
      "dest": "(: ( [7439,7440]"
    },
    {
      "src": "identifier: minAllowableLockedTokens [2655,2679]",
      "dest": "identifier: minAllowableLockedTokens [1411,1435]"
    },
    {
      "src": "type_name [8721,8727]",
      "dest": "type_name [3153,3159]"
    },
    {
      "src": "(: ( [57481,57482]",
      "dest": "(: ( [8332,8333]"
    },
    {
      "src": "): ) [71868,71869]",
      "dest": "): ) [12041,12042]"
    },
    {
      "src": "state_variable_declaration [9938,9983]",
      "dest": "state_variable_declaration [4311,4346]"
    },
    {
      "src": "identifier: token [59187,59192]",
      "dest": "identifier: token [8728,8733]"
    },
    {
      "src": "{: { [68359,68360]",
      "dest": "{: { [9195,9196]"
    },
    {
      "src": "parameter [68797,68815]",
      "dest": "parameter [9633,9651]"
    },
    {
      "src": "}: } [59239,59240]",
      "dest": "}: } [8780,8781]"
    },
    {
      "src": "}: } [3748,3749]",
      "dest": "}: } [1903,1904]"
    },
    {
      "src": "state_mutability [68336,68340]",
      "dest": "state_mutability [9172,9176]"
    },
    {
      "src": "): ) [70371,70372]",
      "dest": "): ) [11373,11374]"
    },
    {
      "src": "&&: && [72725,72727]",
      "dest": "&&: && [12615,12617]"
    },
    {
      "src": "user_defined_type [69741,69749]",
      "dest": "user_defined_type [10577,10585]"
    },
    {
      "src": "function: function [69267,69275]",
      "dest": "function: function [10103,10111]"
    },
    {
      "src": "identifier: pastDowntime [9820,9832]",
      "dest": "identifier: pastDowntime [3904,3916]"
    },
    {
      "src": ".: . [68395,68396]",
      "dest": ".: . [9231,9232]"
    },
    {
      "src": "function_body [14955,15766]",
      "dest": "function_body [5172,5425]"
    },
    {
      "src": "boolean_literal [70389,70393]",
      "dest": "boolean_literal [11392,11396]"
    },
    {
      "src": "variable_declaration_statement [33642,33688]",
      "dest": "variable_declaration_statement [7511,7557]"
    },
    {
      "src": "returns: returns [68341,68348]",
      "dest": "returns: returns [9177,9184]"
    },
    {
      "src": "[: [ [11082,11083]",
      "dest": "[: [ [4602,4603]"
    },
    {
      "src": "type_name [57274,57281]",
      "dest": "type_name [8190,8197]"
    },
    {
      "src": "identifier: unlockingDuration [69095,69112]",
      "dest": "identifier: unlockingDuration [9931,9948]"
    },
    {
      "src": "{: { [833,834]",
      "dest": "{: { [307,308]"
    },
    {
      "src": "type_name [4130,4137]",
      "dest": "type_name [2215,2222]"
    },
    {
      "src": "assignment_expression [2453,2467]",
      "dest": "assignment_expression [1387,1401]"
    },
    {
      "src": "type_name [9684,9691]",
      "dest": "type_name [3768,3775]"
    },
    {
      "src": "call_argument [59221,59228]",
      "dest": "call_argument [8762,8769]"
    },
    {
      "src": "uint16: uint16 [8694,8700]",
      "dest": "uint16: uint16 [3126,3132]"
    },
    {
      "src": "): ) [59228,59229]",
      "dest": "): ) [8769,8770]"
    },
    {
      "src": "view: view [68336,68340]",
      "dest": "view: view [9172,9176]"
    },
    {
      "src": "primitive_type [69709,69715]",
      "dest": "primitive_type [10545,10551]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: AGPL-3.0-or-later [0,45]",
      "dest": "comment: // SPDX-License-Identifier: AGPL-3.0-or-later [0,45]"
    },
    {
      "src": "type_name [7205,7212]",
      "dest": "type_name [2999,3006]"
    },
    {
      "src": "=: = [72356,72357]",
      "dest": "=: = [12233,12234]"
    },
    {
      "src": "call_argument [34230,34243]",
      "dest": "call_argument [7749,7762]"
    },
    {
      "src": "function_body [33602,34676]",
      "dest": "function_body [7422,7850]"
    },
    {
      "src": "(: ( [72575,72576]",
      "dest": "(: ( [12452,12453]"
    },
    {
      "src": "parameter [69514,69529]",
      "dest": "parameter [10350,10365]"
    },
    {
      "src": "primitive_type [3126,3133]",
      "dest": "primitive_type [1882,1889]"
    },
    {
      "src": "bytes32: bytes32 [70670,70677]",
      "dest": "bytes32: bytes32 [11673,11680]"
    },
    {
      "src": "(: ( [38089,38090]",
      "dest": "(: ( [7826,7827]"
    },
    {
      "src": "type_name [68898,68905]",
      "dest": "type_name [9734,9741]"
    },
    {
      "src": "address: address [68518,68525]",
      "dest": "address: address [9354,9361]"
    },
    {
      "src": "visibility [10922,10928]",
      "dest": "visibility [4429,4435]"
    },
    {
      "src": "expression_statement [69017,69048]",
      "dest": "expression_statement [9853,9884]"
    },
    {
      "src": "assignment_expression [69095,69137]",
      "dest": "assignment_expression [9931,9973]"
    },
    {
      "src": "identifier: stakers [10929,10936]",
      "dest": "identifier: stakers [4436,4443]"
    },
    {
      "src": "uint16: uint16 [11010,11016]",
      "dest": "uint16: uint16 [4805,4811]"
    },
    {
      "src": "function_definition [70539,70831]",
      "dest": "function_definition [11542,11834]"
    },
    {
      "src": "type_name [68942,68954]",
      "dest": "type_name [9778,9790]"
    },
    {
      "src": "identifier: stakerInfo [16295,16305]",
      "dest": "identifier: stakerInfo [6060,6070]"
    },
    {
      "src": "(: ( [11271,11272]",
      "dest": "(: ( [4529,4530]"
    },
    {
      "src": "function_body [2180,2776]",
      "dest": "function_body [1287,1532]"
    },
    {
      "src": "parameter [33501,33516]",
      "dest": "parameter [7307,7322]"
    },
    {
      "src": "binary_expression [33620,33631]",
      "dest": "binary_expression [7440,7451]"
    },
    {
      "src": "return_type_definition [70222,70239]",
      "dest": "return_type_definition [11132,11149]"
    },
    {
      "src": "identifier: _token [14001,14007]",
      "dest": "identifier: _token [5122,5128]"
    },
    {
      "src": "identifier: _staker [69522,69529]",
      "dest": "identifier: _staker [10358,10365]"
    },
    {
      "src": "comment: /** * @notice WorkLock interface */ [769,804]",
      "dest": "comment: /** * @notice WorkLock interface */ [243,278]"
    },
    {
      "src": "user_defined_type [13987,14000]",
      "dest": "user_defined_type [5108,5121]"
    },
    {
      "src": "override: override [2927,2935]",
      "dest": "override: override [1683,1691]"
    },
    {
      "src": "visibility [10889,10895]",
      "dest": "visibility [4396,4402]"
    },
    {
      "src": "member_expression [70092,70118]",
      "dest": "member_expression [10974,11000]"
    },
    {
      "src": "(: ( [72413,72414]",
      "dest": "(: ( [12290,12291]"
    },
    {
      "src": "if_statement [59156,59240]",
      "dest": "if_statement [8697,8781]"
    },
    {
      "src": "return_type_definition [24008,24025]",
      "dest": "return_type_definition [6952,6969]"
    },
    {
      "src": "=: = [57663,57664]",
      "dest": "=: = [8491,8492]"
    },
    {
      "src": "identifier: value [34267,34272]",
      "dest": "identifier: value [7786,7791]"
    },
    {
      "src": "==: == [72775,72777]",
      "dest": "==: == [12648,12650]"
    },
    {
      "src": "identifier: _maxAllowableLockedTokens [2148,2173]",
      "dest": "identifier: _maxAllowableLockedTokens [1255,1280]"
    },
    {
      "src": "(: ( [3067,3068]",
      "dest": "(: ( [1823,1824]"
    },
    {
      "src": "identifier: StakerInfo [72482,72492]",
      "dest": "identifier: StakerInfo [12359,12369]"
    },
    {
      "src": "state_variable_declaration [10942,10995]",
      "dest": "state_variable_declaration [4449,4502]"
    },
    {
      "src": "member_expression [68181,68195]",
      "dest": "member_expression [9017,9031]"
    },
    {
      "src": "(: ( [71783,71784]",
      "dest": "(: ( [11956,11957]"
    },
    {
      "src": "(: ( [59205,59206]",
      "dest": "(: ( [8746,8747]"
    },
    {
      "src": "identifier: WorkLockInterface [10807,10824]",
      "dest": "identifier: WorkLockInterface [4156,4173]"
    },
    {
      "src": "type_name [9653,9660]",
      "dest": "type_name [3737,3744]"
    },
    {
      "src": "type_alias [4117,4125]",
      "dest": "type_alias [2202,2210]"
    },
    {
      "src": "struct_member [9475,9500]",
      "dest": "struct_member [3559,3584]"
    },
    {
      "src": "[: [ [69374,69375]",
      "dest": "[: [ [10210,10211]"
    },
    {
      "src": "struct_member [9746,9768]",
      "dest": "struct_member [3830,3852]"
    },
    {
      "src": "state_variable_declaration [11263,11308]",
      "dest": "state_variable_declaration [4521,4555]"
    },
    {
      "src": "binary_expression [15365,15652]",
      "dest": "binary_expression [5190,5295]"
    },
    {
      "src": "identifier: value [57670,57675]",
      "dest": "identifier: value [8498,8503]"
    },
    {
      "src": "(: ( [3087,3088]",
      "dest": "(: ( [1843,1844]"
    },
    {
      "src": "comment: /**     * @notice Find index of downtime structure that includes specified period     * @dev If specified period is outside all downtime periods, the length of the array will be returned     * @param _staker Staker     * @param _period Specified period number     */ [23031,23297]",
      "dest": "comment: //        external view returns ( [6199,6232]"
    },
    {
      "src": ",: , [6244,6245]",
      "dest": ",: , [2680,2681]"
    },
    {
      "src": "type_name [70231,70238]",
      "dest": "type_name [11141,11148]"
    },
    {
      "src": "call_expression [72633,72675]",
      "dest": "call_expression [12510,12552]"
    },
    {
      "src": "identifier: SubStakeInfo [68942,68954]",
      "dest": "identifier: SubStakeInfo [9778,9790]"
    },
    {
      "src": "identifier: workerStartPeriod [9482,9499]",
      "dest": "identifier: workerStartPeriod [3566,3583]"
    },
    {
      "src": "struct_member [9444,9466]",
      "dest": "struct_member [3528,3550]"
    },
    {
      "src": "identifier: require [57474,57481]",
      "dest": "identifier: require [8325,8332]"
    },
    {
      "src": "function_definition [69267,69410]",
      "dest": "function_definition [10103,10246]"
    },
    {
      "src": "identifier: _blockNumber [70187,70199]",
      "dest": "identifier: _blockNumber [11097,11109]"
    },
    {
      "src": "primitive_type [68310,68317]",
      "dest": "primitive_type [9146,9153]"
    },
    {
      "src": "user_defined_type [68942,68954]",
      "dest": "user_defined_type [9778,9790]"
    },
    {
      "src": "comment: /**     * @notice Signals that two sub-stakes were merged     * @param staker Staker address     * @param value1 Value of first sub-stake (in NuNits)     * @param value2 Value of second sub-stake (in NuNits)     * @param lastPeriod Final locked period of merged sub-stake     */ [5308,5586]",
      "dest": "comment: //    uint8 internal constant SNAPSHOTS_DISABLED_INDEX = 3; [4049,4108]"
    },
    {
      "src": "primitive_type [1332,1339]",
      "dest": "primitive_type [755,762]"
    },
    {
      "src": "): ) [15619,15620]",
      "dest": "): ) [5262,5263]"
    },
    {
      "src": "type_name [11215,11222]",
      "dest": "type_name [4698,4705]"
    },
    {
      "src": "string [109,121]",
      "dest": "string [109,128]"
    },
    {
      "src": "=>: => [10959,10961]",
      "dest": "=>: => [4466,4468]"
    },
    {
      "src": "visibility [17246,17254]",
      "dest": "visibility [8302,8310]"
    },
    {
      "src": "member_expression [34199,34221]",
      "dest": "member_expression [7714,7736]"
    },
    {
      "src": "identifier: StakerInfo [70630,70640]",
      "dest": "identifier: StakerInfo [11633,11643]"
    },
    {
      "src": "-=: -= [57706,57708]",
      "dest": "-=: -= [8534,8536]"
    },
    {
      "src": "identifier: _staker [68981,68988]",
      "dest": "identifier: _staker [9817,9824]"
    },
    {
      "src": "): ) [70035,70036]",
      "dest": "): ) [10871,10872]"
    },
    {
      "src": "identifier: msg [15920,15923]",
      "dest": "identifier: msg [5561,5564]"
    },
    {
      "src": "identifier: _staker [69375,69382]",
      "dest": "identifier: _staker [10211,10218]"
    },
    {
      "src": "block_statement [72294,72325]",
      "dest": "block_statement [12171,12202]"
    },
    {
      "src": "user_defined_type [72601,72611]",
      "dest": "user_defined_type [12478,12488]"
    },
    {
      "src": "identifier: SafeERC20 [4151,4160]",
      "dest": "identifier: SafeERC20 [2236,2245]"
    },
    {
      "src": ">: > [57739,57740]",
      "dest": ">: > [8567,8568]"
    },
    {
      "src": "identifier: stakerInfo [69769,69779]",
      "dest": "identifier: stakerInfo [10605,10615]"
    },
    {
      "src": "call_argument [24066,24074]",
      "dest": "call_argument [5763,5771]"
    },
    {
      "src": "): ) [14613,14614]",
      "dest": "): ) [5170,5171]"
    },
    {
      "src": "(: ( [70569,70570]",
      "dest": "(: ( [11572,11573]"
    },
    {
      "src": "type_alias [4057,4061]",
      "dest": "type_alias [2142,2146]"
    },
    {
      "src": "{: { [70778,70779]",
      "dest": "{: { [11781,11782]"
    },
    {
      "src": "}: } [68418,68419]",
      "dest": "}: } [9254,9255]"
    },
    {
      "src": "assignment_expression [69819,69853]",
      "dest": "assignment_expression [10655,10689]"
    },
    {
      "src": "visibility [10825,10831]",
      "dest": "visibility [4174,4180]"
    },
    {
      "src": "identifier: this [72427,72431]",
      "dest": "identifier: this [12304,12308]"
    },
    {
      "src": "bool: bool [23980,23984]",
      "dest": "bool: bool [6903,6907]"
    },
    {
      "src": "if_statement [72269,72325]",
      "dest": "if_statement [12146,12202]"
    },
    {
      "src": "primitive_type [23963,23970]",
      "dest": "primitive_type [6886,6893]"
    },
    {
      "src": "type_name [9938,9944]",
      "dest": "type_name [4311,4317]"
    },
    {
      "src": "bytes32: bytes32 [70587,70594]",
      "dest": "bytes32: bytes32 [11590,11597]"
    },
    {
      "src": "]: ] [11083,11084]",
      "dest": "]: ] [4603,4604]"
    },
    {
      "src": "=>: => [11279,11281]",
      "dest": "=>: => [4537,4539]"
    },
    {
      "src": "call_expression [72176,72259]",
      "dest": "call_expression [12053,12136]"
    },
    {
      "src": "uint256: uint256 [4098,4105]",
      "dest": "uint256: uint256 [2183,2190]"
    },
    {
      "src": "visibility [68132,68140]",
      "dest": "visibility [8960,8968]"
    },
    {
      "src": "type_name [7181,7188]",
      "dest": "type_name [2975,2982]"
    },
    {
      "src": "call_argument [58967,58974]",
      "dest": "call_argument [8645,8652]"
    },
    {
      "src": "member_expression [68376,68405]",
      "dest": "member_expression [9212,9241]"
    },
    {
      "src": ".: . [69788,69789]",
      "dest": ".: . [10624,10625]"
    },
    {
      "src": "identifier: _reward [57364,57371]",
      "dest": "identifier: _reward [8280,8287]"
    },
    {
      "src": "]: ] [69382,69383]",
      "dest": "]: ] [10218,10219]"
    },
    {
      "src": "uint128: uint128 [4130,4137]",
      "dest": "uint128: uint128 [2215,2222]"
    },
    {
      "src": "identifier: _maxAllowableLockedTokens [2744,2769]",
      "dest": "identifier: _maxAllowableLockedTokens [1500,1525]"
    },
    {
      "src": "call_expression [70256,70295]",
      "dest": "call_expression [11212,11251]"
    },
    {
      "src": "return: return [11503,11509]",
      "dest": "return: return [6572,6578]"
    },
    {
      "src": "number_literal: 0 [57493,57494]",
      "dest": "number_literal: 0 [8344,8345]"
    },
    {
      "src": "identifier: memoryAddress [70802,70815]",
      "dest": "identifier: memoryAddress [11805,11818]"
    },
    {
      "src": "address: address [7222,7229]",
      "dest": "address: address [3016,3023]"
    },
    {
      "src": "identifier: this [70719,70723]",
      "dest": "identifier: this [11722,11726]"
    },
    {
      "src": "call_expression [15357,15653]",
      "dest": "call_expression [5182,5363]"
    },
    {
      "src": "(: ( [27108,27109]",
      "dest": "(: ( [7736,7737]"
    },
    {
      "src": "type_name [9475,9481]",
      "dest": "type_name [3559,3565]"
    },
    {
      "src": "returns: returns [69680,69687]",
      "dest": "returns: returns [10516,10523]"
    },
    {
      "src": "view: view [865,869]",
      "dest": "view: view [339,343]"
    },
    {
      "src": "virtual: virtual [2936,2943]",
      "dest": "virtual: virtual [1692,1699]"
    },
    {
      "src": "comment: //------------------------Upgradeable------------------------ [70406,70467]",
      "dest": "comment: //------------------------Upgradeable------------------------ [11409,11470]"
    },
    {
      "src": "]: ] [72532,72533]",
      "dest": "]: ] [12409,12410]"
    },
    {
      "src": "identifier: push [33982,33986]",
      "dest": "identifier: push [7681,7685]"
    },
    {
      "src": "primitive_type [11113,11120]",
      "dest": "primitive_type [4748,4755]"
    },
    {
      "src": "type_name [8755,8762]",
      "dest": "type_name [3187,3194]"
    },
    {
      "src": "internal: internal [70612,70620]",
      "dest": "internal: internal [11615,11623]"
    },
    {
      "src": "(: ( [1952,1953]",
      "dest": "(: ( [1164,1165]"
    },
    {
      "src": "identifier: _blockNumber [70023,70035]",
      "dest": "identifier: _blockNumber [10859,10871]"
    },
    {
      "src": "type_name [1145,1158]",
      "dest": "type_name [582,595]"
    },
    {
      "src": "identifier: lastCommittedPeriod [9351,9370]",
      "dest": "identifier: lastCommittedPeriod [3435,3454]"
    },
    {
      "src": "call_argument [3101,3120]",
      "dest": "call_argument [1857,1876]"
    },
    {
      "src": "struct_member [9380,9393]",
      "dest": "struct_member [3464,3477]"
    },
    {
      "src": ",: , [7250,7251]",
      "dest": ",: , [3044,3045]"
    },
    {
      "src": "identifier: require [33612,33619]",
      "dest": "identifier: require [7432,7439]"
    },
    {
      "src": "address: address [10912,10919]",
      "dest": "address: address [4419,4426]"
    },
    {
      "src": "visibility [1247,1253]",
      "dest": "visibility [4214,4220]"
    },
    {
      "src": "member_expression [15920,15930]",
      "dest": "member_expression [5561,5571]"
    },
    {
      "src": "parameter [23980,23997]",
      "dest": "parameter [6903,6920]"
    },
    {
      "src": "identifier: _ [16058,16059]",
      "dest": "identifier: _ [5620,5621]"
    },
    {
      "src": "user_defined_type [33642,33652]",
      "dest": "user_defined_type [7511,7521]"
    },
    {
      "src": "array_access [15909,15931]",
      "dest": "array_access [5550,5572]"
    },
    {
      "src": "visibility [23999,24007]",
      "dest": "visibility [6930,6938]"
    },
    {
      "src": ".: . [72251,72252]",
      "dest": ".: . [12128,12129]"
    },
    {
      "src": "array_access [57531,57550]",
      "dest": "array_access [8411,8430]"
    },
    {
      "src": "call_argument [70130,70142]",
      "dest": "call_argument [11012,11024]"
    },
    {
      "src": "=: = [72558,72559]",
      "dest": "=: = [12435,12436]"
    },
    {
      "src": "identifier: reward [7260,7266]",
      "dest": "identifier: reward [3054,3060]"
    },
    {
      "src": "call_argument [72693,73185]",
      "dest": "call_argument [12583,12661]"
    },
    {
      "src": ",: , [68884,68885]",
      "dest": ",: , [9720,9721]"
    },
    {
      "src": "public: public [1293,1299]",
      "dest": "public: public [712,718]"
    },
    {
      "src": "call_expression [3060,3141]",
      "dest": "call_expression [1816,1897]"
    },
    {
      "src": "comment: /**     * @notice Get the value of locked tokens for active stakers in (getCurrentPeriod() + _offsetPeriods) period     * as well as stakers and their locked tokens     * @param _offsetPeriods Amount of periods for locked tokens calculation     * @param _startIndex Start index for looking in stakers array     * @param _maxStakers Max stakers for looking, if set 0 then all will be used     * @return allLockedTokens Sum of locked tokens for active stakers     * @return activeStakers Array of stakers and their locked tokens. Stakers addresses stored as uint256     * @dev Note that activeStakers[0] in an array of uint256, but you want addresses. Careful when used directly!     */ [20518,21202]",
      "dest": "comment: //    */ [6149,6157]"
    },
    {
      "src": "struct_member [8898,8912]",
      "dest": "struct_member [3330,3344]"
    },
    {
      "src": "returns: returns [70058,70065]",
      "dest": "returns: returns [10894,10901]"
    },
    {
      "src": "event_definition [6206,6261]",
      "dest": "event_definition [2642,2697]"
    },
    {
      "src": "identifier: NuCypherToken [1962,1975]",
      "dest": "identifier: NuCypherToken [1174,1187]"
    },
    {
      "src": "visibility [68327,68335]",
      "dest": "visibility [9163,9171]"
    },
    {
      "src": "parameter [69689,69707]",
      "dest": "parameter [10525,10543]"
    },
    {
      "src": "identifier: result [70792,70798]",
      "dest": "identifier: result [11795,11801]"
    },
    {
      "src": "type_name [72334,72341]",
      "dest": "type_name [12211,12218]"
    },
    {
      "src": "primitive_type [68518,68525]",
      "dest": "primitive_type [9354,9361]"
    },
    {
      "src": "identifier: _staker [58967,58974]",
      "dest": "identifier: _staker [8645,8652]"
    },
    {
      "src": "identifier: _unlockingDuration [33573,33591]",
      "dest": "identifier: _unlockingDuration [7363,7381]"
    },
    {
      "src": "parameter [69709,69725]",
      "dest": "parameter [10545,10561]"
    },
    {
      "src": "identifier: _value [33558,33564]",
      "dest": "identifier: _value [7340,7346]"
    },
    {
      "src": "uint256: uint256 [69531,69538]",
      "dest": "uint256: uint256 [10367,10374]"
    },
    {
      "src": "identifier: _staker [69780,69787]",
      "dest": "identifier: _staker [10616,10623]"
    },
    {
      "src": "identifier: investigator [7238,7250]",
      "dest": "identifier: investigator [3032,3044]"
    },
    {
      "src": "uint256: uint256 [7252,7259]",
      "dest": "uint256: uint256 [3046,3053]"
    },
    {
      "src": "primitive_type [9653,9660]",
      "dest": "primitive_type [3737,3744]"
    },
    {
      "src": "identifier: balanceHistory [11092,11106]",
      "dest": "identifier: balanceHistory [4612,4626]"
    },
    {
      "src": "parameter [70587,70602]",
      "dest": "parameter [11590,11605]"
    },
    {
      "src": "uint256: uint256 [7205,7212]",
      "dest": "uint256: uint256 [2999,3006]"
    },
    {
      "src": "identifier: deposit [33493,33500]",
      "dest": "identifier: depositFromWorkLock [7278,7297]"
    },
    {
      "src": "state_variable_declaration [10912,10937]",
      "dest": "state_variable_declaration [4419,4444]"
    },
    {
      "src": "member_expression [27118,27128]",
      "dest": "member_expression [7737,7747]"
    },
    {
      "src": "identifier: _investigator [59206,59219]",
      "dest": "identifier: _investigator [8747,8760]"
    },
    {
      "src": "primitive_type [9308,9314]",
      "dest": "primitive_type [3392,3398]"
    },
    {
      "src": "uint160: uint160 [72394,72401]",
      "dest": "uint160: uint160 [12271,12278]"
    },
    {
      "src": "identifier: IERC900History [3954,3968]",
      "dest": "identifier: IERC900History [2114,2128]"
    },
    {
      "src": "primitive_type [9938,9944]",
      "dest": "primitive_type [4311,4317]"
    },
    {
      "src": "}: } [70149,70150]",
      "dest": "}: } [11059,11060]"
    },
    {
      "src": ".: . [15923,15924]",
      "dest": ".: . [5564,5565]"
    },
    {
      "src": ",: , [70746,70747]",
      "dest": ",: , [11749,11750]"
    },
    {
      "src": "binary_expression [24044,24075]",
      "dest": "binary_expression [5741,5772]"
    },
    {
      "src": "identifier: pastDowntime [69789,69801]",
      "dest": "identifier: pastDowntime [10625,10637]"
    },
    {
      "src": "comment: /**     * @notice Signals that tokens were stake locked     * @param staker Staker address     * @param value Amount locked (in NuNits)     * @param firstPeriod Starting lock period     * @param periods Number of periods tokens will be locked     */ [4470,4719]",
      "dest": "comment: /**     * @notice Signals that NU tokens were withdrawn to the staker     * @param staker Staker address     * @param value Amount withdraws (in NuNits)     */ [2478,2637]"
    },
    {
      "src": "identifier: _blockNumber [70282,70294]",
      "dest": "identifier: _blockNumber [11238,11250]"
    },
    {
      "src": "primitive_type [68797,68803]",
      "dest": "primitive_type [9633,9639]"
    },
    {
      "src": "user_defined_type [1962,1975]",
      "dest": "user_defined_type [1174,1187]"
    },
    {
      "src": "contract_body [1101,3751]",
      "dest": "contract_body [576,1906]"
    },
    {
      "src": "identifier: length [68189,68195]",
      "dest": "identifier: length [9025,9031]"
    },
    {
      "src": "||: || [15621,15623]",
      "dest": "||: || [5264,5266]"
    },
    {
      "src": "identifier: StakerInfo [33642,33652]",
      "dest": "identifier: StakerInfo [7511,7521]"
    },
    {
      "src": "(: ( [59159,59160]",
      "dest": "(: ( [8700,8701]"
    },
    {
      "src": "mapping: mapping [11001,11008]",
      "dest": "mapping: mapping [4796,4803]"
    },
    {
      "src": "=: = [2680,2681]",
      "dest": "=: = [1436,1437]"
    },
    {
      "src": "visibility [71805,71811]",
      "dest": "visibility [11978,11984]"
    },
    {
      "src": "state_variable_declaration [1145,1182]",
      "dest": "state_variable_declaration [582,619]"
    },
    {
      "src": "identifier: info [72501,72505]",
      "dest": "identifier: info [12378,12382]"
    },
    {
      "src": ".: . [27121,27122]",
      "dest": ".: . [7740,7741]"
    },
    {
      "src": "binary_expression [48317,48332]",
      "dest": "binary_expression [7609,7624]"
    },
    {
      "src": "primitive_type [9746,9753]",
      "dest": "primitive_type [3830,3837]"
    },
    {
      "src": "type_name [9842,9854]",
      "dest": "type_name [3926,3938]"
    },
    {
      "src": "&&: && [48333,48335]",
      "dest": "&&: && [7625,7627]"
    },
    {
      "src": "external: external [69666,69674]",
      "dest": "external: external [10502,10510]"
    },
    {
      "src": "address: address [72386,72393]",
      "dest": "address: address [12263,12270]"
    },
    {
      "src": "call_argument [72184,72258]",
      "dest": "call_argument [12061,12135]"
    },
    {
      "src": "parameter [69999,70013]",
      "dest": "parameter [10835,10849]"
    },
    {
      "src": "call_argument [58986,58999]",
      "dest": "call_argument [8664,8677]"
    },
    {
      "src": "external: external [16434,16442]",
      "dest": "external: external [6530,6538]"
    },
    {
      "src": "{: { [59173,59174]",
      "dest": "{: { [8714,8715]"
    },
    {
      "src": "state_mutability [68141,68145]",
      "dest": "state_mutability [8969,8973]"
    },
    {
      "src": "parameter [2140,2173]",
      "dest": "parameter [1247,1280]"
    },
    {
      "src": "type_name [16269,16276]",
      "dest": "type_name [6034,6041]"
    },
    {
      "src": "(: ( [70629,70630]",
      "dest": "(: ( [11632,11633]"
    },
    {
      "src": "type_name [2097,2104]",
      "dest": "type_name [1204,1211]"
    },
    {
      "src": "identifier: reservedSlot4 [9754,9767]",
      "dest": "identifier: reservedSlot4 [3838,3851]"
    },
    {
      "src": "function_body [70075,70150]",
      "dest": "function_body [10912,11060]"
    },
    {
      "src": "identifier: sender [24048,24054]",
      "dest": "identifier: sender [5745,5751]"
    },
    {
      "src": "array_access [69364,69383]",
      "dest": "array_access [10200,10219]"
    },
    {
      "src": "identifier: info [72917,72921]",
      "dest": "identifier: info [12651,12655]"
    },
    {
      "src": "function_definition [71763,75085]",
      "dest": "function_definition [11936,12678]"
    },
    {
      "src": "): ) [4462,4463]",
      "dest": "): ) [2470,2471]"
    },
    {
      "src": "(: ( [70230,70231]",
      "dest": "(: ( [11140,11141]"
    },
    {
      "src": "\": \" [209,210]",
      "dest": "\": \" [214,215]"
    },
    {
      "src": "emit: emit [38078,38082]",
      "dest": "emit: emit [7812,7816]"
    },
    {
      "src": "interface_declaration [805,896]",
      "dest": "interface_declaration [279,370]"
    },
    {
      "src": "identifier: policyManager [10733,10746]",
      "dest": "identifier: token [4145,4150]"
    },
    {
      "src": ".: . [34266,34267]",
      "dest": ".: . [7785,7786]"
    },
    {
      "src": "return: return [16288,16294]",
      "dest": "return: return [6053,6059]"
    },
    {
      "src": "override: override [71812,71820]",
      "dest": "override: override [11985,11993]"
    },
    {
      "src": "&&: && [15572,15574]",
      "dest": "&&: && [5215,5217]"
    },
    {
      "src": "call_argument [72209,72239]",
      "dest": "call_argument [12086,12116]"
    },
    {
      "src": "(: ( [11483,11484]",
      "dest": "(: ( [6552,6553]"
    },
    {
      "src": "if: if [57727,57729]",
      "dest": "if: if [8555,8557]"
    },
    {
      "src": "variable_declaration [72334,72355]",
      "dest": "variable_declaration [12211,12232]"
    },
    {
      "src": "address: address [57274,57281]",
      "dest": "address: address [8190,8197]"
    },
    {
      "src": "expression_statement [33612,33633]",
      "dest": "expression_statement [7432,7502]"
    },
    {
      "src": "comment: /**     * @notice Return the length of the array of stakers     */ [68033,68099]",
      "dest": "comment: /**     * @notice Return the length of the array of stakers     */ [8861,8927]"
    },
    {
      "src": "type_name [70067,70074]",
      "dest": "type_name [10903,10910]"
    },
    {
      "src": "uint256: uint256 [1387,1394]",
      "dest": "uint256: uint256 [810,817]"
    },
    {
      "src": "member_expression [68376,68412]",
      "dest": "member_expression [9212,9248]"
    },
    {
      "src": "public: public [10109,10115]",
      "dest": "public: public [4824,4830]"
    },
    {
      "src": "primitive_type [9344,9350]",
      "dest": "primitive_type [3428,3434]"
    },
    {
      "src": "identifier: safeTransfer [59193,59205]",
      "dest": "identifier: safeTransfer [8734,8746]"
    },
    {
      "src": ".: . [16314,16315]",
      "dest": ".: . [6079,6080]"
    },
    {
      "src": "call_argument [2198,2441]",
      "dest": "call_argument [1305,1375]"
    },
    {
      "src": ",: , [69529,69530]",
      "dest": ",: , [10365,10366]"
    },
    {
      "src": "]: ] [72367,72368]",
      "dest": "]: ] [12244,12245]"
    },
    {
      "src": "call_expression [24036,24076]",
      "dest": "call_expression [5733,5813]"
    },
    {
      "src": "import_directive [142,164]",
      "dest": "import_directive [149,171]"
    },
    {
      "src": "type_cast_expression [72394,72453]",
      "dest": "type_cast_expression [12271,12330]"
    },
    {
      "src": "expression_statement [2954,2985]",
      "dest": "expression_statement [1710,1741]"
    },
    {
      "src": ",: , [14007,14008]",
      "dest": ",: , [5128,5129]"
    },
    {
      "src": "visibility [69666,69674]",
      "dest": "visibility [10502,10510]"
    },
    {
      "src": "address: address [57325,57332]",
      "dest": "address: address [8241,8248]"
    },
    {
      "src": "parameter [68155,68162]",
      "dest": "parameter [8991,8998]"
    },
    {
      "src": "type_cast_expression [24058,24075]",
      "dest": "type_cast_expression [5755,5772]"
    },
    {
      "src": "struct_member [9542,9557]",
      "dest": "struct_member [3626,3641]"
    },
    {
      "src": "identifier: Downtime [69741,69749]",
      "dest": "identifier: Downtime [10577,10585]"
    },
    {
      "src": "parameter [33566,33591]",
      "dest": "parameter [7356,7381]"
    },
    {
      "src": "member_expression [72209,72230]",
      "dest": "member_expression [12086,12107]"
    },
    {
      "src": "event: event [6206,6211]",
      "dest": "event: event [2642,2647]"
    },
    {
      "src": "emit: emit [58954,58958]",
      "dest": "emit: emit [8632,8636]"
    },
    {
      "src": "comment: /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState` [71667,71758]",
      "dest": "comment: /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `verifyState` [11840,11931]"
    }
  ],
  "actions": [
    {
      "action": "move-tree",
      "tree": "comment: /** * @notice PolicyManager interface */ [214,254]",
      "parent": "source_file [0,12682]",
      "at": 13
    },
    {
      "action": "move-tree",
      "tree": "comment: /** * @notice Adjudicator interface */ [628,666]",
      "parent": "source_file [0,12682]",
      "at": 15
    },
    {
      "action": "insert-tree",
      "tree": "import_directive [217,240]",
      "parent": "source_file [0,12682]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "comment: /** * @notice PolicyManager interface */ [214,254]",
      "label": "/** * @title StakingEscrowStub * @notice Stub is used to deploy main StakingEscrow after all other contract and make some variables immutable * @dev |v1.1.0| */"
    },
    {
      "action": "update-node",
      "tree": "comment: /** * @notice Adjudicator interface */ [628,666]",
      "label": "/** * @title StakingEscrow * @notice Contract holds and locks stakers tokens. * Each staker that locks their tokens will receive some compensation * @dev |v6.1.1| */"
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Predefines some variables for use when deploying other contracts     * @param _token Token contract     * @param _genesisHoursPerPeriod Size of period in hours at genesis     * @param _hoursPerPeriod Size of period in hours     * @param _minLockedPeriods Min amount of periods during which tokens can be locked     * @param _minAllowableLockedTokens Min amount of tokens that can be locked     * @param _maxAllowableLockedTokens Max amount of tokens that can be locked     */ [1443,1936]",
      "parent": "contract_body [576,1906]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Signals that a sub-stake was divided     * @param staker Staker address     * @param oldValue Old sub-stake value (in NuNits)     * @param lastPeriod Final locked period of old sub-stake     * @param newValue New sub-stake value (in NuNits)     * @param periods Number of periods to extend sub-stake     */ [4818,5142]",
      "parent": "contract_body [2129,12681]",
      "at": 39
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Signals that two sub-stakes were merged     * @param staker Staker address     * @param value1 Value of first sub-stake (in NuNits)     * @param value2 Value of second sub-stake (in NuNits)     * @param lastPeriod Final locked period of merged sub-stake     */ [5308,5586]",
      "parent": "contract_body [2129,12681]",
      "at": 39
    },
    {
      "action": "move-tree",
      "tree": "comment: // only to make verifyState from previous version work, temporary [11313,11378]",
      "parent": "contract_body [2129,12681]",
      "at": 59
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [10536,10577]",
      "parent": "contract_body [2129,12681]",
      "at": 59
    },
    {
      "action": "move-tree",
      "tree": "comment: // TODO remove after upgrade #2579 [11383,11417]",
      "parent": "contract_body [2129,12681]",
      "at": 60
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [9938,9983]",
      "parent": "contract_body [2129,12681]",
      "at": 60
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Constructor sets address of token contract and coefficients for minting     * @param _token Token contract     * @param _policyManager Policy Manager contract     * @param _adjudicator Adjudicator contract     * @param _workLock WorkLock contract. Zero address if there is no WorkLock     * @param _genesisHoursPerPeriod Size of period in hours at genesis     * @param _hoursPerPeriod Size of period in hours     * @param _issuanceDecayCoefficient (d) Coefficient which modifies the rate at which the maximum issuance decays,     * only applicable to Phase 2. d = 365 * half-life / LOG2 where default half-life = 2.     * See Equation 10 in Staking Protocol & Economics paper     * @param _lockDurationCoefficient1 (k1) Numerator of the coefficient which modifies the extent     * to which a stake's lock duration affects the subsidy it receives. Affects stakers differently.     * Applicable to Phase 1 and Phase 2. k1 = k2 * small_stake_multiplier where default small_stake_multiplier = 0.5.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _lockDurationCoefficient2 (k2) Denominator of the coefficient which modifies the extent     * to which a stake's lock duration affects the subsidy it receives. Affects stakers differently.     * Applicable to Phase 1 and Phase 2. k2 = maximum_rewarded_periods / (1 - small_stake_multiplier)     * where default maximum_rewarded_periods = 365 and default small_stake_multiplier = 0.5.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _maximumRewardedPeriods (kmax) Number of periods beyond which a stake's lock duration     * no longer increases the subsidy it receives. kmax = reward_saturation * 365 where default reward_saturation = 1.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _firstPhaseTotalSupply Total supply for the first phase     * @param _firstPhaseMaxIssuance (Imax) Maximum number of new tokens minted per period during Phase 1.     * See Equation 7 in Staking Protocol & Economics paper.     * @param _minLockedPeriods Min amount of periods during which tokens can be locked     * @param _minAllowableLockedTokens Min amount of tokens that can be locked     * @param _maxAllowableLockedTokens Max amount of tokens that can be locked     * @param _minWorkerPeriods Min amount of periods while a worker can't be changed     */ [11583,13961]",
      "parent": "contract_body [2129,12681]",
      "at": 61
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Get all flags for the staker     */ [16333,16386]",
      "parent": "contract_body [2129,12681]",
      "at": 65
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [11263,11308]",
      "parent": "contract_body [2129,12681]",
      "at": 66
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Get the start period. Use in the calculation of the last period of the sub stake     * @param _info Staker structure     * @param _currentPeriod Current period     */ [16976,17160]",
      "parent": "contract_body [2129,12681]",
      "at": 70
    },
    {
      "action": "move-tree",
      "tree": "comment: // former slot for PolicyManager [11128,11160]",
      "parent": "contract_body [2129,12681]",
      "at": 73
    },
    {
      "action": "move-tree",
      "tree": "comment: // former slot for Adjudicator [11180,11210]",
      "parent": "contract_body [2129,12681]",
      "at": 75
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [11113,11127]",
      "parent": "contract_body [2129,12681]",
      "at": 75
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [11001,11035]",
      "parent": "contract_body [2129,12681]",
      "at": 76
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Get the last period of the sub stake     * @param _subStake Sub stake structure     * @param _startPeriod Pre-calculated start period     */ [17530,17688]",
      "parent": "contract_body [2129,12681]",
      "at": 77
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Get the last period of the sub stake     * @param _staker Staker     * @param _index Stake index     */ [18130,18251]",
      "parent": "contract_body [2129,12681]",
      "at": 78
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Get the value of locked tokens for a staker in a specified period     * @dev Information may be incorrect for rewarded or not committed surpassed period     * @param _info Staker structure     * @param _currentPeriod Current period     * @param _period Next period     */ [18630,18919]",
      "parent": "contract_body [2129,12681]",
      "at": 82
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Get work that completed by the staker     */ [22826,22888]",
      "parent": "contract_body [2129,12681]",
      "at": 117
    },
    {
      "action": "move-tree",
      "tree": "function_definition [11422,11577]",
      "parent": "contract_body [2129,12681]",
      "at": 117
    },
    {
      "action": "move-tree",
      "tree": "comment: //------------------------Main methods------------------------ [23662,23724]",
      "parent": "contract_body [2129,12681]",
      "at": 117
    },
    {
      "action": "move-tree",
      "tree": "comment: /**     * @notice Deposit tokens from WorkLock contract     * @param _staker Staker address     * @param _value Amount of tokens to deposit     * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled     */ [26251,26510]",
      "parent": "contract_body [2129,12681]",
      "at": 119
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Predefines some variables for use when deploying other contracts     * @param _token Token contract     * @param _genesisHoursPerPeriod Size of period in hours at genesis     * @param _hoursPerPeriod Size of period in hours     * @param _minLockedPeriods Min amount of periods during which tokens can be locked     * @param _minAllowableLockedTokens Min amount of tokens that can be locked     * @param _maxAllowableLockedTokens Max amount of tokens that can be locked     */ [1443,1936]",
      "label": "// only to deploy WorkLock"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**     * @notice Predefines some variables for use when deploying other contracts     * @param _token Token contract     * @param _minAllowableLockedTokens Min amount of tokens that can be locked     * @param _maxAllowableLockedTokens Max amount of tokens that can be locked     */ [866,1148]",
      "parent": "contract_body [576,1906]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": ",: , [2021,2022]",
      "parent": "constructor_definition [1153,1532]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Signals that tokens were deposited     * @param staker Staker address     * @param value Amount deposited (in NuNits)     * @param periods Number of periods tokens will be locked     */ [4185,4388]",
      "label": "/**     * @notice Signals that tokens were deposited     * @param staker Staker address     * @param value Amount deposited (in NuNits)     */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Signals that tokens were stake locked     * @param staker Staker address     * @param value Amount locked (in NuNits)     * @param firstPeriod Starting lock period     * @param periods Number of periods tokens will be locked     */ [4470,4719]",
      "label": "/**     * @notice Signals that NU tokens were withdrawn to the staker     * @param staker Staker address     * @param value Amount withdraws (in NuNits)     */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Signals that a sub-stake was divided     * @param staker Staker address     * @param oldValue Old sub-stake value (in NuNits)     * @param lastPeriod Final locked period of old sub-stake     * @param newValue New sub-stake value (in NuNits)     * @param periods Number of periods to extend sub-stake     */ [4818,5142]",
      "label": "// indices for flags (0-4 were in use, skip it in future)"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Signals that two sub-stakes were merged     * @param staker Staker address     * @param value1 Value of first sub-stake (in NuNits)     * @param value2 Value of second sub-stake (in NuNits)     * @param lastPeriod Final locked period of merged sub-stake     */ [5308,5586]",
      "label": "//    uint8 internal constant SNAPSHOTS_DISABLED_INDEX = 3;"
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [1240,1281]",
      "parent": "contract_body [2129,12681]",
      "at": 57
    },
    {
      "action": "update-node",
      "tree": "comment: // only to make verifyState from previous version work, temporary [11313,11378]",
      "label": "// outdated"
    },
    {
      "action": "update-node",
      "tree": "comment: // TODO remove after upgrade #2579 [11383,11417]",
      "label": "// outdated"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Constructor sets address of token contract and coefficients for minting     * @param _token Token contract     * @param _policyManager Policy Manager contract     * @param _adjudicator Adjudicator contract     * @param _workLock WorkLock contract. Zero address if there is no WorkLock     * @param _genesisHoursPerPeriod Size of period in hours at genesis     * @param _hoursPerPeriod Size of period in hours     * @param _issuanceDecayCoefficient (d) Coefficient which modifies the rate at which the maximum issuance decays,     * only applicable to Phase 2. d = 365 * half-life / LOG2 where default half-life = 2.     * See Equation 10 in Staking Protocol & Economics paper     * @param _lockDurationCoefficient1 (k1) Numerator of the coefficient which modifies the extent     * to which a stake's lock duration affects the subsidy it receives. Affects stakers differently.     * Applicable to Phase 1 and Phase 2. k1 = k2 * small_stake_multiplier where default small_stake_multiplier = 0.5.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _lockDurationCoefficient2 (k2) Denominator of the coefficient which modifies the extent     * to which a stake's lock duration affects the subsidy it receives. Affects stakers differently.     * Applicable to Phase 1 and Phase 2. k2 = maximum_rewarded_periods / (1 - small_stake_multiplier)     * where default maximum_rewarded_periods = 365 and default small_stake_multiplier = 0.5.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _maximumRewardedPeriods (kmax) Number of periods beyond which a stake's lock duration     * no longer increases the subsidy it receives. kmax = reward_saturation * 365 where default reward_saturation = 1.     * See Equation 8 in Staking Protocol & Economics paper.     * @param _firstPhaseTotalSupply Total supply for the first phase     * @param _firstPhaseMaxIssuance (Imax) Maximum number of new tokens minted per period during Phase 1.     * See Equation 7 in Staking Protocol & Economics paper.     * @param _minLockedPeriods Min amount of periods during which tokens can be locked     * @param _minAllowableLockedTokens Min amount of tokens that can be locked     * @param _maxAllowableLockedTokens Max amount of tokens that can be locked     * @param _minWorkerPeriods Min amount of periods while a worker can't be changed     */ [11583,13961]",
      "label": "// outdated"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get all flags for the staker     */ [16333,16386]",
      "label": "// outdated"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get the start period. Use in the calculation of the last period of the sub stake     * @param _info Staker structure     * @param _currentPeriod Current period     */ [16976,17160]",
      "label": "// outdated"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get the last period of the sub stake     * @param _subStake Sub stake structure     * @param _startPeriod Pre-calculated start period     */ [17530,17688]",
      "label": "// outdated"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get the last period of the sub stake     * @param _staker Staker     * @param _index Stake index     */ [18130,18251]",
      "label": "/**     * @notice Constructor sets address of token contract and parameters for staking     * @param _token NuCypher token contract     * @param _workLock WorkLock contract. Zero address if there is no WorkLock     */"
    },
    {
      "action": "insert-node",
      "tree": "modifier_definition [5506,5628]",
      "parent": "contract_body [2129,12681]",
      "at": 43
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get the value of locked tokens for a staker in a specified period     * @dev Information may be incorrect for rewarded or not committed surpassed period     * @param _info Staker structure     * @param _currentPeriod Current period     * @param _period Next period     */ [18630,18919]",
      "label": "/**     * @dev Checks caller is WorkLock contract     */"
    },
    {
      "action": "insert-node",
      "tree": "modifier_definition [5695,5831]",
      "parent": "contract_body [2129,12681]",
      "at": 45
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get the value of locked tokens for a staker in a future period     * @dev This function is used by PreallocationEscrow so its signature can't be updated.     * @param _staker Staker     * @param _offsetPeriods Amount of periods that will be added to the current period     */ [19508,19801]",
      "label": "//    /**"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get the last committed staker's period     * @param _staker Staker     */ [20176,20267]",
      "label": "//    * @notice Get all flags for the staker"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get the value of locked tokens for active stakers in (getCurrentPeriod() + _offsetPeriods) period     * as well as stakers and their locked tokens     * @param _offsetPeriods Amount of periods for locked tokens calculation     * @param _startIndex Start index for looking in stakers array     * @param _maxStakers Max stakers for looking, if set 0 then all will be used     * @return allLockedTokens Sum of locked tokens for active stakers     * @return activeStakers Array of stakers and their locked tokens. Stakers addresses stored as uint256     * @dev Note that activeStakers[0] in an array of uint256, but you want addresses. Careful when used directly!     */ [20518,21202]",
      "label": "//    */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Get worker using staker's address     */ [22629,22687]",
      "label": "//    function getFlags(address _staker)"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Find index of downtime structure that includes specified period     * @dev If specified period is outside all downtime periods, the length of the array will be returned     * @param _staker Staker     * @param _period Specified period number     */ [23031,23297]",
      "label": "//        external view returns ("
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Start or stop measuring the work of a staker     * @param _staker Staker     * @param _measureWork Value for `measureWork` parameter     * @return Work that was previously done     */ [23729,23930]",
      "label": "//            bool snapshots"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Bond worker     * @param _worker Worker address. Must be a real address, not a contract     */ [24416,24528]",
      "label": "//        )"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Set `reStake` parameter. If true then all staking rewards will be added to locked stake     * @param _reStake Value for parameter     */ [25761,25915]",
      "label": "//    {"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Set `windDown` parameter.     * If true then stake's duration will be decreasing in each period with `commitToNextPeriod()`     * @param _windDown Value for parameter     */ [27186,27377]",
      "label": "//        StakerInfo storage info = stakerInfo[_staker];"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Activate/deactivate taking snapshots of balances     * @param _enableSnapshots True to activate snapshots, False to deactivate     */ [28844,28995]",
      "label": "//        snapshots = !info.flags.bitSet(SNAPSHOTS_DISABLED_INDEX);"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Adds a new snapshot to both the staker and global balance histories,     * assuming the staker's balance was already changed     * @param _info Reference to affected staker's struct     * @param _addition Variance in balance. It can be positive or negative.     */ [29727,30009]",
      "label": "//    }"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @notice Implementation of the receiveApproval(address,uint256,address,bytes) method     * (see NuCypherToken contract). Deposit all tokens that were approved to transfer     * @param _from Staker     * @param _value Amount of tokens to deposit     * @param _tokenContract Token contract address     * @notice (param _extraData) Amount of periods during which tokens will be unlocked when wind down is enabled     */ [30379,30804]",
      "label": "/**     * @notice Stub for WorkLock     * @param _staker Staker     * @param _measureWork Value for `measureWork` parameter     * @return Work that was previously done     */"
    },
    {
      "action": "insert-node",
      "tree": "function_definition [6858,6999]",
      "parent": "contract_body [2129,12681]",
      "at": 64
    },
    {
      "action": "move-tree",
      "tree": ",: , [33532,33533]",
      "parent": "function_definition [7269,7850]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: genesisSecondsPerPeriod [1211,1234]",
      "label": "secondsPerPeriod"
    },
    {
      "action": "insert-node",
      "tree": "=: = [696,697]",
      "parent": "state_variable_declaration [655,700]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 1 [698,699]",
      "parent": "state_variable_declaration [655,700]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "=: = [746,747]",
      "parent": "state_variable_declaration [705,750]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0 [748,749]",
      "parent": "state_variable_declaration [705,750]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: Issuer [3946,3952]",
      "label": "Upgradeable"
    },
    {
      "action": "update-node",
      "tree": "identifier: policyManager [10733,10746]",
      "label": "token"
    },
    {
      "action": "update-node",
      "tree": "identifier: secondsPerPeriod [1264,1280]",
      "label": "previousPeriodSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: minWorkerPeriods [10560,10576]",
      "label": "currentPeriodSupply"
    },
    {
      "action": "move-tree",
      "tree": "visibility [10497,10503]",
      "parent": "state_variable_declaration [4311,4346]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: RESERVED_PERIOD [9963,9978]",
      "label": "currentMintingPeriod"
    },
    {
      "action": "update-node",
      "tree": "identifier: _lockedPerPeriod [11291,11307]",
      "label": "stub1"
    },
    {
      "action": "update-node",
      "tree": "identifier: stub1 [11121,11126]",
      "label": "stub4"
    },
    {
      "action": "move-tree",
      "tree": "visibility [10109,10115]",
      "parent": "state_variable_declaration [4796,4847]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: stub4 [11029,11034]",
      "label": "lockedPerPeriod"
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [15140,15177]",
      "parent": "function_body [5172,5425]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "modifier: modifier [5506,5514]",
      "parent": "modifier_definition [5506,5628]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: onlyStaker [5515,5525]",
      "parent": "modifier_definition [5506,5628]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [5525,5526]",
      "parent": "modifier_definition [5506,5628]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [5526,5527]",
      "parent": "modifier_definition [5506,5628]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function_body [5532,5628]",
      "parent": "modifier_definition [5506,5628]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "modifier: modifier [5695,5703]",
      "parent": "modifier_definition [5695,5831]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: onlyWorkLock [5704,5716]",
      "parent": "modifier_definition [5695,5831]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [5716,5717]",
      "parent": "modifier_definition [5695,5831]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [5717,5718]",
      "parent": "modifier_definition [5695,5831]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "function_body [24026,24410]",
      "parent": "modifier_definition [5695,5831]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: lockedPerPeriod [11431,11446]",
      "label": "getCompletedWork"
    },
    {
      "action": "move-tree",
      "tree": "parameter [16409,16424]",
      "parent": "function_definition [6487,6605]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [16434,16442]",
      "parent": "function_definition [6487,6605]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "function: function [6858,6866]",
      "parent": "function_definition [6858,6999]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setWorkMeasurement [6867,6885]",
      "parent": "function_definition [6858,6999]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [6885,6886]",
      "parent": "function_definition [6858,6999]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23963,23978]",
      "parent": "function_definition [6858,6999]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [6901,6902]",
      "parent": "function_definition [6858,6999]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [23980,23997]",
      "parent": "function_definition [6858,6999]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [6920,6921]",
      "parent": "function_definition [6858,6999]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [23999,24007]",
      "parent": "function_definition [6858,6999]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "modifier_invocation [6939,6951]",
      "parent": "function_definition [6858,6999]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [24008,24025]",
      "parent": "function_definition [6858,6999]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [6974,6999]",
      "parent": "function_definition [6858,6999]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "identifier: deposit [33493,33500]",
      "label": "depositFromWorkLock"
    },
    {
      "action": "move-tree",
      "tree": "visibility [47527,47535]",
      "parent": "function_definition [7269,7850]",
      "at": 13
    },
    {
      "action": "insert-tree",
      "tree": "modifier_invocation [7405,7417]",
      "parent": "function_definition [7269,7850]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "visibility [17246,17254]",
      "parent": "function_definition [8160,8787]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [8974,8981]",
      "parent": "function_definition [8932,9038]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [39442,39449]",
      "parent": "type_name [4206,4213]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [42818,42825]",
      "parent": "type_name [4259,4266]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [5532,5533]",
      "parent": "function_body [5532,5628]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [5542,5611]",
      "parent": "function_body [5532,5628]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [16058,16060]",
      "parent": "function_body [5532,5628]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [5627,5628]",
      "parent": "function_body [5532,5628]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [27101,27174]",
      "parent": "function_body [7422,7850]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "emit_statement [38078,38140]",
      "parent": "function_body [7422,7850]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "if_statement [10922,11036]",
      "parent": "function_body [10912,11060]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [11045,11054]",
      "parent": "function_body [10912,11060]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "if_statement [11160,11262]",
      "parent": "function_body [11150,11304]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [11271,11298]",
      "parent": "function_body [11150,11304]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: PolicyManagerInterface [10693,10715]",
      "label": "NuCypherToken"
    },
    {
      "action": "insert-node",
      "tree": "call_expression [5542,5610]",
      "parent": "expression_statement [5542,5611]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _ [5823,5824]",
      "parent": "expression_statement [5823,5825]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [6579,6598]",
      "parent": "return_statement [6572,6599]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": ",: , [27116,27117]",
      "parent": "call_expression [7714,7771]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: Locked [38083,38089]",
      "label": "Deposited"
    },
    {
      "action": "insert-node",
      "tree": "if: if [10922,10924]",
      "parent": "if_statement [10922,11036]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [10925,10926]",
      "parent": "if_statement [10922,11036]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [10926,10951]",
      "parent": "if_statement [10922,11036]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [10951,10952]",
      "parent": "if_statement [10922,11036]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "block_statement [10953,11036]",
      "parent": "if_statement [10922,11036]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "if: if [11160,11162]",
      "parent": "if_statement [11160,11262]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [11163,11164]",
      "parent": "if_statement [11160,11262]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [11164,11189]",
      "parent": "if_statement [11160,11262]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [11189,11190]",
      "parent": "if_statement [11160,11262]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "block_statement [11191,11262]",
      "parent": "if_statement [11160,11262]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [5295,5296]",
      "parent": "call_expression [5182,5363]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [5309,5353]",
      "parent": "call_expression [5182,5363]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: minLockedPeriods [15140,15156]",
      "label": "token"
    },
    {
      "action": "update-node",
      "tree": "identifier: _minLockedPeriods [15159,15176]",
      "label": "_token"
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [5542,5549]",
      "parent": "call_expression [5542,5610]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [5549,5550]",
      "parent": "call_expression [5542,5610]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [5550,5582]",
      "parent": "call_expression [5542,5610]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [5582,5583]",
      "parent": "call_expression [5542,5610]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [5584,5609]",
      "parent": "call_expression [5542,5610]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [5609,5610]",
      "parent": "call_expression [5542,5610]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [5772,5773]",
      "parent": "call_expression [5733,5813]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [5774,5812]",
      "parent": "call_expression [5733,5813]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [7451,7452]",
      "parent": "call_expression [7432,7501]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [7453,7500]",
      "parent": "call_expression [7432,7501]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "member_expression [34199,34221]",
      "parent": "call_expression [7714,7771]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_argument [34230,34243]",
      "parent": "call_expression [7714,7771]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "call_argument [34245,34251]",
      "parent": "call_expression [7714,7771]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": ",: , [8345,8346]",
      "parent": "call_expression [8325,8375]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [8347,8374]",
      "parent": "call_expression [8325,8375]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [10953,10954]",
      "parent": "block_statement [10953,11036]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "return_statement [70085,70144]",
      "parent": "block_statement [10953,11036]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [11035,11036]",
      "parent": "block_statement [10953,11036]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "{: { [11191,11192]",
      "parent": "block_statement [11191,11262]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "return_statement [70249,70296]",
      "parent": "block_statement [11191,11262]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [11261,11262]",
      "parent": "block_statement [11191,11262]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [2198,2258]",
      "parent": "call_argument [1305,1375]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [5550,5582]",
      "parent": "call_argument [5550,5582]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [48317,48352]",
      "parent": "member_expression [7609,7652]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [72693,72805]",
      "parent": "call_argument [12583,12661]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [2411,2441]",
      "parent": "binary_expression [1305,1375]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "member_expression [5550,5578]",
      "parent": "binary_expression [5550,5582]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ">: > [5579,5580]",
      "parent": "binary_expression [5550,5582]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0 [5581,5582]",
      "parent": "binary_expression [5550,5582]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "member_expression [72917,72927]",
      "parent": "binary_expression [12583,12661]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ">: > [5211,5212]",
      "parent": "binary_expression [5190,5214]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "array_access [15909,15931]",
      "parent": "member_expression [5550,5578]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [5572,5573]",
      "parent": "member_expression [5550,5578]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: value [5573,5578]",
      "parent": "member_expression [5550,5578]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: currentCommittedPeriod [72752,72774]",
      "label": "flags"
    },
    {
      "action": "move-tree",
      "tree": ".: . [15546,15547]",
      "parent": "member_expression [5190,5208]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: rewardCoefficient [15547,15564]",
      "label": "_token"
    },
    {
      "action": "insert-node",
      "tree": "identifier: totalSupply [5197,5208]",
      "parent": "member_expression [5190,5208]",
      "at": 2
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [255,625]"
    },
    {
      "action": "delete-tree",
      "tree": "interface_declaration [667,766]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /** * @title StakingEscrowStub * @notice Stub is used to deploy main StakingEscrow after all other contract and make some variables immutable * @dev |v1.0.0| */ [898,1058]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [1107,1139]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [1992,2021]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [2031,2053]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2053,2054]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [2063,2087]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2087,2088]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2130,2131]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [2238,2258]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [2259,2261]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [2274,2301]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [2198,2301]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [2302,2304]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [2317,2358]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [2198,2358]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [2359,2361]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [2374,2395]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [2198,2395]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [2396,2398]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [2198,2441]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [2477,2527]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [2536,2600]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [2609,2646]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // TODO uncomment after merging this PR #2579 [3151,3196]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //        require(uint32(delegateGet(_testTarget, this.genesisSecondsPerPeriod.selector)) == genesisSecondsPerPeriod); [3197,3315]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [3324,3418]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [3427,3521]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [3530,3632]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [3641,3743]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /** * @title StakingEscrow * @notice Contract holds and locks stakers tokens. * Each staker that locks their tokens will receive some compensation * @dev |v5.7.1| */ [3754,3919]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [3976,4009]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [4014,4046]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4446,4447]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [4448,4462]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [4724,4812]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [5147,5302]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [5591,5679]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that a sub-stake was prolonged     * @param staker Staker address     * @param value Value of sub-stake     * @param lastPeriod Final locked period of old sub-stake     * @param periods Number of periods sub-stake was extended     */ [5685,5944]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [5949,6039]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that tokens were withdrawn to the staker     * @param staker Staker address     * @param value Amount withdraws (in NuNits)     */ [6045,6201]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that the worker associated with the staker made a commitment to next period     * @param staker Staker address     * @param period Period committed to     * @param value Amount of tokens staked for the committed period     */ [6267,6518]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [6523,6606]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that tokens were minted for previous periods     * @param staker Staker address     * @param period Previous period tokens minted for     * @param value Amount minted (in NuNits)     */ [6612,6823]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [6828,6903]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that the restake parameter was activated/deactivated     * @param staker Staker address     * @param reStake Updated parameter value     */ [7274,7439]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [7444,7499]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that a worker was bonded to the staker     * @param staker Staker address     * @param worker Worker address     * @param startPeriod Period bonding occurred     */ [7505,7695]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [7700,7795]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that the winddown parameter was activated/deactivated     * @param staker Staker address     * @param windDown Updated parameter value     */ [7801,7968]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [7973,8030]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that the snapshot parameter was activated/deactivated     * @param staker Staker address     * @param snapshotsEnabled Updated parameter value     */ [8036,8211]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [8216,8281]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Signals that the staker migrated their stake to the new period length     * @param staker Staker address     * @param period Period when migration happened     */ [8287,8467]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [8472,8534]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /// internal event [8540,8558]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [8563,8630]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /*         * Stores periods that are committed but not yet rewarded.         * In order to optimize storage, only two values are used instead of an array.         * commitToNextPeriod() method invokes mint() method so there can only be two committed         * periods that are not yet rewarded: the current and the next periods.         */ [8921,9260]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // used only for upgrading [9907,9933]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [9988,10036]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // to prevent high gas consumption in loops for slashing [10041,10097]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [10102,10108]"
    },
    {
      "action": "delete-node",
      "tree": "constant: constant [10116,10124]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: MAX_SUB_STAKES [10125,10139]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [10140,10141]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 30 [10142,10144]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [10102,10145]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10150,10194]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // indices for flags [10200,10220]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10225,10277]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10282,10326]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10331,10378]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10383,10436]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10441,10484]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [10490,10496]"
    },
    {
      "action": "delete-node",
      "tree": "immutable: immutable [10504,10513]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: minLockedPeriods [10514,10530]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [10490,10531]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10582,10632]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10637,10687]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [10752,10802]"
    },
    {
      "action": "delete-tree",
      "tree": "primitive_type [1240,1246]"
    },
    {
      "action": "delete-node",
      "tree": "immutable: immutable [1254,1263]"
    },
    {
      "action": "delete-tree",
      "tree": "primitive_type [10536,10542]"
    },
    {
      "action": "delete-node",
      "tree": "immutable: immutable [10550,10559]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [9945,9953]"
    },
    {
      "action": "delete-node",
      "tree": "constant: constant [9954,9962]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [9979,9980]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [9981,9982]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14017,14054]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14054,14055]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14064,14097]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14097,14098]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14134,14135]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14144,14173]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14173,14174]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14183,14205]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14205,14206]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14215,14248]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14248,14249]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14258,14291]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14291,14292]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14301,14334]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14334,14335]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14344,14374]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14374,14375]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14384,14414]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14414,14415]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14424,14454]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14454,14455]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14464,14488]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14488,14489]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14498,14531]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14531,14532]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14541,14574]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [14574,14575]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [14584,14608]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [14623,14950]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // constant `1` in the expression `_minLockedPeriods > 1` uses to simplify the `lock` method [14965,15057]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [15066,15131]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [15186,15239]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [15248,15301]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [15310,15347]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [15365,15546]"
    },
    {
      "action": "delete-node",
      "tree": "!=: != [15567,15569]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [15663,15694]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [15703,15730]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [24086,24132]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [24141,24250]"
    },
    {
      "action": "delete-tree",
      "tree": "assignment_expression [24259,24312]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [24322,24369]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [24378,24404]"
    },
    {
      "action": "delete-node",
      "tree": "modifier: modifier [15847,15855]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: onlyStaker [15856,15866]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [15866,15867]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [15867,15868]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [15873,15874]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [15883,15906]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [15907,15908]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [15883,15932]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [15941,16049]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [16065,16066]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [15873,16066]"
    },
    {
      "action": "delete-node",
      "tree": "modifier_definition [15847,16066]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [16391,16399]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: getFlags [16400,16408]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [16408,16409]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [16424,16425]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [16443,16447]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [16448,16604]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [16609,16970]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [16391,16970]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [17165,17173]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: getStartPeriod [17174,17188]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [17188,17189]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [17189,17213]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [17213,17214]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [17215,17236]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [17236,17237]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [17255,17259]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [17260,17276]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [17281,17524]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [17165,17524]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [17693,18124]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [18256,18623]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [18924,19502]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [19806,20170]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [20272,20512]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [21207,22623]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [22692,22820]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [22893,23025]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [23302,23656]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23935,23943]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setWorkMeasurement [23944,23962]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23962,23963]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23978,23979]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23997,23998]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23935,24410]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [24533,25755]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [25920,26245]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [26515,26523]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: depositFromWorkLock [26524,26543]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [26543,26544]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [26553,26568]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [26568,26569]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [26578,26592]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [26592,26593]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [26602,26627]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [26632,26633]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [26642,26650]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [26655,26656]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [26665,26706]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [26715,26761]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [26770,26961]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // WorkLock still uses the genesis period length (24h) [26970,27024]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [27033,27092]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [27179,27180]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [26655,27180]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [26515,27180]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [27382,28838]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [29000,29721]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [11447,11461]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [11463,11469]"
    },
    {
      "action": "delete-tree",
      "tree": "ternary_expression [11510,11570]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [30014,30373]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [30809,32028]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Deposit tokens and create new sub-stake. Use this method to become a staker     * @param _staker Staker     * @param _value Amount of tokens to deposit     * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled     */ [32034,32323]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [32328,32503]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Deposit tokens and increase lock amount of an existing sub-stake     * @dev This is preferable way to stake tokens because will be fewer active sub-stakes in the result     * @param _index Index of the sub stake     * @param _value Amount of tokens which will be locked     */ [32509,32803]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [32808,32997]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Deposit tokens     * @dev Specify either index and zero periods (for an existing sub-stake)     * or index >= MAX_SUB_STAKES and real value for periods (for a new sub-stake), not both     * @param _staker Staker     * @param _payer Owner of tokens     * @param _index Index of the sub stake     * @param _value Amount of tokens to deposit     * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled     */ [33003,33479]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33518,33532]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33534,33548]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33548,33549]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33564,33565]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [33593,33601]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // A staker can't be a worker for another staker [33697,33745]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [33754,33847]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [33899,33933]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34009,34065]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34078,34128]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: deposit [27101,27108]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [27109,27116]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [27130,27144]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [27144,27145]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [27146,27152]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [27152,27153]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [27154,27172]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34147,34190]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [34221,34222]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [34222,34228]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [34228,34229]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [34243,34244]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [34251,34252]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [34199,34252]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [34199,34253]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38105,38106]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [38107,38118]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38118,38119]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [38120,38138]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34292,34342]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34352,34386]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [34395,34670]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Lock some tokens as a new sub-stake     * @param _value Amount of tokens which will be locked     * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled     */ [34682,34913]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [34918,35081]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Increase lock amount of an existing sub-stake     * @param _index Index of the sub-stake     * @param _value Amount of tokens which will be locked     */ [35087,35258]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [35263,35434]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Lock some tokens as a stake     * @dev Specify either index and zero periods (for an existing sub-stake)     * or index >= MAX_SUB_STAKES and real value for periods (for a new sub-stake), not both     * @param _staker Staker     * @param _index Index of the sub stake     * @param _value Amount of tokens which will be locked     * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled     */ [35440,35903]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [35908,37169]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Lock some tokens as a new sub-stake     * @param _info Staker structure     * @param _nextPeriod Next period     * @param _staker Staker     * @param _value Amount of tokens which will be locked     * @param _unlockingDuration Amount of periods during which tokens will be unlocked when wind down is enabled     */ [37175,37507]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [37512,37520]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: lockAndCreate [37521,37534]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [37534,37535]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37544,37568]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37568,37569]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37578,37596]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37596,37597]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37606,37621]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37621,37622]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37631,37645]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37645,37646]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37655,37680]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [37685,37686]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [37695,37703]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [37708,37709]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [37718,37755]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // if winding down is enabled and next period is committed [37764,37822]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // then sub-stakes duration were decreased [37831,37873]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [37882,38005]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [38014,38068]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [38145,38146]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [37708,38146]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [37512,38146]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Increase lock amount of an existing sub-stake     * @dev Probably will be created a new sub-stake but it will be active only one period     * @param _info Staker structure     * @param _currentPeriod Current period     * @param _nextPeriod Next period     * @param _staker Staker     * @param _index Index of the sub-stake     * @param _value Amount of tokens which will be locked     */ [38152,38557]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [38562,38570]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: lockAndIncrease [38571,38586]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [38586,38587]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38596,38620]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38620,38621]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38630,38651]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38651,38652]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38661,38679]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38679,38680]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38689,38704]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38704,38705]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38714,38728]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38728,38729]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38738,38752]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [38757,38758]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [38767,38775]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [38780,38781]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [38790,38846]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [38855,38938]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // create temporary sub-stake for current or previous committed periods [38948,39019]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // to leave locked amount in this period unchanged [39028,39078]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [39087,39408]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [39418,39438]"
    },
    {
      "action": "delete-node",
      "tree": "+=: += [39439,39441]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39449,39450]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [39450,39456]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39456,39457]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [39442,39457]"
    },
    {
      "action": "delete-node",
      "tree": "augmented_assignment_expression [39418,39457]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [39418,39458]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // all new locks should start from the next period [39467,39517]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [39526,39561]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [39571,39642]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [39647,39648]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [38780,39648]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [38562,39648]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Checks that last period of sub-stake is greater than the current period     * @param _info Staker structure     * @param _subStake Sub-stake structure     * @param _currentPeriod Current period     * @return startPeriod Start period. Use in the calculation of the last period of the sub stake     * @return lastPeriod Last period of the sub stake     */ [39654,40025]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [40030,40502]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Save sub stake. First tries to override inactive sub stake     * @dev Inactive sub stake means that last period of sub stake has been surpassed and already rewarded     * @param _info Staker structure     * @param _firstPeriod First period of the sub stake     * @param _lastPeriod Last period of the sub stake     * @param _unlockingDuration Duration of the sub stake in periods     * @param _lockedValue Amount of locked tokens     */ [40508,40962]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [40967,42057]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Divide sub stake into two parts     * @param _index Index of the sub stake     * @param _newValue New sub stake value     * @param _additionalDuration Amount of periods for extending sub stake     */ [42063,42280]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [42285,42293]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: divideStake [42294,42305]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42305,42306]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [42306,42320]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [42320,42321]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [42322,42339]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [42339,42340]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [42341,42367]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42367,42368]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [42369,42377]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [42378,42388]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [42389,42390]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [42399,42448]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [42457,42531]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [42540,42595]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [42604,42646]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [42655,42736]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [42746,42786]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [42795,42815]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [42816,42817]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42825,42826]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [42826,42849]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42849,42850]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [42818,42850]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [42795,42850]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [42795,42851]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [42860,42918]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [42927,43007]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [43016,43089]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [43098,43177]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [43186,43261]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [43266,43267]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [42389,43267]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [42285,43267]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Prolong active sub stake     * @param _index Index of the sub stake     * @param _additionalDuration Amount of periods for extending sub stake     */ [43273,43440]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [43445,44522]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Merge two sub-stakes into one if their last periods are equal     * @dev It's possible that both sub-stakes will be active after this transaction.     * But only one of them will be active until next call `commitToNextPeriod` (in the next period)     * @param _index1 Index of the first sub-stake     * @param _index2 Index of the second sub-stake     */ [44528,44900]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [44905,46325]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Remove unused sub-stake to decrease gas cost for several methods     */ [46331,46420]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [46425,47363]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Withdraw available amount of tokens to staker     * @param _value Amount of tokens to withdraw     */ [47369,47488]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [47493,47501]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: withdraw [47502,47510]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [47510,47511]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [47511,47525]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [47525,47526]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [47536,47546]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [47547,47548]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [47557,47599]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [47608,47646]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [47655,47704]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // the max locked tokens in most cases will be in the current period [47713,47781]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // but when the staker locks more then we should use the next period [47790,47858]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [47867,48014]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [48023,48071]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [48080,48101]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [48111,48147]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [48156,48195]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [48204,48239]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // unbond worker if staker withdraws last portion of NU [48249,48304]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [48313,48315]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [48316,48317]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [48352,48353]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: nextCommittedPeriod [48353,48372]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [48317,48372]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [48373,48375]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [48376,48377]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [48317,48377]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [48378,48380]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: info [48393,48397]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [48317,48397]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [48397,48398]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: worker [48398,48404]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [48317,48404]"
    },
    {
      "action": "delete-node",
      "tree": "!=: != [48405,48407]"
    },
    {
      "action": "delete-tree",
      "tree": "type_cast_expression [48408,48418]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [48317,48418]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [48418,48419]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [48428,48603]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [48313,48603]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [48608,48609]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [47547,48609]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [47493,48609]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Make a commitment to the next period and mint for the previous period     */ [48615,48709]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [48714,50138]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Migrate from the old period length to the new one. Can be done only once     * @param _staker Staker     */ [50144,50269]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [50274,52251]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Decrease sub-stakes duration if `windDown` is enabled     */ [52257,52335]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [52340,52949]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Mint tokens for previous periods if staker locked their tokens and made a commitment     */ [52955,53064]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [53069,53842]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Mint tokens for previous periods if staker locked their tokens and made a commitment     * @param _staker Staker     * @return processedPeriod1 Processed period: currentCommittedPeriod or zero     * @return processedPeriod2 Processed period: nextCommittedPeriod or zero     */ [53848,54142]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [54147,55693]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Calculate reward for one period     * @param _info Staker structure     * @param _mintingPeriod Period for minting calculation     * @param _currentPeriod Current period     * @param _startPeriod Pre-calculated start period     */ [55699,55947]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [55952,56934]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [57386,57392]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [57393,57406]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [57421,57465]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [57560,57603]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [57804,57846]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [57855,57893]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [57902,57959]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [57969,58163]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Decrease the stake if amount of locked tokens in the current period more than staker has [58173,58264]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [58273,58329]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [58338,58494]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Decrease the stake if amount of locked tokens in the next period more than staker has [58503,58591]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [58600,58944]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [59019,59094]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // TODO change to withdrawal pattern (#1499) [59103,59147]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [59250,59288]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Get the value of locked tokens for a staker in the current and the next period     * and find the shortest sub stake     * @param _info Staker structure     * @param _currentPeriod Current period     * @param _nextPeriod Next period     * @param _startPeriod Pre-calculated start period     * @return currentLock Amount of tokens that locked in the current period and unlocked in the next period     * @return nextLock Amount of tokens that locked in the next period and not locked in the current period     * @return currentAndNextLock Amount of tokens that locked in the current period and in the next period     * @return shortestSubStakeIndex Index of the shortest sub stake     */ [59301,60004]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [60009,61847]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Decrease short sub stakes     * @param _info Staker structure     * @param _penalty Penalty rate     * @param _decreasePeriod The period when the decrease begins     * @param _startPeriod Pre-calculated start period     * @param _shortestSubStakeIndex Index of the shortest period     */ [61853,62158]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [62163,64269]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Get the shortest sub stake     * @param _info Staker structure     * @param _currentPeriod Current period     * @param _startPeriod Pre-calculated start period     * @return shortestSubStake The shortest sub stake     * @return minSubStakeDuration Duration of the shortest sub stake     * @return minSubStakeLastPeriod Last period of the shortest sub stake     */ [64275,64656]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [64661,65904]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @notice Save the old sub stake values to prevent decreasing reward for the previous period     * @dev Saving happens only if the previous period is committed     * @param _info Staker structure     * @param _firstPeriod First period of the old sub stake     * @param _lockedValue Locked value of the old sub stake     * @param _currentPeriod Current period, when the old sub stake is already unlocked     */ [65910,66327]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [66332,67959]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Get SubStakeInfo structure by delegatecall     */ [70837,70901]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [70906,71250]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Get Downtime structure by delegatecall     */ [71256,71316]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [71321,71661]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [71879,72026]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [72035,72166]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [72778,72805]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [72806,72808]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: infoToCheck [72821,72832]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,72832]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [72832,72833]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: nextCommittedPeriod [72833,72852]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [72693,72852]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [72853,72855]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [72856,72880]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,72880]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [72881,72883]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: infoToCheck [72896,72907]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,72907]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [72907,72908]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: flags [72908,72913]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [72693,72913]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [72914,72916]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,72927]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [72928,72930]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: infoToCheck [72943,72954]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,72954]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [72954,72955]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: lastCommittedPeriod [72955,72974]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [72693,72974]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [72975,72977]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [72978,73002]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,73002]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [73003,73005]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: infoToCheck [73018,73029]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,73029]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [73029,73030]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: completedWork [73030,73043]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [72693,73043]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [73044,73046]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [73047,73065]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,73065]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [73066,73068]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: infoToCheck [73081,73092]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,73092]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [73092,73093]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: worker [73093,73099]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [72693,73099]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [73100,73102]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [73103,73114]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,73114]"
    },
    {
      "action": "delete-node",
      "tree": "&&: && [73115,73117]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: infoToCheck [73130,73141]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,73141]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [73141,73142]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: workerStartPeriod [73142,73159]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [72693,73159]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [73160,73162]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [73163,73185]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [72693,73185]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [73197,73316]"
    },
    {
      "action": "delete-tree",
      "tree": "for_statement [73325,73715]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [73725,73826]"
    },
    {
      "action": "delete-tree",
      "tree": "for_statement [73835,74423]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // it's not perfect because checks not only slot value but also decoding [74433,74505]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // at least without additional functions [74514,74554]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [74563,74721]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [74730,74859]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [74869,75079]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /// @dev the `onlyWhileUpgrading` modifier works through a call to the parent `finishUpgrade` [75091,75184]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [75189,75462]"
    }
  ]
}