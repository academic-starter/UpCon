{
  "matches": [
    {
      "src": "type_name [289,296]",
      "dest": "type_name [1352,1359]"
    },
    {
      "src": "primitive_type [278,285]",
      "dest": "primitive_type [1341,1348]"
    },
    {
      "src": "function_body [1840,1894]",
      "dest": "function_body [4452,4481]"
    },
    {
      "src": "type_name [1550,1557]",
      "dest": "type_name [736,743]"
    },
    {
      "src": "variable_declaration_statement [1550,1568]",
      "dest": "variable_declaration_statement [736,754]"
    },
    {
      "src": ",: , [1267,1268]",
      "dest": ",: , [4976,4977]"
    },
    {
      "src": "identifier: b [1566,1567]",
      "dest": "identifier: b [752,753]"
    },
    {
      "src": "comment: /**      * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.      */ [692,811]",
      "dest": "comment: /**      * @dev Returns the substraction of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [848,983]"
    },
    {
      "src": ",: , [1795,1796]",
      "dest": ",: , [2763,2764]"
    },
    {
      "src": "(: ( [277,278]",
      "dest": "(: ( [1340,1341]"
    },
    {
      "src": "function_definition [1773,1894]",
      "dest": "function_definition [2741,2837]"
    },
    {
      "src": "type_name [829,836]",
      "dest": "type_name [3464,3471]"
    },
    {
      "src": "primitive_type [874,881]",
      "dest": "primitive_type [3509,3516]"
    },
    {
      "src": ",: , [287,288]",
      "dest": ",: , [1350,1351]"
    },
    {
      "src": "internal: internal [1508,1516]",
      "dest": "internal: internal [3143,3151]"
    },
    {
      "src": "identifier: a [1266,1267]",
      "dest": "identifier: a [4975,4976]"
    },
    {
      "src": "binary_expression [1882,1887]",
      "dest": "binary_expression [4469,4474]"
    },
    {
      "src": "): ) [1506,1507]",
      "dest": "): ) [3141,3142]"
    },
    {
      "src": "identifier: b [658,659]",
      "dest": "identifier: b [1751,1752]"
    },
    {
      "src": "function_body [1312,1390]",
      "dest": "function_body [5070,5176]"
    },
    {
      "src": "number_literal: 0 [568,569]",
      "dest": "number_literal: 0 [1674,1675]"
    },
    {
      "src": "primitive_type [1303,1310]",
      "dest": "primitive_type [5061,5068]"
    },
    {
      "src": "type_name [1786,1793]",
      "dest": "type_name [2754,2761]"
    },
    {
      "src": "identifier: a [1494,1495]",
      "dest": "identifier: a [3129,3130]"
    },
    {
      "src": "(: ( [1302,1303]",
      "dest": "(: ( [5060,5061]"
    },
    {
      "src": "type_name [614,621]",
      "dest": "type_name [1707,1714]"
    },
    {
      "src": "identifier: a [1562,1563]",
      "dest": "identifier: a [748,749]"
    },
    {
      "src": "=: = [624,625]",
      "dest": "=: = [1717,1718]"
    },
    {
      "src": "internal: internal [1808,1816]",
      "dest": "internal: internal [2776,2784]"
    },
    {
      "src": "return_type_definition [865,882]",
      "dest": "return_type_definition [3500,3517]"
    },
    {
      "src": "): ) [330,331]",
      "dest": "): ) [3901,3902]"
    },
    {
      "src": "uint256: uint256 [1786,1793]",
      "dest": "uint256: uint256 [2754,2761]"
    },
    {
      "src": "): ) [1806,1807]",
      "dest": "): ) [2774,2775]"
    },
    {
      "src": "(: ( [562,563]",
      "dest": "(: ( [1668,1669]"
    },
    {
      "src": ",: , [1495,1496]",
      "dest": ",: , [3130,3131]"
    },
    {
      "src": "binary_expression [1359,1364]",
      "dest": "binary_expression [3192,3197]"
    },
    {
      "src": "binary_expression [626,631]",
      "dest": "binary_expression [1719,1724]"
    },
    {
      "src": "comment: /**  * @title SafeMath  * @dev Unsigned math operations with safety checks that revert on error  */ [59,158]",
      "dest": "comment: // OpenZeppelin Contracts v4.3.2 (utils/math/SafeMath.sol) [32,90]"
    },
    {
      "src": "comment: /**      * @dev Multiplies two unsigned integers, reverts on overflow.      */ [182,260]",
      "dest": "comment: /**      * @dev Returns the addition of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [490,621]"
    },
    {
      "src": "{: { [883,884]",
      "dest": "{: { [5785,5786]"
    },
    {
      "src": "parameter [1303,1310]",
      "dest": "parameter [5061,5068]"
    },
    {
      "src": "primitive_type [1550,1557]",
      "dest": "primitive_type [736,743]"
    },
    {
      "src": "{: { [1840,1841]",
      "dest": "{: { [4452,4453]"
    },
    {
      "src": "type_name [1486,1493]",
      "dest": "type_name [3121,3128]"
    },
    {
      "src": "primitive_type [983,990]",
      "dest": "primitive_type [2383,2390]"
    },
    {
      "src": "(: ( [1257,1258]",
      "dest": "(: ( [4957,4958]"
    },
    {
      "src": "state_mutability [1517,1521]",
      "dest": "state_mutability [3152,3156]"
    },
    {
      "src": "type_name [983,990]",
      "dest": "type_name [2383,2390]"
    },
    {
      "src": "internal: internal [1280,1288]",
      "dest": "internal: internal [5038,5046]"
    },
    {
      "src": "function_body [332,686]",
      "dest": "function_body [1401,1818]"
    },
    {
      "src": "parameter [1497,1506]",
      "dest": "parameter [3132,3141]"
    },
    {
      "src": "(: ( [1329,1330]",
      "dest": "(: ( [5111,5112]"
    },
    {
      "src": "identifier: b [297,298]",
      "dest": "identifier: b [1360,1361]"
    },
    {
      "src": "identifier: a [1335,1336]",
      "dest": "identifier: a [5117,5118]"
    },
    {
      "src": "library: library [159,166]",
      "dest": "library: library [467,474]"
    },
    {
      "src": "primitive_type [614,621]",
      "dest": "primitive_type [1707,1714]"
    },
    {
      "src": "identifier: mul [274,277]",
      "dest": "identifier: tryMul [1334,1340]"
    },
    {
      "src": "return_type_definition [1294,1311]",
      "dest": "return_type_definition [5052,5069]"
    },
    {
      "src": "primitive_type [1831,1838]",
      "dest": "primitive_type [2799,2806]"
    },
    {
      "src": "returns: returns [865,872]",
      "dest": "returns: returns [3500,3507]"
    },
    {
      "src": "uint256: uint256 [1486,1493]",
      "dest": "uint256: uint256 [3121,3128]"
    },
    {
      "src": "primitive_type [840,847]",
      "dest": "primitive_type [3475,3482]"
    },
    {
      "src": ">: > [969,970]",
      "dest": ">: > [5829,5830]"
    },
    {
      "src": "identifier: a [995,996]",
      "dest": "identifier: a [3920,3921]"
    },
    {
      "src": "solidity_version: 0.7.0 [50,55]",
      "dest": "solidity_version: 0.8.0 [109,114]"
    },
    {
      "src": "type_name [323,330]",
      "dest": "type_name [3894,3901]"
    },
    {
      "src": "parameter [278,287]",
      "dest": "parameter [1341,1350]"
    },
    {
      "src": "type_name [1831,1838]",
      "dest": "type_name [2799,2806]"
    },
    {
      "src": "{: { [332,333]",
      "dest": "{: { [1401,1402]"
    },
    {
      "src": "library_declaration [159,1896]",
      "dest": "library_declaration [467,6768]"
    },
    {
      "src": "-: - [1361,1362]",
      "dest": "-: - [3194,3195]"
    },
    {
      "src": "uint256: uint256 [840,847]",
      "dest": "uint256: uint256 [3475,3482]"
    },
    {
      "src": "internal: internal [851,859]",
      "dest": "internal: internal [3486,3494]"
    },
    {
      "src": "source_file [0,1897]",
      "dest": "source_file [0,6769]"
    },
    {
      "src": "identifier: a [626,627]",
      "dest": "identifier: a [1719,1720]"
    },
    {
      "src": "identifier: a [1359,1360]",
      "dest": "identifier: a [3192,3193]"
    },
    {
      "src": "type_name [1531,1538]",
      "dest": "type_name [3166,3173]"
    },
    {
      "src": "type_name [1269,1276]",
      "dest": "type_name [4986,4993]"
    },
    {
      "src": "): ) [569,570]",
      "dest": "): ) [1675,1676]"
    },
    {
      "src": "call_expression [1322,1337]",
      "dest": "call_expression [5104,5133]"
    },
    {
      "src": "type_name [278,285]",
      "dest": "type_name [1341,1348]"
    },
    {
      "src": "parameter [1531,1538]",
      "dest": "parameter [3166,3173]"
    },
    {
      "src": "type_name [874,881]",
      "dest": "type_name [3509,3516]"
    },
    {
      "src": "visibility [851,859]",
      "dest": "visibility [3486,3494]"
    },
    {
      "src": "uint256: uint256 [874,881]",
      "dest": "uint256: uint256 [3509,3516]"
    },
    {
      "src": "identifier: sub [1254,1257]",
      "dest": "identifier: sub [4954,4957]"
    },
    {
      "src": "uint256: uint256 [289,296]",
      "dest": "uint256: uint256 [1352,1359]"
    },
    {
      "src": "state_mutability [1817,1821]",
      "dest": "state_mutability [2785,2789]"
    },
    {
      "src": "binary_expression [649,654]",
      "dest": "binary_expression [1742,1747]"
    },
    {
      "src": "primitive_type [1347,1354]",
      "dest": "primitive_type [2034,2041]"
    },
    {
      "src": "parameter [1831,1838]",
      "dest": "parameter [2799,2806]"
    },
    {
      "src": "identifier: b [967,968]",
      "dest": "identifier: b [5827,5828]"
    },
    {
      "src": "}: } [685,686]",
      "dest": "}: } [1817,1818]"
    },
    {
      "src": "identifier: add [1482,1485]",
      "dest": "identifier: sub [3117,3120]"
    },
    {
      "src": "identifier: mod [1782,1785]",
      "dest": "identifier: add [2750,2753]"
    },
    {
      "src": "uint256: uint256 [983,990]",
      "dest": "uint256: uint256 [2383,2390]"
    },
    {
      "src": "pure: pure [1517,1521]",
      "dest": "pure: pure [3152,3156]"
    },
    {
      "src": "solidity_pragma_token [40,55]",
      "dest": "solidity_pragma_token [99,114]"
    },
    {
      "src": "function: function [1773,1781]",
      "dest": "function: function [2741,2749]"
    },
    {
      "src": "(: ( [828,829]",
      "dest": "(: ( [3463,3464]"
    },
    {
      "src": "comment: /**      * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).      */ [1118,1240]",
      "dest": "comment: /**      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [1183,1320]"
    },
    {
      "src": "parameter [1269,1278]",
      "dest": "parameter [4986,4995]"
    },
    {
      "src": "uint256: uint256 [1269,1276]",
      "dest": "uint256: uint256 [4986,4993]"
    },
    {
      "src": "expression_statement [1322,1338]",
      "dest": "expression_statement [5104,5134]"
    },
    {
      "src": "^:  ^ [48,50]",
      "dest": "^:  ^ [107,109]"
    },
    {
      "src": "call_argument [967,972]",
      "dest": "call_argument [5827,5832]"
    },
    {
      "src": "uint256: uint256 [1550,1557]",
      "dest": "uint256: uint256 [736,743]"
    },
    {
      "src": "): ) [1310,1311]",
      "dest": "): ) [5068,5069]"
    },
    {
      "src": "visibility [1508,1516]",
      "dest": "visibility [3143,3151]"
    },
    {
      "src": "(: ( [1530,1531]",
      "dest": "(: ( [3165,3166]"
    },
    {
      "src": "(: ( [1785,1786]",
      "dest": "(: ( [2753,2754]"
    },
    {
      "src": "identifier: c [622,623]",
      "dest": "identifier: c [1715,1716]"
    },
    {
      "src": "parameter [829,838]",
      "dest": "parameter [3464,3473]"
    },
    {
      "src": "binary_expression [1562,1567]",
      "dest": "binary_expression [748,753]"
    },
    {
      "src": "function_definition [816,1112]",
      "dest": "function_definition [3451,3547]"
    },
    {
      "src": "}: } [1389,1390]",
      "dest": "}: } [5175,5176]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [0,31]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "returns: returns [314,321]",
      "dest": "returns: returns [3885,3892]"
    },
    {
      "src": "parameter [289,298]",
      "dest": "parameter [1352,1361]"
    },
    {
      "src": "uint256: uint256 [614,621]",
      "dest": "uint256: uint256 [1707,1714]"
    },
    {
      "src": "primitive_type [1258,1265]",
      "dest": "primitive_type [4967,4974]"
    },
    {
      "src": "identifier: a [653,654]",
      "dest": "identifier: a [1746,1747]"
    },
    {
      "src": "comment: /**      * @dev Adds two unsigned integers, reverts on overflow.      */ [1396,1468]",
      "dest": "comment: /**      * @dev Returns the division of two unsigned integers, with a division by zero flag.      *      * _Available since v3.4._      */ [1824,1962]"
    },
    {
      "src": "pragma_directive [33,56]",
      "dest": "pragma_directive [92,115]"
    },
    {
      "src": "(: ( [1485,1486]",
      "dest": "(: ( [3120,3121]"
    },
    {
      "src": "): ) [298,299]",
      "dest": "): ) [1361,1362]"
    },
    {
      "src": "identifier: require [959,966]",
      "dest": "identifier: require [5819,5826]"
    },
    {
      "src": "=: = [1560,1561]",
      "dest": "=: = [746,747]"
    },
    {
      "src": "return_type_definition [314,331]",
      "dest": "return_type_definition [3885,3902]"
    },
    {
      "src": "identifier: b [1330,1331]",
      "dest": "identifier: b [5112,5113]"
    },
    {
      "src": "binary_expression [563,569]",
      "dest": "binary_expression [1669,1675]"
    },
    {
      "src": "): ) [1278,1279]",
      "dest": "): ) [5036,5037]"
    },
    {
      "src": "identifier: b [1363,1364]",
      "dest": "identifier: b [3196,3197]"
    },
    {
      "src": "if: if [559,561]",
      "dest": "if: if [1665,1667]"
    },
    {
      "src": "identifier: b [1277,1278]",
      "dest": "identifier: b [4994,4995]"
    },
    {
      "src": "type_name [1797,1804]",
      "dest": "type_name [2765,2772]"
    },
    {
      "src": "{: { [1312,1313]",
      "dest": "{: { [5070,5071]"
    },
    {
      "src": "primitive_type [1497,1504]",
      "dest": "primitive_type [3132,3139]"
    },
    {
      "src": "state_mutability [860,864]",
      "dest": "state_mutability [3495,3499]"
    },
    {
      "src": "): ) [1336,1337]",
      "dest": "): ) [5132,5133]"
    },
    {
      "src": "type_name [840,847]",
      "dest": "type_name [3475,3482]"
    },
    {
      "src": "identifier: div [825,828]",
      "dest": "identifier: mul [3460,3463]"
    },
    {
      "src": "parameter [1486,1495]",
      "dest": "parameter [3121,3130]"
    },
    {
      "src": "return_type_definition [1822,1839]",
      "dest": "return_type_definition [2790,2807]"
    },
    {
      "src": "+: + [1564,1565]",
      "dest": "+: + [750,751]"
    },
    {
      "src": "return_type_definition [1522,1539]",
      "dest": "return_type_definition [3157,3174]"
    },
    {
      "src": "identifier: a [837,838]",
      "dest": "identifier: a [3472,3473]"
    },
    {
      "src": "parameter [1797,1806]",
      "dest": "parameter [2765,2774]"
    },
    {
      "src": "identifier: require [1322,1329]",
      "dest": "identifier: require [5104,5111]"
    },
    {
      "src": "function: function [1245,1253]",
      "dest": "function: function [4945,4953]"
    },
    {
      "src": "returns: returns [1294,1301]",
      "dest": "returns: returns [5052,5059]"
    },
    {
      "src": "number_literal: 0 [971,972]",
      "dest": "number_literal: 0 [5831,5832]"
    },
    {
      "src": "identifier: SafeMath [167,175]",
      "dest": "identifier: SafeMath [475,483]"
    },
    {
      "src": "uint256: uint256 [1258,1265]",
      "dest": "uint256: uint256 [4967,4974]"
    },
    {
      "src": "variable_declaration [1550,1559]",
      "dest": "variable_declaration [736,745]"
    },
    {
      "src": "identifier: b [1886,1887]",
      "dest": "identifier: b [4473,4474]"
    },
    {
      "src": "function_definition [1245,1390]",
      "dest": "function_definition [4945,5176]"
    },
    {
      "src": "identifier: a [286,287]",
      "dest": "identifier: a [1349,1350]"
    },
    {
      "src": "primitive_type [1269,1276]",
      "dest": "primitive_type [4986,4993]"
    },
    {
      "src": "parameter [874,881]",
      "dest": "parameter [3509,3516]"
    },
    {
      "src": "state_mutability [309,313]",
      "dest": "state_mutability [1372,1376]"
    },
    {
      "src": "): ) [849,850]",
      "dest": "): ) [3484,3485]"
    },
    {
      "src": "*: * [628,629]",
      "dest": "*: * [1721,1722]"
    },
    {
      "src": "{: { [176,177]",
      "dest": "{: { [484,485]"
    },
    {
      "src": "identifier: c [649,650]",
      "dest": "identifier: c [1742,1743]"
    },
    {
      "src": "uint256: uint256 [278,285]",
      "dest": "uint256: uint256 [1341,1348]"
    },
    {
      "src": "function_definition [265,686]",
      "dest": "function_definition [1325,1818]"
    },
    {
      "src": "solidity: solidity [40,48]",
      "dest": "solidity: solidity [99,107]"
    },
    {
      "src": "function_definition [1473,1618]",
      "dest": "function_definition [3108,3204]"
    },
    {
      "src": "primitive_type [1797,1804]",
      "dest": "primitive_type [2765,2772]"
    },
    {
      "src": "uint256: uint256 [1303,1310]",
      "dest": "uint256: uint256 [5061,5068]"
    },
    {
      "src": "type_name [1258,1265]",
      "dest": "type_name [4967,4974]"
    },
    {
      "src": "identifier: c [1558,1559]",
      "dest": "identifier: c [744,745]"
    },
    {
      "src": "identifier: a [1882,1883]",
      "dest": "identifier: a [4469,4470]"
    },
    {
      "src": "type_name [1497,1504]",
      "dest": "type_name [3132,3139]"
    },
    {
      "src": "visibility [1808,1816]",
      "dest": "visibility [2776,2784]"
    },
    {
      "src": "==: == [565,567]",
      "dest": "==: == [1671,1673]"
    },
    {
      "src": "visibility [300,308]",
      "dest": "visibility [1363,1371]"
    },
    {
      "src": "internal: internal [300,308]",
      "dest": "internal: internal [1363,1371]"
    },
    {
      "src": "pure: pure [309,313]",
      "dest": "pure: pure [1372,1376]"
    },
    {
      "src": "type_name [1347,1354]",
      "dest": "type_name [2034,2041]"
    },
    {
      "src": "binary_expression [967,972]",
      "dest": "binary_expression [5827,5832]"
    },
    {
      "src": "parameter [840,849]",
      "dest": "parameter [3475,3484]"
    },
    {
      "src": "identifier: b [999,1000]",
      "dest": "identifier: b [3924,3925]"
    },
    {
      "src": "): ) [1538,1539]",
      "dest": "): ) [3173,3174]"
    },
    {
      "src": "parameter [1786,1795]",
      "dest": "parameter [2754,2763]"
    },
    {
      "src": "contract_body [176,1896]",
      "dest": "contract_body [484,6768]"
    },
    {
      "src": "parameter [1258,1267]",
      "dest": "parameter [4967,4976]"
    },
    {
      "src": "primitive_type [829,836]",
      "dest": "primitive_type [3464,3471]"
    },
    {
      "src": "<=: <= [1332,1334]",
      "dest": "<=: <= [5114,5116]"
    },
    {
      "src": "{: { [1540,1541]",
      "dest": "{: { [702,703]"
    },
    {
      "src": "returns: returns [1822,1829]",
      "dest": "returns: returns [2790,2797]"
    },
    {
      "src": "identifier: a [1794,1795]",
      "dest": "identifier: a [2762,2763]"
    },
    {
      "src": "return_statement [1875,1888]",
      "dest": "return_statement [4462,4475]"
    },
    {
      "src": "uint256: uint256 [1347,1354]",
      "dest": "uint256: uint256 [2034,2041]"
    },
    {
      "src": "type_name [1303,1310]",
      "dest": "type_name [5061,5068]"
    },
    {
      "src": "uint256: uint256 [829,836]",
      "dest": "uint256: uint256 [3464,3471]"
    },
    {
      "src": "if_statement [559,604]",
      "dest": "if_statement [1665,1694]"
    },
    {
      "src": "}: } [1895,1896]",
      "dest": "}: } [6767,6768]"
    },
    {
      "src": "%: % [1884,1885]",
      "dest": "%: % [4471,4472]"
    },
    {
      "src": "pure: pure [1289,1293]",
      "dest": "pure: pure [5047,5051]"
    },
    {
      "src": "primitive_type [1531,1538]",
      "dest": "primitive_type [3166,3173]"
    },
    {
      "src": "binary_expression [1330,1336]",
      "dest": "binary_expression [5112,5118]"
    },
    {
      "src": "parameter [323,330]",
      "dest": "parameter [3894,3901]"
    },
    {
      "src": "call_argument [1330,1336]",
      "dest": "call_argument [5112,5118]"
    },
    {
      "src": "primitive_type [289,296]",
      "dest": "primitive_type [1352,1359]"
    },
    {
      "src": "function_body [1540,1618]",
      "dest": "function_body [702,842]"
    },
    {
      "src": "function: function [1473,1481]",
      "dest": "function: function [3108,3116]"
    },
    {
      "src": "variable_declaration_statement [614,632]",
      "dest": "variable_declaration_statement [1707,1725]"
    },
    {
      "src": "identifier: b [630,631]",
      "dest": "identifier: b [1723,1724]"
    },
    {
      "src": "binary_expression [995,1000]",
      "dest": "binary_expression [3920,3925]"
    },
    {
      "src": "state_mutability [1289,1293]",
      "dest": "state_mutability [5047,5051]"
    },
    {
      "src": "(: ( [966,967]",
      "dest": "(: ( [5826,5827]"
    },
    {
      "src": "call_expression [959,973]",
      "dest": "call_expression [5819,5847]"
    },
    {
      "src": "returns: returns [1522,1529]",
      "dest": "returns: returns [3157,3164]"
    },
    {
      "src": "pure: pure [1817,1821]",
      "dest": "pure: pure [2785,2789]"
    },
    {
      "src": "primitive_type [1786,1793]",
      "dest": "primitive_type [2754,2761]"
    },
    {
      "src": "}: } [1617,1618]",
      "dest": "}: } [841,842]"
    },
    {
      "src": "variable_declaration [614,623]",
      "dest": "variable_declaration [1707,1716]"
    },
    {
      "src": "identifier: b [1805,1806]",
      "dest": "identifier: b [2773,2774]"
    },
    {
      "src": "identifier: b [1505,1506]",
      "dest": "identifier: b [3140,3141]"
    },
    {
      "src": "pure: pure [860,864]",
      "dest": "pure: pure [3495,3499]"
    },
    {
      "src": "uint256: uint256 [323,330]",
      "dest": "uint256: uint256 [3894,3901]"
    },
    {
      "src": "primitive_type [1486,1493]",
      "dest": "primitive_type [3121,3128]"
    },
    {
      "src": "}: } [1111,1112]",
      "dest": "}: } [5889,5890]"
    },
    {
      "src": "function: function [816,824]",
      "dest": "function: function [3451,3459]"
    },
    {
      "src": "uint256: uint256 [1797,1804]",
      "dest": "uint256: uint256 [2765,2772]"
    },
    {
      "src": "primitive_type [323,330]",
      "dest": "primitive_type [3894,3901]"
    },
    {
      "src": "uint256: uint256 [1831,1838]",
      "dest": "uint256: uint256 [2799,2806]"
    },
    {
      "src": ",: , [838,839]",
      "dest": ",: , [3473,3474]"
    },
    {
      "src": "binary_expression [649,659]",
      "dest": "binary_expression [1742,1752]"
    },
    {
      "src": "/: / [651,652]",
      "dest": "/: / [1744,1745]"
    },
    {
      "src": "expression_statement [959,974]",
      "dest": "expression_statement [5819,5848]"
    },
    {
      "src": "comment: /**      * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),      * reverts when dividing by zero.      */ [1624,1768]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.      *      * _Available since v3.4._      */ [2163,2311]"
    },
    {
      "src": "): ) [881,882]",
      "dest": "): ) [3516,3517]"
    },
    {
      "src": "pragma: pragma [33,39]",
      "dest": "pragma: pragma [92,98]"
    },
    {
      "src": "(: ( [1830,1831]",
      "dest": "(: ( [2798,2799]"
    },
    {
      "src": "/: / [997,998]",
      "dest": "/: / [3922,3923]"
    },
    {
      "src": "solidity_version_comparison_operator [48,50]",
      "dest": "solidity_version_comparison_operator [107,109]"
    },
    {
      "src": "function_body [883,1112]",
      "dest": "function_body [5785,5890]"
    },
    {
      "src": "}: } [1893,1894]",
      "dest": "}: } [4480,4481]"
    },
    {
      "src": "uint256: uint256 [1531,1538]",
      "dest": "uint256: uint256 [3166,3173]"
    },
    {
      "src": "(: ( [322,323]",
      "dest": "(: ( [3893,3894]"
    },
    {
      "src": "identifier: b [848,849]",
      "dest": "identifier: b [3483,3484]"
    },
    {
      "src": "identifier: a [563,564]",
      "dest": "identifier: a [1669,1670]"
    },
    {
      "src": "return: return [1875,1881]",
      "dest": "return: return [4462,4468]"
    },
    {
      "src": "(: ( [873,874]",
      "dest": "(: ( [3508,3509]"
    },
    {
      "src": "): ) [972,973]",
      "dest": "): ) [5846,5847]"
    },
    {
      "src": "): ) [1838,1839]",
      "dest": "): ) [2806,2807]"
    },
    {
      "src": "uint256: uint256 [1497,1504]",
      "dest": "uint256: uint256 [3132,3139]"
    },
    {
      "src": "visibility [1280,1288]",
      "dest": "visibility [5038,5046]"
    },
    {
      "src": "function: function [265,273]",
      "dest": "function: function [1325,1333]"
    }
  ],
  "actions": [
    {
      "action": "move-tree",
      "tree": "pragma_directive [33,56]",
      "parent": "source_file [0,6769]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title SafeMath  * @dev Unsigned math operations with safety checks that revert on error  */ [59,158]",
      "label": "// OpenZeppelin Contracts v4.3.2 (utils/math/SafeMath.sol)"
    },
    {
      "action": "insert-node",
      "tree": "comment: // CAUTION [117,127]",
      "parent": "source_file [0,6769]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: // This version of SafeMath should only be used with Solidity 0.8 or later, [128,203]",
      "parent": "source_file [0,6769]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: // because it relies on the compiler's built in overflow checks. [204,268]",
      "parent": "source_file [0,6769]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations.  *  * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler  * now has built in overflow checking.  */ [270,466]",
      "parent": "source_file [0,6769]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "function_definition [265,686]",
      "parent": "contract_body [484,6768]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "function_definition [1473,1618]",
      "parent": "contract_body [484,6768]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "function_definition [816,1112]",
      "parent": "contract_body [484,6768]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "function_definition [1245,1390]",
      "parent": "contract_body [484,6768]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.7.0 [50,55]",
      "label": "0.8.0"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Multiplies two unsigned integers, reverts on overflow.      */ [182,260]",
      "label": "/**      * @dev Returns the addition of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */"
    },
    {
      "action": "insert-node",
      "tree": "function_definition [626,842]",
      "parent": "contract_body [484,6768]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.      */ [692,811]",
      "label": "/**      * @dev Returns the substraction of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */"
    },
    {
      "action": "insert-tree",
      "tree": "function_definition [988,1177]",
      "parent": "contract_body [484,6768]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).      */ [1118,1240]",
      "label": "/**      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Adds two unsigned integers, reverts on overflow.      */ [1396,1468]",
      "label": "/**      * @dev Returns the division of two unsigned integers, with a division by zero flag.      *      * _Available since v3.4._      */"
    },
    {
      "action": "insert-node",
      "tree": "function_definition [1967,2157]",
      "parent": "contract_body [484,6768]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),      * reverts when dividing by zero.      */ [1624,1768]",
      "label": "/**      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.      *      * _Available since v3.4._      */"
    },
    {
      "action": "insert-node",
      "tree": "function_definition [2316,2506]",
      "parent": "contract_body [484,6768]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */ [2512,2736]",
      "parent": "contract_body [484,6768]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [2843,3103]",
      "parent": "contract_body [484,6768]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */ [3210,3446]",
      "parent": "contract_body [484,6768]",
      "at": 15
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the integer division of two unsigned integers, reverting on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator.      *      * Requirements:      *      * - The divisor cannot be zero.      */ [3553,3831]",
      "parent": "contract_body [484,6768]",
      "at": 17
    },
    {
      "action": "insert-node",
      "tree": "function_definition [3836,3932]",
      "parent": "contract_body [484,6768]",
      "at": 18
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * reverting when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [3938,4380]",
      "parent": "contract_body [484,6768]",
      "at": 19
    },
    {
      "action": "insert-node",
      "tree": "function_definition [4385,4481]",
      "parent": "contract_body [484,6768]",
      "at": 20
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * CAUTION: This function is deprecated because it requires allocating memory for the error      * message unnecessarily. For custom revert reasons use {trySub}.      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [4487,4940]",
      "parent": "contract_body [484,6768]",
      "at": 21
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the integer division of two unsigned integers, reverting with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [5182,5655]",
      "parent": "contract_body [484,6768]",
      "at": 23
    },
    {
      "action": "insert-node",
      "tree": "function_definition [5660,5890]",
      "parent": "contract_body [484,6768]",
      "at": 24
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * reverting with custom message when dividing by zero.      *      * CAUTION: This function is deprecated because it requires allocating memory for the error      * message unnecessarily. For custom revert reasons use {tryMod}.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [5896,6531]",
      "parent": "contract_body [484,6768]",
      "at": 25
    },
    {
      "action": "insert-tree",
      "tree": "function_definition [6536,6766]",
      "parent": "contract_body [484,6768]",
      "at": 26
    },
    {
      "action": "insert-node",
      "tree": "function: function [626,634]",
      "parent": "function_definition [626,842]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: tryAdd [635,641]",
      "parent": "function_definition [626,842]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [641,642]",
      "parent": "function_definition [626,842]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [642,651]",
      "parent": "function_definition [626,842]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [651,652]",
      "parent": "function_definition [626,842]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [653,662]",
      "parent": "function_definition [626,842]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [662,663]",
      "parent": "function_definition [626,842]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "visibility [664,672]",
      "parent": "function_definition [626,842]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [673,677]",
      "parent": "function_definition [626,842]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [678,701]",
      "parent": "function_definition [626,842]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "function_body [1540,1618]",
      "parent": "function_definition [626,842]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "identifier: mul [274,277]",
      "label": "tryMul"
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [1377,1400]",
      "parent": "function_definition [1325,1818]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [1967,1975]",
      "parent": "function_definition [1967,2157]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: tryDiv [1976,1982]",
      "parent": "function_definition [1967,2157]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1982,1983]",
      "parent": "function_definition [1967,2157]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [1983,1992]",
      "parent": "function_definition [1967,2157]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [1992,1993]",
      "parent": "function_definition [1967,2157]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [1994,2003]",
      "parent": "function_definition [1967,2157]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [2003,2004]",
      "parent": "function_definition [1967,2157]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "visibility [2005,2013]",
      "parent": "function_definition [1967,2157]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [2014,2018]",
      "parent": "function_definition [1967,2157]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "return_type_definition [2019,2042]",
      "parent": "function_definition [1967,2157]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [2043,2157]",
      "parent": "function_definition [1967,2157]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [2316,2324]",
      "parent": "function_definition [2316,2506]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: tryMod [2325,2331]",
      "parent": "function_definition [2316,2506]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2331,2332]",
      "parent": "function_definition [2316,2506]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [2332,2341]",
      "parent": "function_definition [2316,2506]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [2341,2342]",
      "parent": "function_definition [2316,2506]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [2343,2352]",
      "parent": "function_definition [2316,2506]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [2352,2353]",
      "parent": "function_definition [2316,2506]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "visibility [2354,2362]",
      "parent": "function_definition [2316,2506]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [2363,2367]",
      "parent": "function_definition [2316,2506]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "return_type_definition [2368,2391]",
      "parent": "function_definition [2316,2506]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [2392,2506]",
      "parent": "function_definition [2316,2506]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "identifier: mod [1782,1785]",
      "label": "add"
    },
    {
      "action": "insert-tree",
      "tree": "function_body [2808,2837]",
      "parent": "function_definition [2741,2837]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "identifier: add [1482,1485]",
      "label": "sub"
    },
    {
      "action": "insert-node",
      "tree": "function_body [3175,3204]",
      "parent": "function_definition [3108,3204]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "identifier: div [825,828]",
      "label": "mul"
    },
    {
      "action": "insert-tree",
      "tree": "function_body [3518,3547]",
      "parent": "function_definition [3451,3547]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [3836,3844]",
      "parent": "function_definition [3836,3932]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: div [3845,3848]",
      "parent": "function_definition [3836,3932]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [3848,3849]",
      "parent": "function_definition [3836,3932]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [3849,3858]",
      "parent": "function_definition [3836,3932]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [3858,3859]",
      "parent": "function_definition [3836,3932]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [3860,3869]",
      "parent": "function_definition [3836,3932]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [3869,3870]",
      "parent": "function_definition [3836,3932]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "visibility [3871,3879]",
      "parent": "function_definition [3836,3932]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [3880,3884]",
      "parent": "function_definition [3836,3932]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [314,331]",
      "parent": "function_definition [3836,3932]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_body [3903,3932]",
      "parent": "function_definition [3836,3932]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [4385,4393]",
      "parent": "function_definition [4385,4481]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: mod [4394,4397]",
      "parent": "function_definition [4385,4481]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [4397,4398]",
      "parent": "function_definition [4385,4481]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [4398,4407]",
      "parent": "function_definition [4385,4481]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [4407,4408]",
      "parent": "function_definition [4385,4481]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [4409,4418]",
      "parent": "function_definition [4385,4481]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [4418,4419]",
      "parent": "function_definition [4385,4481]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "visibility [4420,4428]",
      "parent": "function_definition [4385,4481]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [4429,4433]",
      "parent": "function_definition [4385,4481]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [4434,4451]",
      "parent": "function_definition [4385,4481]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "function_body [1840,1894]",
      "parent": "function_definition [4385,4481]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": ",: , [4995,4996]",
      "parent": "function_definition [4945,5176]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [5005,5031]",
      "parent": "function_definition [4945,5176]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [5660,5668]",
      "parent": "function_definition [5660,5890]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: div [5669,5672]",
      "parent": "function_definition [5660,5890]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [5672,5673]",
      "parent": "function_definition [5660,5890]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [5682,5691]",
      "parent": "function_definition [5660,5890]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [5691,5692]",
      "parent": "function_definition [5660,5890]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [5701,5710]",
      "parent": "function_definition [5660,5890]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [5710,5711]",
      "parent": "function_definition [5660,5890]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [5720,5746]",
      "parent": "function_definition [5660,5890]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [5751,5752]",
      "parent": "function_definition [5660,5890]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "visibility [5753,5761]",
      "parent": "function_definition [5660,5890]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [5762,5766]",
      "parent": "function_definition [5660,5890]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [5767,5784]",
      "parent": "function_definition [5660,5890]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "function_body [883,1112]",
      "parent": "function_definition [5660,5890]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "block_statement [712,836]",
      "parent": "function_body [702,842]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "block_statement [1411,1812]",
      "parent": "function_body [1401,1818]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "returns: returns [2019,2026]",
      "parent": "return_type_definition [2019,2042]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2027,2028]",
      "parent": "return_type_definition [2019,2042]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "parameter [2028,2032]",
      "parent": "return_type_definition [2019,2042]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2032,2033]",
      "parent": "return_type_definition [2019,2042]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "parameter [2034,2041]",
      "parent": "return_type_definition [2019,2042]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [2041,2042]",
      "parent": "return_type_definition [2019,2042]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "returns: returns [2368,2375]",
      "parent": "return_type_definition [2368,2391]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2376,2377]",
      "parent": "return_type_definition [2368,2391]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "parameter [2377,2381]",
      "parent": "return_type_definition [2368,2391]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2381,2382]",
      "parent": "return_type_definition [2368,2391]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "parameter [2383,2390]",
      "parent": "return_type_definition [2368,2391]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [2390,2391]",
      "parent": "return_type_definition [2368,2391]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "{: { [3175,3176]",
      "parent": "function_body [3175,3204]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [3185,3198]",
      "parent": "function_body [3175,3204]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [3203,3204]",
      "parent": "function_body [3175,3204]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "{: { [3903,3904]",
      "parent": "function_body [3903,3932]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [3913,3926]",
      "parent": "function_body [3903,3932]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [3931,3932]",
      "parent": "function_body [3903,3932]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "block_statement [5080,5170]",
      "parent": "function_body [5070,5176]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "block_statement [5795,5884]",
      "parent": "function_body [5785,5890]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "{: { [722,723]",
      "parent": "block_statement [712,836]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [1550,1568]",
      "parent": "block_statement [712,836]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "if_statement [767,796]",
      "parent": "block_statement [712,836]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [809,826]",
      "parent": "block_statement [712,836]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [835,836]",
      "parent": "block_statement [712,836]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [1421,1422]",
      "parent": "block_statement [1411,1812]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [1435,1514]",
      "parent": "block_statement [1411,1812]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // benefit is lost if 'b' is also tested. [1527,1568]",
      "parent": "block_statement [1411,1812]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [1581,1652]",
      "parent": "block_statement [1411,1812]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "if_statement [559,604]",
      "parent": "block_statement [1411,1812]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [614,632]",
      "parent": "block_statement [1411,1812]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "if_statement [1738,1772]",
      "parent": "block_statement [1411,1812]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [1785,1802]",
      "parent": "block_statement [1411,1812]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "}: } [1811,1812]",
      "parent": "block_statement [1411,1812]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "type_name [1347,1354]",
      "parent": "parameter [2034,2041]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "type_name [983,990]",
      "parent": "parameter [2383,2390]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return: return [3185,3191]",
      "parent": "return_statement [3185,3198]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [1359,1364]",
      "parent": "return_statement [3185,3198]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "return: return [3913,3919]",
      "parent": "return_statement [3913,3926]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [995,1000]",
      "parent": "return_statement [3913,3926]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "{: { [5090,5091]",
      "parent": "block_statement [5080,5170]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [1322,1338]",
      "parent": "block_statement [5080,5170]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [5147,5160]",
      "parent": "block_statement [5080,5170]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [5169,5170]",
      "parent": "block_statement [5080,5170]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "{: { [5805,5806]",
      "parent": "block_statement [5795,5884]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [959,974]",
      "parent": "block_statement [5795,5884]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [5861,5874]",
      "parent": "block_statement [5795,5884]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [5883,5884]",
      "parent": "block_statement [5795,5884]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [1677,1694]",
      "parent": "if_statement [1665,1694]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "if: if [1738,1740]",
      "parent": "if_statement [1738,1772]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1741,1742]",
      "parent": "if_statement [1738,1772]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [649,659]",
      "parent": "if_statement [1738,1772]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [1752,1753]",
      "parent": "if_statement [1738,1772]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [1754,1772]",
      "parent": "if_statement [1738,1772]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "!=: != [1748,1750]",
      "parent": "binary_expression [1742,1752]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ",: , [5118,5119]",
      "parent": "call_expression [5104,5133]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [5120,5132]",
      "parent": "call_expression [5104,5133]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [5832,5833]",
      "parent": "call_expression [5819,5847]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [5834,5846]",
      "parent": "call_expression [5819,5847]",
      "at": 4
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [1577,1593]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [1603,1612]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [571,604]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [655,657]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [342,421]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // benefit is lost if 'b' is also tested. [430,471]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522 [480,550]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [641,648]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [648,649]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [649,659]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [659,660]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [641,660]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [641,661]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [671,680]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [1850,1866]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: c [1355,1356]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [1347,1356]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [1357,1358]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [1347,1365]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [1375,1384]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Solidity only automatically asserts when dividing by 0 [893,950]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: c [991,992]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [983,992]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [993,994]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [983,1001]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [1010,1087]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [1097,1106]"
    }
  ]
}