{
  "matches": [
    {
      "src": "identifier: token [1268,1273]",
      "dest": "identifier: token [2493,2498]"
    },
    {
      "src": "variable_declaration_statement [1482,1556]",
      "dest": "variable_declaration_statement [2130,2201]"
    },
    {
      "src": "call_argument [1336,1372]",
      "dest": "call_argument [2237,2306]"
    },
    {
      "src": ",: , [477,478]",
      "dest": ",: , [746,747]"
    },
    {
      "src": "expression_statement [1565,1611]",
      "dest": "expression_statement [2692,2790]"
    },
    {
      "src": "parenthesized_expression [1044,1087]",
      "dest": "parenthesized_expression [1765,1811]"
    },
    {
      "src": "==: == [1035,1037]",
      "dest": "==: == [1756,1758]"
    },
    {
      "src": "type_name [467,474]",
      "dest": "type_name [736,743]"
    },
    {
      "src": ",: , [1429,1430]",
      "dest": ",: , [2056,2057]"
    },
    {
      "src": "identifier: transfer [527,535]",
      "dest": "identifier: transfer [851,859]"
    },
    {
      "src": "address: address [600,607]",
      "dest": "address: address [951,958]"
    },
    {
      "src": "type_name [1180,1186]",
      "dest": "type_name [2360,2366]"
    },
    {
      "src": ",: , [695,696]",
      "dest": ",: , [1115,1116]"
    },
    {
      "src": "^:  ^ [48,50]",
      "dest": "^:  ^ [115,117]"
    },
    {
      "src": "call_expression [1020,1088]",
      "dest": "call_expression [1728,1891]"
    },
    {
      "src": "import_directive [59,79]",
      "dest": "import_directive [146,167]"
    },
    {
      "src": "identifier: spender [1120,1127]",
      "dest": "identifier: spender [1975,1982]"
    },
    {
      "src": "(: ( [1528,1529]",
      "dest": "(: ( [2176,2177]"
    },
    {
      "src": ",: , [612,613]",
      "dest": ",: , [963,964]"
    },
    {
      "src": "(: ( [1028,1029]",
      "dest": "(: ( [1749,1750]"
    },
    {
      "src": "identifier: token [668,673]",
      "dest": "identifier: token [1082,1087]"
    },
    {
      "src": "): ) [1087,1088]",
      "dest": "): ) [1890,1891]"
    },
    {
      "src": "{: { [1235,1236]",
      "dest": "{: { [2436,2437]"
    },
    {
      "src": "identifier: token [1424,1429]",
      "dest": "identifier: token [2051,2056]"
    },
    {
      "src": "identifier: require [1020,1027]",
      "dest": "identifier: require [1728,1735]"
    },
    {
      "src": ",: , [750,751]",
      "dest": ",: , [1437,1438]"
    },
    {
      "src": "function_body [650,711]",
      "dest": "function_body [1022,1135]"
    },
    {
      "src": "comment: // safeApprove should only be called when setting an initial allowance, [803,874]",
      "dest": "comment: // safeApprove should only be called when setting an initial allowance, [1511,1582]"
    },
    {
      "src": "parameter [1431,1446]",
      "dest": "parameter [2066,2081]"
    },
    {
      "src": "variable_declaration_statement [1245,1319]",
      "dest": "variable_declaration_statement [2470,2533]"
    },
    {
      "src": "internal: internal [494,502]",
      "dest": "internal: internal [776,784]"
    },
    {
      "src": "{: { [1472,1473]",
      "dest": "{: { [2120,2121]"
    },
    {
      "src": "}: } [1616,1617]",
      "dest": "}: } [2313,2314]"
    },
    {
      "src": "internal: internal [641,649]",
      "dest": "internal: internal [1013,1021]"
    },
    {
      "src": "call_argument [1073,1080]",
      "dest": "call_argument [1797,1804]"
    },
    {
      "src": "import: import [59,65]",
      "dest": "import: import [146,152]"
    },
    {
      "src": "identifier: value [1456,1461]",
      "dest": "identifier: value [2099,2104]"
    },
    {
      "src": "using_directive [398,425]",
      "dest": "using_directive [651,677]"
    },
    {
      "src": "identifier: token [745,750]",
      "dest": "identifier: token [1432,1437]"
    },
    {
      "src": "identifier: value [540,545]",
      "dest": "identifier: value [874,879]"
    },
    {
      "src": "call_argument [540,545]",
      "dest": "call_argument [874,879]"
    },
    {
      "src": "parameter [1194,1209]",
      "dest": "parameter [2382,2397]"
    },
    {
      "src": "identifier: from [608,612]",
      "dest": "identifier: from [959,963]"
    },
    {
      "src": "type_name [769,776]",
      "dest": "type_name [1472,1479]"
    },
    {
      "src": "primitive_type [1194,1201]",
      "dest": "primitive_type [2382,2389]"
    },
    {
      "src": "call_expression [521,546]",
      "dest": "call_expression [822,880]"
    },
    {
      "src": "expression_statement [1098,1137]",
      "dest": "expression_statement [1901,1992]"
    },
    {
      "src": "{: { [793,794]",
      "dest": "{: { [1501,1502]"
    },
    {
      "src": "type_name [626,633]",
      "dest": "type_name [993,1000]"
    },
    {
      "src": "uint256: uint256 [1245,1252]",
      "dest": "uint256: uint256 [2635,2642]"
    },
    {
      "src": "identifier: safeIncreaseAllowance [1158,1179]",
      "dest": "identifier: safeDecreaseAllowance [2329,2350]"
    },
    {
      "src": "identifier: to [536,538]",
      "dest": "identifier: to [870,872]"
    },
    {
      "src": "library: library [374,381]",
      "dest": "library: library [627,634]"
    },
    {
      "src": "identifier: token [460,465]",
      "dest": "identifier: token [721,726]"
    },
    {
      "src": "type_name [1194,1201]",
      "dest": "type_name [2382,2389]"
    },
    {
      "src": "member_expression [668,686]",
      "dest": "member_expression [1082,1100]"
    },
    {
      "src": ".: . [673,674]",
      "dest": ".: . [1087,1088]"
    },
    {
      "src": "(: ( [1520,1521]",
      "dest": "(: ( [2168,2169]"
    },
    {
      "src": "expression_statement [1328,1374]",
      "dest": "expression_statement [2210,2308]"
    },
    {
      "src": "\": \" [77,78]",
      "dest": "\": \" [165,166]"
    },
    {
      "src": "type_name [738,744]",
      "dest": "type_name [1425,1431]"
    },
    {
      "src": "primitive_type [752,759]",
      "dest": "primitive_type [1447,1454]"
    },
    {
      "src": "variable_declaration [1482,1502]",
      "dest": "variable_declaration [2130,2150]"
    },
    {
      "src": ",: , [624,625]",
      "dest": ",: , [983,984]"
    },
    {
      "src": "(: ( [1291,1292]",
      "dest": "(: ( [2516,2517]"
    },
    {
      "src": "(: ( [585,586]",
      "dest": "(: ( [919,920]"
    },
    {
      "src": "type_cast_expression [1521,1534]",
      "dest": "type_cast_expression [2169,2182]"
    },
    {
      "src": "call_argument [693,695]",
      "dest": "call_argument [1117,1119]"
    },
    {
      "src": "primitive_type [600,607]",
      "dest": "primitive_type [951,958]"
    },
    {
      "src": "): ) [1461,1462]",
      "dest": "): ) [2109,2110]"
    },
    {
      "src": "internal: internal [1226,1234]",
      "dest": "internal: internal [2427,2435]"
    },
    {
      "src": "call_argument [668,703]",
      "dest": "call_argument [1059,1127]"
    },
    {
      "src": "using: using [398,403]",
      "dest": "using: using [651,656]"
    },
    {
      "src": "binary_expression [1028,1087]",
      "dest": "binary_expression [1749,1811]"
    },
    {
      "src": "identifier: spender [1350,1357]",
      "dest": "identifier: spender [2284,2291]"
    },
    {
      "src": "(: ( [1416,1417]",
      "dest": "(: ( [2034,2035]"
    },
    {
      "src": "type_name [1448,1455]",
      "dest": "type_name [2091,2098]"
    },
    {
      "src": "visibility [1463,1471]",
      "dest": "visibility [2111,2119]"
    },
    {
      "src": "identifier: to [622,624]",
      "dest": "identifier: to [981,983]"
    },
    {
      "src": "identifier: newAllowance [1253,1265]",
      "dest": "identifier: newAllowance [2643,2655]"
    },
    {
      "src": "(: ( [520,521]",
      "dest": "(: ( [814,815]"
    },
    {
      "src": "parameter [614,624]",
      "dest": "parameter [973,983]"
    },
    {
      "src": "function_body [1472,1617]",
      "dest": "function_body [2120,2314]"
    },
    {
      "src": "identifier: token [1505,1510]",
      "dest": "identifier: token [2153,2158]"
    },
    {
      "src": "=: = [1503,1504]",
      "dest": "=: = [2151,2152]"
    },
    {
      "src": "function_definition [1149,1380]",
      "dest": "function_definition [2320,2806]"
    },
    {
      "src": "(: ( [1586,1587]",
      "dest": "(: ( [2741,2742]"
    },
    {
      "src": "parameter [752,767]",
      "dest": "parameter [1447,1462]"
    },
    {
      "src": ".: . [1050,1051]",
      "dest": ".: . [1771,1772]"
    },
    {
      "src": "uint256: uint256 [1211,1218]",
      "dest": "uint256: uint256 [2407,2414]"
    },
    {
      "src": "string [87,101]",
      "dest": "string [132,144]"
    },
    {
      "src": "primitive_type [626,633]",
      "dest": "primitive_type [993,1000]"
    },
    {
      "src": ".: . [1111,1112]",
      "dest": ".: . [1956,1957]"
    },
    {
      "src": ",: , [767,768]",
      "dest": ",: , [1462,1463]"
    },
    {
      "src": "primitive_type [1211,1218]",
      "dest": "primitive_type [2407,2414]"
    },
    {
      "src": "}: } [1379,1380]",
      "dest": "}: } [2805,2806]"
    },
    {
      "src": "library_declaration [374,1619]",
      "dest": "library_declaration [627,3897]"
    },
    {
      "src": "address: address [614,621]",
      "dest": "address: address [973,980]"
    },
    {
      "src": ".: . [1578,1579]",
      "dest": ".: . [2747,2748]"
    },
    {
      "src": "import: import [80,86]",
      "dest": "import: import [125,131]"
    },
    {
      "src": "source_file [0,1620]",
      "dest": "source_file [0,3898]"
    },
    {
      "src": "identifier: to [475,477]",
      "dest": "identifier: to [744,746]"
    },
    {
      "src": "type_name [479,486]",
      "dest": "type_name [756,763]"
    },
    {
      "src": "parameter [467,477]",
      "dest": "parameter [736,746]"
    },
    {
      "src": "identifier: token [1573,1578]",
      "dest": "identifier: token [2742,2747]"
    },
    {
      "src": "comment: // or when resetting it to zero. To increase and decrease it, use [883,948]",
      "dest": "comment: // or when resetting it to zero. To increase and decrease it, use [1591,1656]"
    },
    {
      "src": "solidity: solidity [40,48]",
      "dest": "solidity: solidity [107,115]"
    },
    {
      "src": "type_name [1431,1438]",
      "dest": "type_name [2066,2073]"
    },
    {
      "src": "function: function [560,568]",
      "dest": "function: function [894,902]"
    },
    {
      "src": "function_body [793,1143]",
      "dest": "function_body [1501,1998]"
    },
    {
      "src": "solidity_version_comparison_operator [48,50]",
      "dest": "solidity_version_comparison_operator [115,117]"
    },
    {
      "src": "function: function [431,439]",
      "dest": "function: function [683,691]"
    },
    {
      "src": "identifier: safeDecreaseAllowance [1395,1416]",
      "dest": "identifier: safeIncreaseAllowance [2013,2034]"
    },
    {
      "src": "identifier: token [1045,1050]",
      "dest": "identifier: token [1766,1771]"
    },
    {
      "src": "identifier: this [1292,1296]",
      "dest": "identifier: this [2517,2521]"
    },
    {
      "src": "parameter [479,492]",
      "dest": "parameter [756,769]"
    },
    {
      "src": "==: == [1082,1084]",
      "dest": "==: == [1806,1808]"
    },
    {
      "src": "number_literal: 0 [1085,1086]",
      "dest": "number_literal: 0 [1809,1810]"
    },
    {
      "src": "primitive_type [417,424]",
      "dest": "primitive_type [2470,2477]"
    },
    {
      "src": ".: . [1510,1511]",
      "dest": ".: . [2158,2159]"
    },
    {
      "src": "call_argument [1573,1609]",
      "dest": "call_argument [2719,2788]"
    },
    {
      "src": "type_name [1211,1218]",
      "dest": "type_name [2407,2414]"
    },
    {
      "src": "parenthesized_expression [1028,1040]",
      "dest": "parenthesized_expression [1749,1761]"
    },
    {
      "src": "): ) [1608,1609]",
      "dest": "): ) [2787,2788]"
    },
    {
      "src": "member_expression [1106,1119]",
      "dest": "member_expression [1951,1964]"
    },
    {
      "src": "): ) [1135,1136]",
      "dest": "): ) [1990,1991]"
    },
    {
      "src": "type_name [600,607]",
      "dest": "type_name [951,958]"
    },
    {
      "src": "function_body [503,554]",
      "dest": "function_body [785,888]"
    },
    {
      "src": "call_expression [1106,1135]",
      "dest": "call_expression [1928,1990]"
    },
    {
      "src": "identifier: newAllowance [1596,1608]",
      "dest": "identifier: newAllowance [2293,2305]"
    },
    {
      "src": "(: ( [1572,1573]",
      "dest": "(: ( [2711,2712]"
    },
    {
      "src": "call_argument [1299,1306]",
      "dest": "call_argument [2524,2531]"
    },
    {
      "src": "): ) [639,640]",
      "dest": "): ) [1011,1012]"
    },
    {
      "src": "): ) [1371,1372]",
      "dest": "): ) [2305,2306]"
    },
    {
      "src": "): ) [1039,1040]",
      "dest": "): ) [1760,1761]"
    },
    {
      "src": "address: address [1431,1438]",
      "dest": "address: address [2066,2073]"
    },
    {
      "src": "expression_statement [513,548]",
      "dest": "expression_statement [795,882]"
    },
    {
      "src": "member_expression [1336,1349]",
      "dest": "member_expression [2260,2273]"
    },
    {
      "src": ".: . [1341,1342]",
      "dest": ".: . [2265,2266]"
    },
    {
      "src": "call_expression [1336,1372]",
      "dest": "call_expression [2237,2306]"
    },
    {
      "src": "type_alias [404,412]",
      "dest": "type_alias [657,664]"
    },
    {
      "src": "parameter [1180,1192]",
      "dest": "parameter [2360,2372]"
    },
    {
      "src": "primitive_type [1482,1489]",
      "dest": "primitive_type [2130,2137]"
    },
    {
      "src": "identifier: spender [1587,1594]",
      "dest": "identifier: spender [2766,2773]"
    },
    {
      "src": "call_expression [1045,1081]",
      "dest": "call_expression [1766,1805]"
    },
    {
      "src": "): ) [1372,1373]",
      "dest": "): ) [2306,2307]"
    },
    {
      "src": "): ) [1296,1297]",
      "dest": "): ) [2521,2522]"
    },
    {
      "src": "member_expression [1505,1520]",
      "dest": "member_expression [2153,2168]"
    },
    {
      "src": "parameter [453,465]",
      "dest": "parameter [714,726]"
    },
    {
      "src": "): ) [1609,1610]",
      "dest": "): ) [2788,2789]"
    },
    {
      "src": "): ) [1080,1081]",
      "dest": "): ) [1804,1805]"
    },
    {
      "src": "): ) [1086,1087]",
      "dest": "): ) [1810,1811]"
    },
    {
      "src": "for: for [413,416]",
      "dest": "for: for [665,668]"
    },
    {
      "src": "binary_expression [1029,1039]",
      "dest": "binary_expression [1750,1760]"
    },
    {
      "src": "parameter [1448,1461]",
      "dest": "parameter [2091,2104]"
    },
    {
      "src": "member_expression [1573,1586]",
      "dest": "member_expression [2742,2755]"
    },
    {
      "src": ",: , [1594,1595]",
      "dest": ",: , [2764,2765]"
    },
    {
      "src": "): ) [545,546]",
      "dest": "): ) [879,880]"
    },
    {
      "src": "primitive_type [479,486]",
      "dest": "primitive_type [756,763]"
    },
    {
      "src": "function_definition [431,554]",
      "dest": "function_definition [683,888]"
    },
    {
      "src": "identifier: to [693,695]",
      "dest": "identifier: to [1117,1119]"
    },
    {
      "src": "call_argument [1350,1357]",
      "dest": "call_argument [2284,2291]"
    },
    {
      "src": "primitive_type [614,621]",
      "dest": "primitive_type [973,980]"
    },
    {
      "src": "parameter [738,750]",
      "dest": "parameter [1425,1437]"
    },
    {
      "src": "parameter [1417,1429]",
      "dest": "parameter [2044,2056]"
    },
    {
      "src": "user_defined_type [1417,1423]",
      "dest": "user_defined_type [2044,2050]"
    },
    {
      "src": "): ) [1533,1534]",
      "dest": "): ) [2181,2182]"
    },
    {
      "src": "uint256: uint256 [479,486]",
      "dest": "uint256: uint256 [756,763]"
    },
    {
      "src": "function: function [717,725]",
      "dest": "function: function [1395,1403]"
    },
    {
      "src": ".: . [526,527]",
      "dest": ".: . [850,851]"
    },
    {
      "src": "call_argument [1292,1296]",
      "dest": "call_argument [2517,2521]"
    },
    {
      "src": "member_expression [521,535]",
      "dest": "member_expression [845,859]"
    },
    {
      "src": "call_argument [687,691]",
      "dest": "call_argument [1111,1115]"
    },
    {
      "src": "call_argument [536,538]",
      "dest": "call_argument [870,872]"
    },
    {
      "src": "binary_expression [1045,1086]",
      "dest": "binary_expression [1766,1810]"
    },
    {
      "src": "}: } [1618,1619]",
      "dest": "}: } [3896,3897]"
    },
    {
      "src": "(: ( [667,668]",
      "dest": "(: ( [1051,1052]"
    },
    {
      "src": "string [66,78]",
      "dest": "string [153,166]"
    },
    {
      "src": ",: , [1446,1447]",
      "dest": ",: , [2081,2082]"
    },
    {
      "src": "identifier: approve [1579,1586]",
      "dest": "identifier: approve [2748,2755]"
    },
    {
      "src": "user_defined_type [1180,1186]",
      "dest": "user_defined_type [2360,2366]"
    },
    {
      "src": "uint256: uint256 [1482,1489]",
      "dest": "uint256: uint256 [2130,2137]"
    },
    {
      "src": "identifier: spender [1439,1446]",
      "dest": "identifier: spender [2074,2081]"
    },
    {
      "src": "identifier: IERC20 [453,459]",
      "dest": "identifier: IERC20 [714,720]"
    },
    {
      "src": "expression_statement [1020,1089]",
      "dest": "expression_statement [1728,1892]"
    },
    {
      "src": "user_defined_type [586,592]",
      "dest": "user_defined_type [929,935]"
    },
    {
      "src": "call_argument [697,702]",
      "dest": "call_argument [1121,1126]"
    },
    {
      "src": "identifier: value [1029,1034]",
      "dest": "identifier: value [1750,1755]"
    },
    {
      "src": "uint256: uint256 [769,776]",
      "dest": "uint256: uint256 [1472,1479]"
    },
    {
      "src": "parameter [586,598]",
      "dest": "parameter [929,941]"
    },
    {
      "src": "): ) [782,783]",
      "dest": "): ) [1490,1491]"
    },
    {
      "src": "uint256: uint256 [626,633]",
      "dest": "uint256: uint256 [993,1000]"
    },
    {
      "src": "type_cast_expression [1284,1297]",
      "dest": "type_cast_expression [2509,2522]"
    },
    {
      "src": "type_name [1245,1252]",
      "dest": "type_name [2635,2642]"
    },
    {
      "src": "identifier: IERC20 [586,592]",
      "dest": "identifier: IERC20 [929,935]"
    },
    {
      "src": "): ) [546,547]",
      "dest": "): ) [880,881]"
    },
    {
      "src": "call_expression [1328,1373]",
      "dest": "call_expression [2210,2307]"
    },
    {
      "src": "primitive_type [769,776]",
      "dest": "primitive_type [1472,1479]"
    },
    {
      "src": "identifier: newAllowance [1359,1371]",
      "dest": "identifier: newAllowance [2775,2787]"
    },
    {
      "src": "identifier: newAllowance [1490,1502]",
      "dest": "identifier: newAllowance [2138,2150]"
    },
    {
      "src": "function: function [1386,1394]",
      "dest": "function: function [2004,2012]"
    },
    {
      "src": "uint256: uint256 [1448,1455]",
      "dest": "uint256: uint256 [2091,2098]"
    },
    {
      "src": ",: , [1534,1535]",
      "dest": ",: , [2182,2183]"
    },
    {
      "src": "identifier: IERC20 [1417,1423]",
      "dest": "identifier: IERC20 [2044,2050]"
    },
    {
      "src": "parameter [626,639]",
      "dest": "parameter [993,1006]"
    },
    {
      "src": "(: ( [1335,1336]",
      "dest": "(: ( [2229,2230]"
    },
    {
      "src": "type_name [614,621]",
      "dest": "type_name [973,980]"
    },
    {
      "src": "primitive_type [1431,1438]",
      "dest": "primitive_type [2066,2073]"
    },
    {
      "src": "call_argument [1028,1087]",
      "dest": "call_argument [1749,1811]"
    },
    {
      "src": "identifier: allowance [1511,1520]",
      "dest": "identifier: allowance [2159,2168]"
    },
    {
      "src": "call_expression [1505,1544]",
      "dest": "call_expression [2153,2192]"
    },
    {
      "src": "\": \" [66,67]",
      "dest": "\": \" [153,154]"
    },
    {
      "src": "type_name [417,424]",
      "dest": "type_name [2470,2477]"
    },
    {
      "src": "variable_declaration [1245,1265]",
      "dest": "variable_declaration [2635,2655]"
    },
    {
      "src": "function_definition [1386,1617]",
      "dest": "function_definition [2004,2314]"
    },
    {
      "src": "identifier: this [1529,1533]",
      "dest": "identifier: this [2177,2181]"
    },
    {
      "src": "identifier: safeTransferFrom [569,585]",
      "dest": "identifier: safeTransferFrom [903,919]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [0,31]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "identifier: token [593,598]",
      "dest": "identifier: token [936,941]"
    },
    {
      "src": "primitive_type [1284,1291]",
      "dest": "primitive_type [2509,2516]"
    },
    {
      "src": "type_name [586,592]",
      "dest": "type_name [929,935]"
    },
    {
      "src": "type_name [453,459]",
      "dest": "type_name [714,720]"
    },
    {
      "src": "call_argument [1284,1297]",
      "dest": "call_argument [2509,2522]"
    },
    {
      "src": "address: address [1521,1528]",
      "dest": "address: address [2169,2176]"
    },
    {
      "src": "identifier: value [487,492]",
      "dest": "identifier: value [764,769]"
    },
    {
      "src": "address: address [467,474]",
      "dest": "address: address [736,743]"
    },
    {
      "src": "): ) [1134,1135]",
      "dest": "): ) [1989,1990]"
    },
    {
      "src": "(: ( [1027,1028]",
      "dest": "(: ( [1735,1736]"
    },
    {
      "src": "\": \" [87,88]",
      "dest": "\": \" [132,133]"
    },
    {
      "src": "}: } [1142,1143]",
      "dest": "}: } [1997,1998]"
    },
    {
      "src": "(: ( [1119,1120]",
      "dest": "(: ( [1950,1951]"
    },
    {
      "src": "call_argument [1120,1127]",
      "dest": "call_argument [1975,1982]"
    },
    {
      "src": "identifier: IERC20 [1180,1186]",
      "dest": "identifier: IERC20 [2360,2366]"
    },
    {
      "src": "(: ( [452,453]",
      "dest": "(: ( [704,705]"
    },
    {
      "src": "||: || [1041,1043]",
      "dest": "||: || [1762,1764]"
    },
    {
      "src": "call_expression [1098,1136]",
      "dest": "call_expression [1901,1991]"
    },
    {
      "src": "(: ( [1283,1284]",
      "dest": "(: ( [2508,2509]"
    },
    {
      "src": "type_name [1482,1489]",
      "dest": "type_name [2130,2137]"
    },
    {
      "src": ",: , [465,466]",
      "dest": ",: , [726,727]"
    },
    {
      "src": "call_expression [1573,1609]",
      "dest": "call_expression [2719,2788]"
    },
    {
      "src": "type_name [1417,1423]",
      "dest": "type_name [2044,2050]"
    },
    {
      "src": "identifier: transferFrom [674,686]",
      "dest": "identifier: transferFrom [1088,1100]"
    },
    {
      "src": "member_expression [1045,1060]",
      "dest": "member_expression [1766,1781]"
    },
    {
      "src": "(: ( [1105,1106]",
      "dest": "(: ( [1920,1921]"
    },
    {
      "src": "internal: internal [784,792]",
      "dest": "internal: internal [1492,1500]"
    },
    {
      "src": "): ) [1543,1544]",
      "dest": "): ) [2191,2192]"
    },
    {
      "src": "primitive_type [1521,1528]",
      "dest": "primitive_type [2169,2176]"
    },
    {
      "src": "visibility [1226,1234]",
      "dest": "visibility [2427,2435]"
    },
    {
      "src": "(: ( [1060,1061]",
      "dest": "(: ( [1781,1782]"
    },
    {
      "src": ",: , [538,539]",
      "dest": ",: , [868,869]"
    },
    {
      "src": "pragma_directive [33,56]",
      "dest": "pragma_directive [100,123]"
    },
    {
      "src": "type_name [752,759]",
      "dest": "type_name [1447,1454]"
    },
    {
      "src": "{: { [503,504]",
      "dest": "{: { [785,786]"
    },
    {
      "src": "call_expression [1268,1307]",
      "dest": "call_expression [2493,2532]"
    },
    {
      "src": "uint256: uint256 [417,424]",
      "dest": "uint256: uint256 [2470,2477]"
    },
    {
      "src": "call_argument [1596,1608]",
      "dest": "call_argument [2293,2305]"
    },
    {
      "src": "contract_body [392,1619]",
      "dest": "contract_body [645,3897]"
    },
    {
      "src": "identifier: spender [1073,1080]",
      "dest": "identifier: spender [1797,1804]"
    },
    {
      "src": "member_expression [1268,1283]",
      "dest": "member_expression [2493,2508]"
    },
    {
      "src": "identifier: value [697,702]",
      "dest": "identifier: value [1121,1126]"
    },
    {
      "src": "identifier: SafeMath [404,412]",
      "dest": "identifier: Address [657,664]"
    },
    {
      "src": "user_defined_type [738,744]",
      "dest": "user_defined_type [1425,1431]"
    },
    {
      "src": "identifier: approve [1342,1349]",
      "dest": "identifier: approve [2266,2273]"
    },
    {
      "src": "): ) [702,703]",
      "dest": "): ) [1126,1127]"
    },
    {
      "src": "identifier: spender [1536,1543]",
      "dest": "identifier: spender [2184,2191]"
    },
    {
      "src": "(: ( [1044,1045]",
      "dest": "(: ( [1765,1766]"
    },
    {
      "src": "(: ( [1349,1350]",
      "dest": "(: ( [2259,2260]"
    },
    {
      "src": "solidity_version: 0.7.0 [50,55]",
      "dest": "solidity_version: 0.8.0 [117,122]"
    },
    {
      "src": "{: { [650,651]",
      "dest": "{: { [1022,1023]"
    },
    {
      "src": "(: ( [686,687]",
      "dest": "(: ( [1081,1082]"
    },
    {
      "src": "call_argument [1061,1071]",
      "dest": "call_argument [1782,1795]"
    },
    {
      "src": "identifier: spender [1202,1209]",
      "dest": "identifier: spender [2390,2397]"
    },
    {
      "src": "comment: /**  * @title SafeERC20  * @dev Wrappers around ERC20 operations that throw on failure.  * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  */ [105,373]",
      "dest": "comment: // OpenZeppelin Contracts v4.3.2 (token/ERC20/utils/SafeERC20.sol) [32,98]"
    },
    {
      "src": "(: ( [1179,1180]",
      "dest": "(: ( [2350,2351]"
    },
    {
      "src": "visibility [784,792]",
      "dest": "visibility [1492,1500]"
    },
    {
      "src": "): ) [703,704]",
      "dest": "): ) [1127,1128]"
    },
    {
      "src": "internal: internal [1463,1471]",
      "dest": "internal: internal [2111,2119]"
    },
    {
      "src": "address: address [1284,1291]",
      "dest": "address: address [2509,2516]"
    },
    {
      "src": "\": \" [100,101]",
      "dest": "\": \" [143,144]"
    },
    {
      "src": "identifier: safeTransfer [440,452]",
      "dest": "identifier: safeTransfer [692,704]"
    },
    {
      "src": "primitive_type [1448,1455]",
      "dest": "primitive_type [2091,2098]"
    },
    {
      "src": "}: } [553,554]",
      "dest": "}: } [887,888]"
    },
    {
      "src": "identifier: require [1328,1335]",
      "dest": "identifier: _callOptionalReturn [2210,2229]"
    },
    {
      "src": "identifier: SafeERC20 [382,391]",
      "dest": "identifier: SafeERC20 [635,644]"
    },
    {
      "src": "pragma: pragma [33,39]",
      "dest": "pragma: pragma [100,106]"
    },
    {
      "src": "call_argument [1521,1534]",
      "dest": "call_argument [2169,2182]"
    },
    {
      "src": "parameter [769,782]",
      "dest": "parameter [1472,1485]"
    },
    {
      "src": "identifier: require [660,667]",
      "dest": "identifier: _callOptionalReturn [1032,1051]"
    },
    {
      "src": "identifier: spender [760,767]",
      "dest": "identifier: spender [1455,1462]"
    },
    {
      "src": ",: , [1297,1298]",
      "dest": ",: , [2522,2523]"
    },
    {
      "src": "): ) [1306,1307]",
      "dest": "): ) [2531,2532]"
    },
    {
      "src": "visibility [641,649]",
      "dest": "visibility [1013,1021]"
    },
    {
      "src": ",: , [598,599]",
      "dest": ",: , [941,942]"
    },
    {
      "src": "function_definition [560,711]",
      "dest": "function_definition [894,1135]"
    },
    {
      "src": "parameter [600,612]",
      "dest": "parameter [951,963]"
    },
    {
      "src": "expression_statement [660,705]",
      "dest": "expression_statement [1032,1129]"
    },
    {
      "src": "import_directive [80,102]",
      "dest": "import_directive [125,145]"
    },
    {
      "src": "call_expression [1565,1610]",
      "dest": "call_expression [2692,2789]"
    },
    {
      "src": "identifier: require [1565,1572]",
      "dest": "identifier: _callOptionalReturn [2692,2711]"
    },
    {
      "src": "call_argument [1587,1594]",
      "dest": "call_argument [2766,2773]"
    },
    {
      "src": "address: address [1194,1201]",
      "dest": "address: address [2382,2389]"
    },
    {
      "src": "(: ( [535,536]",
      "dest": "(: ( [844,845]"
    },
    {
      "src": "function: function [1149,1157]",
      "dest": "function: function [2320,2328]"
    },
    {
      "src": ",: , [1192,1193]",
      "dest": ",: , [2372,2373]"
    },
    {
      "src": "primitive_type [1245,1252]",
      "dest": "primitive_type [2635,2642]"
    },
    {
      "src": "identifier: require [513,520]",
      "dest": "identifier: _callOptionalReturn [795,814]"
    },
    {
      "src": ",: , [1127,1128]",
      "dest": ",: , [1973,1974]"
    },
    {
      "src": ".: . [1273,1274]",
      "dest": ".: . [2498,2499]"
    },
    {
      "src": "comment: // 'safeIncreaseAllowance' and 'safeDecreaseAllowance' [957,1011]",
      "dest": "comment: // 'safeIncreaseAllowance' and 'safeDecreaseAllowance' [1665,1719]"
    },
    {
      "src": "identifier: value [634,639]",
      "dest": "identifier: value [1001,1006]"
    },
    {
      "src": "call_argument [1129,1134]",
      "dest": "call_argument [1984,1989]"
    },
    {
      "src": "address: address [752,759]",
      "dest": "address: address [1447,1454]"
    },
    {
      "src": "identifier: safeApprove [726,737]",
      "dest": "identifier: safeApprove [1404,1415]"
    },
    {
      "src": "identifier: token [1187,1192]",
      "dest": "identifier: token [2367,2372]"
    },
    {
      "src": "identifier: value [777,782]",
      "dest": "identifier: value [1480,1485]"
    },
    {
      "src": "identifier: value [1219,1224]",
      "dest": "identifier: value [2415,2420]"
    },
    {
      "src": "call_expression [513,547]",
      "dest": "call_expression [795,881]"
    },
    {
      "src": "call_expression [668,703]",
      "dest": "call_expression [1059,1127]"
    },
    {
      "src": ",: , [1357,1358]",
      "dest": ",: , [2282,2283]"
    },
    {
      "src": "visibility [494,502]",
      "dest": "visibility [776,784]"
    },
    {
      "src": "call_argument [1529,1533]",
      "dest": "call_argument [2177,2181]"
    },
    {
      "src": "}: } [710,711]",
      "dest": "}: } [1134,1135]"
    },
    {
      "src": ",: , [1209,1210]",
      "dest": ",: , [2397,2398]"
    },
    {
      "src": "number_literal: 0 [1038,1039]",
      "dest": "number_literal: 0 [1759,1760]"
    },
    {
      "src": "identifier: token [521,526]",
      "dest": "identifier: token [845,850]"
    },
    {
      "src": "identifier: allowance [1274,1283]",
      "dest": "identifier: allowance [2499,2508]"
    },
    {
      "src": "identifier: approve [1112,1119]",
      "dest": "identifier: approve [1957,1964]"
    },
    {
      "src": "call_expression [660,704]",
      "dest": "call_expression [1032,1128]"
    },
    {
      "src": "call_argument [1359,1371]",
      "dest": "call_argument [2775,2787]"
    },
    {
      "src": "identifier: allowance [1051,1060]",
      "dest": "identifier: allowance [1772,1781]"
    },
    {
      "src": "identifier: require [1098,1105]",
      "dest": "identifier: _callOptionalReturn [1901,1920]"
    },
    {
      "src": "identifier: token [1336,1341]",
      "dest": "identifier: token [2260,2265]"
    },
    {
      "src": "function_definition [717,1143]",
      "dest": "function_definition [1395,1998]"
    },
    {
      "src": "call_argument [1106,1135]",
      "dest": "call_argument [1928,1990]"
    },
    {
      "src": "function_body [1235,1380]",
      "dest": "function_body [2436,2806]"
    },
    {
      "src": "parameter [1211,1224]",
      "dest": "parameter [2407,2420]"
    },
    {
      "src": "identifier: token [1106,1111]",
      "dest": "identifier: token [1951,1956]"
    },
    {
      "src": "call_argument [1536,1543]",
      "dest": "call_argument [2184,2191]"
    },
    {
      "src": "user_defined_type [453,459]",
      "dest": "user_defined_type [714,720]"
    },
    {
      "src": "solidity_pragma_token [40,55]",
      "dest": "solidity_pragma_token [107,122]"
    },
    {
      "src": "primitive_type [467,474]",
      "dest": "primitive_type [736,743]"
    },
    {
      "src": "(: ( [737,738]",
      "dest": "(: ( [1415,1416]"
    },
    {
      "src": "=: = [1266,1267]",
      "dest": "=: = [2491,2492]"
    },
    {
      "src": "): ) [1224,1225]",
      "dest": "): ) [2425,2426]"
    },
    {
      "src": "identifier: from [687,691]",
      "dest": "identifier: from [1111,1115]"
    },
    {
      "src": "identifier: IERC20 [738,744]",
      "dest": "identifier: IERC20 [1425,1431]"
    },
    {
      "src": "call_argument [521,546]",
      "dest": "call_argument [822,880]"
    },
    {
      "src": "identifier: spender [1299,1306]",
      "dest": "identifier: spender [2524,2531]"
    },
    {
      "src": ",: , [1071,1072]",
      "dest": ",: , [1795,1796]"
    },
    {
      "src": "): ) [492,493]",
      "dest": "): ) [774,775]"
    },
    {
      "src": ",: , [691,692]",
      "dest": ",: , [1109,1110]"
    },
    {
      "src": "{: { [392,393]",
      "dest": "{: { [645,646]"
    },
    {
      "src": "identifier: value [1129,1134]",
      "dest": "identifier: value [1984,1989]"
    }
  ],
  "actions": [
    {
      "action": "move-tree",
      "tree": "comment: /**  * @title SafeERC20  * @dev Wrappers around ERC20 operations that throw on failure.  * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  */ [105,373]",
      "parent": "source_file [0,3898]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "import_directive [59,79]",
      "parent": "source_file [0,3898]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title SafeERC20  * @dev Wrappers around ERC20 operations that throw on failure.  * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  */ [105,373]",
      "label": "// OpenZeppelin Contracts v4.3.2 (token/ERC20/utils/SafeERC20.sol)"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**  * @title SafeERC20  * @dev Wrappers around ERC20 operations that throw on failure (when the token  * contract returns false). Tokens that return no value (and instead revert or  * throw on failure) are also supported, non-reverting calls are assumed to be  * successful.  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  */ [169,626]",
      "parent": "source_file [0,3898]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "function_definition [1149,1380]",
      "parent": "contract_body [645,3897]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.7.0 [50,55]",
      "label": "0.8.0"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Deprecated. This function has issues similar to the ones found in      * {IERC20-approve}, and its usage is discouraged.      *      * Whenever possible, use {safeIncreaseAllowance} and      * {safeDecreaseAllowance} instead.      */ [1141,1390]",
      "parent": "contract_body [645,3897]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param token The token targeted by the call.      * @param data The call data (encoded using abi.encode or one of its variants).      */ [2812,3184]",
      "parent": "contract_body [645,3897]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "function_definition [3189,3895]",
      "parent": "contract_body [645,3897]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "type_name [669,676]",
      "parent": "using_directive [651,677]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: safeDecreaseAllowance [1395,1416]",
      "label": "safeIncreaseAllowance"
    },
    {
      "action": "update-node",
      "tree": "identifier: safeIncreaseAllowance [1158,1179]",
      "label": "safeDecreaseAllowance"
    },
    {
      "action": "update-node",
      "tree": "identifier: SafeMath [404,412]",
      "label": "Address"
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [1328,1374]",
      "parent": "function_body [2120,2314]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "block_statement [2446,2800]",
      "parent": "function_body [2436,2806]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [2153,2200]",
      "parent": "variable_declaration_statement [2130,2201]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "{: { [2456,2457]",
      "parent": "block_statement [2446,2800]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [1245,1319]",
      "parent": "block_statement [2446,2800]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [2546,2622]",
      "parent": "block_statement [2446,2800]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [2635,2679]",
      "parent": "block_statement [2446,2800]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [1565,1611]",
      "parent": "block_statement [2446,2800]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [2799,2800]",
      "parent": "block_statement [2446,2800]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: require [513,520]",
      "label": "_callOptionalReturn"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [815,820]",
      "parent": "call_expression [795,881]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [820,821]",
      "parent": "call_expression [795,881]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: require [660,667]",
      "label": "_callOptionalReturn"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [1052,1057]",
      "parent": "call_expression [1032,1128]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [1057,1058]",
      "parent": "call_expression [1032,1128]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [1811,1812]",
      "parent": "call_expression [1728,1891]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [1825,1881]",
      "parent": "call_expression [1728,1891]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: require [1098,1105]",
      "label": "_callOptionalReturn"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [1921,1926]",
      "parent": "call_expression [1901,1991]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [1926,1927]",
      "parent": "call_expression [1901,1991]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_expression [1505,1544]",
      "parent": "binary_expression [2153,2200]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "+: + [2193,2194]",
      "parent": "binary_expression [2153,2200]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: value [2195,2200]",
      "parent": "binary_expression [2153,2200]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: require [1328,1335]",
      "label": "_callOptionalReturn"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [2230,2235]",
      "parent": "call_expression [2210,2307]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2235,2236]",
      "parent": "call_expression [2210,2307]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [2470,2490]",
      "parent": "variable_declaration_statement [2470,2533]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_expression [1268,1307]",
      "parent": "variable_declaration_statement [2470,2533]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [1245,1265]",
      "parent": "variable_declaration_statement [2635,2679]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [2656,2657]",
      "parent": "variable_declaration_statement [2635,2679]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [2658,2678]",
      "parent": "variable_declaration_statement [2635,2679]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [536,538]",
      "parent": "call_expression [822,880]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [687,691]",
      "parent": "call_expression [1059,1127]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [693,695]",
      "parent": "call_expression [1059,1127]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [1120,1127]",
      "parent": "call_expression [1928,1990]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [1350,1357]",
      "parent": "call_expression [2237,2306]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [417,424]",
      "parent": "variable_declaration [2470,2490]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: oldAllowance [2478,2490]",
      "parent": "variable_declaration [2470,2490]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: require [1565,1572]",
      "label": "_callOptionalReturn"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [2712,2717]",
      "parent": "call_expression [2692,2789]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2717,2718]",
      "parent": "call_expression [2692,2789]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [822,844]",
      "parent": "call_expression [822,880]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_argument [845,868]",
      "parent": "call_expression [822,880]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [872,873]",
      "parent": "call_expression [822,880]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [1059,1081]",
      "parent": "call_expression [1059,1127]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_argument [1082,1109]",
      "parent": "call_expression [1059,1127]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [1119,1120]",
      "parent": "call_expression [1059,1127]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [1928,1950]",
      "parent": "call_expression [1928,1990]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_argument [1951,1973]",
      "parent": "call_expression [1928,1990]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [1982,1983]",
      "parent": "call_expression [1928,1990]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [2237,2259]",
      "parent": "call_expression [2237,2306]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_argument [2260,2282]",
      "parent": "call_expression [2237,2306]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2291,2292]",
      "parent": "call_expression [2237,2306]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [1596,1608]",
      "parent": "call_expression [2237,2306]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "call_argument [1587,1594]",
      "parent": "call_expression [2719,2788]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "member_expression [845,868]",
      "parent": "call_argument [845,868]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "member_expression [1082,1109]",
      "parent": "call_argument [1082,1109]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "member_expression [1951,1973]",
      "parent": "call_argument [1951,1973]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "member_expression [2260,2282]",
      "parent": "call_argument [2260,2282]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [2719,2741]",
      "parent": "call_expression [2719,2788]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_argument [2742,2764]",
      "parent": "call_expression [2719,2788]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2773,2774]",
      "parent": "call_expression [2719,2788]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [1359,1371]",
      "parent": "call_expression [2719,2788]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "member_expression [521,535]",
      "parent": "member_expression [845,868]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [859,860]",
      "parent": "member_expression [845,868]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: selector [860,868]",
      "parent": "member_expression [845,868]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "member_expression [668,686]",
      "parent": "member_expression [1082,1109]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [1100,1101]",
      "parent": "member_expression [1082,1109]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: selector [1101,1109]",
      "parent": "member_expression [1082,1109]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "member_expression [1106,1119]",
      "parent": "member_expression [1951,1973]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [1964,1965]",
      "parent": "member_expression [1951,1973]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: selector [1965,1973]",
      "parent": "member_expression [1951,1973]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "member_expression [1336,1349]",
      "parent": "member_expression [2260,2282]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [2273,2274]",
      "parent": "member_expression [2260,2282]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: selector [2274,2282]",
      "parent": "member_expression [2260,2282]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "member_expression [2742,2764]",
      "parent": "call_argument [2742,2764]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "member_expression [1573,1586]",
      "parent": "member_expression [2742,2764]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [2755,2756]",
      "parent": "member_expression [2742,2764]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: selector [2756,2764]",
      "parent": "member_expression [2742,2764]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "type_cast_expression [1782,1795]",
      "parent": "call_argument [1782,1795]",
      "at": 0
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [1061,1071]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [1544,1545]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: sub [1545,1548]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [1505,1548]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1548,1549]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1549,1554]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1554,1555]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [1505,1555]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [1307,1308]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: add [1308,1311]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [1268,1311]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1311,1312]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1312,1317]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1317,1318]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [1268,1318]"
    }
  ]
}