{
  "matches": [
    {
      "src": "call_expression [1032,1128]",
      "dest": "call_expression [1770,1851]"
    },
    {
      "src": "identifier: token [2712,2717]",
      "dest": "identifier: token [3522,3527]"
    },
    {
      "src": ",: , [2575,2576]",
      "dest": ",: , [3612,3613]"
    },
    {
      "src": "binary_expression [3717,3738]",
      "dest": "binary_expression [4519,4541]"
    },
    {
      "src": "solidity: solidity [107,115]",
      "dest": "solidity: solidity [122,130]"
    },
    {
      "src": "identifier: token [2367,2372]",
      "dest": "identifier: token [2087,2092]"
    },
    {
      "src": "primitive_type [993,1000]",
      "dest": "primitive_type [1736,1743]"
    },
    {
      "src": "internal: internal [2427,2435]",
      "dest": "internal: internal [2126,2134]"
    },
    {
      "src": ".: . [1087,1088]",
      "dest": ".: . [1817,1818]"
    },
    {
      "src": "function: function [683,691]",
      "dest": "function: function [1271,1279]"
    },
    {
      "src": ".: . [2240,2241]",
      "dest": ".: . [3382,3383]"
    },
    {
      "src": "identifier: encodeWithSelector [2241,2259]",
      "dest": "identifier: encodeCall [3383,3393]"
    },
    {
      "src": "call_argument [1052,1057]",
      "dest": "call_argument [1790,1795]"
    },
    {
      "src": "call_expression [2493,2532]",
      "dest": "call_expression [2168,2207]"
    },
    {
      "src": "call_argument [845,868]",
      "dest": "call_argument [1395,1409]"
    },
    {
      "src": "type_name [2635,2642]",
      "dest": "type_name [2609,2616]"
    },
    {
      "src": "identifier: this [2517,2521]",
      "dest": "identifier: this [2192,2196]"
    },
    {
      "src": "parameter [2066,2081]",
      "dest": "parameter [2522,2537]"
    },
    {
      "src": "function_definition [894,1135]",
      "dest": "function_definition [1670,1858]"
    },
    {
      "src": ",: , [3822,3823]",
      "dest": ",: , [4567,4568]"
    },
    {
      "src": "user_defined_type [1425,1431]",
      "dest": "user_defined_type [3286,3292]"
    },
    {
      "src": "identifier: data [3662,3666]",
      "dest": "identifier: data [4500,4504]"
    },
    {
      "src": "function_body [785,888]",
      "dest": "function_body [1343,1431]"
    },
    {
      "src": "type_name [2044,2050]",
      "dest": "type_name [2508,2514]"
    },
    {
      "src": "import: import [146,152]",
      "dest": "import: import [176,182]"
    },
    {
      "src": "uint256: uint256 [2130,2137]",
      "dest": "uint256: uint256 [2539,2546]"
    },
    {
      "src": "call_expression [795,881]",
      "dest": "call_expression [1353,1424]"
    },
    {
      "src": "primitive_type [1447,1454]",
      "dest": "primitive_type [3300,3307]"
    },
    {
      "src": "{: { [2120,2121]",
      "dest": "{: { [2575,2576]"
    },
    {
      "src": "parameter [756,769]",
      "dest": "parameter [1319,1332]"
    },
    {
      "src": "call_argument [2775,2787]",
      "dest": "call_argument [3559,3571]"
    },
    {
      "src": "type_name [993,1000]",
      "dest": "type_name [1736,1743]"
    },
    {
      "src": "): ) [3829,3830]",
      "dest": "): ) [4574,4575]"
    },
    {
      "src": "identifier: encodeWithSelector [2723,2741]",
      "dest": "identifier: encodeCall [3533,3543]"
    },
    {
      "src": "primitive_type [669,676]",
      "dest": "primitive_type [761,768]"
    },
    {
      "src": "primitive_type [2130,2137]",
      "dest": "primitive_type [2539,2546]"
    },
    {
      "src": "identifier: token [2153,2158]",
      "dest": "identifier: token [2636,2641]"
    },
    {
      "src": "): ) [3830,3831]",
      "dest": "): ) [4575,4576]"
    },
    {
      "src": "identifier: IERC20 [929,935]",
      "dest": "identifier: IERC20 [1696,1702]"
    },
    {
      "src": "(: ( [3824,3825]",
      "dest": "(: ( [4569,4570]"
    },
    {
      "src": "\": \" [143,144]",
      "dest": "\": \" [173,174]"
    },
    {
      "src": "): ) [2531,2532]",
      "dest": "): ) [2206,2207]"
    },
    {
      "src": "type_name [756,763]",
      "dest": "type_name [1319,1326]"
    },
    {
      "src": "type_name [3608,3613]",
      "dest": "type_name [4446,4451]"
    },
    {
      "src": ",: , [1057,1058]",
      "dest": ",: , [1795,1796]"
    },
    {
      "src": "identifier: token [2051,2056]",
      "dest": "identifier: token [2515,2520]"
    },
    {
      "src": "(: ( [1081,1082]",
      "dest": "(: ( [1811,1812]"
    },
    {
      "src": "=: = [3632,3633]",
      "dest": "=: = [4470,4471]"
    },
    {
      "src": "variable_declaration_statement [3608,3704]",
      "dest": "variable_declaration_statement [4446,4506]"
    },
    {
      "src": "identifier: _callOptionalReturn [1032,1051]",
      "dest": "identifier: _callOptionalReturn [1770,1789]"
    },
    {
      "src": "identifier: IERC20 [714,720]",
      "dest": "identifier: IERC20 [1293,1299]"
    },
    {
      "src": "identifier: to [744,746]",
      "dest": "identifier: to [1315,1317]"
    },
    {
      "src": "primitive_type [951,958]",
      "dest": "primitive_type [1710,1717]"
    },
    {
      "src": "comment: // OpenZeppelin Contracts v4.3.2 (token/ERC20/utils/SafeERC20.sol) [32,98]",
      "dest": "comment: // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol) [32,113]"
    },
    {
      "src": "identifier: encodeWithSelector [826,844]",
      "dest": "identifier: encodeCall [1384,1394]"
    },
    {
      "src": "member_expression [2153,2168]",
      "dest": "member_expression [2636,2651]"
    },
    {
      "src": "identifier: IERC20 [3218,3224]",
      "dest": "identifier: IERC20 [4056,4062]"
    },
    {
      "src": "parenthesized_expression [3824,3830]",
      "dest": "parenthesized_expression [4569,4575]"
    },
    {
      "src": "identifier: this [2177,2181]",
      "dest": "identifier: this [2660,2664]"
    },
    {
      "src": "(: ( [704,705]",
      "dest": "(: ( [1292,1293]"
    },
    {
      "src": "parameter [2044,2056]",
      "dest": "parameter [2508,2520]"
    },
    {
      "src": "using_directive [651,677]",
      "dest": "using_directive [743,769]"
    },
    {
      "src": ".: . [3648,3649]",
      "dest": ".: . [4486,4487]"
    },
    {
      "src": "identifier: IERC20 [2044,2050]",
      "dest": "identifier: IERC20 [2508,2514]"
    },
    {
      "src": "(: ( [2259,2260]",
      "dest": "(: ( [3393,3394]"
    },
    {
      "src": "variable_declaration [2130,2150]",
      "dest": "variable_declaration [2609,2633]"
    },
    {
      "src": "parameter [1447,1462]",
      "dest": "parameter [3300,3315]"
    },
    {
      "src": "(: ( [2168,2169]",
      "dest": "(: ( [2651,2652]"
    },
    {
      "src": "solidity_version: 0.8.0 [117,122]",
      "dest": "solidity_version: 0.8.20 [132,138]"
    },
    {
      "src": "(: ( [2553,2554]",
      "dest": "(: ( [3606,3607]"
    },
    {
      "src": "visibility [1013,1021]",
      "dest": "visibility [1751,1759]"
    },
    {
      "src": ",: , [2282,2283]",
      "dest": ",: , [3407,3408]"
    },
    {
      "src": "identifier: token [721,726]",
      "dest": "identifier: token [1300,1305]"
    },
    {
      "src": "uint256: uint256 [993,1000]",
      "dest": "uint256: uint256 [1736,1743]"
    },
    {
      "src": "call_expression [2719,2788]",
      "dest": "call_expression [3529,3572]"
    },
    {
      "src": "call_argument [2169,2182]",
      "dest": "call_argument [2652,2665]"
    },
    {
      "src": "member_expression [2493,2508]",
      "dest": "member_expression [2168,2183]"
    },
    {
      "src": "identifier: abi [2719,2722]",
      "dest": "identifier: abi [3529,3532]"
    },
    {
      "src": ".: . [2498,2499]",
      "dest": ".: . [2173,2174]"
    },
    {
      "src": "member_expression [1059,1081]",
      "dest": "member_expression [1797,1811]"
    },
    {
      "src": "(: ( [2176,2177]",
      "dest": "(: ( [2659,2660]"
    },
    {
      "src": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param token The token targeted by the call.      * @param data The call data (encoded using abi.encode or one of its variants).      */ [2812,3184]",
      "dest": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param token The token targeted by the call.      * @param data The call data (encoded using abi.encode or one of its variants).      */ [3650,4022]"
    },
    {
      "src": "call_argument [3824,3830]",
      "dest": "call_argument [4569,4575]"
    },
    {
      "src": "call_expression [2237,2306]",
      "dest": "call_expression [3379,3426]"
    },
    {
      "src": "parameter [951,963]",
      "dest": "parameter [1710,1722]"
    },
    {
      "src": "address: address [1447,1454]",
      "dest": "address: address [3300,3307]"
    },
    {
      "src": "expression_statement [1032,1129]",
      "dest": "expression_statement [1770,1852]"
    },
    {
      "src": "): ) [2425,2426]",
      "dest": "): ) [2124,2125]"
    },
    {
      "src": "(: ( [919,920]",
      "dest": "(: ( [1695,1696]"
    },
    {
      "src": "identifier: oldAllowance [2478,2490]",
      "dest": "identifier: oldAllowance [2153,2165]"
    },
    {
      "src": "(: ( [2034,2035]",
      "dest": "(: ( [2507,2508]"
    },
    {
      "src": "{: { [3259,3260]",
      "dest": "{: { [4097,4098]"
    },
    {
      "src": "identifier: value [2415,2420]",
      "dest": "identifier: value [2119,2124]"
    },
    {
      "src": "call_argument [1082,1109]",
      "dest": "call_argument [1812,1830]"
    },
    {
      "src": "type_name [1425,1431]",
      "dest": "type_name [3286,3292]"
    },
    {
      "src": "comment: /**      * @dev Deprecated. This function has issues similar to the ones found in      * {IERC20-approve}, and its usage is discouraged.      *      * Whenever possible, use {safeIncreaseAllowance} and      * {safeDecreaseAllowance} instead.      */ [1141,1390]",
      "dest": "comment: /**      * @dev An operation with an ERC20 token failed.      */ [775,839]"
    },
    {
      "src": "import_directive [146,167]",
      "dest": "import_directive [176,222]"
    },
    {
      "src": "(: ( [2508,2509]",
      "dest": "(: ( [2183,2184]"
    },
    {
      "src": "}: } [3888,3889]",
      "dest": "}: } [4649,4650]"
    },
    {
      "src": "call_argument [1921,1926]",
      "dest": "call_argument [2875,2880]"
    },
    {
      "src": "primitive_type [756,763]",
      "dest": "primitive_type [1319,1326]"
    },
    {
      "src": "call_expression [2692,2789]",
      "dest": "call_expression [3502,3573]"
    },
    {
      "src": "type_name [973,980]",
      "dest": "type_name [1724,1731]"
    },
    {
      "src": "identifier: to [981,983]",
      "dest": "identifier: to [1732,1734]"
    },
    {
      "src": "\": \" [153,154]",
      "dest": "\": \" [203,204]"
    },
    {
      "src": "primitive_type [2066,2073]",
      "dest": "primitive_type [2522,2529]"
    },
    {
      "src": "\": \" [165,166]",
      "dest": "\": \" [220,221]"
    },
    {
      "src": "call_argument [2524,2531]",
      "dest": "call_argument [2199,2206]"
    },
    {
      "src": "identifier: transferFrom [1088,1100]",
      "dest": "identifier: transferFrom [1818,1830]"
    },
    {
      "src": "identifier: Address [657,664]",
      "dest": "identifier: Address [749,756]"
    },
    {
      "src": "type_name [669,676]",
      "dest": "type_name [761,768]"
    },
    {
      "src": "member_expression [2260,2273]",
      "dest": "member_expression [3394,3407]"
    },
    {
      "src": ".: . [1062,1063]",
      "dest": ".: . [1800,1801]"
    },
    {
      "src": "identifier: token [1432,1437]",
      "dest": "identifier: token [3293,3298]"
    },
    {
      "src": "function_definition [683,888]",
      "dest": "function_definition [1271,1431]"
    },
    {
      "src": "identifier: abi [2237,2240]",
      "dest": "identifier: abi [3379,3382]"
    },
    {
      "src": "}: } [2805,2806]",
      "dest": "}: } [3643,3644]"
    },
    {
      "src": "function: function [894,902]",
      "dest": "function: function [1670,1678]"
    },
    {
      "src": ",: , [820,821]",
      "dest": ",: , [1378,1379]"
    },
    {
      "src": "parameter [2091,2104]",
      "dest": "parameter [2539,2564]"
    },
    {
      "src": "bytes: bytes [3608,3613]",
      "dest": "bytes: bytes [4446,4451]"
    },
    {
      "src": "type_name [2360,2366]",
      "dest": "type_name [2080,2086]"
    },
    {
      "src": "number_literal: 0 [3737,3738]",
      "dest": "number_literal: 0 [4540,4541]"
    },
    {
      "src": "comment: /**  * @title SafeERC20  * @dev Wrappers around ERC20 operations that throw on failure (when the token  * contract returns false). Tokens that return no value (and instead revert or  * throw on failure) are also supported, non-reverting calls are assumed to be  * successful.  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  */ [169,626]",
      "dest": "comment: /**  * @title SafeERC20  * @dev Wrappers around ERC20 operations that throw on failure (when the token  * contract returns false). Tokens that return no value (and instead revert or  * throw on failure) are also supported, non-reverting calls are assumed to be  * successful.  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  */ [261,718]"
    },
    {
      "src": "): ) [3647,3648]",
      "dest": "): ) [4485,4486]"
    },
    {
      "src": "parameter [2382,2397]",
      "dest": "parameter [2094,2109]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [0,31]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "identifier: spender [2184,2191]",
      "dest": "identifier: spender [2667,2674]"
    },
    {
      "src": "user_defined_type [3218,3224]",
      "dest": "user_defined_type [4056,4062]"
    },
    {
      "src": "identifier: token [2742,2747]",
      "dest": "identifier: token [3544,3549]"
    },
    {
      "src": "address: address [669,676]",
      "dest": "address: address [761,768]"
    },
    {
      "src": "solidity_version_comparison_operator [115,117]",
      "dest": "solidity_version_comparison_operator [130,132]"
    },
    {
      "src": "member_expression [2237,2259]",
      "dest": "member_expression [3379,3393]"
    },
    {
      "src": "primitive_type [2382,2389]",
      "dest": "primitive_type [2094,2101]"
    },
    {
      "src": "identifier: allowance [2159,2168]",
      "dest": "identifier: allowance [2642,2651]"
    },
    {
      "src": "primitive_type [3825,3829]",
      "dest": "primitive_type [4570,4574]"
    },
    {
      "src": "type_name [3218,3224]",
      "dest": "type_name [4056,4062]"
    },
    {
      "src": "(: ( [2711,2712]",
      "dest": "(: ( [3521,3522]"
    },
    {
      "src": "uint256: uint256 [2470,2477]",
      "dest": "uint256: uint256 [2145,2152]"
    },
    {
      "src": "): ) [2305,2306]",
      "dest": "): ) [3425,3426]"
    },
    {
      "src": "contract_body [645,3897]",
      "dest": "contract_body [737,5737]"
    },
    {
      "src": "function_body [2120,2314]",
      "dest": "function_body [2575,2945]"
    },
    {
      "src": "address: address [2169,2176]",
      "dest": "address: address [2652,2659]"
    },
    {
      "src": "(: ( [814,815]",
      "dest": "(: ( [1372,1373]"
    },
    {
      "src": "variable_declaration_statement [2470,2533]",
      "dest": "variable_declaration_statement [2145,2208]"
    },
    {
      "src": "identifier: token [1921,1926]",
      "dest": "identifier: token [2875,2880]"
    },
    {
      "src": "call_expression [3634,3703]",
      "dest": "call_expression [4472,4505]"
    },
    {
      "src": "type_cast_expression [3634,3648]",
      "dest": "type_cast_expression [4472,4486]"
    },
    {
      "src": "call_argument [2742,2764]",
      "dest": "call_argument [3544,3557]"
    },
    {
      "src": "member_expression [845,859]",
      "dest": "member_expression [1395,1409]"
    },
    {
      "src": "identifier: IERC20 [2360,2366]",
      "dest": "identifier: IERC20 [2080,2086]"
    },
    {
      "src": "member_expression [3717,3734]",
      "dest": "member_expression [4519,4536]"
    },
    {
      "src": "identifier: abi [822,825]",
      "dest": "identifier: abi [1380,1383]"
    },
    {
      "src": "(: ( [2350,2351]",
      "dest": "(: ( [2079,2080]"
    },
    {
      "src": "identifier: abi [1059,1062]",
      "dest": "identifier: abi [1797,1800]"
    },
    {
      "src": "parameter [1472,1485]",
      "dest": "parameter [3317,3330]"
    },
    {
      "src": "expression_statement [2692,2790]",
      "dest": "expression_statement [3502,3574]"
    },
    {
      "src": "internal: internal [2111,2119]",
      "dest": "internal: internal [2566,2574]"
    },
    {
      "src": "=: = [2151,2152]",
      "dest": "=: = [2634,2635]"
    },
    {
      "src": "\": \" [132,133]",
      "dest": "\": \" [162,163]"
    },
    {
      "src": "address: address [2382,2389]",
      "dest": "address: address [2094,2101]"
    },
    {
      "src": "string [153,166]",
      "dest": "string [203,221]"
    },
    {
      "src": "): ) [1127,1128]",
      "dest": "): ) [1850,1851]"
    },
    {
      "src": "identifier: safeTransferFrom [903,919]",
      "dest": "identifier: safeTransferFrom [1679,1695]"
    },
    {
      "src": "{: { [3740,3741]",
      "dest": "{: { [4578,4579]"
    },
    {
      "src": "primitive_type [3232,3237]",
      "dest": "primitive_type [4070,4075]"
    },
    {
      "src": "call_argument [2766,2773]",
      "dest": "call_argument [2882,2889]"
    },
    {
      "src": "identifier: value [2099,2104]",
      "dest": "identifier: requestedDecrease [2547,2564]"
    },
    {
      "src": "identifier: returndata [3812,3822]",
      "dest": "identifier: returndata [4557,4567]"
    },
    {
      "src": "call_argument [2230,2235]",
      "dest": "call_argument [2230,2235]"
    },
    {
      "src": "identifier: value [764,769]",
      "dest": "identifier: value [1327,1332]"
    },
    {
      "src": "): ) [3249,3250]",
      "dest": "): ) [4087,4088]"
    },
    {
      "src": "{: { [2456,2457]",
      "dest": "{: { [3488,3489]"
    },
    {
      "src": "identifier: from [959,963]",
      "dest": "identifier: from [1718,1722]"
    },
    {
      "src": "): ) [774,775]",
      "dest": "): ) [1332,1333]"
    },
    {
      "src": "identifier: token [1082,1087]",
      "dest": "identifier: token [1812,1817]"
    },
    {
      "src": "): ) [2788,2789]",
      "dest": "): ) [3572,3573]"
    },
    {
      "src": "pragma: pragma [100,106]",
      "dest": "pragma: pragma [115,121]"
    },
    {
      "src": "identifier: spender [2074,2081]",
      "dest": "identifier: spender [2530,2537]"
    },
    {
      "src": "call_argument [3662,3666]",
      "dest": "call_argument [4500,4504]"
    },
    {
      "src": "memory: memory [3238,3244]",
      "dest": "memory: memory [4076,4082]"
    },
    {
      "src": "solidity_pragma_token [107,122]",
      "dest": "solidity_pragma_token [122,138]"
    },
    {
      "src": ".: . [2158,2159]",
      "dest": ".: . [2641,2642]"
    },
    {
      "src": "uint256: uint256 [2407,2414]",
      "dest": "uint256: uint256 [2111,2118]"
    },
    {
      "src": ",: , [963,964]",
      "dest": ",: , [1722,1723]"
    },
    {
      "src": "call_argument [2184,2191]",
      "dest": "call_argument [2667,2674]"
    },
    {
      "src": "visibility [3251,3258]",
      "dest": "visibility [4089,4096]"
    },
    {
      "src": "type_cast_expression [2169,2182]",
      "dest": "type_cast_expression [2652,2665]"
    },
    {
      "src": "): ) [2109,2110]",
      "dest": "): ) [2564,2565]"
    },
    {
      "src": "identifier: token [2493,2498]",
      "dest": "identifier: token [2168,2173]"
    },
    {
      "src": "): ) [2191,2192]",
      "dest": "): ) [2674,2675]"
    },
    {
      "src": "): ) [3702,3703]",
      "dest": "): ) [4504,4505]"
    },
    {
      "src": "parameter [3232,3249]",
      "dest": "parameter [4070,4087]"
    },
    {
      "src": ".: . [850,851]",
      "dest": ".: . [1400,1401]"
    },
    {
      "src": "(: ( [3217,3218]",
      "dest": "(: ( [4055,4056]"
    },
    {
      "src": ".: . [2265,2266]",
      "dest": ".: . [3399,3400]"
    },
    {
      "src": "function_definition [2320,2806]",
      "dest": "function_definition [2049,2274]"
    },
    {
      "src": "function_definition [3189,3895]",
      "dest": "function_definition [4027,4656]"
    },
    {
      "src": "primitive_type [2169,2176]",
      "dest": "primitive_type [2652,2659]"
    },
    {
      "src": "type_name [951,958]",
      "dest": "type_name [1710,1717]"
    },
    {
      "src": "(: ( [3811,3812]",
      "dest": "(: ( [4556,4557]"
    },
    {
      "src": "(: ( [844,845]",
      "dest": "(: ( [1394,1395]"
    },
    {
      "src": ",: , [2372,2373]",
      "dest": ",: , [2092,2093]"
    },
    {
      "src": ",: , [941,942]",
      "dest": ",: , [1708,1709]"
    },
    {
      "src": "^:  ^ [115,117]",
      "dest": "^:  ^ [130,132]"
    },
    {
      "src": "identifier: _callOptionalReturn [795,814]",
      "dest": "identifier: _callOptionalReturn [1353,1372]"
    },
    {
      "src": "parameter [993,1006]",
      "dest": "parameter [1736,1749]"
    },
    {
      "src": "identifier: length [3728,3734]",
      "dest": "identifier: length [4530,4536]"
    },
    {
      "src": "identifier: spender [2284,2291]",
      "dest": "identifier: spender [2789,2796]"
    },
    {
      "src": "}: } [2799,2800]",
      "dest": "}: } [3637,3638]"
    },
    {
      "src": "variable_declaration [3608,3631]",
      "dest": "variable_declaration [4446,4469]"
    },
    {
      "src": "call_argument [2712,2717]",
      "dest": "call_argument [3522,3527]"
    },
    {
      "src": "(: ( [2516,2517]",
      "dest": "(: ( [2191,2192]"
    },
    {
      "src": "call_argument [2293,2305]",
      "dest": "call_argument [3409,3425]"
    },
    {
      "src": "for: for [665,668]",
      "dest": "for: for [757,760]"
    },
    {
      "src": "comment: // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that [3386,3493]",
      "dest": "comment: // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that [4224,4331]"
    },
    {
      "src": ",: , [2182,2183]",
      "dest": ",: , [2665,2666]"
    },
    {
      "src": "internal: internal [776,784]",
      "dest": "internal: internal [1334,1342]"
    },
    {
      "src": "type_name [2407,2414]",
      "dest": "type_name [2111,2118]"
    },
    {
      "src": "identifier: token [2260,2265]",
      "dest": "identifier: token [3394,3399]"
    },
    {
      "src": "(: ( [3661,3662]",
      "dest": "(: ( [4499,4500]"
    },
    {
      "src": "primitive_type [3634,3641]",
      "dest": "primitive_type [4472,4479]"
    },
    {
      "src": "identifier: value [1480,1485]",
      "dest": "identifier: value [3325,3330]"
    },
    {
      "src": "{: { [785,786]",
      "dest": "{: { [1343,1344]"
    },
    {
      "src": "visibility [2427,2435]",
      "dest": "visibility [2126,2134]"
    },
    {
      "src": ".: . [2722,2723]",
      "dest": ".: . [3532,3533]"
    },
    {
      "src": "type_name [2470,2477]",
      "dest": "type_name [2145,2152]"
    },
    {
      "src": "block_statement [3740,3889]",
      "dest": "block_statement [4578,4650]"
    },
    {
      "src": "parameter [929,941]",
      "dest": "parameter [1696,1708]"
    },
    {
      "src": "identifier: safeIncreaseAllowance [2013,2034]",
      "dest": "identifier: safeDecreaseAllowance [2486,2507]"
    },
    {
      "src": "identifier: returndata [3717,3727]",
      "dest": "identifier: returndata [4519,4529]"
    },
    {
      "src": "private: private [3251,3258]",
      "dest": "private: private [4089,4096]"
    },
    {
      "src": "call_expression [822,880]",
      "dest": "call_expression [1380,1423]"
    },
    {
      "src": "parameter [1425,1437]",
      "dest": "parameter [3286,3298]"
    },
    {
      "src": "(: ( [3716,3717]",
      "dest": "(: ( [4518,4519]"
    },
    {
      "src": "identifier: spender [2524,2531]",
      "dest": "identifier: spender [2199,2206]"
    },
    {
      "src": "}: } [3894,3895]",
      "dest": "}: } [4655,4656]"
    },
    {
      "src": "type_name [714,720]",
      "dest": "type_name [1293,1299]"
    },
    {
      "src": "): ) [879,880]",
      "dest": "): ) [1422,1423]"
    },
    {
      "src": "primitive_type [1472,1479]",
      "dest": "primitive_type [3317,3324]"
    },
    {
      "src": "member_expression [2719,2741]",
      "dest": "member_expression [3529,3543]"
    },
    {
      "src": "import_directive [125,145]",
      "dest": "import_directive [141,175]"
    },
    {
      "src": "variable_declaration [2470,2490]",
      "dest": "variable_declaration [2145,2165]"
    },
    {
      "src": "visibility [1492,1500]",
      "dest": "visibility [3332,3340]"
    },
    {
      "src": "identifier: spender [1455,1462]",
      "dest": "identifier: spender [3308,3315]"
    },
    {
      "src": "primitive_type [973,980]",
      "dest": "primitive_type [1724,1731]"
    },
    {
      "src": "function: function [2004,2012]",
      "dest": "function: function [2477,2485]"
    },
    {
      "src": "\": \" [1825,1826]",
      "dest": "\": \" [245,246]"
    },
    {
      "src": "identifier: spender [2766,2773]",
      "dest": "identifier: spender [2882,2889]"
    },
    {
      "src": "parameter [973,983]",
      "dest": "parameter [1724,1734]"
    },
    {
      "src": "identifier: token [3225,3230]",
      "dest": "identifier: token [4063,4068]"
    },
    {
      "src": "type_name [1447,1454]",
      "dest": "type_name [3300,3307]"
    },
    {
      "src": "identifier: token [936,941]",
      "dest": "identifier: token [1703,1708]"
    },
    {
      "src": "identifier: approve [2748,2755]",
      "dest": "identifier: approve [3550,3557]"
    },
    {
      "src": "call_argument [2509,2522]",
      "dest": "call_argument [2184,2197]"
    },
    {
      "src": "primitive_type [2407,2414]",
      "dest": "primitive_type [2111,2118]"
    },
    {
      "src": "call_expression [2153,2192]",
      "dest": "call_expression [2636,2675]"
    },
    {
      "src": "call_argument [2517,2521]",
      "dest": "call_argument [2192,2196]"
    },
    {
      "src": "function_body [3259,3895]",
      "dest": "function_body [4097,4656]"
    },
    {
      "src": "address: address [973,980]",
      "dest": "address: address [1724,1731]"
    },
    {
      "src": "type_name [1472,1479]",
      "dest": "type_name [3317,3324]"
    },
    {
      "src": "type_name [736,743]",
      "dest": "type_name [1307,1314]"
    },
    {
      "src": "address: address [3634,3641]",
      "dest": "address: address [4472,4479]"
    },
    {
      "src": "(: ( [2741,2742]",
      "dest": "(: ( [3543,3544]"
    },
    {
      "src": "): ) [2521,2522]",
      "dest": "): ) [2196,2197]"
    },
    {
      "src": "string [1825,1881]",
      "dest": "string [245,258]"
    },
    {
      "src": "identifier: spender [1975,1982]",
      "dest": "identifier: spender [2237,2244]"
    },
    {
      "src": "member_expression [822,844]",
      "dest": "member_expression [1380,1394]"
    },
    {
      "src": "library_declaration [627,3897]",
      "dest": "library_declaration [719,5737]"
    },
    {
      "src": "user_defined_type [2044,2050]",
      "dest": "user_defined_type [2508,2514]"
    },
    {
      "src": "user_defined_type [714,720]",
      "dest": "user_defined_type [1293,1299]"
    },
    {
      "src": "source_file [0,3898]",
      "dest": "source_file [0,5738]"
    },
    {
      "src": "type_alias [657,664]",
      "dest": "type_alias [749,756]"
    },
    {
      "src": "member_expression [3634,3661]",
      "dest": "member_expression [4472,4499]"
    },
    {
      "src": "identifier: safeTransfer [692,704]",
      "dest": "identifier: safeTransfer [1280,1292]"
    },
    {
      "src": "call_expression [1059,1127]",
      "dest": "call_expression [1797,1850]"
    },
    {
      "src": "if: if [3713,3715]",
      "dest": "if: if [4515,4517]"
    },
    {
      "src": "}: } [2313,2314]",
      "dest": "}: } [2944,2945]"
    },
    {
      "src": "comment: // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since [3269,3377]",
      "dest": "comment: // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since [4107,4215]"
    },
    {
      "src": "primitive_type [2635,2642]",
      "dest": "primitive_type [2609,2616]"
    },
    {
      "src": "identifier: allowance [2499,2508]",
      "dest": "identifier: allowance [2174,2183]"
    },
    {
      "src": "call_argument [2177,2181]",
      "dest": "call_argument [2660,2664]"
    },
    {
      "src": "identifier: token [3642,3647]",
      "dest": "identifier: token [4480,4485]"
    },
    {
      "src": "primitive_type [2509,2516]",
      "dest": "primitive_type [2184,2191]"
    },
    {
      "src": "member_expression [3801,3811]",
      "dest": "member_expression [4546,4556]"
    },
    {
      "src": "parameter [736,746]",
      "dest": "parameter [1307,1317]"
    },
    {
      "src": ",: , [2081,2082]",
      "dest": ",: , [2537,2538]"
    },
    {
      "src": "): ) [2787,2788]",
      "dest": "): ) [3571,3572]"
    },
    {
      "src": ",: , [2764,2765]",
      "dest": ",: , [3557,3558]"
    },
    {
      "src": "call_argument [2719,2788]",
      "dest": "call_argument [3529,3572]"
    },
    {
      "src": "expression_statement [795,882]",
      "dest": "expression_statement [1353,1425]"
    },
    {
      "src": "parameter [2360,2372]",
      "dest": "parameter [2080,2092]"
    },
    {
      "src": ",: , [2056,2057]",
      "dest": ",: , [2520,2521]"
    },
    {
      "src": "): ) [2181,2182]",
      "dest": "): ) [2664,2665]"
    },
    {
      "src": ".: . [2747,2748]",
      "dest": ".: . [3549,3550]"
    },
    {
      "src": "address: address [2066,2073]",
      "dest": "address: address [2522,2529]"
    },
    {
      "src": ".: . [3727,3728]",
      "dest": ".: . [4529,4530]"
    },
    {
      "src": "call_argument [2260,2282]",
      "dest": "call_argument [3394,3407]"
    },
    {
      "src": ",: , [2717,2718]",
      "dest": ",: , [3527,3528]"
    },
    {
      "src": "identifier: value [1001,1006]",
      "dest": "identifier: value [1744,1749]"
    },
    {
      "src": "call_argument [1975,1982]",
      "dest": "call_argument [2237,2244]"
    },
    {
      "src": "visibility [776,784]",
      "dest": "visibility [1334,1342]"
    },
    {
      "src": "identifier: transfer [851,859]",
      "dest": "identifier: transfer [1401,1409]"
    },
    {
      "src": "variable_declaration_statement [2130,2201]",
      "dest": "variable_declaration_statement [2609,2676]"
    },
    {
      "src": "{: { [645,646]",
      "dest": "{: { [737,738]"
    },
    {
      "src": ",: , [2397,2398]",
      "dest": ",: , [2109,2110]"
    },
    {
      "src": "call_argument [815,820]",
      "dest": "call_argument [1373,1378]"
    },
    {
      "src": "bytes: bytes [3232,3237]",
      "dest": "bytes: bytes [4070,4075]"
    },
    {
      "src": "expression_statement [2546,2622]",
      "dest": "expression_statement [3587,3628]"
    },
    {
      "src": ",: , [3230,3231]",
      "dest": ",: , [4068,4069]"
    },
    {
      "src": "type_name [3232,3237]",
      "dest": "type_name [4070,4075]"
    },
    {
      "src": "address: address [736,743]",
      "dest": "address: address [1307,1314]"
    },
    {
      "src": "type_name [2066,2073]",
      "dest": "type_name [2522,2529]"
    },
    {
      "src": "call_argument [822,880]",
      "dest": "call_argument [1380,1423]"
    },
    {
      "src": "call_expression [3801,3831]",
      "dest": "call_expression [4546,4576]"
    },
    {
      "src": "call_argument [3812,3822]",
      "dest": "call_argument [4557,4567]"
    },
    {
      "src": "string [132,144]",
      "dest": "string [162,174]"
    },
    {
      "src": "if_statement [3713,3889]",
      "dest": "if_statement [4515,4650]"
    },
    {
      "src": "comment: // the target address contains contract code and also asserts for success in the low-level call. [3502,3598]",
      "dest": "comment: // the target address contains contract code and also asserts for success in the low-level call. [4340,4436]"
    },
    {
      "src": "(: ( [3641,3642]",
      "dest": "(: ( [4479,4480]"
    },
    {
      "src": "identifier: _callOptionalReturn [2692,2711]",
      "dest": "identifier: _callOptionalReturn [3502,3521]"
    },
    {
      "src": "function_definition [2004,2314]",
      "dest": "function_definition [2477,2945]"
    },
    {
      "src": "parameter [3218,3230]",
      "dest": "parameter [4056,4068]"
    },
    {
      "src": ",: , [983,984]",
      "dest": ",: , [1734,1735]"
    },
    {
      "src": "call_argument [2284,2291]",
      "dest": "call_argument [2789,2796]"
    },
    {
      "src": "block_statement [2446,2800]",
      "dest": "block_statement [3488,3638]"
    },
    {
      "src": "identifier: approve [2266,2273]",
      "dest": "identifier: approve [3400,3407]"
    },
    {
      "src": "}: } [3896,3897]",
      "dest": "}: } [5736,5737]"
    },
    {
      "src": "primitive_type [2470,2477]",
      "dest": "primitive_type [2145,2152]"
    },
    {
      "src": ".: . [825,826]",
      "dest": ".: . [1383,1384]"
    },
    {
      "src": "identifier: abi [3801,3804]",
      "dest": "identifier: abi [4546,4549]"
    },
    {
      "src": "user_defined_type [929,935]",
      "dest": "user_defined_type [1696,1702]"
    },
    {
      "src": "function_body [2436,2806]",
      "dest": "function_body [3341,3644]"
    },
    {
      "src": "type_name [2382,2389]",
      "dest": "type_name [2094,2101]"
    },
    {
      "src": "{: { [1022,1023]",
      "dest": "{: { [1760,1761]"
    },
    {
      "src": "user_defined_type [2360,2366]",
      "dest": "user_defined_type [2080,2086]"
    },
    {
      "src": ",: , [868,869]",
      "dest": ",: , [1409,1410]"
    },
    {
      "src": "identifier: token [2230,2235]",
      "dest": "identifier: token [2230,2235]"
    },
    {
      "src": "identifier: decode [3805,3811]",
      "dest": "identifier: decode [4550,4556]"
    },
    {
      "src": "identifier: data [3245,3249]",
      "dest": "identifier: data [4083,4087]"
    },
    {
      "src": "call_expression [2546,2621]",
      "dest": "call_expression [3587,3627]"
    },
    {
      "src": "): ) [1126,1127]",
      "dest": "): ) [1849,1850]"
    },
    {
      "src": "identifier: safeDecreaseAllowance [2329,2350]",
      "dest": "identifier: safeIncreaseAllowance [2058,2079]"
    },
    {
      "src": "uint256: uint256 [1472,1479]",
      "dest": "uint256: uint256 [3317,3324]"
    },
    {
      "src": "visibility [2111,2119]",
      "dest": "visibility [2566,2574]"
    },
    {
      "src": "identifier: require [2546,2553]",
      "dest": "identifier: _callOptionalReturn [3587,3606]"
    },
    {
      "src": "call_argument [3642,3647]",
      "dest": "call_argument [4480,4485]"
    },
    {
      "src": "identifier: _callOptionalReturn [3198,3217]",
      "dest": "identifier: _callOptionalReturn [4036,4055]"
    },
    {
      "src": "function: function [2320,2328]",
      "dest": "function: function [2049,2057]"
    },
    {
      "src": "\": \" [1880,1881]",
      "dest": "\": \" [257,258]"
    },
    {
      "src": ",: , [2522,2523]",
      "dest": ",: , [2197,2198]"
    },
    {
      "src": "identifier: spender [2390,2397]",
      "dest": "identifier: spender [2102,2109]"
    },
    {
      "src": "): ) [3738,3739]",
      "dest": "): ) [4576,4577]"
    },
    {
      "src": ",: , [1109,1110]",
      "dest": ",: , [1830,1831]"
    },
    {
      "src": "import: import [125,131]",
      "dest": "import: import [141,147]"
    },
    {
      "src": ",: , [746,747]",
      "dest": ",: , [1317,1318]"
    },
    {
      "src": "internal: internal [1013,1021]",
      "dest": "internal: internal [1751,1759]"
    },
    {
      "src": "address: address [951,958]",
      "dest": "address: address [1710,1717]"
    },
    {
      "src": "=: = [2491,2492]",
      "dest": "=: = [2166,2167]"
    },
    {
      "src": ".: . [3804,3805]",
      "dest": ".: . [4549,4550]"
    },
    {
      "src": "identifier: IERC20 [1425,1431]",
      "dest": "identifier: IERC20 [3286,3292]"
    },
    {
      "src": "identifier: token [815,820]",
      "dest": "identifier: token [1373,1378]"
    },
    {
      "src": "member_expression [2742,2755]",
      "dest": "member_expression [3544,3557]"
    },
    {
      "src": "using: using [651,656]",
      "dest": "using: using [743,748]"
    },
    {
      "src": "bool: bool [3825,3829]",
      "dest": "bool: bool [4570,4574]"
    },
    {
      "src": "pragma_directive [100,123]",
      "dest": "pragma_directive [115,139]"
    },
    {
      "src": "{: { [2436,2437]",
      "dest": "{: { [3341,3342]"
    },
    {
      "src": "identifier: token [1052,1057]",
      "dest": "identifier: token [1790,1795]"
    },
    {
      "src": "}: } [887,888]",
      "dest": "}: } [1430,1431]"
    },
    {
      "src": "function_body [1022,1135]",
      "dest": "function_body [1760,1858]"
    },
    {
      "src": "parameter [714,726]",
      "dest": "parameter [1293,1305]"
    },
    {
      "src": "uint256: uint256 [756,763]",
      "dest": "uint256: uint256 [1319,1326]"
    },
    {
      "src": "identifier: SafeERC20 [635,644]",
      "dest": "identifier: SafeERC20 [727,736]"
    },
    {
      "src": "identifier: functionCall [3649,3661]",
      "dest": "identifier: functionCall [4487,4499]"
    },
    {
      "src": "uint256: uint256 [2635,2642]",
      "dest": "uint256: uint256 [2609,2616]"
    },
    {
      "src": "call_argument [1059,1127]",
      "dest": "call_argument [1797,1850]"
    },
    {
      "src": "parameter [2407,2420]",
      "dest": "parameter [2111,2124]"
    },
    {
      "src": "): ) [1011,1012]",
      "dest": "): ) [1749,1750]"
    },
    {
      "src": "type_name [929,935]",
      "dest": "type_name [1696,1702]"
    },
    {
      "src": "identifier: token [845,850]",
      "dest": "identifier: token [1395,1400]"
    },
    {
      "src": "memory: memory [3614,3620]",
      "dest": "memory: memory [4452,4458]"
    },
    {
      "src": "internal: internal [1492,1500]",
      "dest": "internal: internal [3332,3340]"
    },
    {
      "src": "address: address [2509,2516]",
      "dest": "address: address [2184,2191]"
    },
    {
      "src": "identifier: returndata [3621,3631]",
      "dest": "identifier: returndata [4459,4469]"
    },
    {
      "src": "primitive_type [3608,3613]",
      "dest": "primitive_type [4446,4451]"
    },
    {
      "src": "identifier: newAllowance [2138,2150]",
      "dest": "identifier: currentAllowance [2617,2633]"
    },
    {
      "src": "member_expression [1082,1100]",
      "dest": "member_expression [1812,1830]"
    },
    {
      "src": "primitive_type [736,743]",
      "dest": "primitive_type [1307,1314]"
    },
    {
      "src": "): ) [880,881]",
      "dest": "): ) [1423,1424]"
    },
    {
      "src": "library: library [627,634]",
      "dest": "library: library [719,726]"
    },
    {
      "src": "}: } [1134,1135]",
      "dest": "}: } [1857,1858]"
    },
    {
      "src": "type_name [2130,2137]",
      "dest": "type_name [2539,2546]"
    },
    {
      "src": "type_cast_expression [2509,2522]",
      "dest": "type_cast_expression [2184,2197]"
    },
    {
      "src": "(: ( [1051,1052]",
      "dest": "(: ( [1789,1790]"
    },
    {
      "src": "function: function [3189,3197]",
      "dest": "function: function [4027,4035]"
    },
    {
      "src": ",: , [726,727]",
      "dest": ",: , [1305,1306]"
    },
    {
      "src": "identifier: encodeWithSelector [1063,1081]",
      "dest": "identifier: encodeCall [1801,1811]"
    },
    {
      "src": "): ) [2620,2621]",
      "dest": "): ) [3626,3627]"
    }
  ],
  "actions": [
    {
      "action": "update-node",
      "tree": "comment: // OpenZeppelin Contracts v4.3.2 (token/ERC20/utils/SafeERC20.sol) [32,98]",
      "label": "// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)"
    },
    {
      "action": "insert-node",
      "tree": "import_directive [223,259]",
      "parent": "source_file [0,5738]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "{: { [148,149]",
      "parent": "import_directive [141,175]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: IERC20 [149,155]",
      "parent": "import_directive [141,175]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [155,156]",
      "parent": "import_directive [141,175]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "from: from [157,161]",
      "parent": "import_directive [141,175]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [183,184]",
      "parent": "import_directive [176,222]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: IERC20Permit [184,196]",
      "parent": "import_directive [176,222]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [196,197]",
      "parent": "import_directive [176,222]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "from: from [198,202]",
      "parent": "import_directive [176,222]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "import: import [223,229]",
      "parent": "import_directive [223,259]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [230,231]",
      "parent": "import_directive [223,259]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: Address [231,238]",
      "parent": "import_directive [223,259]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [238,239]",
      "parent": "import_directive [223,259]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "from: from [240,244]",
      "parent": "import_directive [223,259]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "string [1825,1881]",
      "parent": "import_directive [223,259]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "comment: /**      * @dev Deprecated. This function has issues similar to the ones found in      * {IERC20-approve}, and its usage is discouraged.      *      * Whenever possible, use {safeIncreaseAllowance} and      * {safeDecreaseAllowance} instead.      */ [1141,1390]",
      "parent": "contract_body [737,5737]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "function_definition [2004,2314]",
      "parent": "contract_body [737,5737]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.8.0 [117,122]",
      "label": "0.8.20"
    },
    {
      "action": "update-node",
      "tree": "comment: /**      * @dev Deprecated. This function has issues similar to the ones found in      * {IERC20-approve}, and its usage is discouraged.      *      * Whenever possible, use {safeIncreaseAllowance} and      * {safeDecreaseAllowance} instead.      */ [1141,1390]",
      "label": "/**      * @dev An operation with an ERC20 token failed.      */"
    },
    {
      "action": "insert-tree",
      "tree": "error_declaration [844,890]",
      "parent": "contract_body [737,5737]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Indicates a failed `decreaseAllowance` request.      */ [896,967]",
      "parent": "contract_body [737,5737]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "error_declaration [972,1081]",
      "parent": "contract_body [737,5737]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,      * non-reverting calls are assumed to be successful.      */ [1087,1266]",
      "parent": "contract_body [737,5737]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the      * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.      */ [1437,1665]",
      "parent": "contract_body [737,5737]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,      * non-reverting calls are assumed to be successful.      */ [1864,2044]",
      "parent": "contract_body [737,5737]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no      * value, non-reverting calls are assumed to be successful.      */ [2280,2472]",
      "parent": "contract_body [737,5737]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,      * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval      * to be set to zero before setting it to a non-zero value, such as USDT.      */ [2951,3259]",
      "parent": "contract_body [737,5737]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "function_definition [3264,3644]",
      "parent": "contract_body [737,5737]",
      "at": 15
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param token The token targeted by the call.      * @param data The call data (encoded using abi.encode or one of its variants).      *      * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.      */ [4662,5152]",
      "parent": "contract_body [737,5737]",
      "at": 18
    },
    {
      "action": "insert-tree",
      "tree": "function_definition [5157,5735]",
      "parent": "contract_body [737,5737]",
      "at": 19
    },
    {
      "action": "update-node",
      "tree": "identifier: safeDecreaseAllowance [2329,2350]",
      "label": "safeIncreaseAllowance"
    },
    {
      "action": "insert-node",
      "tree": "function_body [2135,2274]",
      "parent": "function_definition [2049,2274]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "identifier: safeIncreaseAllowance [2013,2034]",
      "label": "safeDecreaseAllowance"
    },
    {
      "action": "insert-node",
      "tree": "function: function [3264,3272]",
      "parent": "function_definition [3264,3644]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: forceApprove [3273,3285]",
      "parent": "function_definition [3264,3644]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [3285,3286]",
      "parent": "function_definition [3264,3644]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [1425,1437]",
      "parent": "function_definition [3264,3644]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [3298,3299]",
      "parent": "function_definition [3264,3644]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [1447,1462]",
      "parent": "function_definition [3264,3644]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [3315,3316]",
      "parent": "function_definition [3264,3644]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [1472,1485]",
      "parent": "function_definition [3264,3644]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [3330,3331]",
      "parent": "function_definition [3264,3644]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [1492,1500]",
      "parent": "function_definition [3264,3644]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "function_body [2436,2806]",
      "parent": "function_definition [3264,3644]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "{: { [2135,2136]",
      "parent": "function_body [2135,2274]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [2470,2533]",
      "parent": "function_body [2135,2274]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [2217,2268]",
      "parent": "function_body [2135,2274]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [2273,2274]",
      "parent": "function_body [2135,2274]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [2130,2137]",
      "parent": "parameter [2539,2564]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: value [2099,2104]",
      "label": "requestedDecrease"
    },
    {
      "action": "insert-node",
      "tree": "block_statement [2585,2939]",
      "parent": "function_body [2575,2945]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [3351,3427]",
      "parent": "function_body [3341,3644]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "if_statement [3437,3638]",
      "parent": "function_body [3341,3644]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "comment: // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that [3386,3493]",
      "label": "// we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that"
    },
    {
      "action": "insert-node",
      "tree": "call_expression [2217,2267]",
      "parent": "expression_statement [2217,2268]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [2595,2596]",
      "parent": "block_statement [2585,2939]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [2130,2201]",
      "parent": "block_statement [2585,2939]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "if_statement [2689,2849]",
      "parent": "block_statement [2585,2939]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [2862,2929]",
      "parent": "block_statement [2585,2939]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [2938,2939]",
      "parent": "block_statement [2585,2939]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "variable_declaration [3351,3376]",
      "parent": "variable_declaration_statement [3351,3427]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [3377,3378]",
      "parent": "variable_declaration_statement [3351,3427]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_expression [2237,2306]",
      "parent": "variable_declaration_statement [3351,3427]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "if: if [3437,3439]",
      "parent": "if_statement [3437,3638]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [3440,3441]",
      "parent": "if_statement [3437,3638]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "unary_expression [3441,3486]",
      "parent": "if_statement [3437,3638]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [3486,3487]",
      "parent": "if_statement [3437,3638]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "block_statement [2446,2800]",
      "parent": "if_statement [3437,3638]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [2546,2622]",
      "parent": "block_statement [3488,3638]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [4519,4576]",
      "parent": "if_statement [4515,4650]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: forceApprove [2217,2229]",
      "parent": "call_expression [2217,2267]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2229,2230]",
      "parent": "call_expression [2217,2267]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [2230,2235]",
      "parent": "call_expression [2217,2267]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2235,2236]",
      "parent": "call_expression [2217,2267]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [1975,1982]",
      "parent": "call_expression [2217,2267]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [2244,2245]",
      "parent": "call_expression [2217,2267]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [2246,2266]",
      "parent": "call_expression [2217,2267]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [2266,2267]",
      "parent": "call_expression [2217,2267]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "call_expression [2153,2192]",
      "parent": "variable_declaration_statement [2609,2676]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "if: if [2689,2691]",
      "parent": "if_statement [2689,2849]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2692,2693]",
      "parent": "if_statement [2689,2849]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [2693,2729]",
      "parent": "if_statement [2689,2849]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [2729,2730]",
      "parent": "if_statement [2689,2849]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "block_statement [2731,2849]",
      "parent": "if_statement [2689,2849]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "call_expression [2862,2928]",
      "parent": "expression_statement [2862,2929]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [3717,3738]",
      "parent": "binary_expression [4519,4576]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "&&: && [4542,4544]",
      "parent": "binary_expression [4519,4576]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "unary_expression [4545,4576]",
      "parent": "binary_expression [4519,4576]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "revert_statement [4592,4640]",
      "parent": "block_statement [4578,4650]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [2635,2642]",
      "parent": "variable_declaration [2609,2633]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: newAllowance [2138,2150]",
      "label": "currentAllowance"
    },
    {
      "action": "insert-node",
      "tree": "{: { [2731,2732]",
      "parent": "block_statement [2731,2849]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "revert_statement [2749,2835]",
      "parent": "block_statement [2731,2849]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [2848,2849]",
      "parent": "block_statement [2731,2849]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: forceApprove [2862,2874]",
      "parent": "call_expression [2862,2928]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2874,2875]",
      "parent": "call_expression [2862,2928]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [1921,1926]",
      "parent": "call_expression [2862,2928]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [2880,2881]",
      "parent": "call_expression [2862,2928]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [2766,2773]",
      "parent": "call_expression [2862,2928]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [2889,2890]",
      "parent": "call_expression [2862,2928]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [2891,2927]",
      "parent": "call_expression [2862,2928]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [2927,2928]",
      "parent": "call_expression [2862,2928]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: encodeWithSelector [2241,2259]",
      "label": "encodeCall"
    },
    {
      "action": "move-tree",
      "tree": "member_expression [2260,2273]",
      "parent": "call_argument [3394,3407]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "tuple_expression [3409,3425]",
      "parent": "call_argument [3409,3425]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [4537,4539]",
      "parent": "binary_expression [4519,4541]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "!: ! [4545,4546]",
      "parent": "unary_expression [4545,4576]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_expression [3801,3831]",
      "parent": "unary_expression [4545,4576]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [1411,1422]",
      "parent": "call_expression [1380,1423]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [1832,1849]",
      "parent": "call_expression [1797,1850]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "revert: revert [2749,2755]",
      "parent": "revert_statement [2749,2835]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: SafeERC20FailedDecreaseAllowance [2756,2788]",
      "parent": "revert_statement [2749,2835]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "revert_arguments [2788,2834]",
      "parent": "revert_statement [2749,2835]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: require [2546,2553]",
      "label": "_callOptionalReturn"
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [3607,3612]",
      "parent": "call_expression [3587,3627]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [3614,3626]",
      "parent": "call_expression [3587,3627]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: encodeWithSelector [826,844]",
      "label": "encodeCall"
    },
    {
      "action": "move-tree",
      "tree": "member_expression [845,859]",
      "parent": "call_argument [1395,1409]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: encodeWithSelector [1063,1081]",
      "label": "encodeCall"
    },
    {
      "action": "move-tree",
      "tree": "member_expression [1082,1100]",
      "parent": "call_argument [1812,1830]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2788,2789]",
      "parent": "revert_arguments [2788,2834]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "call_argument [2284,2291]",
      "parent": "revert_arguments [2788,2834]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ",: , [2796,2797]",
      "parent": "revert_arguments [2788,2834]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [2798,2814]",
      "parent": "revert_arguments [2788,2834]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [2814,2815]",
      "parent": "revert_arguments [2788,2834]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [2816,2833]",
      "parent": "revert_arguments [2788,2834]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [2833,2834]",
      "parent": "revert_arguments [2788,2834]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: encodeWithSelector [2723,2741]",
      "label": "encodeCall"
    },
    {
      "action": "move-tree",
      "tree": "member_expression [2742,2755]",
      "parent": "call_argument [3544,3557]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "tuple_expression [3559,3571]",
      "parent": "call_argument [3559,3571]",
      "at": 0
    },
    {
      "action": "delete-node",
      "tree": ".: . [859,860]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: selector [860,868]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [845,868]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [870,872]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [872,873]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [874,879]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [1100,1101]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: selector [1101,1109]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [1082,1109]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1111,1115]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1115,1116]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1117,1119]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1119,1120]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1121,1126]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [1395,1403]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: safeApprove [1404,1415]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1415,1416]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1437,1438]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1462,1463]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1490,1491]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [1501,1502]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // safeApprove should only be called when setting an initial allowance, [1511,1582]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // or when resetting it to zero. To increase and decrease it, use [1591,1656]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // 'safeIncreaseAllowance' and 'safeDecreaseAllowance' [1665,1719]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [1728,1735]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1735,1736]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1749,1811]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1811,1812]"
    },
    {
      "action": "delete-node",
      "tree": "string_literal [1825,1881]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [1825,1881]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1890,1891]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [1728,1891]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [1728,1892]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _callOptionalReturn [1901,1920]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1920,1921]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1926,1927]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [1928,1950]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1950,1951]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1951,1973]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1973,1974]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1982,1983]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1984,1989]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1989,1990]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [1928,1990]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [1928,1990]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1990,1991]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [1901,1991]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [1901,1992]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [1997,1998]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [1501,1998]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [1395,1998]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [2091,2098]"
    },
    {
      "action": "delete-node",
      "tree": "+: + [2193,2194]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: value [2195,2200]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [2153,2200]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _callOptionalReturn [2210,2229]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2229,2230]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2235,2236]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [2237,2306]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [2306,2307]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [2210,2307]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [2210,2308]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [2273,2274]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: selector [2274,2282]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [2260,2282]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2291,2292]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: newAllowance [2293,2305]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: newAllowance [2643,2655]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [2635,2655]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [2656,2657]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [2658,2678]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [2635,2679]"
    },
    {
      "action": "delete-node",
      "tree": ".: . [2755,2756]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: selector [2756,2764]"
    },
    {
      "action": "delete-node",
      "tree": "member_expression [2742,2764]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2773,2774]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: newAllowance [2775,2787]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [2554,2575]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [2577,2620]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3666,3667]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [3668,3702]"
    },
    {
      "action": "delete-node",
      "tree": ">: > [3735,3736]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Return data is optional [3754,3780]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [3793,3800]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [3800,3801]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [3801,3831]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3831,3832]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [3833,3877]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [3877,3878]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [3793,3878]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [3793,3879]"
    }
  ]
}