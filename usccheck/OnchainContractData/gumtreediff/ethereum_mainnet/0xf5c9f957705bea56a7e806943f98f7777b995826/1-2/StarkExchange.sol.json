{
  "matches": [
    {
      "src": "call_argument [3066,3076]",
      "dest": "call_argument [3083,3093]"
    },
    {
      "src": "visibility [2760,2768]",
      "dest": "visibility [2766,2774]"
    },
    {
      "src": "override_specifier [2115,2123]",
      "dest": "override_specifier [2121,2129]"
    },
    {
      "src": "): ) [2258,2259]",
      "dest": "): ) [2264,2265]"
    },
    {
      "src": "assignment_expression [2612,2646]",
      "dest": "assignment_expression [2618,2652]"
    },
    {
      "src": "}: } [2656,2657]",
      "dest": "}: } [2662,2663]"
    },
    {
      "src": "string [2279,2314]",
      "dest": "string [2285,2320]"
    },
    {
      "src": "{: { [2347,2348]",
      "dest": "{: { [2353,2354]"
    },
    {
      "src": "parameter [1735,1742]",
      "dest": "parameter [1741,1748]"
    },
    {
      "src": "state_mutability [1712,1716]",
      "dest": "state_mutability [1718,1722]"
    },
    {
      "src": "identifier: index [2094,2099]",
      "dest": "identifier: index [2100,2105]"
    },
    {
      "src": "identifier: id [2191,2193]",
      "dest": "identifier: id [2197,2199]"
    },
    {
      "src": "assignment_expression [2361,2397]",
      "dest": "assignment_expression [2367,2403]"
    },
    {
      "src": "\": \" [669,670]",
      "dest": "\": \" [669,670]"
    },
    {
      "src": "): ) [2428,2429]",
      "dest": "): ) [2434,2435]"
    },
    {
      "src": "identifier: IDX_MAP_3 [1988,1997]",
      "dest": "identifier: IDX_MAP_3 [1994,2003]"
    },
    {
      "src": "else: else [2658,2662]",
      "dest": "else: else [2664,2668]"
    },
    {
      "src": "{: { [733,734]",
      "dest": "{: { [733,734]"
    },
    {
      "src": "uint256: uint256 [1735,1742]",
      "dest": "uint256: uint256 [1741,1748]"
    },
    {
      "src": "public: public [746,752]",
      "dest": "public: public [746,752]"
    },
    {
      "src": "number_literal: 3 [2344,2345]",
      "dest": "number_literal: 3 [2350,2351]"
    },
    {
      "src": "binary_expression [1758,1770]",
      "dest": "binary_expression [1764,1776]"
    },
    {
      "src": "string_literal [2684,2702]",
      "dest": "string_literal [2690,2708]"
    },
    {
      "src": "{: { [1902,1903]",
      "dest": "{: { [1908,1909]"
    },
    {
      "src": "(: ( [3094,3095]",
      "dest": "(: ( [3214,3215]"
    },
    {
      "src": "=: = [1122,1123]",
      "dest": "=: = [1126,1127]"
    },
    {
      "src": "else: else [2493,2497]",
      "dest": "else: else [2499,2503]"
    },
    {
      "src": "identifier: StarkExchange [701,714]",
      "dest": "identifier: StarkExchange [701,714]"
    },
    {
      "src": "number_literal: 1 [2174,2175]",
      "dest": "number_literal: 1 [2180,2181]"
    },
    {
      "src": "\": \" [2226,2227]",
      "dest": "\": \" [2232,2233]"
    },
    {
      "src": "else: else [2409,2413]",
      "dest": "else: else [2415,2419]"
    },
    {
      "src": "(: ( [1516,1517]",
      "dest": "(: ( [1522,1523]"
    },
    {
      "src": "if: if [2498,2500]",
      "dest": "if: if [2504,2506]"
    },
    {
      "src": "if: if [2244,2246]",
      "dest": "if: if [2250,2252]"
    },
    {
      "src": "type_name [1610,1617]",
      "dest": "type_name [1616,1623]"
    },
    {
      "src": "expression_statement [2361,2398]",
      "dest": "expression_statement [2367,2404]"
    },
    {
      "src": "primitive_type [1686,1693]",
      "dest": "primitive_type [1692,1699]"
    },
    {
      "src": "): ) [2149,2150]",
      "dest": "): ) [2155,2156]"
    },
    {
      "src": "number_literal: 0x30006100050005012000102002000001200000010001100500200000000020 [1025,1089]",
      "dest": "number_literal: 0x2010501100000010050000002511000000220005410030200200200000552010 [1027,1093]"
    },
    {
      "src": "string [2684,2702]",
      "dest": "string [2690,2708]"
    },
    {
      "src": "binary_expression [2502,2512]",
      "dest": "binary_expression [2508,2518]"
    },
    {
      "src": "}: } [2007,2008]",
      "dest": "}: } [2013,2014]"
    },
    {
      "src": "function_body [2151,2720]",
      "dest": "function_body [2157,2726]"
    },
    {
      "src": "override: override [1717,1725]",
      "dest": "override: override [1723,1731]"
    },
    {
      "src": "identifier: REVERT_MSG [3111,3121]",
      "dest": "identifier: REVERT_MSG [3231,3241]"
    },
    {
      "src": "=: = [1023,1024]",
      "dest": "=: = [1025,1026]"
    },
    {
      "src": "parenthesized_expression [2023,2046]",
      "dest": "parenthesized_expression [2029,2052]"
    },
    {
      "src": "number_literal: 46110 [985,990]",
      "dest": "number_literal: 1527414 [985,992]"
    },
    {
      "src": "block_statement [2347,2408]",
      "dest": "block_statement [2353,2414]"
    },
    {
      "src": "): ) [1617,1618]",
      "dest": "): ) [1623,1624]"
    },
    {
      "src": "block_statement [2260,2325]",
      "dest": "block_statement [2266,2331]"
    },
    {
      "src": "identifier: require [3087,3094]",
      "dest": "identifier: require [3207,3214]"
    },
    {
      "src": "identifier: index [2586,2591]",
      "dest": "identifier: index [2592,2597]"
    },
    {
      "src": "identifier: IDX_MAP_0 [1013,1022]",
      "dest": "identifier: IDX_MAP_0 [1015,1024]"
    },
    {
      "src": "if_statement [2161,2714]",
      "dest": "if_statement [2167,2720]"
    },
    {
      "src": "}: } [2237,2238]",
      "dest": "}: } [2243,2244]"
    },
    {
      "src": "}: } [1550,1551]",
      "dest": "}: } [1556,1557]"
    },
    {
      "src": "solidity: solidity [643,651]",
      "dest": "solidity: solidity [643,651]"
    },
    {
      "src": "constant: constant [963,971]",
      "dest": "constant: constant [963,971]"
    },
    {
      "src": "if: if [1884,1886]",
      "dest": "if: if [1890,1892]"
    },
    {
      "src": "constant: constant [1004,1012]",
      "dest": "constant: constant [1006,1014]"
    },
    {
      "src": "number_literal: 4 [2427,2428]",
      "dest": "number_literal: 4 [2433,2434]"
    },
    {
      "src": "string [772,779]",
      "dest": "string [772,779]"
    },
    {
      "src": "type_name [1095,1102]",
      "dest": "type_name [1099,1106]"
    },
    {
      "src": "if_statement [1949,2008]",
      "dest": "if_statement [1955,2014]"
    },
    {
      "src": "==: == [2508,2510]",
      "dest": "==: == [2514,2516]"
    },
    {
      "src": "function: function [2726,2734]",
      "dest": "function: function [2732,2740]"
    },
    {
      "src": "call_argument [3095,3109]",
      "dest": "call_argument [3215,3229]"
    },
    {
      "src": "==: == [1961,1963]",
      "dest": "==: == [1967,1969]"
    },
    {
      "src": "): ) [2596,2597]",
      "dest": "): ) [2602,2603]"
    },
    {
      "src": "string [669,689]",
      "dest": "string [669,689]"
    },
    {
      "src": "identifier: handlerMapSection [1668,1685]",
      "dest": "identifier: handlerMapSection [1674,1691]"
    },
    {
      "src": "visibility [1485,1493]",
      "dest": "visibility [1491,1499]"
    },
    {
      "src": "state_variable_declaration [1296,1391]",
      "dest": "state_variable_declaration [1301,1397]"
    },
    {
      "src": "primitive_type [1610,1617]",
      "dest": "primitive_type [1616,1623]"
    },
    {
      "src": "visibility [1578,1586]",
      "dest": "visibility [1584,1592]"
    },
    {
      "src": "=: = [2818,2819]",
      "dest": "=: = [2824,2825]"
    },
    {
      "src": "identifier: IDX_MAP_1 [1858,1867]",
      "dest": "identifier: IDX_MAP_1 [1864,1873]"
    },
    {
      "src": "variable_declaration_statement [2793,2845]",
      "dest": "variable_declaration_statement [2799,2851]"
    },
    {
      "src": "identifier: id [2361,2363]",
      "dest": "identifier: id [2367,2369]"
    },
    {
      "src": "\": \" [2564,2565]",
      "dest": "\": \" [2570,2571]"
    },
    {
      "src": "number_literal: 0x200230200020300001401200000000100020011200000002020000010000301 [1325,1390]",
      "dest": "number_literal: 0x2000000050000012000013100002002002032050020002020002050000201003 [1330,1396]"
    },
    {
      "src": "): ) [2345,2346]",
      "dest": "): ) [2351,2352]"
    },
    {
      "src": "=: = [2364,2365]",
      "dest": "=: = [2370,2371]"
    },
    {
      "src": "{: { [1967,1968]",
      "dest": "{: { [1973,1974]"
    },
    {
      "src": "function_body [1619,1653]",
      "dest": "function_body [1625,1659]"
    },
    {
      "src": "\": \" [2820,2821]",
      "dest": "\": \" [2826,2827]"
    },
    {
      "src": "uint256: uint256 [1686,1693]",
      "dest": "uint256: uint256 [1692,1699]"
    },
    {
      "src": "identifier: IDX_MAP_1 [1112,1121]",
      "dest": "identifier: IDX_MAP_1 [1116,1125]"
    },
    {
      "src": "identifier: id [2444,2446]",
      "dest": "identifier: id [2450,2452]"
    },
    {
      "src": "): ) [2512,2513]",
      "dest": "): ) [2518,2519]"
    },
    {
      "src": "revert: revert [2677,2683]",
      "dest": "revert: revert [2683,2689]"
    },
    {
      "src": "identifier: magicSalt [1566,1575]",
      "dest": "identifier: magicSalt [1572,1581]"
    },
    {
      "src": "call_argument [3140,3160]",
      "dest": "call_argument [3260,3280]"
    },
    {
      "src": "{: { [2783,2784]",
      "dest": "{: { [2789,2790]"
    },
    {
      "src": "binary_expression [1823,1835]",
      "dest": "binary_expression [1829,1841]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]",
      "dest": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]"
    },
    {
      "src": "): ) [1576,1577]",
      "dest": "): ) [1582,1583]"
    },
    {
      "src": "if: if [2331,2333]",
      "dest": "if: if [2337,2339]"
    },
    {
      "src": "is: is [715,717]",
      "dest": "is: is [715,717]"
    },
    {
      "src": "identifier: id [2274,2276]",
      "dest": "identifier: id [2280,2282]"
    },
    {
      "src": "\": \" [2396,2397]",
      "dest": "\": \" [2402,2403]"
    },
    {
      "src": "else: else [1879,1883]",
      "dest": "else: else [1885,1889]"
    },
    {
      "src": "(: ( [2132,2133]",
      "dest": "(: ( [2138,2139]"
    },
    {
      "src": "if: if [2161,2163]",
      "dest": "if: if [2167,2169]"
    },
    {
      "src": "else: else [2239,2243]",
      "dest": "else: else [2245,2249]"
    },
    {
      "src": "number_literal: 3 [1964,1965]",
      "dest": "number_literal: 3 [1970,1971]"
    },
    {
      "src": "override: override [1499,1507]",
      "dest": "override: override [1505,1513]"
    },
    {
      "src": "block_statement [1837,1878]",
      "dest": "block_statement [1843,1884]"
    },
    {
      "src": "type_name [996,1003]",
      "dest": "type_name [998,1005]"
    },
    {
      "src": "identifier: MainDispatcher [718,732]",
      "dest": "identifier: MainDispatcher [718,732]"
    },
    {
      "src": "assignment_expression [2274,2314]",
      "dest": "assignment_expression [2280,2320]"
    },
    {
      "src": "number_literal: 0 [3108,3109]",
      "dest": "number_literal: 0 [3228,3229]"
    },
    {
      "src": "{: { [2177,2178]",
      "dest": "{: { [2183,2184]"
    },
    {
      "src": "binary_expression [3140,3160]",
      "dest": "binary_expression [3260,3280]"
    },
    {
      "src": "parenthesized_expression [2683,2703]",
      "dest": "parenthesized_expression [2689,2709]"
    },
    {
      "src": "identifier: VERSION [762,769]",
      "dest": "identifier: VERSION [762,769]"
    },
    {
      "src": "return: return [1629,1635]",
      "dest": "return: return [1635,1641]"
    },
    {
      "src": "==: == [2341,2343]",
      "dest": "==: == [2347,2349]"
    },
    {
      "src": "(: ( [1757,1758]",
      "dest": "(: ( [1763,1764]"
    },
    {
      "src": "constant: constant [1203,1211]",
      "dest": "constant: constant [1208,1216]"
    },
    {
      "src": "import_directive [662,690]",
      "dest": "import_directive [662,690]"
    },
    {
      "src": "memory: memory [2140,2146]",
      "dest": "memory: memory [2146,2152]"
    },
    {
      "src": "string_literal [2279,2314]",
      "dest": "string_literal [2285,2320]"
    },
    {
      "src": "primitive_type [996,1003]",
      "dest": "primitive_type [998,1005]"
    },
    {
      "src": "): ) [1770,1771]",
      "dest": "): ) [1776,1777]"
    },
    {
      "src": "pragma: pragma [636,642]",
      "dest": "pragma: pragma [636,642]"
    },
    {
      "src": "if: if [2582,2584]",
      "dest": "if: if [2588,2590]"
    },
    {
      "src": "binary_expression [2586,2596]",
      "dest": "binary_expression [2592,2602]"
    },
    {
      "src": "identifier: initializationSentinel [2735,2757]",
      "dest": "identifier: initializationSentinel [2741,2763]"
    },
    {
      "src": "type_name [2086,2093]",
      "dest": "type_name [2092,2099]"
    },
    {
      "src": "function_definition [2726,3180]",
      "dest": "function_definition [2732,3300]"
    },
    {
      "src": "parameter [2086,2099]",
      "dest": "parameter [2092,2105]"
    },
    {
      "src": "return: return [1851,1857]",
      "dest": "return: return [1857,1863]"
    },
    {
      "src": "comment: // I.e. it can run only when the state is still empty. [2928,2982]",
      "dest": "comment: // I.e. it can run only when the state is still empty. [2934,2988]"
    },
    {
      "src": "revert: revert [2017,2023]",
      "dest": "revert: revert [2023,2029]"
    },
    {
      "src": "(: ( [1482,1483]",
      "dest": "(: ( [1488,1489]"
    },
    {
      "src": "primitive_type [1195,1202]",
      "dest": "primitive_type [1200,1207]"
    },
    {
      "src": "identifier: getNumSubcontracts [1464,1482]",
      "dest": "identifier: getNumSubcontracts [1470,1488]"
    },
    {
      "src": "\": \" [2843,2844]",
      "dest": "\": \" [2849,2850]"
    },
    {
      "src": "call_argument [3162,3172]",
      "dest": "call_argument [3282,3292]"
    },
    {
      "src": "return_type_definition [1601,1618]",
      "dest": "return_type_definition [1607,1624]"
    },
    {
      "src": "override_specifier [1592,1600]",
      "dest": "override_specifier [1598,1606]"
    },
    {
      "src": "\": \" [2533,2534]",
      "dest": "\": \" [2539,2540]"
    },
    {
      "src": "string_literal [2196,2227]",
      "dest": "string_literal [2202,2233]"
    },
    {
      "src": "{: { [2663,2664]",
      "dest": "{: { [2669,2670]"
    },
    {
      "src": "==: == [3156,3158]",
      "dest": "==: == [3276,3278]"
    },
    {
      "src": "state_mutability [1587,1591]",
      "dest": "state_mutability [1593,1597]"
    },
    {
      "src": "==: == [2592,2594]",
      "dest": "==: == [2598,2600]"
    },
    {
      "src": "{: { [1772,1773]",
      "dest": "{: { [1778,1779]"
    },
    {
      "src": "function: function [1557,1565]",
      "dest": "function: function [1563,1571]"
    },
    {
      "src": "uint256: uint256 [1610,1617]",
      "dest": "uint256: uint256 [1616,1623]"
    },
    {
      "src": "{: { [2514,2515]",
      "dest": "{: { [2520,2521]"
    },
    {
      "src": "identifier: section [1758,1765]",
      "dest": "identifier: section [1764,1771]"
    },
    {
      "src": "parameter [1517,1524]",
      "dest": "parameter [1523,1530]"
    },
    {
      "src": "): ) [1701,1702]",
      "dest": "): ) [1707,1708]"
    },
    {
      "src": "contract_body [733,3182]",
      "dest": "contract_body [733,3302]"
    },
    {
      "src": "visibility [2101,2109]",
      "dest": "visibility [2107,2115]"
    },
    {
      "src": "binary_expression [2165,2175]",
      "dest": "binary_expression [2171,2181]"
    },
    {
      "src": "if_statement [2331,2714]",
      "dest": "if_statement [2337,2720]"
    },
    {
      "src": "type_name [2793,2799]",
      "dest": "type_name [2799,2805]"
    },
    {
      "src": "==: == [3105,3107]",
      "dest": "==: == [3225,3227]"
    },
    {
      "src": "expression_statement [2528,2566]",
      "dest": "expression_statement [2534,2572]"
    },
    {
      "src": "block_statement [1967,2008]",
      "dest": "block_statement [1973,2014]"
    },
    {
      "src": "==: == [2424,2426]",
      "dest": "==: == [2430,2432]"
    },
    {
      "src": "returns: returns [1508,1515]",
      "dest": "returns: returns [1514,1521]"
    },
    {
      "src": "expression_statement [3132,3174]",
      "dest": "expression_statement [3252,3294]"
    },
    {
      "src": "}: } [1812,1813]",
      "dest": "}: } [1818,1819]"
    },
    {
      "src": "number_literal: 6 [1543,1544]",
      "dest": "number_literal: 6 [1549,1550]"
    },
    {
      "src": "else: else [1814,1818]",
      "dest": "else: else [1820,1824]"
    },
    {
      "src": "number_literal: 0x120000105000000501200000120502000000200452005000202002030500003 [1124,1189]",
      "dest": "number_literal: 0x3000030005000050020012003000010604300000002420501003000010000300 [1128,1194]"
    },
    {
      "src": "(: ( [1952,1953]",
      "dest": "(: ( [1958,1959]"
    },
    {
      "src": "==: == [1766,1768]",
      "dest": "==: == [1772,1774]"
    },
    {
      "src": "state_variable_declaration [739,780]",
      "dest": "state_variable_declaration [739,780]"
    },
    {
      "src": "identifier: REVERT_MSG [3066,3076]",
      "dest": "identifier: REVERT_MSG [3083,3093]"
    },
    {
      "src": "state_variable_declaration [996,1090]",
      "dest": "state_variable_declaration [998,1094]"
    },
    {
      "src": "identifier: section [1823,1830]",
      "dest": "identifier: section [1829,1836]"
    },
    {
      "src": "primitive_type [1735,1742]",
      "dest": "primitive_type [1741,1748]"
    },
    {
      "src": "call_expression [3087,3122]",
      "dest": "call_expression [3207,3242]"
    },
    {
      "src": "block_statement [1772,1813]",
      "dest": "block_statement [1778,1819]"
    },
    {
      "src": "state_variable_declaration [1195,1291]",
      "dest": "state_variable_declaration [1200,1296]"
    },
    {
      "src": "assignment_expression [2191,2227]",
      "dest": "assignment_expression [2197,2233]"
    },
    {
      "src": "\": \" [2480,2481]",
      "dest": "\": \" [2486,2487]"
    },
    {
      "src": "=: = [1222,1223]",
      "dest": "=: = [1227,1228]"
    },
    {
      "src": "pure: pure [2110,2114]",
      "dest": "pure: pure [2116,2120]"
    },
    {
      "src": "string: string [2133,2139]",
      "dest": "string: string [2139,2145]"
    },
    {
      "src": "function_definition [1659,2053]",
      "dest": "function_definition [1665,2059]"
    },
    {
      "src": "): ) [1965,1966]",
      "dest": "): ) [1971,1972]"
    },
    {
      "src": "{: { [1619,1620]",
      "dest": "{: { [1625,1626]"
    },
    {
      "src": "{: { [2598,2599]",
      "dest": "{: { [2604,2605]"
    },
    {
      "src": "return_type_definition [1726,1743]",
      "dest": "return_type_definition [1732,1749]"
    },
    {
      "src": "\": \" [2196,2197]",
      "dest": "\": \" [2202,2203]"
    },
    {
      "src": "binary_expression [1953,1965]",
      "dest": "binary_expression [1959,1971]"
    },
    {
      "src": "block_statement [1902,1943]",
      "dest": "block_statement [1908,1949]"
    },
    {
      "src": "type_name [1517,1524]",
      "dest": "type_name [1523,1530]"
    },
    {
      "src": "): ) [1524,1525]",
      "dest": "): ) [1530,1531]"
    },
    {
      "src": "if_statement [2414,2714]",
      "dest": "if_statement [2420,2720]"
    },
    {
      "src": "string [2196,2227]",
      "dest": "string [2202,2233]"
    },
    {
      "src": "}: } [1877,1878]",
      "dest": "}: } [1883,1884]"
    },
    {
      "src": "assignment_expression [2444,2481]",
      "dest": "assignment_expression [2450,2487]"
    },
    {
      "src": "binary_expression [1888,1900]",
      "dest": "binary_expression [1894,1906]"
    },
    {
      "src": "solidity_pragma_token [643,659]",
      "dest": "solidity_pragma_token [643,659]"
    },
    {
      "src": "=: = [2615,2616]",
      "dest": "=: = [2621,2622]"
    },
    {
      "src": "return: return [1981,1987]",
      "dest": "return: return [1987,1993]"
    },
    {
      "src": "): ) [1835,1836]",
      "dest": "): ) [1841,1842]"
    },
    {
      "src": "): ) [2099,2100]",
      "dest": "): ) [2105,2106]"
    },
    {
      "src": "if: if [1949,1951]",
      "dest": "if: if [1955,1957]"
    },
    {
      "src": "(: ( [1685,1686]",
      "dest": "(: ( [1691,1692]"
    },
    {
      "src": "pure: pure [1494,1498]",
      "dest": "pure: pure [1500,1504]"
    },
    {
      "src": "identifier: IDX_MAP_3 [1313,1322]",
      "dest": "identifier: IDX_MAP_3 [1318,1327]"
    },
    {
      "src": "function: function [2059,2067]",
      "dest": "function: function [2065,2073]"
    },
    {
      "src": "return: return [1916,1922]",
      "dest": "return: return [1922,1928]"
    },
    {
      "src": "(: ( [1575,1576]",
      "dest": "(: ( [1581,1582]"
    },
    {
      "src": "number_literal: 0 [3159,3160]",
      "dest": "number_literal: 0 [3279,3280]"
    },
    {
      "src": "number_literal: 6 [2595,2596]",
      "dest": "number_literal: 6 [2601,2602]"
    },
    {
      "src": "if: if [1819,1821]",
      "dest": "if: if [1825,1827]"
    },
    {
      "src": "expression_statement [2444,2482]",
      "dest": "expression_statement [2450,2488]"
    },
    {
      "src": "}: } [2407,2408]",
      "dest": "}: } [2413,2414]"
    },
    {
      "src": "binary_expression [2418,2428]",
      "dest": "binary_expression [2424,2434]"
    },
    {
      "src": "if: if [1754,1756]",
      "dest": "if: if [1760,1762]"
    },
    {
      "src": "identifier: REVERT_MSG [2807,2817]",
      "dest": "identifier: REVERT_MSG [2813,2823]"
    },
    {
      "src": "string [2617,2646]",
      "dest": "string [2623,2652]"
    },
    {
      "src": "return_statement [1786,1803]",
      "dest": "return_statement [1792,1809]"
    },
    {
      "src": "internal: internal [1703,1711]",
      "dest": "internal: internal [1709,1717]"
    },
    {
      "src": "number_literal: 0x1020000000003020000502203000300000200000000001000100330010220001 [1224,1290]",
      "dest": "number_literal: 0x1003112030002130000200100020000320202001020001001000040200200020 [1229,1295]"
    },
    {
      "src": "(: ( [2585,2586]",
      "dest": "(: ( [2591,2592]"
    },
    {
      "src": "call_argument [3015,3025]",
      "dest": "call_argument [3029,3039]"
    },
    {
      "src": "internal: internal [1578,1586]",
      "dest": "internal: internal [1584,1592]"
    },
    {
      "src": "memory: memory [2800,2806]",
      "dest": "memory: memory [2806,2812]"
    },
    {
      "src": "type_name [1296,1303]",
      "dest": "type_name [1301,1308]"
    },
    {
      "src": "): ) [2045,2046]",
      "dest": "): ) [2051,2052]"
    },
    {
      "src": "type_name [2133,2139]",
      "dest": "type_name [2139,2145]"
    },
    {
      "src": "returns: returns [1726,1733]",
      "dest": "returns: returns [1732,1739]"
    },
    {
      "src": "{: { [1526,1527]",
      "dest": "{: { [1532,1533]"
    },
    {
      "src": "identifier: IDX_MAP_2 [1923,1932]",
      "dest": "identifier: IDX_MAP_2 [1929,1938]"
    },
    {
      "src": "assignment_expression [2528,2565]",
      "dest": "assignment_expression [2534,2571]"
    },
    {
      "src": "string: string [739,745]",
      "dest": "string: string [739,745]"
    },
    {
      "src": "{: { [1744,1745]",
      "dest": "{: { [1750,1751]"
    },
    {
      "src": "\": \" [772,773]",
      "dest": "\": \" [772,773]"
    },
    {
      "src": "): ) [1742,1743]",
      "dest": "): ) [1748,1749]"
    },
    {
      "src": "expression_statement [3087,3123]",
      "dest": "expression_statement [3207,3243]"
    },
    {
      "src": "=: = [2277,2278]",
      "dest": "=: = [2283,2284]"
    },
    {
      "src": "(: ( [2334,2335]",
      "dest": "(: ( [2340,2341]"
    },
    {
      "src": "variable_declaration [2793,2817]",
      "dest": "variable_declaration [2799,2823]"
    },
    {
      "src": "==: == [1896,1898]",
      "dest": "==: == [1902,1904]"
    },
    {
      "src": "override: override [2774,2782]",
      "dest": "override: override [2780,2788]"
    },
    {
      "src": "view: view [2769,2773]",
      "dest": "view: view [2775,2779]"
    },
    {
      "src": "^:  ^ [651,653]",
      "dest": "^:  ^ [651,653]"
    },
    {
      "src": "type_name [955,962]",
      "dest": "type_name [955,962]"
    },
    {
      "src": "block_statement [2663,2714]",
      "dest": "block_statement [2669,2720]"
    },
    {
      "src": "string: string [2793,2799]",
      "dest": "string: string [2799,2805]"
    },
    {
      "src": "): ) [2758,2759]",
      "dest": "): ) [2764,2765]"
    },
    {
      "src": "expression_statement [2612,2647]",
      "dest": "expression_statement [2618,2653]"
    },
    {
      "src": "return_statement [1629,1647]",
      "dest": "return_statement [1635,1653]"
    },
    {
      "src": "(: ( [2247,2248]",
      "dest": "(: ( [2253,2254]"
    },
    {
      "src": "): ) [1483,1484]",
      "dest": "): ) [1489,1490]"
    },
    {
      "src": "function_body [1744,2053]",
      "dest": "function_body [1750,2059]"
    },
    {
      "src": "): ) [3121,3122]",
      "dest": "): ) [3241,3242]"
    },
    {
      "src": "identifier: index [2502,2507]",
      "dest": "identifier: index [2508,2513]"
    },
    {
      "src": "string_literal [2024,2045]",
      "dest": "string_literal [2030,2051]"
    },
    {
      "src": "\": \" [2701,2702]",
      "dest": "\": \" [2707,2708]"
    },
    {
      "src": "type_name [1686,1693]",
      "dest": "type_name [1692,1699]"
    },
    {
      "src": "\": \" [688,689]",
      "dest": "\": \" [688,689]"
    },
    {
      "src": "=: = [1323,1324]",
      "dest": "=: = [1328,1329]"
    },
    {
      "src": "number_literal: 1 [1834,1835]",
      "dest": "number_literal: 1 [1840,1841]"
    },
    {
      "src": "internal: internal [2101,2109]",
      "dest": "internal: internal [2107,2115]"
    },
    {
      "src": "function_definition [1455,1551]",
      "dest": "function_definition [1461,1557]"
    },
    {
      "src": "}: } [2719,2720]",
      "dest": "}: } [2725,2726]"
    },
    {
      "src": "}: } [2324,2325]",
      "dest": "}: } [2330,2331]"
    },
    {
      "src": "number_literal: 0 [1769,1770]",
      "dest": "number_literal: 0 [1775,1776]"
    },
    {
      "src": "call_expression [3132,3173]",
      "dest": "call_expression [3252,3293]"
    },
    {
      "src": "visibility [1703,1711]",
      "dest": "visibility [1709,1717]"
    },
    {
      "src": "(: ( [2023,2024]",
      "dest": "(: ( [2029,2030]"
    },
    {
      "src": "identifier: id [2528,2530]",
      "dest": "identifier: id [2534,2536]"
    },
    {
      "src": "if_statement [1819,2008]",
      "dest": "if_statement [1825,2014]"
    },
    {
      "src": "string_literal [2820,2844]",
      "dest": "string_literal [2826,2850]"
    },
    {
      "src": "uint256: uint256 [1296,1303]",
      "dest": "uint256: uint256 [1301,1308]"
    },
    {
      "src": "primitive_type [1095,1102]",
      "dest": "primitive_type [1099,1106]"
    },
    {
      "src": "primitive_type [1517,1524]",
      "dest": "primitive_type [1523,1530]"
    },
    {
      "src": "pure: pure [1587,1591]",
      "dest": "pure: pure [1593,1597]"
    },
    {
      "src": "binary_expression [3095,3109]",
      "dest": "binary_expression [3215,3229]"
    },
    {
      "src": "\": \" [778,779]",
      "dest": "\": \" [778,779]"
    },
    {
      "src": "contract_declaration [692,3182]",
      "dest": "contract_declaration [692,3302]"
    },
    {
      "src": "\": \" [2024,2025]",
      "dest": "\": \" [2030,2031]"
    },
    {
      "src": "source_file [0,3183]",
      "dest": "source_file [0,3303]"
    },
    {
      "src": "binary_expression [2248,2258]",
      "dest": "binary_expression [2254,2264]"
    },
    {
      "src": "if_statement [2582,2714]",
      "dest": "if_statement [2588,2720]"
    },
    {
      "src": "function_body [2783,3180]",
      "dest": "function_body [2789,3300]"
    },
    {
      "src": "identifier: MAGIC_SALT [972,982]",
      "dest": "identifier: MAGIC_SALT [972,982]"
    },
    {
      "src": "override_specifier [1717,1725]",
      "dest": "override_specifier [1723,1731]"
    },
    {
      "src": "function_definition [1557,1653]",
      "dest": "function_definition [1563,1659]"
    },
    {
      "src": "(: ( [2164,2165]",
      "dest": "(: ( [2170,2171]"
    },
    {
      "src": "solidity_version_comparison_operator [651,653]",
      "dest": "solidity_version_comparison_operator [651,653]"
    },
    {
      "src": "if_statement [1884,2008]",
      "dest": "if_statement [1890,2014]"
    },
    {
      "src": "}: } [2713,2714]",
      "dest": "}: } [2719,2720]"
    },
    {
      "src": "string [2533,2565]",
      "dest": "string [2539,2571]"
    },
    {
      "src": "=: = [2447,2448]",
      "dest": "=: = [2453,2454]"
    },
    {
      "src": "primitive_type [1296,1303]",
      "dest": "primitive_type [1301,1308]"
    },
    {
      "src": "}: } [1942,1943]",
      "dest": "}: } [1948,1949]"
    },
    {
      "src": "parameter [2133,2149]",
      "dest": "parameter [2139,2155]"
    },
    {
      "src": "}: } [2491,2492]",
      "dest": "}: } [2497,2498]"
    },
    {
      "src": "return_type_definition [2124,2150]",
      "dest": "return_type_definition [2130,2156]"
    },
    {
      "src": "if: if [2414,2416]",
      "dest": "if: if [2420,2422]"
    },
    {
      "src": "primitive_type [955,962]",
      "dest": "primitive_type [955,962]"
    },
    {
      "src": "identifier: index [2165,2170]",
      "dest": "identifier: index [2171,2176]"
    },
    {
      "src": "returns: returns [2124,2131]",
      "dest": "returns: returns [2130,2137]"
    },
    {
      "src": "string [2366,2397]",
      "dest": "string [2372,2403]"
    },
    {
      "src": "internal: internal [2760,2768]",
      "dest": "internal: internal [2766,2774]"
    },
    {
      "src": "{: { [2260,2261]",
      "dest": "{: { [2266,2267]"
    },
    {
      "src": "string [2024,2045]",
      "dest": "string [2030,2051]"
    },
    {
      "src": "uint256: uint256 [955,962]",
      "dest": "uint256: uint256 [955,962]"
    },
    {
      "src": "else: else [1944,1948]",
      "dest": "else: else [1950,1954]"
    },
    {
      "src": "user_defined_type [718,732]",
      "dest": "user_defined_type [718,732]"
    },
    {
      "src": "primitive_type [739,745]",
      "dest": "primitive_type [739,745]"
    },
    {
      "src": "(: ( [2417,2418]",
      "dest": "(: ( [2423,2424]"
    },
    {
      "src": "pragma_directive [636,660]",
      "dest": "pragma_directive [636,660]"
    },
    {
      "src": "if_statement [2244,2714]",
      "dest": "if_statement [2250,2720]"
    },
    {
      "src": "block_statement [2430,2492]",
      "dest": "block_statement [2436,2498]"
    },
    {
      "src": "override_specifier [1499,1507]",
      "dest": "override_specifier [1505,1513]"
    },
    {
      "src": "uint256: uint256 [996,1003]",
      "dest": "uint256: uint256 [998,1005]"
    },
    {
      "src": "\": \" [2313,2314]",
      "dest": "\": \" [2319,2320]"
    },
    {
      "src": "return_statement [1851,1868]",
      "dest": "return_statement [1857,1874]"
    },
    {
      "src": "binary_expression [2335,2345]",
      "dest": "binary_expression [2341,2351]"
    },
    {
      "src": "state_variable_declaration [1095,1190]",
      "dest": "state_variable_declaration [1099,1195]"
    },
    {
      "src": "\": \" [2279,2280]",
      "dest": "\": \" [2285,2286]"
    },
    {
      "src": "\": \" [2645,2646]",
      "dest": "\": \" [2651,2652]"
    },
    {
      "src": "): ) [1900,1901]",
      "dest": "): ) [1906,1907]"
    },
    {
      "src": "if_statement [2498,2714]",
      "dest": "if_statement [2504,2720]"
    },
    {
      "src": "identifier: REVERT_MSG [3162,3172]",
      "dest": "identifier: REVERT_MSG [3282,3292]"
    },
    {
      "src": "==: == [1831,1833]",
      "dest": "==: == [1837,1839]"
    },
    {
      "src": "comment: // ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ---------- [867,950]",
      "dest": "comment: // ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ---------- [867,950]"
    },
    {
      "src": "uint256: uint256 [1195,1202]",
      "dest": "uint256: uint256 [1200,1207]"
    },
    {
      "src": "{: { [2430,2431]",
      "dest": "{: { [2436,2437]"
    },
    {
      "src": "string [2820,2844]",
      "dest": "string [2826,2850]"
    },
    {
      "src": "uint256: uint256 [1095,1102]",
      "dest": "uint256: uint256 [1099,1106]"
    },
    {
      "src": "(: ( [1734,1735]",
      "dest": "(: ( [1740,1741]"
    },
    {
      "src": "identifier: id [2147,2149]",
      "dest": "identifier: id [2153,2155]"
    },
    {
      "src": "parameter [1686,1701]",
      "dest": "parameter [1692,1707]"
    },
    {
      "src": "identifier: section [1694,1701]",
      "dest": "identifier: section [1700,1707]"
    },
    {
      "src": "contract: contract [692,700]",
      "dest": "contract: contract [692,700]"
    },
    {
      "src": "uint256: uint256 [1517,1524]",
      "dest": "uint256: uint256 [1523,1530]"
    },
    {
      "src": "parameter [1610,1617]",
      "dest": "parameter [1616,1623]"
    },
    {
      "src": "primitive_type [2133,2139]",
      "dest": "primitive_type [2139,2145]"
    },
    {
      "src": "constant: constant [1304,1312]",
      "dest": "constant: constant [1309,1317]"
    },
    {
      "src": "identifier: IDX_MAP_0 [1793,1802]",
      "dest": "identifier: IDX_MAP_0 [1799,1808]"
    },
    {
      "src": "identifier: orderRoot [3095,3104]",
      "dest": "identifier: orderRoot [3215,3224]"
    },
    {
      "src": "number_literal: 2 [2257,2258]",
      "dest": "number_literal: 2 [2263,2264]"
    },
    {
      "src": "uint256: uint256 [2086,2093]",
      "dest": "uint256: uint256 [2092,2099]"
    },
    {
      "src": "override_specifier [2774,2782]",
      "dest": "override_specifier [2780,2788]"
    },
    {
      "src": "(: ( [2683,2684]",
      "dest": "(: ( [2689,2690]"
    },
    {
      "src": "=: = [2531,2532]",
      "dest": "=: = [2537,2538]"
    },
    {
      "src": "expression_statement [2191,2228]",
      "dest": "expression_statement [2197,2234]"
    },
    {
      "src": "primitive_type [2086,2093]",
      "dest": "primitive_type [2092,2099]"
    },
    {
      "src": "string_literal [2366,2397]",
      "dest": "string_literal [2372,2403]"
    },
    {
      "src": "identifier: index [2248,2253]",
      "dest": "identifier: index [2254,2259]"
    },
    {
      "src": "return: return [1786,1792]",
      "dest": "return: return [1792,1798]"
    },
    {
      "src": "=: = [983,984]",
      "dest": "=: = [983,984]"
    },
    {
      "src": "(: ( [3139,3140]",
      "dest": "(: ( [3259,3260]"
    },
    {
      "src": "identifier: IDX_MAP_2 [1212,1221]",
      "dest": "identifier: IDX_MAP_2 [1217,1226]"
    },
    {
      "src": "state_mutability [2769,2773]",
      "dest": "state_mutability [2775,2779]"
    },
    {
      "src": "state_mutability [2110,2114]",
      "dest": "state_mutability [2116,2120]"
    },
    {
      "src": "identifier: expectedIdByIndex [2068,2085]",
      "dest": "identifier: expectedIdByIndex [2074,2091]"
    },
    {
      "src": "return: return [1536,1542]",
      "dest": "return: return [1542,1548]"
    },
    {
      "src": "returns: returns [1601,1608]",
      "dest": "returns: returns [1607,1614]"
    },
    {
      "src": "(: ( [2501,2502]",
      "dest": "(: ( [2507,2508]"
    },
    {
      "src": "expression_statement [2274,2315]",
      "dest": "expression_statement [2280,2321]"
    },
    {
      "src": "}: } [2052,2053]",
      "dest": "}: } [2058,2059]"
    },
    {
      "src": "identifier: orderTreeHeight [3140,3155]",
      "dest": "identifier: orderTreeHeight [3260,3275]"
    },
    {
      "src": "function_body [1526,1551]",
      "dest": "function_body [1532,1557]"
    },
    {
      "src": "return_statement [1916,1933]",
      "dest": "return_statement [1922,1939]"
    },
    {
      "src": "constant: constant [753,761]",
      "dest": "constant: constant [753,761]"
    },
    {
      "src": "\": \" [2449,2450]",
      "dest": "\": \" [2455,2456]"
    },
    {
      "src": "state_variable_declaration [955,991]",
      "dest": "state_variable_declaration [955,993]"
    },
    {
      "src": "(: ( [2757,2758]",
      "dest": "(: ( [2763,2764]"
    },
    {
      "src": "string_literal [2449,2481]",
      "dest": "string_literal [2455,2487]"
    },
    {
      "src": "(: ( [1609,1610]",
      "dest": "(: ( [1615,1616]"
    },
    {
      "src": "primitive_type [2793,2799]",
      "dest": "primitive_type [2799,2805]"
    },
    {
      "src": "else: else [2326,2330]",
      "dest": "else: else [2332,2336]"
    },
    {
      "src": "}: } [3181,3182]",
      "dest": "}: } [3301,3302]"
    },
    {
      "src": "identifier: require [3132,3139]",
      "dest": "identifier: require [3252,3259]"
    },
    {
      "src": "if_statement [1754,2008]",
      "dest": "if_statement [1760,2014]"
    },
    {
      "src": "string_literal [2533,2565]",
      "dest": "string_literal [2539,2571]"
    },
    {
      "src": "identifier: REVERT_MSG [3015,3025]",
      "dest": "identifier: REVERT_MSG [3029,3039]"
    },
    {
      "src": "comment: // This initializer sets roots etc. It must not be applied twice. [2854,2919]",
      "dest": "comment: // This initializer sets roots etc. It must not be applied twice. [2860,2925]"
    },
    {
      "src": "==: == [2171,2173]",
      "dest": "==: == [2177,2179]"
    },
    {
      "src": "{: { [1837,1838]",
      "dest": "{: { [1843,1844]"
    },
    {
      "src": "type_name [739,745]",
      "dest": "type_name [739,745]"
    },
    {
      "src": "comment: // ---------- End of auto-generated code. ---------- [1397,1449]",
      "dest": "comment: // ---------- End of auto-generated code. ---------- [1403,1455]"
    },
    {
      "src": "): ) [3172,3173]",
      "dest": "): ) [3292,3293]"
    },
    {
      "src": "type_name [1195,1202]",
      "dest": "type_name [1200,1207]"
    },
    {
      "src": "type_name [1735,1742]",
      "dest": "type_name [1741,1748]"
    },
    {
      "src": "inheritance_specifier [718,732]",
      "dest": "inheritance_specifier [718,732]"
    },
    {
      "src": "string [2449,2481]",
      "dest": "string [2455,2487]"
    },
    {
      "src": "comment: // Salt for a 8 bit unique spread of all relevant selectors. Pre-caclulated. [786,862]",
      "dest": "comment: // Salt for a 8 bit unique spread of all relevant selectors. Pre-caclulated. [786,862]"
    },
    {
      "src": "identifier: MAGIC_SALT [1636,1646]",
      "dest": "identifier: MAGIC_SALT [1642,1652]"
    },
    {
      "src": "\": \" [2044,2045]",
      "dest": "\": \" [2050,2051]"
    },
    {
      "src": "import: import [662,668]",
      "dest": "import: import [662,668]"
    },
    {
      "src": "(: ( [2085,2086]",
      "dest": "(: ( [2091,2092]"
    },
    {
      "src": "block_statement [2598,2657]",
      "dest": "block_statement [2604,2663]"
    },
    {
      "src": "visibility [746,752]",
      "dest": "visibility [746,752]"
    },
    {
      "src": "}: } [3179,3180]",
      "dest": "}: } [3299,3300]"
    },
    {
      "src": "\": \" [2684,2685]",
      "dest": "\": \" [2690,2691]"
    },
    {
      "src": "return_statement [1981,1998]",
      "dest": "return_statement [1987,2004]"
    },
    {
      "src": ",: , [3109,3110]",
      "dest": ",: , [3229,3230]"
    },
    {
      "src": "revert_statement [2677,2704]",
      "dest": "revert_statement [2683,2710]"
    },
    {
      "src": "internal: internal [1485,1493]",
      "dest": "internal: internal [1491,1499]"
    },
    {
      "src": "number_literal: 2 [1899,1900]",
      "dest": "number_literal: 2 [1905,1906]"
    },
    {
      "src": "(: ( [1822,1823]",
      "dest": "(: ( [1828,1829]"
    },
    {
      "src": "else: else [2577,2581]",
      "dest": "else: else [2583,2587]"
    },
    {
      "src": "{: { [2151,2152]",
      "dest": "{: { [2157,2158]"
    },
    {
      "src": "==: == [2254,2256]",
      "dest": "==: == [2260,2262]"
    },
    {
      "src": "call_argument [3111,3121]",
      "dest": "call_argument [3231,3241]"
    },
    {
      "src": "=: = [770,771]",
      "dest": "=: = [770,771]"
    },
    {
      "src": "solidity_version: 0.6.11 [653,659]",
      "dest": "solidity_version: 0.6.12 [653,659]"
    },
    {
      "src": "identifier: index [2335,2340]",
      "dest": "identifier: index [2341,2346]"
    },
    {
      "src": ",: , [3160,3161]",
      "dest": ",: , [3280,3281]"
    },
    {
      "src": "): ) [2175,2176]",
      "dest": "): ) [2181,2182]"
    },
    {
      "src": "(: ( [1887,1888]",
      "dest": "(: ( [1893,1894]"
    },
    {
      "src": "=: = [2194,2195]",
      "dest": "=: = [2200,2201]"
    },
    {
      "src": "number_literal: 5 [2511,2512]",
      "dest": "number_literal: 5 [2517,2518]"
    },
    {
      "src": "comment: /*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "dest": "comment: /*   Copyright 2019-2022 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]"
    },
    {
      "src": "}: } [2575,2576]",
      "dest": "}: } [2581,2582]"
    },
    {
      "src": "override: override [1592,1600]",
      "dest": "override: override [1598,1606]"
    },
    {
      "src": "return_statement [1536,1545]",
      "dest": "return_statement [1542,1551]"
    },
    {
      "src": "constant: constant [1103,1111]",
      "dest": "constant: constant [1107,1115]"
    },
    {
      "src": "\": \" [2366,2367]",
      "dest": "\": \" [2372,2373]"
    },
    {
      "src": "function: function [1659,1667]",
      "dest": "function: function [1665,1673]"
    },
    {
      "src": "identifier: index [2418,2423]",
      "dest": "identifier: index [2424,2429]"
    },
    {
      "src": "\": \" [2617,2618]",
      "dest": "\": \" [2623,2624]"
    },
    {
      "src": "function: function [1455,1463]",
      "dest": "function: function [1461,1469]"
    },
    {
      "src": "block_statement [2177,2238]",
      "dest": "block_statement [2183,2244]"
    },
    {
      "src": "block_statement [2514,2576]",
      "dest": "block_statement [2520,2582]"
    },
    {
      "src": "override: override [2115,2123]",
      "dest": "override: override [2121,2129]"
    },
    {
      "src": "function_definition [2059,2720]",
      "dest": "function_definition [2065,2726]"
    },
    {
      "src": "): ) [2702,2703]",
      "dest": "): ) [2708,2709]"
    },
    {
      "src": "}: } [1652,1653]",
      "dest": "}: } [1658,1659]"
    },
    {
      "src": "identifier: id [2612,2614]",
      "dest": "identifier: id [2618,2620]"
    },
    {
      "src": "return_type_definition [1508,1525]",
      "dest": "return_type_definition [1514,1531]"
    },
    {
      "src": "string_literal [772,779]",
      "dest": "string_literal [772,779]"
    },
    {
      "src": "string_literal [2617,2646]",
      "dest": "string_literal [2623,2652]"
    },
    {
      "src": "revert_statement [2017,2047]",
      "dest": "revert_statement [2023,2053]"
    },
    {
      "src": "identifier: section [1888,1895]",
      "dest": "identifier: section [1894,1901]"
    },
    {
      "src": "state_mutability [1494,1498]",
      "dest": "state_mutability [1500,1504]"
    },
    {
      "src": "identifier: section [1953,1960]",
      "dest": "identifier: section [1959,1966]"
    }
  ],
  "actions": [
    {
      "action": "update-node",
      "tree": "comment: /*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "label": "/*   Copyright 2019-2022 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */"
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.6.11 [653,659]",
      "label": "0.6.12"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 46110 [985,990]",
      "label": "1527414"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 0x30006100050005012000102002000001200000010001100500200000000020 [1025,1089]",
      "label": "0x2010501100000010050000002511000000220005410030200200200000552010"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 0x120000105000000501200000120502000000200452005000202002030500003 [1124,1189]",
      "label": "0x3000030005000050020012003000010604300000002420501003000010000300"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 0x1020000000003020000502203000300000200000000001000100330010220001 [1224,1290]",
      "label": "0x1003112030002130000200100020000320202001020001001000040200200020"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 0x200230200020300001401200000000100020011200000002020000010000301 [1325,1390]",
      "label": "0x2000000050000012000013100002002002032050020002020002050000201003"
    },
    {
      "action": "insert-node",
      "tree": "pure: pure [1718,1722]",
      "parent": "state_mutability [1718,1722]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [2997,3041]",
      "parent": "function_body [2789,3300]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [3050,3095]",
      "parent": "function_body [2789,3300]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [3104,3146]",
      "parent": "function_body [2789,3300]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [3155,3198]",
      "parent": "function_body [2789,3300]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "call_expression [2997,3040]",
      "parent": "expression_statement [2997,3041]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [3050,3094]",
      "parent": "expression_statement [3050,3095]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [2997,3004]",
      "parent": "call_expression [2997,3040]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [3004,3005]",
      "parent": "call_expression [2997,3040]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [3005,3027]",
      "parent": "call_expression [2997,3040]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [3027,3028]",
      "parent": "call_expression [2997,3040]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [3015,3025]",
      "parent": "call_expression [2997,3040]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [3039,3040]",
      "parent": "call_expression [2997,3040]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [3050,3057]",
      "parent": "call_expression [3050,3094]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [3057,3058]",
      "parent": "call_expression [3050,3094]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [3058,3081]",
      "parent": "call_expression [3050,3094]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [3081,3082]",
      "parent": "call_expression [3050,3094]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [3066,3076]",
      "parent": "call_expression [3050,3094]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [3093,3094]",
      "parent": "call_expression [3050,3094]",
      "at": 5
    },
    {
      "action": "delete-node",
      "tree": "view: view [1712,1716]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [2991,2998]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2998,2999]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [2999,3013]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3013,3014]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [3025,3026]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [2991,3026]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [2991,3027]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [3036,3043]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [3043,3044]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [3044,3064]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3064,3065]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [3076,3077]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [3036,3077]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [3036,3078]"
    }
  ]
}