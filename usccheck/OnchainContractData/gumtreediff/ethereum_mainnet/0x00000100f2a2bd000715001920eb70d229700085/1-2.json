{
  "matches": [
    {
      "src": "): ) [28770,28771]",
      "dest": "): ) [36954,36955]"
    },
    {
      "src": "function_definition [43512,43592]",
      "dest": "function_definition [46194,46290]"
    },
    {
      "src": "primitive_type [990,997]",
      "dest": "primitive_type [31102,31109]"
    },
    {
      "src": "visibility [29484,29492]",
      "dest": "visibility [42457,42465]"
    },
    {
      "src": "expression_statement [10640,10659]",
      "dest": "expression_statement [11687,11744]"
    },
    {
      "src": "state_mutability [23107,23111]",
      "dest": "state_mutability [8703,8707]"
    },
    {
      "src": "call_expression [20478,20523]",
      "dest": "call_expression [24918,24957]"
    },
    {
      "src": "identifier: require [35051,35058]",
      "dest": "identifier: require [43143,43150]"
    },
    {
      "src": "): ) [17070,17071]",
      "dest": "): ) [5168,5169]"
    },
    {
      "src": "function_definition [16765,16869]",
      "dest": "function_definition [4861,4965]"
    },
    {
      "src": "identifier: require [42363,42370]",
      "dest": "identifier: require [30153,30160]"
    },
    {
      "src": "type_name [43549,43555]",
      "dest": "type_name [46240,46246]"
    },
    {
      "src": "bool: bool [40829,40833]",
      "dest": "bool: bool [41873,41877]"
    },
    {
      "src": "primitive_type [12836,12843]",
      "dest": "primitive_type [24319,24326]"
    },
    {
      "src": "parameter [23667,23681]",
      "dest": "parameter [43839,43853]"
    },
    {
      "src": "uint256: uint256 [24005,24012]",
      "dest": "uint256: uint256 [32733,32740]"
    },
    {
      "src": "identifier: _value [23675,23681]",
      "dest": "identifier: amount [43847,43853]"
    },
    {
      "src": "call_argument [5087,5089]",
      "dest": "call_argument [27110,27149]"
    },
    {
      "src": "uint256: uint256 [22532,22539]",
      "dest": "uint256: uint256 [10996,11003]"
    },
    {
      "src": "identifier: c [10571,10572]",
      "dest": "identifier: amount [16777,16783]"
    },
    {
      "src": "type_name [13215,13222]",
      "dest": "type_name [456,463]"
    },
    {
      "src": "internal: internal [31479,31487]",
      "dest": "internal: internal [13654,13662]"
    },
    {
      "src": "): ) [32039,32040]",
      "dest": "): ) [38478,38479]"
    },
    {
      "src": "primitive_type [11736,11743]",
      "dest": "primitive_type [7511,7518]"
    },
    {
      "src": "bool: bool [3309,3313]",
      "dest": "bool: bool [27005,27009]"
    },
    {
      "src": "external: external [6996,7004]",
      "dest": "external: external [6361,6369]"
    },
    {
      "src": "public: public [43618,43624]",
      "dest": "public: public [46316,46322]"
    },
    {
      "src": "function: function [18608,18616]",
      "dest": "function: function [23787,23795]"
    },
    {
      "src": "parameter [24255,24268]",
      "dest": "parameter [41256,41271]"
    },
    {
      "src": "constant: constant [43302,43310]",
      "dest": "constant: constant [45975,45983]"
    },
    {
      "src": "\": \" [35038,35039]",
      "dest": "\": \" [42042,42043]"
    },
    {
      "src": "public: public [12852,12858]",
      "dest": "public: public [22956,22962]"
    },
    {
      "src": "comment: // File: registry/contracts/Registry.sol [1203,1243]",
      "dest": "comment: // File: @openzeppelin/contracts/token/ERC20/IERC20.sol [5251,5306]"
    },
    {
      "src": "identifier: sender [9710,9716]",
      "dest": "identifier: sender [4637,4643]"
    },
    {
      "src": "identifier: initialized [13283,13294]",
      "dest": "identifier: initialized [524,535]"
    },
    {
      "src": "yul_identifier [30754,30762]",
      "dest": "yul_identifier [37831,37839]"
    },
    {
      "src": "visibility [24286,24294]",
      "dest": "visibility [29249,29257]"
    },
    {
      "src": ",: , [40964,40965]",
      "dest": ",: , [34688,34689]"
    },
    {
      "src": "pure: pure [11384,11388]",
      "dest": "pure: pure [9991,9995]"
    },
    {
      "src": "indexed: indexed [39496,39503]",
      "dest": "indexed: indexed [40526,40533]"
    },
    {
      "src": "identifier: pendingOwner [16838,16850]",
      "dest": "identifier: pendingOwner [4934,4946]"
    },
    {
      "src": "): ) [40633,40634]",
      "dest": "): ) [28745,28746]"
    },
    {
      "src": "identifier: _spender [23657,23665]",
      "dest": "identifier: account [45042,45049]"
    },
    {
      "src": "\": \" [25884,25885]",
      "dest": "\": \" [34249,34250]"
    },
    {
      "src": "primitive_type [11218,11225]",
      "dest": "primitive_type [10936,10943]"
    },
    {
      "src": "address: address [39021,39028]",
      "dest": "address: address [29592,29599]"
    },
    {
      "src": "view: view [18534,18538]",
      "dest": "view: view [23993,23997]"
    },
    {
      "src": "address: address [33738,33745]",
      "dest": "address: address [22681,22688]"
    },
    {
      "src": "parameter [43549,43555]",
      "dest": "parameter [46240,46253]"
    },
    {
      "src": ",: , [29417,29418]",
      "dest": ",: , [38121,38122]"
    },
    {
      "src": "type_name [23425,23432]",
      "dest": "type_name [44354,44361]"
    },
    {
      "src": ".: . [8738,8739]",
      "dest": ".: . [8763,8764]"
    },
    {
      "src": "visibility [16990,16996]",
      "dest": "visibility [5088,5094]"
    },
    {
      "src": "identifier: spender [1172,1179]",
      "dest": "identifier: spender [8019,8026]"
    },
    {
      "src": "bool: bool [21340,21344]",
      "dest": "bool: bool [24368,24372]"
    },
    {
      "src": "identifier: name [43521,43525]",
      "dest": "identifier: name [46203,46207]"
    },
    {
      "src": "primitive_type [37669,37673]",
      "dest": "primitive_type [16970,16974]"
    },
    {
      "src": "=: = [25905,25906]",
      "dest": "=: = [34270,34271]"
    },
    {
      "src": "\": \" [41362,41363]",
      "dest": "\": \" [34816,34817]"
    },
    {
      "src": "call_argument [17702,17705]",
      "dest": "call_argument [32058,32061]"
    },
    {
      "src": "(: ( [543,544]",
      "dest": "(: ( [7475,7476]"
    },
    {
      "src": "string [42622,42653]",
      "dest": "string [28598,28631]"
    },
    {
      "src": "yul_identifier [29279,29285]",
      "dest": "yul_identifier [38235,38241]"
    },
    {
      "src": "uint256: uint256 [11218,11225]",
      "dest": "uint256: uint256 [10936,10943]"
    },
    {
      "src": "uint256: uint256 [654,661]",
      "dest": "uint256: uint256 [7785,7792]"
    },
    {
      "src": "(: ( [34120,34121]",
      "dest": "(: ( [43069,43070]"
    },
    {
      "src": "primitive_type [39398,39405]",
      "dest": "primitive_type [28666,28673]"
    },
    {
      "src": "primitive_type [11184,11191]",
      "dest": "primitive_type [10874,10881]"
    },
    {
      "src": "expression_statement [10220,10246]",
      "dest": "expression_statement [28567,28633]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol [676,738]",
      "dest": "comment: // File: contracts/true-currencies-new/ClaimableOwnable.sol [3405,3464]"
    },
    {
      "src": "type_name [13469,13476]",
      "dest": "type_name [690,697]"
    },
    {
      "src": "return: return [18686,18692]",
      "dest": "return: return [23860,23866]"
    },
    {
      "src": "call_argument [16197,16207]",
      "dest": "call_argument [4264,4274]"
    },
    {
      "src": "yul_variable_declaration [31031,31067]",
      "dest": "yul_variable_declaration [36430,36466]"
    },
    {
      "src": "type_name [13828,13856]",
      "dest": "type_name [1407,1434]"
    },
    {
      "src": "{: { [13208,13209]",
      "dest": "{: { [449,450]"
    },
    {
      "src": "return_statement [11025,11038]",
      "dest": "return_statement [13138,13147]"
    },
    {
      "src": "identifier: balance [17645,17652]",
      "dest": "identifier: balance [31992,31999]"
    },
    {
      "src": "event: event [24026,24031]",
      "dest": "event: event [40746,40751]"
    },
    {
      "src": "(: ( [28687,28688]",
      "dest": "(: ( [36925,36926]"
    },
    {
      "src": "true [21434,21438]",
      "dest": "true [24975,24979]"
    },
    {
      "src": "): ) [25218,25219]",
      "dest": "): ) [41390,41391]"
    },
    {
      "src": "identifier: _spender [23415,23423]",
      "dest": "identifier: recipient [25507,25516]"
    },
    {
      "src": "(: ( [43349,43350]",
      "dest": "(: ( [46022,46023]"
    },
    {
      "src": "type_name [12382,12389]",
      "dest": "type_name [19693,19700]"
    },
    {
      "src": "call_expression [4978,5032]",
      "dest": "call_expression [29440,29508]"
    },
    {
      "src": "parameter [18794,18814]",
      "dest": "parameter [38404,38418]"
    },
    {
      "src": "yul_function_call [31710,31729]",
      "dest": "yul_function_call [36824,36843]"
    },
    {
      "src": "yul_evm_builtin [29319,29324]",
      "dest": "yul_evm_builtin [37930,37935]"
    },
    {
      "src": "type_cast_expression [38760,38770]",
      "dest": "type_cast_expression [27871,27881]"
    },
    {
      "src": "identifier: transferOwnership [16774,16791]",
      "dest": "identifier: transferOwnership [4870,4887]"
    },
    {
      "src": ",: , [35076,35077]",
      "dest": ",: , [43176,43177]"
    },
    {
      "src": "parameter [11364,11373]",
      "dest": "parameter [9971,9980]"
    },
    {
      "src": "view: view [433,437]",
      "dest": "view: view [6370,6374]"
    },
    {
      "src": "identifier: oldValue [22540,22548]",
      "dest": "identifier: c [11004,11005]"
    },
    {
      "src": "}: } [32610,32611]",
      "dest": "}: } [38780,38781]"
    },
    {
      "src": "primitive_type [43296,43301]",
      "dest": "primitive_type [45969,45974]"
    },
    {
      "src": "contract: contract [15813,15821]",
      "dest": "contract: contract [3716,3724]"
    },
    {
      "src": "{: { [28920,28921]",
      "dest": "{: { [37145,37146]"
    },
    {
      "src": "primitive_type [13914,13921]",
      "dest": "primitive_type [1141,1148]"
    },
    {
      "src": "return: return [11255,11261]",
      "dest": "return: return [11026,11032]"
    },
    {
      "src": "comment: /**     @dev refund 39,000 gas     @dev costs slightly more than 16,100 gas     */ [28797,28882]",
      "dest": "comment: /**      * @dev use smart contract self-destruct to refund gas      * will refund 39,000 * amount gas      */ [36981,37093]"
    },
    {
      "src": "{: { [28940,28941]",
      "dest": "{: { [37165,37166]"
    },
    {
      "src": ",: , [17056,17057]",
      "dest": ",: , [5154,5155]"
    },
    {
      "src": "(: ( [31196,31197]",
      "dest": "(: ( [36683,36684]"
    },
    {
      "src": "binary_expression [10647,10652]",
      "dest": "binary_expression [11695,11700]"
    },
    {
      "src": "string_literal [5087,5089]",
      "dest": "string_literal [27110,27149]"
    },
    {
      "src": "identifier: value [24065,24070]",
      "dest": "identifier: value [40785,40790]"
    },
    {
      "src": "primitive_type [18760,18767]",
      "dest": "primitive_type [33454,33461]"
    },
    {
      "src": "yul_evm_builtin [28969,28974]",
      "dest": "yul_evm_builtin [37234,37239]"
    },
    {
      "src": "}: } [32057,32058]",
      "dest": "}: } [38496,38497]"
    },
    {
      "src": "primitive_type [10529,10536]",
      "dest": "primitive_type [11325,11332]"
    },
    {
      "src": "identifier: owner [17051,17056]",
      "dest": "identifier: owner [5149,5154]"
    },
    {
      "src": "identifier: b [10537,10538]",
      "dest": "identifier: b [11333,11334]"
    },
    {
      "src": "modifier_invocation [17616,17625]",
      "dest": "modifier_invocation [31963,31972]"
    },
    {
      "src": "indexed: indexed [24045,24052]",
      "dest": "indexed: indexed [40765,40772]"
    },
    {
      "src": "primitive_type [634,641]",
      "dest": "primitive_type [7765,7772]"
    },
    {
      "src": "primitive_type [25808,25815]",
      "dest": "primitive_type [34148,34155]"
    },
    {
      "src": "return_statement [43658,43672]",
      "dest": "return_statement [46372,46386]"
    },
    {
      "src": "): ) [31728,31729]",
      "dest": "): ) [36842,36843]"
    },
    {
      "src": "yul_function_call [29354,29385]",
      "dest": "yul_function_call [38014,38047]"
    },
    {
      "src": "public: public [16810,16816]",
      "dest": "public: public [4906,4912]"
    },
    {
      "src": "type_name [12005,12012]",
      "dest": "type_name [17903,17910]"
    },
    {
      "src": "primitive_type [15933,15940]",
      "dest": "primitive_type [4004,4011]"
    },
    {
      "src": "primitive_type [23233,23240]",
      "dest": "primitive_type [42975,42982]"
    },
    {
      "src": "contract_body [25025,25988]",
      "dest": "contract_body [32499,34995]"
    },
    {
      "src": "address: address [17401,17408]",
      "dest": "address: address [31654,31661]"
    },
    {
      "src": ",: , [21390,21391]",
      "dest": ",: , [33506,33507]"
    },
    {
      "src": ",: , [29369,29370]",
      "dest": ",: , [38031,38032]"
    },
    {
      "src": "parameter [513,520]",
      "dest": "parameter [5711,5718]"
    },
    {
      "src": "boolean_literal [33885,33889]",
      "dest": "boolean_literal [26397,26401]"
    },
    {
      "src": "identifier: msg [39921,39924]",
      "dest": "identifier: balance [19511,19518]"
    },
    {
      "src": "state_variable_declaration [11647,11693]",
      "dest": "state_variable_declaration [1059,1097]"
    },
    {
      "src": "address: address [23233,23240]",
      "dest": "address: address [42975,42982]"
    },
    {
      "src": "(: ( [40716,40717]",
      "dest": "(: ( [28832,28833]"
    },
    {
      "src": "type_name [24005,24012]",
      "dest": "type_name [32733,32740]"
    },
    {
      "src": "string_literal [25257,25281]",
      "dest": "string_literal [41441,41488]"
    },
    {
      "src": "member_expression [17655,17670]",
      "dest": "member_expression [32002,32017]"
    },
    {
      "src": "function_definition [40354,40756]",
      "dest": "function_definition [28491,28869]"
    },
    {
      "src": "bool: bool [587,591]",
      "dest": "bool: bool [7545,7549]"
    },
    {
      "src": "true [22392,22396]",
      "dest": "true [24445,24449]"
    },
    {
      "src": "external: external [17358,17366]",
      "dest": "external: external [31611,31619]"
    },
    {
      "src": "type_name [20429,20436]",
      "dest": "type_name [37120,37127]"
    },
    {
      "src": "internal: internal [10540,10548]",
      "dest": "internal: internal [11336,11344]"
    },
    {
      "src": "): ) [43378,43379]",
      "dest": "): ) [46060,46061]"
    },
    {
      "src": "visibility [31947,31953]",
      "dest": "visibility [38383,38389]"
    },
    {
      "src": "call_expression [39913,39953]",
      "dest": "call_expression [19489,19570]"
    },
    {
      "src": "identifier: a [11181,11182]",
      "dest": "identifier: a [10871,10872]"
    },
    {
      "src": "(: ( [11217,11218]",
      "dest": "(: ( [10935,10936]"
    },
    {
      "src": "identifier: ERC20 [17581,17586]",
      "dest": "identifier: ERC20 [31418,31423]"
    },
    {
      "src": "identifier: b [11192,11193]",
      "dest": "identifier: b [10882,10883]"
    },
    {
      "src": "(: ( [18512,18513]",
      "dest": "(: ( [23968,23969]"
    },
    {
      "src": "bool: bool [13424,13428]",
      "dest": "bool: bool [645,649]"
    },
    {
      "src": "\": \" [42796,42797]",
      "dest": "\": \" [29342,29343]"
    },
    {
      "src": "primitive_type [3550,3557]",
      "dest": "primitive_type [27725,27732]"
    },
    {
      "src": "identifier: _value [39410,39416]",
      "dest": "identifier: account [28678,28685]"
    },
    {
      "src": "function: function [17559,17567]",
      "dest": "function: function [31905,31913]"
    },
    {
      "src": "uint256: uint256 [3900,3907]",
      "dest": "uint256: uint256 [13021,13028]"
    },
    {
      "src": "type_name [3309,3313]",
      "dest": "type_name [27005,27009]"
    },
    {
      "src": "function_definition [403,456]",
      "dest": "function_definition [6310,6393]"
    },
    {
      "src": "\": \" [34224,34225]",
      "dest": "\": \" [44068,44069]"
    },
    {
      "src": "yul_block [31117,31322]",
      "dest": "yul_block [36649,36711]"
    },
    {
      "src": "identifier: BurnableTokenWithBounds [24977,25000]",
      "dest": "identifier: BurnableTokenWithBounds [32457,32480]"
    },
    {
      "src": "expression_statement [41229,41291]",
      "dest": "expression_statement [34829,34907]"
    },
    {
      "src": "identifier: location [31106,31114]",
      "dest": "identifier: location [37815,37823]"
    },
    {
      "src": "pure: pure [11204,11208]",
      "dest": "pure: pure [10922,10926]"
    },
    {
      "src": "}: } [671,672]",
      "dest": "}: } [8045,8046]"
    },
    {
      "src": "returns: returns [18430,18437]",
      "dest": "returns: returns [10460,10467]"
    },
    {
      "src": "parameter [20461,20465]",
      "dest": "parameter [24901,24905]"
    },
    {
      "src": "primitive_type [2163,2170]",
      "dest": "primitive_type [1284,1291]"
    },
    {
      "src": "(: ( [11172,11173]",
      "dest": "(: ( [10862,10863]"
    },
    {
      "src": ",: , [25319,25320]",
      "dest": ",: , [41513,41514]"
    },
    {
      "src": "address: address [11863,11870]",
      "dest": "address: address [18306,18313]"
    },
    {
      "src": "function: function [43422,43430]",
      "dest": "function: function [46104,46112]"
    },
    {
      "src": "uint256: uint256 [13391,13398]",
      "dest": "uint256: uint256 [616,623]"
    },
    {
      "src": "if: if [10581,10583]",
      "dest": "if: if [11600,11602]"
    },
    {
      "src": "gas: gas [29359,29362]",
      "dest": "gas: gas [38019,38022]"
    },
    {
      "src": "indexed: indexed [1164,1171]",
      "dest": "indexed: indexed [8011,8018]"
    },
    {
      "src": "\": \" [41276,41277]",
      "dest": "\": \" [34856,34857]"
    },
    {
      "src": "type_name [1033,1037]",
      "dest": "type_name [7130,7134]"
    },
    {
      "src": "public: public [13223,13229]",
      "dest": "public: public [464,470]"
    },
    {
      "src": "number_literal: 0 [10590,10591]",
      "dest": "number_literal: 0 [11609,11610]"
    },
    {
      "src": "identifier: WipeBlacklistedAccount [39465,39487]",
      "dest": "identifier: Blacklisted [40506,40517]"
    },
    {
      "src": "): ) [25084,25085]",
      "dest": "): ) [33030,33031]"
    },
    {
      "src": "string_literal [41629,41642]",
      "dest": "string_literal [27799,27838]"
    },
    {
      "src": "): ) [10831,10832]",
      "dest": "): ) [12969,12970]"
    },
    {
      "src": "parameter [24133,24147]",
      "dest": "parameter [36056,36070]"
    },
    {
      "src": "identifier: DECIMALS [43398,43406]",
      "dest": "identifier: DECIMALS [46080,46088]"
    },
    {
      "src": ",: , [29372,29373]",
      "dest": ",: , [38034,38035]"
    },
    {
      "src": "address: address [17128,17135]",
      "dest": "address: address [5226,5233]"
    },
    {
      "src": "returns: returns [21331,21338]",
      "dest": "returns: returns [24359,24366]"
    },
    {
      "src": "call_expression [10640,10658]",
      "dest": "call_expression [11687,11743]"
    },
    {
      "src": "comment: /**       *@dev send all eth balance in the contract to another address     */ [17237,17317]",
      "dest": "comment: /**      * @dev send all eth balance in the contract to another address      * @param _to address to send eth balance to      */ [31431,31562]"
    },
    {
      "src": "primitive_type [22599,22606]",
      "dest": "primitive_type [11659,11666]"
    },
    {
      "src": "identifier: newOwner [9150,9158]",
      "dest": "identifier: sender [27777,27783]"
    },
    {
      "src": "(: ( [21339,21340]",
      "dest": "(: ( [24367,24368]"
    },
    {
      "src": "boolean_literal [13457,13462]",
      "dest": "boolean_literal [678,683]"
    },
    {
      "src": "expression_statement [42735,42799]",
      "dest": "expression_statement [29277,29345]"
    },
    {
      "src": "address: address [11721,11728]",
      "dest": "address: address [15189,15196]"
    },
    {
      "src": "event_paramater [634,652]",
      "dest": "event_paramater [7765,7783]"
    },
    {
      "src": "comment: /**       A buffer of \"Sheep\" runs from 0xffff...fffe down       They suicide when you call them, if you are their parent     */ [26326,26457]",
      "dest": "comment: /**      * @dev Refund 15,000 gas per slot.      * @param amount number of slots to free      */ [35930,36029]"
    },
    {
      "src": "parameter [11721,11734]",
      "dest": "parameter [15189,15204]"
    },
    {
      "src": "): ) [16214,16215]",
      "dest": "): ) [4281,4282]"
    },
    {
      "src": "identifier: ProxyStorage [15834,15846]",
      "dest": "identifier: ProxyStorage [3745,3757]"
    },
    {
      "src": "): ) [591,592]",
      "dest": "): ) [7549,7550]"
    },
    {
      "src": "call_argument [17671,17675]",
      "dest": "call_argument [32026,32030]"
    },
    {
      "src": "bool: bool [1033,1037]",
      "dest": "bool: bool [7130,7134]"
    },
    {
      "src": "(: ( [29278,29279]",
      "dest": "(: ( [38234,38235]"
    },
    {
      "src": "primitive_type [19134,19141]",
      "dest": "primitive_type [34673,34680]"
    },
    {
      "src": "event: event [39459,39464]",
      "dest": "event: event [40500,40505]"
    },
    {
      "src": "call: call [29354,29358]",
      "dest": "call: call [38014,38018]"
    },
    {
      "src": "): ) [28769,28770]",
      "dest": "): ) [36953,36954]"
    },
    {
      "src": "): ) [9689,9690]",
      "dest": "): ) [4612,4613]"
    },
    {
      "src": "primitive_type [13424,13428]",
      "dest": "primitive_type [645,649]"
    },
    {
      "src": ":=: := [31190,31192]",
      "dest": ":=: := [36677,36679]"
    },
    {
      "src": "primitive_type [12382,12389]",
      "dest": "primitive_type [19693,19700]"
    },
    {
      "src": "internal: internal [23098,23106]",
      "dest": "internal: internal [8694,8702]"
    },
    {
      "src": "): ) [16206,16207]",
      "dest": "): ) [4273,4274]"
    },
    {
      "src": ",: , [28655,28656]",
      "dest": ",: , [36642,36643]"
    },
    {
      "src": "return: return [18568,18574]",
      "dest": "return: return [24036,24042]"
    },
    {
      "src": "type_cast_expression [16197,16207]",
      "dest": "type_cast_expression [4264,4274]"
    },
    {
      "src": "return_type_definition [43364,43379]",
      "dest": "return_type_definition [46046,46061]"
    },
    {
      "src": "primitive_type [888,895]",
      "dest": "primitive_type [24539,24546]"
    },
    {
      "src": "(: ( [18438,18439]",
      "dest": "(: ( [10468,10469]"
    },
    {
      "src": "internal: internal [42553,42561]",
      "dest": "internal: internal [28539,28547]"
    },
    {
      "src": "internal: internal [25149,25157]",
      "dest": "internal: internal [12283,12291]"
    },
    {
      "src": "): ) [11247,11248]",
      "dest": "): ) [10984,10985]"
    },
    {
      "src": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [16877,16958]",
      "dest": "comment: /**      * @dev Allows the current owner to set the pendingOwner address.      * @param newOwner The address to transfer ownership to.      */ [4710,4855]"
    },
    {
      "src": "event_paramater [24037,24055]",
      "dest": "event_paramater [40757,40775]"
    },
    {
      "src": "string: string [43549,43555]",
      "dest": "string: string [46240,46246]"
    },
    {
      "src": "visibility [18979,18987]",
      "dest": "visibility [18369,18377]"
    },
    {
      "src": "identifier: _increaseApprovalAllArgs [21357,21381]",
      "dest": "identifier: _burn [33490,33495]"
    },
    {
      "src": "function_body [26497,28789]",
      "dest": "function_body [36081,36973]"
    },
    {
      "src": "}: } [11272,11273]",
      "dest": "}: } [11041,11042]"
    },
    {
      "src": "visibility [35520,35528]",
      "dest": "visibility [14297,14305]"
    },
    {
      "src": "(: ( [25793,25794]",
      "dest": "(: ( [34133,34134]"
    },
    {
      "src": "call_argument [35552,35555]",
      "dest": "call_argument [45106,45113]"
    },
    {
      "src": "visibility [13524,13530]",
      "dest": "visibility [745,751]"
    },
    {
      "src": "type_name [9923,9930]",
      "dest": "type_name [7476,7483]"
    },
    {
      "src": "call_expression [25230,25282]",
      "dest": "call_expression [41402,41489]"
    },
    {
      "src": "function_body [25158,25336]",
      "dest": "function_body [41308,41567]"
    },
    {
      "src": "returns: returns [5998,6005]",
      "dest": "returns: returns [13668,13675]"
    },
    {
      "src": "function_body [22980,23035]",
      "dest": "function_body [24618,24671]"
    },
    {
      "src": "(: ( [16196,16197]",
      "dest": "(: ( [4263,4264]"
    },
    {
      "src": "event_paramater [25070,25084]",
      "dest": "event_paramater [33016,33030]"
    },
    {
      "src": "return_type_definition [504,521]",
      "dest": "return_type_definition [5702,5719]"
    },
    {
      "src": "expression_statement [38745,38801]",
      "dest": "expression_statement [27850,27922]"
    },
    {
      "src": "): ) [22978,22979]",
      "dest": "): ) [24616,24617]"
    },
    {
      "src": ",: , [39043,39044]",
      "dest": ",: , [29602,29603]"
    },
    {
      "src": "emit: emit [25947,25951]",
      "dest": "emit: emit [34312,34316]"
    },
    {
      "src": "identifier: SafeMath [10422,10430]",
      "dest": "identifier: SafeMath [9692,9700]"
    },
    {
      "src": "primitive_type [25116,25123]",
      "dest": "primitive_type [544,551]"
    },
    {
      "src": "bytes32: bytes32 [13950,13957]",
      "dest": "bytes32: bytes32 [1177,1184]"
    },
    {
      "src": "identifier: onlyOwner [17367,17376]",
      "dest": "identifier: onlyOwner [31620,31629]"
    },
    {
      "src": "identifier: CENT [24095,24099]",
      "dest": "identifier: CENT [40342,40346]"
    },
    {
      "src": "yul_evm_builtin [30967,30972]",
      "dest": "yul_evm_builtin [36194,36199]"
    },
    {
      "src": "type_name [11667,11674]",
      "dest": "type_name [1078,1085]"
    },
    {
      "src": ":=: := [28966,28968]",
      "dest": ":=: := [37231,37233]"
    },
    {
      "src": "uint256: uint256 [13848,13855]",
      "dest": "uint256: uint256 [1426,1433]"
    },
    {
      "src": "expression_statement [42363,42425]",
      "dest": "expression_statement [30153,30222]"
    },
    {
      "src": "(: ( [43372,43373]",
      "dest": "(: ( [46054,46055]"
    },
    {
      "src": "): ) [25820,25821]",
      "dest": "): ) [34160,34161]"
    },
    {
      "src": "return: return [10602,10608]",
      "dest": "return: return [11627,11633]"
    },
    {
      "src": "type_name [12323,12330]",
      "dest": "type_name [1366,1373]"
    },
    {
      "src": "true [20541,20545]",
      "dest": "true [25770,25774]"
    },
    {
      "src": "identifier: oldValue [40625,40633]",
      "dest": "identifier: amount [28739,28745]"
    },
    {
      "src": "}: } [17430,17431]",
      "dest": "}: } [31683,31684]"
    },
    {
      "src": "call_argument [41902,41915]",
      "dest": "call_argument [27883,27920]"
    },
    {
      "src": "*: * [10630,10631]",
      "dest": "*: * [11673,11674]"
    },
    {
      "src": "identifier: _who [22926,22930]",
      "dest": "identifier: account [42433,42440]"
    },
    {
      "src": "inheritance_specifier [32744,32767]",
      "dest": "inheritance_specifier [40283,40306]"
    },
    {
      "src": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [28688,28754]",
      "dest": "yul_hex_number: 0xfffff [36926,36933]"
    },
    {
      "src": "state_mutability [433,437]",
      "dest": "state_mutability [6370,6374]"
    },
    {
      "src": "parameter [22918,22930]",
      "dest": "parameter [42425,42440]"
    },
    {
      "src": "parameter [10518,10527]",
      "dest": "parameter [11314,11323]"
    },
    {
      "src": "state_variable_declaration [43296,43324]",
      "dest": "state_variable_declaration [45969,45997]"
    },
    {
      "src": "address: address [13242,13249]",
      "dest": "address: address [483,490]"
    },
    {
      "src": "type_name [13941,13990]",
      "dest": "type_name [1169,1216]"
    },
    {
      "src": "identifier: Ownable [8703,8710]",
      "dest": "identifier: _msgSender [8681,8691]"
    },
    {
      "src": "comment: /**   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).   */ [11049,11156]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [10555,10844]"
    },
    {
      "src": "primitive_type [24057,24064]",
      "dest": "primitive_type [40777,40784]"
    },
    {
      "src": "function_body [17014,17146]",
      "dest": "function_body [5112,5244]"
    },
    {
      "src": "pragma_directive [0,24]",
      "dest": "pragma_directive [5310,5333]"
    },
    {
      "src": ":=: := [31044,31046]",
      "dest": ":=: := [36443,36445]"
    },
    {
      "src": "parameter [12020,12034]",
      "dest": "parameter [26235,26253]"
    },
    {
      "src": "): ) [15963,15964]",
      "dest": "): ) [4028,4029]"
    },
    {
      "src": "identifier: require [42735,42742]",
      "dest": "identifier: require [29277,29284]"
    },
    {
      "src": "primitive_type [6337,6344]",
      "dest": "primitive_type [12306,12313]"
    },
    {
      "src": "parameter [40041,40055]",
      "dest": "parameter [29233,29247]"
    },
    {
      "src": "identifier: remainingGasRefundPool [31922,31944]",
      "dest": "identifier: remainingGasRefundPool [38358,38380]"
    },
    {
      "src": "returns: returns [5491,5498]",
      "dest": "returns: returns [26270,26277]"
    },
    {
      "src": "return_statement [33400,33412]",
      "dest": "return_statement [27162,27174]"
    },
    {
      "src": "=: = [16148,16149]",
      "dest": "=: = [4215,4216]"
    },
    {
      "src": "number_literal: 0 [39406,39407]",
      "dest": "number_literal: 0 [28674,28675]"
    },
    {
      "src": ".: . [16153,16154]",
      "dest": ".: . [4220,4221]"
    },
    {
      "src": "primitive_type [23425,23432]",
      "dest": "primitive_type [44354,44361]"
    },
    {
      "src": "identifier: spender [1068,1075]",
      "dest": "identifier: spender [24562,24569]"
    },
    {
      "src": "type_name [3900,3907]",
      "dest": "type_name [13021,13028]"
    },
    {
      "src": "boolean_literal [20541,20545]",
      "dest": "boolean_literal [25770,25774]"
    },
    {
      "src": "string_literal [42784,42797]",
      "dest": "string_literal [29308,29343]"
    },
    {
      "src": "comment: //Change the minimum and maximum amount that can be burned at once. Burning [25344,25419]",
      "dest": "comment: /**      * @dev Emitted when `value` tokens are burnt from one account (`burner`)      * @param burner address which burned tokens      * @param value amount of tokens burned      */ [32506,32692]"
    },
    {
      "src": "yul_path [29409,29417]",
      "dest": "yul_path [38113,38121]"
    },
    {
      "src": "uint256: uint256 [35544,35551]",
      "dest": "uint256: uint256 [45098,45105]"
    },
    {
      "src": "internal: internal [11375,11383]",
      "dest": "internal: internal [9982,9990]"
    },
    {
      "src": "call_argument [20494,20502]",
      "dest": "call_argument [24941,24948]"
    },
    {
      "src": "{: { [10593,10594]",
      "dest": "{: { [11612,11613]"
    },
    {
      "src": "primitive_type [1477,1484]",
      "dest": "primitive_type [1593,1600]"
    },
    {
      "src": "comment: /**  * @title Claimable  * @dev Extension for the Ownable contract, where the ownership needs to be claimed.  * This allows the new owner to accept the transfer.  */ [9328,9497]",
      "dest": "comment: // File: @openzeppelin/contracts/math/SafeMath.sol [9026,9076]"
    },
    {
      "src": "identifier: _value [34998,35004]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [41952,41976]"
    },
    {
      "src": "string [5087,5089]",
      "dest": "string [27110,27149]"
    },
    {
      "src": "primitive_type [10824,10831]",
      "dest": "primitive_type [12962,12969]"
    },
    {
      "src": "parameter [4723,4730]",
      "dest": "parameter [14320,14327]"
    },
    {
      "src": "primitive_type [22532,22539]",
      "dest": "primitive_type [10996,11003]"
    },
    {
      "src": "address: address [41805,41812]",
      "dest": "address: address [1803,1810]"
    },
    {
      "src": "expression_statement [11234,11249]",
      "dest": "expression_statement [10956,10986]"
    },
    {
      "src": "identifier: require [39913,39920]",
      "dest": "identifier: require [19489,19496]"
    },
    {
      "src": "): ) [2446,2447]",
      "dest": "): ) [4681,4682]"
    },
    {
      "src": "identifier: _value [11886,11892]",
      "dest": "identifier: amount [7104,7110]"
    },
    {
      "src": "number_literal: 16 [24108,24110]",
      "dest": "number_literal: 16 [40353,40355]"
    },
    {
      "src": "binary_expression [11420,11425]",
      "dest": "binary_expression [10037,10042]"
    },
    {
      "src": "identifier: SetBurnBounds [25952,25965]",
      "dest": "identifier: SetBurnBounds [34317,34330]"
    },
    {
      "src": "call_argument [34140,34162]",
      "dest": "call_argument [43094,43131]"
    },
    {
      "src": "return_type_definition [6328,6345]",
      "dest": "return_type_definition [12297,12314]"
    },
    {
      "src": "is: is [17218,17220]",
      "dest": "is: is [31415,31417]"
    },
    {
      "src": "(: ( [28478,28479]",
      "dest": "(: ( [36494,36495]"
    },
    {
      "src": "string [25257,25281]",
      "dest": "string [41441,41488]"
    },
    {
      "src": "call_argument [37514,37517]",
      "dest": "call_argument [45153,45160]"
    },
    {
      "src": "yul_function_call [29319,29334]",
      "dest": "yul_function_call [37930,37945]"
    },
    {
      "src": "address: address [1060,1067]",
      "dest": "address: address [24554,24561]"
    },
    {
      "src": "): ) [948,949]",
      "dest": "): ) [5562,5563]"
    },
    {
      "src": "address: address [16197,16204]",
      "dest": "address: address [4264,4271]"
    },
    {
      "src": "identifier: _from [24263,24268]",
      "dest": "identifier: account [41264,41271]"
    },
    {
      "src": "visibility [42710,42718]",
      "dest": "visibility [30125,30133]"
    },
    {
      "src": ":=: := [30741,30743]",
      "dest": ":=: := [37824,37826]"
    },
    {
      "src": "address: address [634,641]",
      "dest": "address: address [7765,7772]"
    },
    {
      "src": "function: function [16765,16773]",
      "dest": "function: function [4861,4869]"
    },
    {
      "src": "comment: /**  * @title Basic token  * @dev Basic version of StandardToken, with no allowances.  */ [18075,18167]",
      "dest": "comment: /**  * @title TrueCurrency  * @dev TrueCurrency is an ERC20 with blacklist & redemption addresses  *  * TrueCurrency is a compliant stablecoin with blacklist and redemption  * addresses. Only the owner can blacklist accounts. Redemption addresses  * are assigned automatically to the first 0x100000 addresses. Sending  * tokens to the redemption address will trigger a burn operation. Only  * the owner can mint or blacklist accounts.  *  * This contract is owned by the TokenController, which manages token  * minting & admin functionality. See TokenController.sol  *  * See also: BurnableTokenWithBounds.sol  *  * ~~~~ Features ~~~~  *  * Redemption Addresses  * - The first 0x100000 addresses are redemption addresses  * - Tokens sent to redemption addresses are burned  * - Redemptions are tracked off-chain  * - Cannot mint tokens to redemption addresses  *  * Blacklist  * - Owner can blacklist accounts in accordance with local regulatory bodies  * - Only a court order will merit a blacklist; blacklisting is extremely rare  *  * Burn Bounds & CanBurn  * - Owner can set min & max burn amounts  * - Only accounts flagged in canBurn are allowed to burn tokens  * - canBurn prevents tokens from being sent to the incorrect address  *  * Reclaimer Token  * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner  */ [38871,40247]"
    },
    {
      "src": "uint256: uint256 [4302,4309]",
      "dest": "uint256: uint256 [28523,28530]"
    },
    {
      "src": "identifier: _value [19156,19162]",
      "dest": "identifier: amount [34698,34704]"
    },
    {
      "src": "\": \" [16375,16376]",
      "dest": "\": \" [4444,4445]"
    },
    {
      "src": "call_argument [17957,17962]",
      "dest": "call_argument [44098,44103]"
    },
    {
      "src": "parameter [21340,21344]",
      "dest": "parameter [24368,24372]"
    },
    {
      "src": "(: ( [33330,33331]",
      "dest": "(: ( [15228,15229]"
    },
    {
      "src": "\": \" [42652,42653]",
      "dest": "\": \" [28630,28631]"
    },
    {
      "src": "primitive_type [13549,13556]",
      "dest": "primitive_type [770,777]"
    },
    {
      "src": "primitive_type [42223,42230]",
      "dest": "primitive_type [1628,1635]"
    },
    {
      "src": "function_body [12869,12932]",
      "dest": "function_body [24374,24457]"
    },
    {
      "src": "yul_function_call [31193,31209]",
      "dest": "yul_function_call [36680,36696]"
    },
    {
      "src": "): ) [520,521]",
      "dest": "): ) [5718,5719]"
    },
    {
      "src": "struct_declaration [1397,1530]",
      "dest": "struct_declaration [1529,1614]"
    },
    {
      "src": "identifier: _value [4992,4998]",
      "dest": "identifier: amount [29463,29469]"
    },
    {
      "src": "uint256: uint256 [13516,13523]",
      "dest": "uint256: uint256 [737,744]"
    },
    {
      "src": "(: ( [34181,34182]",
      "dest": "(: ( [43983,43984]"
    },
    {
      "src": "event_paramater [39513,39528]",
      "dest": "event_paramater [40543,40561]"
    },
    {
      "src": "assembly_statement [27995,28782]",
      "dest": "assembly_statement [36115,36966]"
    },
    {
      "src": "): ) [43616,43617]",
      "dest": "): ) [46314,46315]"
    },
    {
      "src": "identifier: a [10585,10586]",
      "dest": "identifier: a [11604,11605]"
    },
    {
      "src": "): ) [10591,10592]",
      "dest": "): ) [11610,11611]"
    },
    {
      "src": "true: true [20541,20545]",
      "dest": "true: true [25770,25774]"
    },
    {
      "src": "call_argument [39045,39051]",
      "dest": "call_argument [29604,29610]"
    },
    {
      "src": "function: function [40354,40362]",
      "dest": "function: function [28491,28499]"
    },
    {
      "src": "identifier: _min [25907,25911]",
      "dest": "identifier: _min [34272,34276]"
    },
    {
      "src": "parameter [11173,11182]",
      "dest": "parameter [10863,10872]"
    },
    {
      "src": "return_type_definition [1099,1113]",
      "dest": "return_type_definition [6011,6025]"
    },
    {
      "src": "type_name [37669,37673]",
      "dest": "type_name [16970,16974]"
    },
    {
      "src": "uint256: uint256 [11736,11743]",
      "dest": "uint256: uint256 [7511,7518]"
    },
    {
      "src": "identifier: blacklisted [40834,40845]",
      "dest": "identifier: _isBlacklisted [41878,41892]"
    },
    {
      "src": "visibility [42113,42121]",
      "dest": "visibility [31130,31138]"
    },
    {
      "src": "(: ( [10823,10824]",
      "dest": "(: ( [12961,12962]"
    },
    {
      "src": "internal: internal [28911,28919]",
      "dest": "internal: internal [37136,37144]"
    },
    {
      "src": "yul_path [28561,28569]",
      "dest": "yul_path [37722,37730]"
    },
    {
      "src": "assignment_expression [40593,40634]",
      "dest": "assignment_expression [28707,28746]"
    },
    {
      "src": "(: ( [35058,35059]",
      "dest": "(: ( [43150,43151]"
    },
    {
      "src": "indexed: indexed [620,627]",
      "dest": "indexed: indexed [7751,7758]"
    },
    {
      "src": "primitive_type [12796,12803]",
      "dest": "primitive_type [23969,23976]"
    },
    {
      "src": "yul_variable_declaration [29306,29334]",
      "dest": "yul_variable_declaration [37917,37945]"
    },
    {
      "src": "primitive_type [941,948]",
      "dest": "primitive_type [5555,5562]"
    },
    {
      "src": "sub: sub [31193,31196]",
      "dest": "sub: sub [36680,36683]"
    },
    {
      "src": "visibility [4318,4326]",
      "dest": "visibility [7527,7535]"
    },
    {
      "src": "type_name [22599,22606]",
      "dest": "type_name [11659,11666]"
    },
    {
      "src": "call_expression [25293,25328]",
      "dest": "call_expression [41500,41522]"
    },
    {
      "src": "\": \" [43583,43584]",
      "dest": "\": \" [46281,46282]"
    },
    {
      "src": "identifier: msg [8735,8738]",
      "dest": "identifier: msg [8760,8763]"
    },
    {
      "src": "uint256: uint256 [2684,2691]",
      "dest": "uint256: uint256 [903,910]"
    },
    {
      "src": "{: { [8720,8721]",
      "dest": "{: { [8742,8743]"
    },
    {
      "src": "identifier: _value [18768,18774]",
      "dest": "identifier: amount [33462,33468]"
    },
    {
      "src": "): ) [33802,33803]",
      "dest": "): ) [25571,25572]"
    },
    {
      "src": "=: = [17126,17127]",
      "dest": "=: = [5224,5225]"
    },
    {
      "src": "): ) [10657,10658]",
      "dest": "): ) [11742,11743]"
    },
    {
      "src": "): ) [28572,28573]",
      "dest": "): ) [37738,37739]"
    },
    {
      "src": "type_name [888,895]",
      "dest": "type_name [24539,24546]"
    },
    {
      "src": "bool: bool [41011,41015]",
      "dest": "bool: bool [42442,42446]"
    },
    {
      "src": "identifier: gasRefund39 [28897,28908]",
      "dest": "identifier: gasRefund39 [37108,37119]"
    },
    {
      "src": "(: ( [30972,30973]",
      "dest": "(: ( [36199,36200]"
    },
    {
      "src": "return: return [43568,43574]",
      "dest": "return: return [46266,46272]"
    },
    {
      "src": "\": \" [34161,34162]",
      "dest": "\": \" [43130,43131]"
    },
    {
      "src": "): ) [43468,43469]",
      "dest": "): ) [46150,46151]"
    },
    {
      "src": "identifier: _value [23259,23265]",
      "dest": "identifier: amount [43011,43017]"
    },
    {
      "src": "identifier: onlyOwner [16323,16332]",
      "dest": "identifier: onlyOwner [4392,4401]"
    },
    {
      "src": "external: external [6504,6512]",
      "dest": "external: external [7112,7120]"
    },
    {
      "src": "yul_evm_builtin [29402,29408]",
      "dest": "yul_evm_builtin [38106,38112]"
    },
    {
      "src": "binary_expression [38753,38770]",
      "dest": "binary_expression [27858,27881]"
    },
    {
      "src": "indexed: indexed [15941,15948]",
      "dest": "indexed: indexed [4012,4019]"
    },
    {
      "src": "function_body [10833,11043]",
      "dest": "function_body [12971,13154]"
    },
    {
      "src": "type_name [13874,13923]",
      "dest": "type_name [1103,1150]"
    },
    {
      "src": "{: { [17014,17015]",
      "dest": "{: { [5112,5113]"
    },
    {
      "src": "function_definition [12774,12932]",
      "dest": "function_definition [24282,24457]"
    },
    {
      "src": "address: address [903,910]",
      "dest": "address: address [24835,24842]"
    },
    {
      "src": "parameter [12611,12627]",
      "dest": "parameter [19368,19382]"
    },
    {
      "src": "primitive_type [32927,32934]",
      "dest": "primitive_type [40362,40369]"
    },
    {
      "src": "primitive_type [3250,3257]",
      "dest": "primitive_type [15518,15525]"
    },
    {
      "src": "return: return [22991,22997]",
      "dest": "return: return [24629,24635]"
    },
    {
      "src": ",: , [16207,16208]",
      "dest": ",: , [4274,4275]"
    },
    {
      "src": "yul_path [32016,32022]",
      "dest": "yul_path [38455,38461]"
    },
    {
      "src": "function: function [460,468]",
      "dest": "function: function [5652,5660]"
    },
    {
      "src": "}: } [31800,31801]",
      "dest": "}: } [36857,36858]"
    },
    {
      "src": "function: function [11160,11168]",
      "dest": "function: function [10850,10858]"
    },
    {
      "src": "public: public [12645,12651]",
      "dest": "public: public [22775,22781]"
    },
    {
      "src": "call_argument [40466,40495]",
      "dest": "call_argument [44425,44470]"
    },
    {
      "src": "parameter [447,454]",
      "dest": "parameter [6384,6391]"
    },
    {
      "src": "uint256: uint256 [1429,1436]",
      "dest": "uint256: uint256 [1564,1571]"
    },
    {
      "src": "parameter [18997,19011]",
      "dest": "parameter [38626,38640]"
    },
    {
      "src": "function: function [11340,11348]",
      "dest": "function: function [9947,9955]"
    },
    {
      "src": "bool: bool [5500,5504]",
      "dest": "bool: bool [26279,26283]"
    },
    {
      "src": "modifier_invocation [17909,17918]",
      "dest": "modifier_invocation [41298,41307]"
    },
    {
      "src": "binary_expression [10628,10633]",
      "dest": "binary_expression [11671,11676]"
    },
    {
      "src": "identifier: adminAddr [1485,1494]",
      "dest": "identifier: finOp [1601,1606]"
    },
    {
      "src": ",: , [42408,42409]",
      "dest": ",: , [30180,30181]"
    },
    {
      "src": "primitive_type [35726,35730]",
      "dest": "primitive_type [40543,40547]"
    },
    {
      "src": "address: address [23649,23656]",
      "dest": "address: address [45034,45041]"
    },
    {
      "src": "==: == [10587,10589]",
      "dest": "==: == [11606,11608]"
    },
    {
      "src": "(: ( [16987,16988]",
      "dest": "(: ( [5085,5086]"
    },
    {
      "src": "identifier: _value [12844,12850]",
      "dest": "identifier: amount [24327,24333]"
    },
    {
      "src": "): ) [454,455]",
      "dest": "): ) [6391,6392]"
    },
    {
      "src": "identifier: require [9142,9149]",
      "dest": "identifier: require [27769,27776]"
    },
    {
      "src": "): ) [9172,9173]",
      "dest": "): ) [27838,27839]"
    },
    {
      "src": "type_name [38811,38815]",
      "dest": "type_name [19950,19954]"
    },
    {
      "src": ",: , [40737,40738]",
      "dest": ",: , [28852,28853]"
    },
    {
      "src": "let: let [28955,28958]",
      "dest": "let: let [37220,37223]"
    },
    {
      "src": "type_name [447,454]",
      "dest": "type_name [6384,6391]"
    },
    {
      "src": "primitive_type [1306,1313]",
      "dest": "primitive_type [5671,5678]"
    },
    {
      "src": "): ) [43555,43556]",
      "dest": "): ) [46253,46254]"
    },
    {
      "src": "identifier: owner [17082,17087]",
      "dest": "identifier: owner [5180,5185]"
    },
    {
      "src": "yul_variable_declaration [28955,29042]",
      "dest": "yul_variable_declaration [37220,37307]"
    },
    {
      "src": "uint256: uint256 [11184,11191]",
      "dest": "uint256: uint256 [10874,10881]"
    },
    {
      "src": "): ) [39951,39952]",
      "dest": "): ) [19509,19510]"
    },
    {
      "src": "call_argument [11439,11445]",
      "dest": "call_argument [10061,10067]"
    },
    {
      "src": "yul_evm_builtin [28643,28646]",
      "dest": "yul_evm_builtin [36935,36938]"
    },
    {
      "src": "function_body [40421,40756]",
      "dest": "function_body [28556,28869]"
    },
    {
      "src": "library_declaration [10414,11470]",
      "dest": "library_declaration [9684,14403]"
    },
    {
      "src": "modifier_invocation [39788,39797]",
      "dest": "modifier_invocation [41903,41912]"
    },
    {
      "src": "event_definition [25034,25086]",
      "dest": "event_definition [32980,33032]"
    },
    {
      "src": "returns: returns [18539,18546]",
      "dest": "returns: returns [24007,24014]"
    },
    {
      "src": "uint256: uint256 [24057,24064]",
      "dest": "uint256: uint256 [40777,40784]"
    },
    {
      "src": "address: address [23981,23988]",
      "dest": "address: address [32709,32716]"
    },
    {
      "src": ",: , [15922,15923]",
      "dest": ",: , [4002,4003]"
    },
    {
      "src": "identifier: offset [31051,31057]",
      "dest": "identifier: offset [36450,36456]"
    },
    {
      "src": "string_literal [35078,35102]",
      "dest": "string_literal [43178,43218]"
    },
    {
      "src": "): ) [11193,11194]",
      "dest": "): ) [10911,10912]"
    },
    {
      "src": "string [38772,38799]",
      "dest": "string [43921,43964]"
    },
    {
      "src": "{: { [22980,22981]",
      "dest": "{: { [24618,24619]"
    },
    {
      "src": "function_body [25841,25985]",
      "dest": "function_body [34181,34350]"
    },
    {
      "src": "parameter [1060,1075]",
      "dest": "parameter [24554,24569]"
    },
    {
      "src": "yul_path [29177,29183]",
      "dest": "yul_path [37651,37657]"
    },
    {
      "src": "member_expression [17687,17701]",
      "dest": "member_expression [32043,32057]"
    },
    {
      "src": "): ) [39051,39052]",
      "dest": "): ) [29610,29611]"
    },
    {
      "src": "type_name [41560,41564]",
      "dest": "type_name [1769,1773]"
    },
    {
      "src": "primitive_type [4823,4830]",
      "dest": "primitive_type [29216,29223]"
    },
    {
      "src": "visibility [21324,21330]",
      "dest": "visibility [24335,24341]"
    },
    {
      "src": "identifier: allowance [22908,22917]",
      "dest": "identifier: allowance [24529,24538]"
    },
    {
      "src": "primitive_type [6461,6468]",
      "dest": "primitive_type [31114,31121]"
    },
    {
      "src": "internal: internal [23267,23275]",
      "dest": "internal: internal [43025,43033]"
    },
    {
      "src": "call_expression [34174,34226]",
      "dest": "call_expression [43976,44070]"
    },
    {
      "src": "type_name [33331,33335]",
      "dest": "type_name [15229,15233]"
    },
    {
      "src": "return_statement [18568,18593]",
      "dest": "return_statement [24036,24062]"
    },
    {
      "src": "): ) [40747,40748]",
      "dest": "): ) [28860,28861]"
    },
    {
      "src": "public: public [16124,16130]",
      "dest": "public: public [4191,4197]"
    },
    {
      "src": "identifier: _tokenHolder [12804,12816]",
      "dest": "identifier: account [23977,23984]"
    },
    {
      "src": "(: ( [1032,1033]",
      "dest": "(: ( [7129,7130]"
    },
    {
      "src": "return_type_definition [33322,33336]",
      "dest": "return_type_definition [15220,15234]"
    },
    {
      "src": "visibility [26488,26496]",
      "dest": "visibility [33470,33478]"
    },
    {
      "src": "primitive_type [38811,38815]",
      "dest": "primitive_type [19950,19954]"
    },
    {
      "src": "function_definition [26465,28789]",
      "dest": "function_definition [36035,36973]"
    },
    {
      "src": "assembly: assembly [27995,28003]",
      "dest": "assembly: assembly [36115,36123]"
    },
    {
      "src": "number_literal: 18 [43287,43289]",
      "dest": "number_literal: 18 [45960,45962]"
    },
    {
      "src": "identifier: assert [11432,11438]",
      "dest": "identifier: require [10053,10060]"
    },
    {
      "src": "state_variable_declaration [13278,13295]",
      "dest": "state_variable_declaration [519,536]"
    },
    {
      "src": "parameter [23233,23249]",
      "dest": "parameter [42975,42992]"
    },
    {
      "src": "type_name [10779,10786]",
      "dest": "type_name [12889,12896]"
    },
    {
      "src": "call_argument [17136,17137]",
      "dest": "call_argument [5234,5235]"
    },
    {
      "src": "yul_evm_builtin [29354,29358]",
      "dest": "yul_evm_builtin [38014,38018]"
    },
    {
      "src": "): ) [35555,35556]",
      "dest": "): ) [45113,45114]"
    },
    {
      "src": "identifier: require [25230,25237]",
      "dest": "identifier: require [41402,41409]"
    },
    {
      "src": "yul_evm_builtin [31670,31675]",
      "dest": "yul_evm_builtin [37778,37780]"
    },
    {
      "src": ",: , [41348,41349]",
      "dest": ",: , [34768,34769]"
    },
    {
      "src": "}: } [17148,17149]",
      "dest": "}: } [5246,5247]"
    },
    {
      "src": "type_name [17594,17601]",
      "dest": "type_name [31941,31948]"
    },
    {
      "src": "identifier: _value [3558,3564]",
      "dest": "identifier: amount [27733,27739]"
    },
    {
      "src": "(: ( [31050,31051]",
      "dest": "(: ( [36449,36450]"
    },
    {
      "src": "identifier: require [34990,34997]",
      "dest": "identifier: require [41924,41931]"
    },
    {
      "src": "return: return [11453,11459]",
      "dest": "return: return [10112,10118]"
    },
    {
      "src": "): ) [17356,17357]",
      "dest": "): ) [31609,31610]"
    },
    {
      "src": "identifier: b [10798,10799]",
      "dest": "identifier: b [12908,12909]"
    },
    {
      "src": "event_paramater [612,632]",
      "dest": "event_paramater [7743,7763]"
    },
    {
      "src": "\": \" [43575,43576]",
      "dest": "\": \" [46273,46274]"
    },
    {
      "src": "function_body [17626,17723]",
      "dest": "function_body [31973,32079]"
    },
    {
      "src": "pop: pop [29350,29353]",
      "dest": "pop: pop [38010,38013]"
    },
    {
      "src": "primitive_type [41560,41564]",
      "dest": "primitive_type [1769,1773]"
    },
    {
      "src": "yul_decimal_number: 0 [29419,29420]",
      "dest": "yul_decimal_number: 0 [38123,38124]"
    },
    {
      "src": "yul_evm_builtin [29764,29767]",
      "dest": "yul_evm_builtin [37718,37721]"
    },
    {
      "src": "return_type_definition [33789,33803]",
      "dest": "return_type_definition [25558,25572]"
    },
    {
      "src": "contract_declaration [13186,15569]",
      "dest": "contract_declaration [427,3401]"
    },
    {
      "src": "): ) [29333,29334]",
      "dest": "): ) [37944,37945]"
    },
    {
      "src": "): ) [28909,28910]",
      "dest": "): ) [37134,37135]"
    },
    {
      "src": "identifier: _requireCanTransfer [40931,40950]",
      "dest": "identifier: _burn [34667,34672]"
    },
    {
      "src": ">=: >= [11441,11443]",
      "dest": ">=: >= [10063,10065]"
    },
    {
      "src": "identifier: balanceOf [11683,11692]",
      "dest": "identifier: _balances [1087,1096]"
    },
    {
      "src": "): ) [1037,1038]",
      "dest": "): ) [7134,7135]"
    },
    {
      "src": "state_variable_declaration [13617,13640]",
      "dest": "state_variable_declaration [841,864]"
    },
    {
      "src": "{: { [43254,43255]",
      "dest": "{: { [45927,45928]"
    },
    {
      "src": "type_name [6337,6344]",
      "dest": "type_name [12306,12313]"
    },
    {
      "src": "identifier: originalTo [39033,39043]",
      "dest": "identifier: account [29583,29590]"
    },
    {
      "src": "**: ** [24105,24107]",
      "dest": "**: ** [40351,40353]"
    },
    {
      "src": "uint256: uint256 [11353,11360]",
      "dest": "uint256: uint256 [9960,9967]"
    },
    {
      "src": "type_cast_expression [9162,9172]",
      "dest": "type_cast_expression [27787,27797]"
    },
    {
      "src": "string [41976,41989]",
      "dest": "string [28044,28084]"
    },
    {
      "src": "): ) [13921,13922]",
      "dest": "): ) [1148,1149]"
    },
    {
      "src": "yul_evm_builtin [31047,31050]",
      "dest": "yul_evm_builtin [36446,36449]"
    },
    {
      "src": "function_body [39904,39971]",
      "dest": "function_body [19478,19653]"
    },
    {
      "src": ",: , [31007,31008]",
      "dest": ",: , [36285,36286]"
    },
    {
      "src": "expression_statement [25230,25283]",
      "dest": "expression_statement [41402,41490]"
    },
    {
      "src": "primitive_type [11878,11885]",
      "dest": "primitive_type [7096,7103]"
    },
    {
      "src": "identifier: _value [20437,20443]",
      "dest": "identifier: amount [37128,37134]"
    },
    {
      "src": "primitive_type [23635,23642]",
      "dest": "primitive_type [44337,44344]"
    },
    {
      "src": "call_argument [17401,17422]",
      "dest": "call_argument [31654,31675]"
    },
    {
      "src": "sload: sload [28969,28974]",
      "dest": "sload: sload [37234,37239]"
    },
    {
      "src": "identifier: OwnershipTransferred [16176,16196]",
      "dest": "identifier: OwnershipTransferred [4243,4263]"
    },
    {
      "src": "call_argument [25874,25885]",
      "dest": "call_argument [34214,34250]"
    },
    {
      "src": "type_cast_expression [17401,17414]",
      "dest": "type_cast_expression [31654,31667]"
    },
    {
      "src": "type_name [11878,11885]",
      "dest": "type_name [7096,7103]"
    },
    {
      "src": "primitive_type [40041,40048]",
      "dest": "primitive_type [29233,29240]"
    },
    {
      "src": "identifier: a [11262,11263]",
      "dest": "identifier: a [11008,11009]"
    },
    {
      "src": "comment: //operation, but we can't add checks to disallow it without losing a lot of [25505,25580]",
      "dest": "comment: /**      * @dev Destroys `amount` tokens from `msg.sender`, reducing the      * total supply.      * @param amount amount of tokens to burn      *      * Emits a {Transfer} event with `to` set to the zero address.      * Emits a {Burn} event with `burner` set to `msg.sender`      *      * Requirements      *      * - `msg.sender` must have at least `amount` tokens.      *      */ [33040,33434]"
    },
    {
      "src": "event_paramater [1156,1179]",
      "dest": "event_paramater [8003,8026]"
    },
    {
      "src": "visibility [11195,11203]",
      "dest": "visibility [10913,10921]"
    },
    {
      "src": "internal: internal [20642,20650]",
      "dest": "internal: internal [10446,10454]"
    },
    {
      "src": "\": \" [40494,40495]",
      "dest": "\": \" [44469,44470]"
    },
    {
      "src": "identifier: offset [30957,30963]",
      "dest": "identifier: offset [36184,36190]"
    },
    {
      "src": ",: , [11182,11183]",
      "dest": ",: , [10872,10873]"
    },
    {
      "src": "uint256: uint256 [25794,25801]",
      "dest": "uint256: uint256 [34134,34141]"
    },
    {
      "src": "mapping: mapping [13894,13901]",
      "dest": "mapping: mapping [1122,1129]"
    },
    {
      "src": "): ) [21322,21323]",
      "dest": "): ) [33468,33469]"
    },
    {
      "src": "visibility [28911,28919]",
      "dest": "visibility [37136,37144]"
    },
    {
      "src": "bytes32: bytes32 [1320,1327]",
      "dest": "bytes32: bytes32 [15491,15498]"
    },
    {
      "src": "uint256: uint256 [32927,32934]",
      "dest": "uint256: uint256 [40362,40369]"
    },
    {
      "src": "\": \" [42853,42854]",
      "dest": "\": \" [30263,30264]"
    },
    {
      "src": "type_name [13894,13922]",
      "dest": "type_name [1122,1149]"
    },
    {
      "src": "identifier: token [17587,17592]",
      "dest": "identifier: token [31934,31939]"
    },
    {
      "src": "yul_evm_builtin [31710,31716]",
      "dest": "yul_evm_builtin [36824,36830]"
    },
    {
      "src": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [28975,29041]",
      "dest": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [37240,37306]"
    },
    {
      "src": "type_name [16792,16799]",
      "dest": "type_name [4888,4895]"
    },
    {
      "src": "string_literal [34140,34162]",
      "dest": "string_literal [43094,43131]"
    },
    {
      "src": ":=: := [30964,30966]",
      "dest": ":=: := [36191,36193]"
    },
    {
      "src": "function: function [1043,1051]",
      "dest": "function: function [5949,5957]"
    },
    {
      "src": "address: address [976,983]",
      "dest": "address: address [31088,31095]"
    },
    {
      "src": "returns: returns [10815,10822]",
      "dest": "returns: returns [12953,12960]"
    },
    {
      "src": "type_name [24133,24140]",
      "dest": "type_name [36056,36063]"
    },
    {
      "src": "identifier: pendingOwner [17090,17102]",
      "dest": "identifier: pendingOwner [5188,5200]"
    },
    {
      "src": "yul_identifier [31035,31043]",
      "dest": "yul_identifier [36434,36442]"
    },
    {
      "src": "): ) [43645,43646]",
      "dest": "): ) [46359,46360]"
    },
    {
      "src": "visibility [10801,10809]",
      "dest": "visibility [12939,12947]"
    },
    {
      "src": "): ) [34162,34163]",
      "dest": "): ) [43131,43132]"
    },
    {
      "src": "): ) [29420,29421]",
      "dest": "): ) [38124,38125]"
    },
    {
      "src": "yul_path [29364,29369]",
      "dest": "yul_path [38026,38031]"
    },
    {
      "src": "return: return [43481,43487]",
      "dest": "return: return [46163,46169]"
    },
    {
      "src": "uint256: uint256 [23667,23674]",
      "dest": "uint256: uint256 [43839,43846]"
    },
    {
      "src": "address: address [23635,23642]",
      "dest": "address: address [44337,44344]"
    },
    {
      "src": "primitive_type [18666,18673]",
      "dest": "primitive_type [23840,23847]"
    },
    {
      "src": "address: address [12818,12825]",
      "dest": "address: address [24300,24307]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol [174,241]",
      "dest": "comment: // File: contracts/true-currencies-new/ProxyStorage.sol [35,90]"
    },
    {
      "src": "binary_expression [16354,16373]",
      "dest": "binary_expression [4423,4442]"
    },
    {
      "src": "yul_identifier [28479,28487]",
      "dest": "yul_identifier [36495,36503]"
    },
    {
      "src": "identifier: _who [23401,23405]",
      "dest": "identifier: sender [25491,25497]"
    },
    {
      "src": "(: ( [6336,6337]",
      "dest": "(: ( [12305,12306]"
    },
    {
      "src": "function_definition [18494,18600]",
      "dest": "function_definition [23950,24069]"
    },
    {
      "src": "{: { [25025,25026]",
      "dest": "{: { [32499,32500]"
    },
    {
      "src": "\": \" [41288,41289]",
      "dest": "\": \" [34904,34905]"
    },
    {
      "src": "parameter [40178,40192]",
      "dest": "parameter [45423,45437]"
    },
    {
      "src": "(: ( [17400,17401]",
      "dest": "(: ( [31653,31654]"
    },
    {
      "src": "string [5000,5002]",
      "dest": "string [29471,29507]"
    },
    {
      "src": "yul_evm_builtin [28681,28687]",
      "dest": "yul_evm_builtin [36919,36925]"
    },
    {
      "src": "): ) [10799,10800]",
      "dest": "): ) [12937,12938]"
    },
    {
      "src": "<: < [35557,35558]",
      "dest": "<: < [45115,45116]"
    },
    {
      "src": "): ) [29071,29072]",
      "dest": "): ) [37390,37391]"
    },
    {
      "src": "}: } [15568,15569]",
      "dest": "}: } [3400,3401]"
    },
    {
      "src": "primitive_type [19635,19642]",
      "dest": "primitive_type [22649,22656]"
    },
    {
      "src": "returns: returns [18785,18792]",
      "dest": "returns: returns [38395,38402]"
    },
    {
      "src": ",: , [28487,28488]",
      "dest": ",: , [36503,36504]"
    },
    {
      "src": "comment: // File: contracts/ReclaimerToken.sol [17153,17190]",
      "dest": "comment: // File: contracts/true-currencies-new/GasRefund.sol [34999,35051]"
    },
    {
      "src": ",: , [652,653]",
      "dest": ",: , [7783,7784]"
    },
    {
      "src": "function: function [28888,28896]",
      "dest": "function: function [37099,37107]"
    },
    {
      "src": "visibility [10540,10548]",
      "dest": "visibility [11336,11344]"
    },
    {
      "src": "type_name [40041,40048]",
      "dest": "type_name [29233,29240]"
    },
    {
      "src": "): ) [11407,11408]",
      "dest": "): ) [10012,10013]"
    },
    {
      "src": "=: = [17088,17089]",
      "dest": "=: = [5186,5187]"
    },
    {
      "src": "address: address [39398,39405]",
      "dest": "address: address [28666,28673]"
    },
    {
      "src": "address: address [13903,13910]",
      "dest": "address: address [1130,1137]"
    },
    {
      "src": "sstore: sstore [31710,31716]",
      "dest": "sstore: sstore [36824,36830]"
    },
    {
      "src": "(: ( [32031,32032]",
      "dest": "(: ( [38470,38471]"
    },
    {
      "src": "parameter [18439,18446]",
      "dest": "parameter [10469,10476]"
    },
    {
      "src": "identifier: _addr [12013,12018]",
      "dest": "identifier: target [17911,17917]"
    },
    {
      "src": "emit_statement [25947,25978]",
      "dest": "emit_statement [34312,34343]"
    },
    {
      "src": "number_literal: 0 [13541,13542]",
      "dest": "number_literal: 0 [762,763]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/math/SafeMath.sol [10258,10316]",
      "dest": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [9107,9682]"
    },
    {
      "src": "call_expression [40608,40634]",
      "dest": "call_expression [28722,28746]"
    },
    {
      "src": "): ) [31945,31946]",
      "dest": "): ) [38381,38382]"
    },
    {
      "src": "identifier: _value [39045,39051]",
      "dest": "identifier: amount [29604,29610]"
    },
    {
      "src": "uint256: uint256 [6461,6468]",
      "dest": "uint256: uint256 [31114,31121]"
    },
    {
      "src": "identifier: newMin [25062,25068]",
      "dest": "identifier: newMin [33008,33014]"
    },
    {
      "src": ",: , [25068,25069]",
      "dest": ",: , [33014,33015]"
    },
    {
      "src": "view: view [23107,23111]",
      "dest": "view: view [8703,8707]"
    },
    {
      "src": "{: { [17626,17627]",
      "dest": "{: { [31973,31974]"
    },
    {
      "src": "emit: emit [16171,16175]",
      "dest": "emit: emit [4238,4242]"
    },
    {
      "src": "(: ( [28560,28561]",
      "dest": "(: ( [37721,37722]"
    },
    {
      "src": "type_name [43373,43378]",
      "dest": "type_name [46055,46060]"
    },
    {
      "src": "view: view [22957,22961]",
      "dest": "view: view [24578,24582]"
    },
    {
      "src": "comment: // File: contracts/TrueCoinReceiver.sol [28,67]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "private: private [13429,13436]",
      "dest": "private: private [650,657]"
    },
    {
      "src": "{: { [11227,11228]",
      "dest": "{: { [10945,10946]"
    },
    {
      "src": "type_name [12020,12027]",
      "dest": "type_name [26235,26242]"
    },
    {
      "src": "call_expression [38745,38800]",
      "dest": "call_expression [27850,27921]"
    },
    {
      "src": "parameter [40829,40845]",
      "dest": "parameter [41873,41892]"
    },
    {
      "src": "): ) [918,919]",
      "dest": "): ) [5530,5531]"
    },
    {
      "src": "identifier: location [31181,31189]",
      "dest": "identifier: location [36668,36676]"
    },
    {
      "src": "returns: returns [1024,1031]",
      "dest": "returns: returns [7121,7128]"
    },
    {
      "src": "(: ( [25115,25116]",
      "dest": "(: ( [41255,41256]"
    },
    {
      "src": "parameter [12818,12834]",
      "dest": "parameter [24300,24317]"
    },
    {
      "src": "address: address [24037,24044]",
      "dest": "address: address [40757,40764]"
    },
    {
      "src": "identifier: _value [23433,23439]",
      "dest": "identifier: amount [44362,44368]"
    },
    {
      "src": "binary_expression [34182,34199]",
      "dest": "binary_expression [43984,44022]"
    },
    {
      "src": "binary_expression [34998,35015]",
      "dest": "binary_expression [41932,41976]"
    },
    {
      "src": "primitive_type [24133,24140]",
      "dest": "primitive_type [36056,36063]"
    },
    {
      "src": "primitive_type [23667,23674]",
      "dest": "primitive_type [43839,43846]"
    },
    {
      "src": "type_name [25054,25061]",
      "dest": "type_name [33000,33007]"
    },
    {
      "src": "type_name [18666,18673]",
      "dest": "type_name [23840,23847]"
    },
    {
      "src": "primitive_type [18997,19004]",
      "dest": "primitive_type [38626,38633]"
    },
    {
      "src": ">=: >= [35005,35007]",
      "dest": ">=: >= [41949,41951]"
    },
    {
      "src": "type_name [13961,13989]",
      "dest": "type_name [1188,1215]"
    },
    {
      "src": "visibility [17900,17908]",
      "dest": "visibility [41289,41297]"
    },
    {
      "src": "type_name [587,591]",
      "dest": "type_name [7545,7549]"
    },
    {
      "src": "yul_evm_builtin [30998,31000]",
      "dest": "yul_evm_builtin [36276,36278]"
    },
    {
      "src": "type_name [23649,23656]",
      "dest": "type_name [45034,45041]"
    },
    {
      "src": "address: address [4823,4830]",
      "dest": "address: address [29216,29223]"
    },
    {
      "src": "address: address [1156,1163]",
      "dest": "address: address [8003,8010]"
    },
    {
      "src": "type_cast_expression [39398,39408]",
      "dest": "type_cast_expression [28666,28676]"
    },
    {
      "src": "{: { [28004,28005]",
      "dest": "{: { [36124,36125]"
    },
    {
      "src": "primitive_type [11364,11371]",
      "dest": "primitive_type [9971,9978]"
    },
    {
      "src": "identifier: sub [11169,11172]",
      "dest": "identifier: sub [10859,10862]"
    },
    {
      "src": "return_type_definition [578,592]",
      "dest": "return_type_definition [7536,7550]"
    },
    {
      "src": "call_argument [24630,24640]",
      "dest": "call_argument [29387,29397]"
    },
    {
      "src": "{: { [10833,10834]",
      "dest": "{: { [12971,12972]"
    },
    {
      "src": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [16617,16759]",
      "dest": "comment: /**      * @dev Modifier throws if called by any account other than the pendingOwner.      */ [4485,4580]"
    },
    {
      "src": "returns: returns [43364,43371]",
      "dest": "returns: returns [46046,46053]"
    },
    {
      "src": "primitive_type [612,619]",
      "dest": "primitive_type [7743,7750]"
    },
    {
      "src": "=>: => [13911,13913]",
      "dest": "=>: => [1138,1140]"
    },
    {
      "src": "let: let [31031,31034]",
      "dest": "let: let [36430,36433]"
    },
    {
      "src": ",: , [554,555]",
      "dest": ",: , [7490,7491]"
    },
    {
      "src": "primitive_type [22971,22978]",
      "dest": "primitive_type [24609,24616]"
    },
    {
      "src": "primitive_type [23981,23988]",
      "dest": "primitive_type [32709,32716]"
    },
    {
      "src": "identifier: from [628,632]",
      "dest": "identifier: from [7759,7763]"
    },
    {
      "src": "uint256: uint256 [18439,18446]",
      "dest": "uint256: uint256 [10469,10476]"
    },
    {
      "src": "uint8: uint8 [43261,43266]",
      "dest": "uint8: uint8 [45934,45939]"
    },
    {
      "src": "visibility [1356,1364]",
      "dest": "visibility [5688,5696]"
    },
    {
      "src": "): ) [31066,31067]",
      "dest": "): ) [36465,36466]"
    },
    {
      "src": "call_argument [42622,42653]",
      "dest": "call_argument [28598,28631]"
    },
    {
      "src": "call_argument [42853,42884]",
      "dest": "call_argument [30263,30299]"
    },
    {
      "src": "return: return [33878,33884]",
      "dest": "return: return [26390,26396]"
    },
    {
      "src": "function_body [43380,43414]",
      "dest": "function_body [46062,46096]"
    },
    {
      "src": "let: let [29306,29309]",
      "dest": "let: let [37917,37920]"
    },
    {
      "src": "}: } [8750,8751]",
      "dest": "}: } [8777,8778]"
    },
    {
      "src": "type_name [25116,25123]",
      "dest": "type_name [544,551]"
    },
    {
      "src": "call_expression [11432,11446]",
      "dest": "call_expression [10053,10099]"
    },
    {
      "src": "(: ( [28646,28647]",
      "dest": "(: ( [36633,36634]"
    },
    {
      "src": "function: function [20394,20402]",
      "dest": "function: function [24818,24826]"
    },
    {
      "src": "primitive_type [12312,12319]",
      "dest": "primitive_type [1355,1362]"
    },
    {
      "src": "(: ( [31675,31676]",
      "dest": "(: ( [37780,37781]"
    },
    {
      "src": "return_type_definition [10815,10832]",
      "dest": "return_type_definition [12953,12970]"
    },
    {
      "src": "parameter [43639,43645]",
      "dest": "parameter [46346,46359]"
    },
    {
      "src": "): ) [34225,34226]",
      "dest": "): ) [44069,44070]"
    },
    {
      "src": "identifier: hasHook [37674,37681]",
      "dest": "identifier: success [16975,16982]"
    },
    {
      "src": "state_mutability [18652,18656]",
      "dest": "state_mutability [23817,23821]"
    },
    {
      "src": ".: . [9709,9710]",
      "dest": ".: . [4636,4637]"
    },
    {
      "src": "bool: bool [38811,38815]",
      "dest": "bool: bool [19950,19954]"
    },
    {
      "src": ",: , [39031,39032]",
      "dest": ",: , [29590,29591]"
    },
    {
      "src": "identifier: AttributeData [1404,1417]",
      "dest": "identifier: RewardAllocation [1536,1552]"
    },
    {
      "src": "identifier: _who [23643,23647]",
      "dest": "identifier: account [44345,44352]"
    },
    {
      "src": "(: ( [2432,2433]",
      "dest": "(: ( [4632,4633]"
    },
    {
      "src": "call_expression [41301,41364]",
      "dest": "call_expression [34743,34818]"
    },
    {
      "src": "=: = [3914,3915]",
      "dest": "=: = [13031,13032]"
    },
    {
      "src": "function_body [43557,43592]",
      "dest": "function_body [46255,46290]"
    },
    {
      "src": "yul_path [30754,30762]",
      "dest": "yul_path [37831,37839]"
    },
    {
      "src": "primitive_type [23407,23414]",
      "dest": "primitive_type [25499,25506]"
    },
    {
      "src": "\": \" [25874,25875]",
      "dest": "\": \" [34214,34215]"
    },
    {
      "src": "}: } [17975,17976]",
      "dest": "}: } [32081,32082]"
    },
    {
      "src": "parameter [11218,11225]",
      "dest": "parameter [10936,10943]"
    },
    {
      "src": "primitive_type [13646,13652]",
      "dest": "primitive_type [870,876]"
    },
    {
      "src": "address: address [41715,41722]",
      "dest": "address: address [1758,1765]"
    },
    {
      "src": "address: address [41179,41186]",
      "dest": "address: address [16813,16820]"
    },
    {
      "src": "function_definition [460,522]",
      "dest": "function_definition [5652,5720]"
    },
    {
      "src": "type_name [15933,15940]",
      "dest": "type_name [4004,4011]"
    },
    {
      "src": "uint256: uint256 [18963,18970]",
      "dest": "uint256: uint256 [24852,24859]"
    },
    {
      "src": "visibility [12852,12858]",
      "dest": "visibility [22956,22962]"
    },
    {
      "src": ",: , [10527,10528]",
      "dest": ",: , [11323,11324]"
    },
    {
      "src": "uint256: uint256 [13717,13724]",
      "dest": "uint256: uint256 [944,951]"
    },
    {
      "src": "uint256: uint256 [1181,1188]",
      "dest": "uint256: uint256 [8028,8035]"
    },
    {
      "src": "expression_statement [17687,17716]",
      "dest": "expression_statement [32043,32072]"
    },
    {
      "src": "): ) [28658,28659]",
      "dest": "): ) [36647,36648]"
    },
    {
      "src": "call_argument [16375,16387]",
      "dest": "call_argument [4444,4456]"
    },
    {
      "src": "-: - [11264,11265]",
      "dest": "-: - [11010,11011]"
    },
    {
      "src": "primitive_type [903,910]",
      "dest": "primitive_type [24835,24842]"
    },
    {
      "src": "returns: returns [10554,10561]",
      "dest": "returns: returns [11350,11357]"
    },
    {
      "src": "type_name [11353,11360]",
      "dest": "type_name [9960,9967]"
    },
    {
      "src": "identifier: _account [40717,40725]",
      "dest": "identifier: account [28845,28852]"
    },
    {
      "src": "external: external [29484,29492]",
      "dest": "external: external [42457,42465]"
    },
    {
      "src": "return_statement [22991,23028]",
      "dest": "return_statement [24629,24664]"
    },
    {
      "src": "}: } [43778,43779]",
      "dest": "}: } [46395,46396]"
    },
    {
      "src": "primitive_type [39021,39028]",
      "dest": "primitive_type [29592,29599]"
    },
    {
      "src": "parameter [11184,11193]",
      "dest": "parameter [10874,10883]"
    },
    {
      "src": "}: } [32050,32051]",
      "dest": "}: } [38489,38490]"
    },
    {
      "src": "primitive_type [6007,6014]",
      "dest": "primitive_type [13677,13684]"
    },
    {
      "src": "return_statement [20534,20546]",
      "dest": "return_statement [25763,25775]"
    },
    {
      "src": "type_name [9100,9107]",
      "dest": "type_name [5967,5974]"
    },
    {
      "src": "identifier: _to [35552,35555]",
      "dest": "identifier: account [45106,45113]"
    },
    {
      "src": "address: address [13837,13844]",
      "dest": "address: address [1415,1422]"
    },
    {
      "src": "(: ( [23980,23981]",
      "dest": "(: ( [32708,32709]"
    },
    {
      "src": "string_literal [40466,40495]",
      "dest": "string_literal [44425,44470]"
    },
    {
      "src": "call_expression [41927,41990]",
      "dest": "call_expression [28014,28085]"
    },
    {
      "src": "visibility [13429,13436]",
      "dest": "visibility [650,657]"
    },
    {
      "src": "(: ( [20460,20461]",
      "dest": "(: ( [24900,24901]"
    },
    {
      "src": "yul_identifier [29177,29183]",
      "dest": "yul_identifier [37651,37657]"
    },
    {
      "src": "yul_evm_builtin [31193,31196]",
      "dest": "yul_evm_builtin [36680,36683]"
    },
    {
      "src": "state_mutability [499,503]",
      "dest": "state_mutability [5697,5701]"
    },
    {
      "src": "{: { [10574,10575]",
      "dest": "{: { [11368,11369]"
    },
    {
      "src": "): ) [30762,30763]",
      "dest": "): ) [37842,37843]"
    },
    {
      "src": "contract_body [17230,17976]",
      "dest": "contract_body [31424,32082]"
    },
    {
      "src": "}: } [12931,12932]",
      "dest": "}: } [24456,24457]"
    },
    {
      "src": "{: { [43380,43381]",
      "dest": "{: { [46062,46063]"
    },
    {
      "src": "identifier: _value [40049,40055]",
      "dest": "identifier: amount [29241,29247]"
    },
    {
      "src": "visibility [43442,43448]",
      "dest": "visibility [46124,46130]"
    },
    {
      "src": "type_name [35726,35730]",
      "dest": "type_name [40543,40547]"
    },
    {
      "src": ",: , [29381,29382]",
      "dest": ",: , [38043,38044]"
    },
    {
      "src": "state_mutability [33072,33076]",
      "dest": "state_mutability [22971,22975]"
    },
    {
      "src": "call_argument [41350,41363]",
      "dest": "call_argument [34770,34817]"
    },
    {
      "src": "): ) [19011,19012]",
      "dest": "): ) [38640,38641]"
    },
    {
      "src": "event_paramater [23981,24003]",
      "dest": "event_paramater [32709,32731]"
    },
    {
      "src": "address: address [12292,12299]",
      "dest": "address: address [1336,1343]"
    },
    {
      "src": "identifier: index [3908,3913]",
      "dest": "identifier: c [13029,13030]"
    },
    {
      "src": "variable_declaration_statement [4348,4396]",
      "dest": "variable_declaration_statement [10025,10043]"
    },
    {
      "src": "identifier: c [11439,11440]",
      "dest": "identifier: c [10061,10062]"
    },
    {
      "src": "call_argument [17051,17056]",
      "dest": "call_argument [5149,5154]"
    },
    {
      "src": "\": \" [35078,35079]",
      "dest": "\": \" [43178,43179]"
    },
    {
      "src": "return_type_definition [43540,43556]",
      "dest": "return_type_definition [46231,46254]"
    },
    {
      "src": "call_argument [40580,40581]",
      "dest": "call_argument [18456,18457]"
    },
    {
      "src": "uint256: uint256 [25808,25815]",
      "dest": "uint256: uint256 [34148,34155]"
    },
    {
      "src": "uint256: uint256 [447,454]",
      "dest": "uint256: uint256 [6384,6391]"
    },
    {
      "src": "identifier: mul [10514,10517]",
      "dest": "identifier: mul [11310,11313]"
    },
    {
      "src": "identifier: newOwner [16853,16861]",
      "dest": "identifier: newOwner [4949,4957]"
    },
    {
      "src": "\": \" [40466,40467]",
      "dest": "\": \" [44425,44426]"
    },
    {
      "src": "yul_identifier [31771,31777]",
      "dest": "yul_identifier [37421,37427]"
    },
    {
      "src": ",: , [12816,12817]",
      "dest": ",: , [24317,24318]"
    },
    {
      "src": "identifier: totalSupply [412,423]",
      "dest": "identifier: allowance [6319,6328]"
    },
    {
      "src": "(: ( [12795,12796]",
      "dest": "(: ( [24299,24300]"
    },
    {
      "src": "yul_assignment [30734,30767]",
      "dest": "yul_assignment [37815,37843]"
    },
    {
      "src": "return: return [21427,21433]",
      "dest": "return: return [24968,24974]"
    },
    {
      "src": "}: } [43678,43679]",
      "dest": "}: } [46392,46393]"
    },
    {
      "src": "call_argument [16205,16206]",
      "dest": "call_argument [4272,4273]"
    },
    {
      "src": "}: } [18716,18717]",
      "dest": "}: } [23886,23887]"
    },
    {
      "src": "function_body [11227,11273]",
      "dest": "function_body [10945,11042]"
    },
    {
      "src": "\": \" [42784,42785]",
      "dest": "\": \" [29308,29309]"
    },
    {
      "src": "identifier: _min [25860,25864]",
      "dest": "identifier: _min [34200,34204]"
    },
    {
      "src": "function_body [17377,17431]",
      "dest": "function_body [31630,31684]"
    },
    {
      "src": "address: address [6482,6489]",
      "dest": "address: address [1295,1302]"
    },
    {
      "src": "internal: internal [18643,18651]",
      "dest": "internal: internal [8806,8814]"
    },
    {
      "src": "function_body [43470,43504]",
      "dest": "function_body [46152,46186]"
    },
    {
      "src": "binary_expression [41310,41348]",
      "dest": "binary_expression [34751,34768]"
    },
    {
      "src": "(: ( [13949,13950]",
      "dest": "(: ( [1176,1177]"
    },
    {
      "src": "parameter [4823,4835]",
      "dest": "parameter [29216,29231]"
    },
    {
      "src": "}: } [25984,25985]",
      "dest": "}: } [34349,34350]"
    },
    {
      "src": "contract_body [15847,17149]",
      "dest": "contract_body [3758,5247]"
    },
    {
      "src": "type_name [33738,33745]",
      "dest": "type_name [22681,22688]"
    },
    {
      "src": ",: , [10788,10789]",
      "dest": ",: , [12898,12899]"
    },
    {
      "src": ",: , [41274,41275]",
      "dest": ",: , [34854,34855]"
    },
    {
      "src": "type_name [6482,6491]",
      "dest": "type_name [1276,1303]"
    },
    {
      "src": "identifier: from [984,988]",
      "dest": "identifier: from [31096,31100]"
    },
    {
      "src": "!=: != [38757,38759]",
      "dest": "!=: != [27868,27870]"
    },
    {
      "src": "{: { [29073,29074]",
      "dest": "{: { [37859,37860]"
    },
    {
      "src": "\": \" [2433,2434]",
      "dest": "\": \" [4661,4662]"
    },
    {
      "src": ",: , [29375,29376]",
      "dest": ",: , [38037,38038]"
    },
    {
      "src": "returns: returns [3300,3307]",
      "dest": "returns: returns [26996,27003]"
    },
    {
      "src": "function_definition [25771,25985]",
      "dest": "function_definition [34111,34350]"
    },
    {
      "src": "uint256: uint256 [10518,10525]",
      "dest": "uint256: uint256 [11314,11321]"
    },
    {
      "src": "parameter [25794,25806]",
      "dest": "parameter [34134,34146]"
    },
    {
      "src": "(: ( [22970,22971]",
      "dest": "(: ( [24608,24609]"
    },
    {
      "src": "comment: /**   * @dev Integer division of two numbers, truncating the quotient.   */ [10685,10762]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [10136,10405]"
    },
    {
      "src": "yul_function_call [28681,28771]",
      "dest": "yul_function_call [36919,36955]"
    },
    {
      "src": "type_name [18548,18555]",
      "dest": "type_name [24016,24023]"
    },
    {
      "src": ",: , [39408,39409]",
      "dest": ",: , [28676,28677]"
    },
    {
      "src": "call_expression [34990,35040]",
      "dest": "call_expression [41924,42044]"
    },
    {
      "src": "number_literal: 0 [40580,40581]",
      "dest": "number_literal: 0 [18456,18457]"
    },
    {
      "src": "comment: //by setting the minimum extremely high, and we don't want to lock [25653,25719]",
      "dest": "comment: /**      * @dev Checks if amount is within allowed burn bounds and      * destroys `amount` tokens from `account`, reducing the      * total supply.      * @param account account to burn tokens for      * @param amount amount of tokens to burn      *      * Emits a {Burn} event      */ [34358,34652]"
    },
    {
      "src": "state_mutability [927,931]",
      "dest": "state_mutability [5541,5545]"
    },
    {
      "src": "visibility [23098,23106]",
      "dest": "visibility [8694,8702]"
    },
    {
      "src": "primitive_type [5500,5504]",
      "dest": "primitive_type [26279,26283]"
    },
    {
      "src": "inheritance_specifier [17221,17229]",
      "dest": "inheritance_specifier [31418,31423]"
    },
    {
      "src": "bytes32: bytes32 [3250,3257]",
      "dest": "bytes32: bytes32 [15518,15525]"
    },
    {
      "src": "parameter [6337,6344]",
      "dest": "parameter [12306,12313]"
    },
    {
      "src": "identifier: sponsorGas2 [26474,26485]",
      "dest": "identifier: gasRefund15 [36044,36055]"
    },
    {
      "src": "parameter [33798,33802]",
      "dest": "parameter [25567,25571]"
    },
    {
      "src": "identifier: onlyPendingOwner [16997,17013]",
      "dest": "identifier: onlyPendingOwner [5095,5111]"
    },
    {
      "src": "=: = [13455,13456]",
      "dest": "=: = [676,677]"
    },
    {
      "src": "\": \" [41350,41351]",
      "dest": "\": \" [34770,34771]"
    },
    {
      "src": "identifier: offset [31001,31007]",
      "dest": "identifier: offset [36279,36285]"
    },
    {
      "src": "inheritance_specifier [43224,43253]",
      "dest": "inheritance_specifier [45914,45926]"
    },
    {
      "src": "uint256: uint256 [11398,11405]",
      "dest": "uint256: uint256 [19728,19735]"
    },
    {
      "src": "=>: => [13891,13893]",
      "dest": "=>: => [1119,1121]"
    },
    {
      "src": "primitive_type [1340,1347]",
      "dest": "primitive_type [5986,5993]"
    },
    {
      "src": "visibility [17358,17366]",
      "dest": "visibility [31611,31619]"
    },
    {
      "src": "identifier: a [10787,10788]",
      "dest": "identifier: a [12897,12898]"
    },
    {
      "src": "type_name [39488,39495]",
      "dest": "type_name [40518,40525]"
    },
    {
      "src": "primitive_type [24255,24262]",
      "dest": "primitive_type [41256,41263]"
    },
    {
      "src": "function: function [25771,25779]",
      "dest": "function: function [34111,34119]"
    },
    {
      "src": "): ) [25976,25977]",
      "dest": "): ) [34341,34342]"
    },
    {
      "src": "number_literal: 10 [24102,24104]",
      "dest": "number_literal: 10 [40349,40351]"
    },
    {
      "src": "address: address [42223,42230]",
      "dest": "address: address [1628,1635]"
    },
    {
      "src": "\": \" [34140,34141]",
      "dest": "\": \" [43094,43095]"
    },
    {
      "src": "function_definition [25094,25336]",
      "dest": "function_definition [41242,41567]"
    },
    {
      "src": "parameter [18963,18977]",
      "dest": "parameter [24852,24866]"
    },
    {
      "src": "): ) [33335,33336]",
      "dest": "): ) [15233,15234]"
    },
    {
      "src": "\": \" [43670,43671]",
      "dest": "\": \" [46384,46385]"
    },
    {
      "src": "sstore: sstore [29402,29408]",
      "dest": "sstore: sstore [38106,38112]"
    },
    {
      "src": "return: return [22385,22391]",
      "dest": "return: return [24438,24444]"
    },
    {
      "src": "call_argument [21405,21415]",
      "dest": "call_argument [33496,33506]"
    },
    {
      "src": "sstore: sstore [28681,28687]",
      "dest": "sstore: sstore [36919,36925]"
    },
    {
      "src": "type_name [1156,1163]",
      "dest": "type_name [8003,8010]"
    },
    {
      "src": "yul_path [31001,31007]",
      "dest": "yul_path [36279,36285]"
    },
    {
      "src": "identifier: ReclaimerToken [32713,32727]",
      "dest": "identifier: ReclaimerToken [32484,32498]"
    },
    {
      "src": "identifier: owner [1149,1154]",
      "dest": "identifier: owner [7996,8001]"
    },
    {
      "src": "uint256: uint256 [12836,12843]",
      "dest": "uint256: uint256 [24319,24326]"
    },
    {
      "src": "public: public [12036,12042]",
      "dest": "public: public [23658,23664]"
    },
    {
      "src": "event_paramater [24005,24018]",
      "dest": "event_paramater [32733,32746]"
    },
    {
      "src": "): ) [1194,1195]",
      "dest": "): ) [8041,8042]"
    },
    {
      "src": "primitive_type [17401,17408]",
      "dest": "primitive_type [31654,31661]"
    },
    {
      "src": ",: , [41974,41975]",
      "dest": ",: , [28042,28043]"
    },
    {
      "src": ",: , [1154,1155]",
      "dest": ",: , [8001,8002]"
    },
    {
      "src": "call_argument [39033,39043]",
      "dest": "call_argument [29583,29590]"
    },
    {
      "src": "}: } [10678,10679]",
      "dest": "}: } [11771,11772]"
    },
    {
      "src": "yul_function_call [30748,30763]",
      "dest": "yul_function_call [37827,37843]"
    },
    {
      "src": "type_name [1429,1436]",
      "dest": "type_name [1564,1571]"
    },
    {
      "src": "bool: bool [22293,22297]",
      "dest": "bool: bool [45074,45078]"
    },
    {
      "src": "uint256: uint256 [23425,23432]",
      "dest": "uint256: uint256 [44354,44361]"
    },
    {
      "src": "{: { [43647,43648]",
      "dest": "{: { [46361,46362]"
    },
    {
      "src": "{: { [398,399]",
      "dest": "{: { [5428,5429]"
    },
    {
      "src": "(: ( [24036,24037]",
      "dest": "(: ( [40756,40757]"
    },
    {
      "src": "): ) [10244,10245]",
      "dest": "): ) [28595,28596]"
    },
    {
      "src": "public: public [18527,18533]",
      "dest": "public: public [23986,23992]"
    },
    {
      "src": "view: view [18425,18429]",
      "dest": "view: view [8815,8819]"
    },
    {
      "src": "type_name [22293,22297]",
      "dest": "type_name [45074,45078]"
    },
    {
      "src": "type_name [12818,12825]",
      "dest": "type_name [24300,24307]"
    },
    {
      "src": "primitive_type [13970,13977]",
      "dest": "primitive_type [1196,1203]"
    },
    {
      "src": "type_name [43261,43266]",
      "dest": "type_name [45934,45939]"
    },
    {
      "src": "function_body [9691,9747]",
      "dest": "function_body [4614,4702]"
    },
    {
      "src": "internal: internal [23441,23449]",
      "dest": "internal: internal [44370,44378]"
    },
    {
      "src": "identifier: _who [4831,4835]",
      "dest": "identifier: account [29224,29231]"
    },
    {
      "src": "\": \" [41914,41915]",
      "dest": "\": \" [27919,27920]"
    },
    {
      "src": "identifier: c [10672,10673]",
      "dest": "identifier: c [11763,11764]"
    },
    {
      "src": "identifier: spender [911,918]",
      "dest": "identifier: spender [24843,24850]"
    },
    {
      "src": "\": \" [5001,5002]",
      "dest": "\": \" [29506,29507]"
    },
    {
      "src": "call_argument [9706,9732]",
      "dest": "call_argument [4633,4659]"
    },
    {
      "src": "primitive_type [41011,41015]",
      "dest": "primitive_type [42442,42446]"
    },
    {
      "src": "identifier: burner [23997,24003]",
      "dest": "identifier: burner [32725,32731]"
    },
    {
      "src": "(: ( [20493,20494]",
      "dest": "(: ( [24926,24927]"
    },
    {
      "src": "primitive_type [21340,21344]",
      "dest": "primitive_type [24368,24372]"
    },
    {
      "src": "event_definition [39459,39530]",
      "dest": "event_definition [40500,40563]"
    },
    {
      "src": "visibility [6996,7004]",
      "dest": "visibility [6361,6369]"
    },
    {
      "src": "call_argument [42372,42408]",
      "dest": "call_argument [30161,30180]"
    },
    {
      "src": "call_argument [39410,39416]",
      "dest": "call_argument [28678,28685]"
    },
    {
      "src": "type_name [40178,40185]",
      "dest": "type_name [45423,45430]"
    },
    {
      "src": "expression_statement [34990,35041]",
      "dest": "expression_statement [41924,42045]"
    },
    {
      "src": "type_name [479,486]",
      "dest": "type_name [7492,7499]"
    },
    {
      "src": "yul_identifier [29062,29068]",
      "dest": "yul_identifier [37376,37382]"
    },
    {
      "src": "): ) [29385,29386]",
      "dest": "): ) [38047,38048]"
    },
    {
      "src": "visibility [5479,5485]",
      "dest": "visibility [26255,26261]"
    },
    {
      "src": "{: { [32001,32002]",
      "dest": "{: { [38440,38441]"
    },
    {
      "src": "identifier: token [17687,17692]",
      "dest": "identifier: token [32043,32048]"
    },
    {
      "src": "view: view [499,503]",
      "dest": "view: view [5697,5701]"
    },
    {
      "src": "uint256: uint256 [25054,25061]",
      "dest": "uint256: uint256 [33000,33007]"
    },
    {
      "src": "primitive_type [4302,4309]",
      "dest": "primitive_type [28523,28530]"
    },
    {
      "src": "primitive_type [25070,25077]",
      "dest": "primitive_type [33016,33023]"
    },
    {
      "src": "visibility [34002,34010]",
      "dest": "visibility [43861,43869]"
    },
    {
      "src": "identifier: c [10647,10648]",
      "dest": "identifier: c [11695,11696]"
    },
    {
      "src": "return_statement [43481,43497]",
      "dest": "return_statement [46163,46179]"
    },
    {
      "src": "identifier: priorBalance [18802,18814]",
      "dest": "identifier: length [38412,38418]"
    },
    {
      "src": ",: , [16373,16374]",
      "dest": ",: , [4442,4443]"
    },
    {
      "src": "type_name [4302,4309]",
      "dest": "type_name [28523,28530]"
    },
    {
      "src": "type_name [4857,4864]",
      "dest": "type_name [30109,30116]"
    },
    {
      "src": "\": \" [5088,5089]",
      "dest": "\": \" [27148,27149]"
    },
    {
      "src": "type_name [18760,18767]",
      "dest": "type_name [33454,33461]"
    },
    {
      "src": ",: , [42782,42783]",
      "dest": ",: , [29306,29307]"
    },
    {
      "src": "external: external [25822,25830]",
      "dest": "external: external [34162,34170]"
    },
    {
      "src": "binary_expression [35544,35583]",
      "dest": "binary_expression [45098,45141]"
    },
    {
      "src": "string_literal [41276,41289]",
      "dest": "string_literal [34856,34905]"
    },
    {
      "src": "identifier: decimals [43341,43349]",
      "dest": "identifier: decimals [46014,46022]"
    },
    {
      "src": "yul_evm_builtin [29200,29206]",
      "dest": "yul_evm_builtin [38156,38162]"
    },
    {
      "src": "parameter [18666,18673]",
      "dest": "parameter [23840,23847]"
    },
    {
      "src": "primitive_type [9100,9107]",
      "dest": "primitive_type [5967,5974]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/ownership/Ownable.sol [8170,8232]",
      "dest": "comment: /**  * @dev Interface of the ERC20 standard as defined in the EIP.  */ [5337,5409]"
    },
    {
      "src": "call_argument [38753,38770]",
      "dest": "call_argument [27858,27881]"
    },
    {
      "src": "call_argument [11241,11247]",
      "dest": "call_argument [10964,10970]"
    },
    {
      "src": "parameter [9923,9939]",
      "dest": "parameter [7476,7490]"
    },
    {
      "src": "function: function [25094,25102]",
      "dest": "function: function [41242,41250]"
    },
    {
      "src": "identifier: paused_Deprecated [13437,13454]",
      "dest": "identifier: paused_Deprecated [658,675]"
    },
    {
      "src": "internal: internal [30909,30917]",
      "dest": "internal: internal [36072,36080]"
    },
    {
      "src": "call_expression [40432,40496]",
      "dest": "call_expression [44399,44471]"
    },
    {
      "src": "call_expression [39362,39417]",
      "dest": "call_expression [28645,28694]"
    },
    {
      "src": "call_argument [39921,39952]",
      "dest": "call_argument [19497,19527]"
    },
    {
      "src": "struct_member [1429,1443]",
      "dest": "struct_member [1564,1583]"
    },
    {
      "src": "function: function [40922,40930]",
      "dest": "function: function [34658,34666]"
    },
    {
      "src": "state_mutability [22957,22961]",
      "dest": "state_mutability [24578,24582]"
    },
    {
      "src": "visibility [33315,33321]",
      "dest": "visibility [26981,26987]"
    },
    {
      "src": "primitive_type [13950,13957]",
      "dest": "primitive_type [1177,1184]"
    },
    {
      "src": "identifier: offset [31771,31777]",
      "dest": "identifier: offset [37421,37427]"
    },
    {
      "src": "visibility [17607,17615]",
      "dest": "visibility [31954,31962]"
    },
    {
      "src": ",: , [25970,25971]",
      "dest": ",: , [34335,34336]"
    },
    {
      "src": "uint256: uint256 [4348,4355]",
      "dest": "uint256: uint256 [10025,10032]"
    },
    {
      "src": "{: { [43557,43558]",
      "dest": "{: { [46255,46256]"
    },
    {
      "src": "uint256: uint256 [23251,23258]",
      "dest": "uint256: uint256 [43003,43010]"
    },
    {
      "src": "variable_declaration_statement [22599,22616]",
      "dest": "variable_declaration_statement [11659,11677]"
    },
    {
      "src": "parameter [22293,22297]",
      "dest": "parameter [45074,45078]"
    },
    {
      "src": ",: , [29362,29363]",
      "dest": ",: , [38024,38025]"
    },
    {
      "src": "bool: bool [1108,1112]",
      "dest": "bool: bool [6020,6024]"
    },
    {
      "src": "string [34201,34225]",
      "dest": "string [44024,44069]"
    },
    {
      "src": "primitive_type [22918,22925]",
      "dest": "primitive_type [42425,42432]"
    },
    {
      "src": "call_argument [25860,25872]",
      "dest": "call_argument [34200,34212]"
    },
    {
      "src": "identifier: b [11241,11242]",
      "dest": "identifier: b [10964,10965]"
    },
    {
      "src": "uint256: uint256 [513,520]",
      "dest": "uint256: uint256 [5711,5718]"
    },
    {
      "src": "public: public [20445,20451]",
      "dest": "public: public [24868,24874]"
    },
    {
      "src": "(: ( [11240,11241]",
      "dest": "(: ( [10963,10964]"
    },
    {
      "src": "<=: <= [25865,25867]",
      "dest": "<=: <= [34205,34207]"
    },
    {
      "src": "identifier: owner [13230,13235]",
      "dest": "identifier: owner [471,476]"
    },
    {
      "src": "add: add [31047,31050]",
      "dest": "add: add [36446,36449]"
    },
    {
      "src": "parameter [4857,4871]",
      "dest": "parameter [30109,30123]"
    },
    {
      "src": "expression_statement [34174,34227]",
      "dest": "expression_statement [43976,44071]"
    },
    {
      "src": "call_argument [7189,7193]",
      "dest": "call_argument [16821,16825]"
    },
    {
      "src": "parameter [1002,1015]",
      "dest": "parameter [19403,19416]"
    },
    {
      "src": "call_argument [39406,39407]",
      "dest": "call_argument [28674,28675]"
    },
    {
      "src": "parameter [10824,10831]",
      "dest": "parameter [12962,12969]"
    },
    {
      "src": "): ) [38769,38770]",
      "dest": "): ) [27880,27881]"
    },
    {
      "src": "(: ( [13836,13837]",
      "dest": "(: ( [1414,1415]"
    },
    {
      "src": "call_argument [9170,9171]",
      "dest": "call_argument [27795,27796]"
    },
    {
      "src": "{: { [18557,18558]",
      "dest": "{: { [24025,24026]"
    },
    {
      "src": "(: ( [29061,29062]",
      "dest": "(: ( [37375,37376]"
    },
    {
      "src": "address: address [9162,9169]",
      "dest": "address: address [27787,27794]"
    },
    {
      "src": "(: ( [18628,18629]",
      "dest": "(: ( [23807,23808]"
    },
    {
      "src": "identifier: ROUNDING [43488,43496]",
      "dest": "identifier: ROUNDING [46170,46178]"
    },
    {
      "src": "uint256: uint256 [22971,22978]",
      "dest": "uint256: uint256 [24609,24616]"
    },
    {
      "src": "string [34140,34162]",
      "dest": "string [43094,43131]"
    },
    {
      "src": "type_name [13242,13249]",
      "dest": "type_name [483,490]"
    },
    {
      "src": "identifier: _to [41105,41108]",
      "dest": "identifier: account [41940,41947]"
    },
    {
      "src": "(: ( [43615,43616]",
      "dest": "(: ( [46313,46314]"
    },
    {
      "src": "yul_function_call [31670,31685]",
      "dest": "yul_function_call [37778,37795]"
    },
    {
      "src": "(: ( [17050,17051]",
      "dest": "(: ( [5148,5149]"
    },
    {
      "src": "(: ( [31716,31717]",
      "dest": "(: ( [36830,36831]"
    },
    {
      "src": "(: ( [40950,40951]",
      "dest": "(: ( [34672,34673]"
    },
    {
      "src": "type_name [12611,12618]",
      "dest": "type_name [19368,19375]"
    },
    {
      "src": "parameter [12796,12816]",
      "dest": "parameter [23969,23984]"
    },
    {
      "src": "identifier: _allowance [13924,13934]",
      "dest": "identifier: _allowances [1151,1162]"
    },
    {
      "src": "(: ( [35551,35552]",
      "dest": "(: ( [45105,45106]"
    },
    {
      "src": "identifier: location [31197,31205]",
      "dest": "identifier: location [36684,36692]"
    },
    {
      "src": "(: ( [9688,9689]",
      "dest": "(: ( [4611,4612]"
    },
    {
      "src": "public: public [5479,5485]",
      "dest": "public: public [26255,26261]"
    },
    {
      "src": "(: ( [17670,17671]",
      "dest": "(: ( [32017,32018]"
    },
    {
      "src": "(: ( [446,447]",
      "dest": "(: ( [6383,6384]"
    },
    {
      "src": "): ) [24070,24071]",
      "dest": "): ) [40790,40791]"
    },
    {
      "src": "primitive_type [25794,25801]",
      "dest": "primitive_type [34134,34141]"
    },
    {
      "src": "expression_statement [41301,41365]",
      "dest": "expression_statement [34743,34819]"
    },
    {
      "src": "member_expression [17388,17400]",
      "dest": "member_expression [31641,31653]"
    },
    {
      "src": "(: ( [31000,31001]",
      "dest": "(: ( [36278,36279]"
    },
    {
      "src": "state_variable_declaration [13516,13543]",
      "dest": "state_variable_declaration [737,764]"
    },
    {
      "src": "primitive_type [13848,13855]",
      "dest": "primitive_type [1426,1433]"
    },
    {
      "src": "identifier: sender [8739,8745]",
      "dest": "identifier: sender [8764,8770]"
    },
    {
      "src": "yul_function_call [29275,29289]",
      "dest": "yul_function_call [38231,38250]"
    },
    {
      "src": "call_argument [17058,17070]",
      "dest": "call_argument [5156,5168]"
    },
    {
      "src": "parameter [19148,19162]",
      "dest": "parameter [34690,34704]"
    },
    {
      "src": "{: { [18675,18676]",
      "dest": "{: { [23849,23850]"
    },
    {
      "src": "emit: emit [39007,39011]",
      "dest": "emit: emit [29569,29573]"
    },
    {
      "src": "source_file [0,43779]",
      "dest": "source_file [0,46396]"
    },
    {
      "src": "identifier: _burnAllArgs [25103,25115]",
      "dest": "identifier: mint [41251,41255]"
    },
    {
      "src": "): ) [11445,11446]",
      "dest": "): ) [10098,10099]"
    },
    {
      "src": ",: , [28754,28755]",
      "dest": ",: , [36933,36934]"
    },
    {
      "src": "): ) [20465,20466]",
      "dest": "): ) [24905,24906]"
    },
    {
      "src": "type_name [23635,23642]",
      "dest": "type_name [44337,44344]"
    },
    {
      "src": "address: address [39488,39495]",
      "dest": "address: address [40518,40525]"
    },
    {
      "src": "identifier: a [11032,11033]",
      "dest": "identifier: a [13033,13034]"
    },
    {
      "src": "): ) [24639,24640]",
      "dest": "): ) [29396,29397]"
    },
    {
      "src": "(: ( [18793,18794]",
      "dest": "(: ( [38403,38404]"
    },
    {
      "src": "comment: // File: contracts/modularERC20/BalanceSheet.sol [11474,11522]",
      "dest": "comment: /**  * @dev Collection of functions related to the address type  */ [14488,14557]"
    },
    {
      "src": "type_alias [19622,19630]",
      "dest": "type_alias [22636,22644]"
    },
    {
      "src": "visibility [13781,13787]",
      "dest": "visibility [1820,1826]"
    },
    {
      "src": "external: external [4318,4326]",
      "dest": "external: external [7527,7535]"
    },
    {
      "src": "address: address [1306,1313]",
      "dest": "address: address [5671,5678]"
    },
    {
      "src": "state_mutability [18425,18429]",
      "dest": "state_mutability [8815,8819]"
    },
    {
      "src": "uint256: uint256 [13981,13988]",
      "dest": "uint256: uint256 [1207,1214]"
    },
    {
      "src": "\": \" [25217,25218]",
      "dest": "\": \" [41389,41390]"
    },
    {
      "src": "visibility [12036,12042]",
      "dest": "visibility [23658,23664]"
    },
    {
      "src": "binary_expression [37506,37545]",
      "dest": "binary_expression [45145,45166]"
    },
    {
      "src": "yul_hex_number: 0xfffff [30973,30980]",
      "dest": "yul_hex_number: 0xfffff [36200,36207]"
    },
    {
      "src": "): ) [29041,29042]",
      "dest": "): ) [37306,37307]"
    },
    {
      "src": "return_statement [11255,11268]",
      "dest": "return_statement [11026,11035]"
    },
    {
      "src": "assignment_expression [25897,25911]",
      "dest": "assignment_expression [34262,34276]"
    },
    {
      "src": "contract: contract [43202,43210]",
      "dest": "contract: contract [45894,45902]"
    },
    {
      "src": "comment: // File: contracts/ProxyStorage.sol [12939,12974]",
      "dest": "comment: // File: contracts/true-currencies-new/ReclaimerToken.sol [31157,31214]"
    },
    {
      "src": "/: / [10649,10650]",
      "dest": "/: / [11697,11698]"
    },
    {
      "src": "sub: sub [29275,29278]",
      "dest": "sub: sub [38231,38234]"
    },
    {
      "src": "{: { [11409,11410]",
      "dest": "{: { [10014,10015]"
    },
    {
      "src": "yul_function_call [31047,31067]",
      "dest": "yul_function_call [36446,36466]"
    },
    {
      "src": "visibility [23683,23691]",
      "dest": "visibility [45051,45059]"
    },
    {
      "src": "parameter [12589,12609]",
      "dest": "parameter [18886,18900]"
    },
    {
      "src": "identifier: _balanceOf [13857,13867]",
      "dest": "identifier: finOpSupply_Deprecated [1435,1457]"
    },
    {
      "src": "state_mutability [43625,43629]",
      "dest": "state_mutability [46332,46336]"
    },
    {
      "src": "parameter [587,591]",
      "dest": "parameter [7545,7549]"
    },
    {
      "src": "): ) [18555,18556]",
      "dest": "): ) [24023,24024]"
    },
    {
      "src": "contract_declaration [15813,17149]",
      "dest": "contract_declaration [3716,5247]"
    },
    {
      "src": "type_name [43296,43301]",
      "dest": "type_name [45969,45974]"
    },
    {
      "src": "return_type_definition [20452,20466]",
      "dest": "return_type_definition [24892,24906]"
    },
    {
      "src": "library: library [10414,10421]",
      "dest": "library: library [9684,9691]"
    },
    {
      "src": "emit_statement [16171,16216]",
      "dest": "emit_statement [4238,4283]"
    },
    {
      "src": "state_mutability [3295,3299]",
      "dest": "state_mutability [15215,15219]"
    },
    {
      "src": "(: ( [40385,40386]",
      "dest": "(: ( [28505,28506]"
    },
    {
      "src": "\": \" [41629,41630]",
      "dest": "\": \" [27799,27800]"
    },
    {
      "src": "identifier: this [17671,17675]",
      "dest": "identifier: this [32026,32030]"
    },
    {
      "src": "(: ( [15882,15883]",
      "dest": "(: ( [3972,3973]"
    },
    {
      "src": "type_name [22532,22539]",
      "dest": "type_name [10996,11003]"
    },
    {
      "src": "): ) [30980,30981]",
      "dest": "): ) [36207,36208]"
    },
    {
      "src": "): ) [13855,13856]",
      "dest": "): ) [1433,1434]"
    },
    {
      "src": "{: { [21346,21347]",
      "dest": "{: { [33479,33480]"
    },
    {
      "src": "is: is [25001,25003]",
      "dest": "is: is [32481,32483]"
    },
    {
      "src": "state_variable_declaration [13242,13270]",
      "dest": "state_variable_declaration [483,511]"
    },
    {
      "src": "): ) [29288,29289]",
      "dest": "): ) [38249,38250]"
    },
    {
      "src": "struct: struct [1397,1403]",
      "dest": "struct: struct [1529,1535]"
    },
    {
      "src": "identifier: _value [25321,25327]",
      "dest": "identifier: amount [41515,41521]"
    },
    {
      "src": "visibility [24149,24157]",
      "dest": "visibility [41894,41902]"
    },
    {
      "src": "type_name [13646,13652]",
      "dest": "type_name [870,876]"
    },
    {
      "src": "\": \" [42410,42411]",
      "dest": "\": \" [30182,30183]"
    },
    {
      "src": "yul_identifier [30957,30963]",
      "dest": "yul_identifier [36184,36190]"
    },
    {
      "src": "yul_function_call [29350,29386]",
      "dest": "yul_function_call [38010,38048]"
    },
    {
      "src": "internal: internal [11195,11203]",
      "dest": "internal: internal [10913,10921]"
    },
    {
      "src": "expression_statement [16399,16401]",
      "dest": "expression_statement [4468,4470]"
    },
    {
      "src": "type_name [3550,3557]",
      "dest": "type_name [27725,27732]"
    },
    {
      "src": "primitive_type [11863,11870]",
      "dest": "primitive_type [18306,18313]"
    },
    {
      "src": "string_literal [5000,5002]",
      "dest": "string_literal [29471,29507]"
    },
    {
      "src": "(: ( [28974,28975]",
      "dest": "(: ( [37239,37240]"
    },
    {
      "src": "type_name [13549,13556]",
      "dest": "type_name [770,777]"
    },
    {
      "src": "type_name [25070,25077]",
      "dest": "type_name [33016,33023]"
    },
    {
      "src": "(: ( [13882,13883]",
      "dest": "(: ( [1110,1111]"
    },
    {
      "src": "type_name [13773,13780]",
      "dest": "type_name [1000,1007]"
    },
    {
      "src": "private: private [13725,13732]",
      "dest": "private: private [952,959]"
    },
    {
      "src": "identifier: newOwner [16800,16808]",
      "dest": "identifier: newOwner [4896,4904]"
    },
    {
      "src": "number_literal: 0 [10609,10610]",
      "dest": "number_literal: 0 [11634,11635]"
    },
    {
      "src": "parameter [11736,11750]",
      "dest": "parameter [7511,7525]"
    },
    {
      "src": "visibility [13557,13563]",
      "dest": "visibility [778,784]"
    },
    {
      "src": "expression_statement [16838,16862]",
      "dest": "expression_statement [4934,4958]"
    },
    {
      "src": "=: = [13572,13573]",
      "dest": "=: = [793,794]"
    },
    {
      "src": "internal: internal [34002,34010]",
      "dest": "internal: internal [43861,43869]"
    },
    {
      "src": "{: { [41017,41018]",
      "dest": "{: { [34732,34733]"
    },
    {
      "src": "\": \" [41976,41977]",
      "dest": "\": \" [28044,28045]"
    },
    {
      "src": "address: address [1133,1140]",
      "dest": "address: address [7980,7987]"
    },
    {
      "src": "call_argument [9150,9172]",
      "dest": "call_argument [27777,27797]"
    },
    {
      "src": "state_variable_declaration [13828,13868]",
      "dest": "state_variable_declaration [1407,1458]"
    },
    {
      "src": "call_argument [35059,35076]",
      "dest": "call_argument [43151,43176]"
    },
    {
      "src": "contract_declaration [17194,17976]",
      "dest": "contract_declaration [31382,32082]"
    },
    {
      "src": "return_statement [43391,43407]",
      "dest": "return_statement [46073,46089]"
    },
    {
      "src": "emit_statement [39007,39053]",
      "dest": "emit_statement [29569,29612]"
    },
    {
      "src": "(: ( [33797,33798]",
      "dest": "(: ( [25566,25567]"
    },
    {
      "src": ",: , [40464,40465]",
      "dest": ",: , [44423,44424]"
    },
    {
      "src": "returns: returns [11209,11216]",
      "dest": "returns: returns [10927,10934]"
    },
    {
      "src": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [16231,16308]",
      "dest": "comment: /**      * @dev sets the original `owner` of the contract to the sender      * at construction. Must then be reinitialized      */ [4038,4171]"
    },
    {
      "src": "): ) [17714,17715]",
      "dest": "): ) [32070,32071]"
    },
    {
      "src": "identifier: _max [25972,25976]",
      "dest": "identifier: _max [34337,34341]"
    },
    {
      "src": "(: ( [29324,29325]",
      "dest": "(: ( [37935,37936]"
    },
    {
      "src": "type_name [1181,1188]",
      "dest": "type_name [8028,8035]"
    },
    {
      "src": "identifier: b [11372,11373]",
      "dest": "identifier: b [9979,9980]"
    },
    {
      "src": "yul_identifier [31197,31205]",
      "dest": "yul_identifier [36684,36692]"
    },
    {
      "src": "type_name [11364,11371]",
      "dest": "type_name [9971,9978]"
    },
    {
      "src": "member_expression [16150,16160]",
      "dest": "member_expression [4217,4227]"
    },
    {
      "src": "identifier: a [11420,11421]",
      "dest": "identifier: a [10037,10038]"
    },
    {
      "src": "solidity_version_comparison_operator [15,17]",
      "dest": "solidity_version_comparison_operator [5325,5327]"
    },
    {
      "src": "primitive_type [21506,21513]",
      "dest": "primitive_type [26956,26963]"
    },
    {
      "src": "type_name [17345,17352]",
      "dest": "type_name [31590,31605]"
    },
    {
      "src": "(: ( [39020,39021]",
      "dest": "(: ( [29582,29583]"
    },
    {
      "src": "return_statement [21427,21439]",
      "dest": "return_statement [24968,24980]"
    },
    {
      "src": "visibility [23441,23449]",
      "dest": "visibility [44370,44378]"
    },
    {
      "src": "function: function [12774,12782]",
      "dest": "function: function [24282,24290]"
    },
    {
      "src": "true [33407,33411]",
      "dest": "true [27169,27173]"
    },
    {
      "src": "yul_function_call [28643,28659]",
      "dest": "yul_function_call [36631,36648]"
    },
    {
      "src": "=: = [16851,16852]",
      "dest": "=: = [4947,4948]"
    },
    {
      "src": "identifier: _value [24278,24284]",
      "dest": "identifier: amount [41281,41287]"
    },
    {
      "src": "type_name [23393,23400]",
      "dest": "type_name [25483,25490]"
    },
    {
      "src": "): ) [424,425]",
      "dest": "): ) [6359,6360]"
    },
    {
      "src": "=: = [4363,4364]",
      "dest": "=: = [10035,10036]"
    },
    {
      "src": "call_argument [21382,21390]",
      "dest": "call_argument [33508,33514]"
    },
    {
      "src": "): ) [13989,13990]",
      "dest": "): ) [1215,1216]"
    },
    {
      "src": "interface: interface [1247,1256]",
      "dest": "interface: interface [5411,5420]"
    },
    {
      "src": "comment: /**  * @title Ownable  * @dev The Ownable contract has an owner address, and provides basic authorization control  * functions, this simplifies the implementation of \"user permissions\".  */ [8236,8429]",
      "dest": "comment: // File: @openzeppelin/contracts/GSN/Context.sol [8050,8098]"
    },
    {
      "src": "type_name [10790,10797]",
      "dest": "type_name [12900,12907]"
    },
    {
      "src": "call_argument [41976,41989]",
      "dest": "call_argument [28044,28084]"
    },
    {
      "src": "visibility [13477,13484]",
      "dest": "visibility [698,705]"
    },
    {
      "src": "identifier: assert [10640,10646]",
      "dest": "identifier: require [11687,11694]"
    },
    {
      "src": "type_name [22918,22925]",
      "dest": "type_name [42425,42432]"
    },
    {
      "src": "internal: internal [24286,24294]",
      "dest": "internal: internal [29249,29257]"
    },
    {
      "src": "primitive_type [43463,43468]",
      "dest": "primitive_type [46145,46150]"
    },
    {
      "src": "identifier: a [11246,11247]",
      "dest": "identifier: a [10969,10970]"
    },
    {
      "src": "parameter [888,901]",
      "dest": "parameter [24539,24552]"
    },
    {
      "src": "variable_declaration_statement [3900,3931]",
      "dest": "variable_declaration_statement [13021,13039]"
    },
    {
      "src": "type_name [1306,1313]",
      "dest": "type_name [5671,5678]"
    },
    {
      "src": "parameter [22236,22252]",
      "dest": "parameter [41856,41871]"
    },
    {
      "src": "yul_path [28489,28494]",
      "dest": "yul_path [36505,36511]"
    },
    {
      "src": "function: function [954,962]",
      "dest": "function: function [31058,31066]"
    },
    {
      "src": "): ) [6014,6015]",
      "dest": "): ) [13684,13685]"
    },
    {
      "src": "identifier: newOwner [9931,9939]",
      "dest": "identifier: sender [7484,7490]"
    },
    {
      "src": "): ) [10538,10539]",
      "dest": "): ) [11334,11335]"
    },
    {
      "src": "view: view [927,931]",
      "dest": "view: view [5541,5545]"
    },
    {
      "src": "): ) [1090,1091]",
      "dest": "): ) [6000,6001]"
    },
    {
      "src": "type_name [941,948]",
      "dest": "type_name [5555,5562]"
    },
    {
      "src": "mapping: mapping [13941,13948]",
      "dest": "mapping: mapping [1169,1176]"
    },
    {
      "src": "call_argument [20504,20510]",
      "dest": "call_argument [24950,24956]"
    },
    {
      "src": "\": \" [38772,38773]",
      "dest": "\": \" [43921,43922]"
    },
    {
      "src": "(: ( [18665,18666]",
      "dest": "(: ( [23839,23840]"
    },
    {
      "src": "parameter [12005,12018]",
      "dest": "parameter [17903,17917]"
    },
    {
      "src": "yul_function_call [29200,29290]",
      "dest": "yul_function_call [38156,38251]"
    },
    {
      "src": "public: public [16990,16996]",
      "dest": "public: public [5088,5094]"
    },
    {
      "src": "(: ( [10584,10585]",
      "dest": "(: ( [11603,11604]"
    },
    {
      "src": "identifier: this [7189,7193]",
      "dest": "identifier: this [16821,16825]"
    },
    {
      "src": "comment: /**  * @title HasOwner  * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin.   and provides basic authorization control functions. Inherits storage layout of   ProxyStorage.  */ [15608,15811]",
      "dest": "comment: /**  * @title BurnableTokenWithBounds  * @dev Burning functions as redeeming money from the system.  * The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */ [32183,32437]"
    },
    {
      "src": "primitive_type [16792,16799]",
      "dest": "primitive_type [4888,4895]"
    },
    {
      "src": "identifier: minimumGasPriceForFutureRefunds [13788,13819]",
      "dest": "identifier: minimumGasPriceForFutureRefunds_Deprecated [1008,1050]"
    },
    {
      "src": "call_argument [10647,10657]",
      "dest": "call_argument [11695,11705]"
    },
    {
      "src": "uint256: uint256 [12020,12027]",
      "dest": "uint256: uint256 [26235,26242]"
    },
    {
      "src": "expression_statement [20478,20524]",
      "dest": "expression_statement [24918,24958]"
    },
    {
      "src": "contract: contract [26277,26285]",
      "dest": "contract: contract [35904,35912]"
    },
    {
      "src": "): ) [41289,41290]",
      "dest": "): ) [34905,34906]"
    },
    {
      "src": "type_name [13424,13428]",
      "dest": "type_name [645,649]"
    },
    {
      "src": "returns: returns [11389,11396]",
      "dest": "returns: returns [9996,10003]"
    },
    {
      "src": "state_mutability [31954,31958]",
      "dest": "state_mutability [38390,38394]"
    },
    {
      "src": "public: public [32105,32111]",
      "dest": "public: public [38605,38611]"
    },
    {
      "src": "type_cast_expression [40727,40737]",
      "dest": "type_cast_expression [28833,28843]"
    },
    {
      "src": "constructor_definition [16110,16223]",
      "dest": "constructor_definition [4177,4290]"
    },
    {
      "src": "/: / [11034,11035]",
      "dest": "/: / [13035,13036]"
    },
    {
      "src": "binary_expression [11262,11267]",
      "dest": "binary_expression [11008,11013]"
    },
    {
      "src": "primitive_type [12422,12429]",
      "dest": "primitive_type [1696,1703]"
    },
    {
      "src": "type_cast_expression [17128,17138]",
      "dest": "type_cast_expression [5226,5236]"
    },
    {
      "src": "yul_identifier [31001,31007]",
      "dest": "yul_identifier [36279,36285]"
    },
    {
      "src": "string [25196,25218]",
      "dest": "string [41352,41390]"
    },
    {
      "src": "(: ( [42371,42372]",
      "dest": "(: ( [30160,30161]"
    },
    {
      "src": "identifier: _value [12028,12034]",
      "dest": "identifier: addedValue [26243,26253]"
    },
    {
      "src": "}: } [43413,43414]",
      "dest": "}: } [46095,46096]"
    },
    {
      "src": ",: , [11362,11363]",
      "dest": ",: , [9969,9970]"
    },
    {
      "src": "identifier: globalPause_Deprecated [13485,13507]",
      "dest": "identifier: globalPause_Deprecated [706,728]"
    },
    {
      "src": "number_literal: 0 [13574,13575]",
      "dest": "number_literal: 0 [795,796]"
    },
    {
      "src": "primitive_type [24005,24012]",
      "dest": "primitive_type [32733,32740]"
    },
    {
      "src": "address: address [15933,15940]",
      "dest": "address: address [4004,4011]"
    },
    {
      "src": "call_argument [25238,25255]",
      "dest": "call_argument [41410,41439]"
    },
    {
      "src": "expression_statement [40432,40497]",
      "dest": "expression_statement [44399,44472]"
    },
    {
      "src": "call_expression [9142,9173]",
      "dest": "call_expression [27769,27839]"
    },
    {
      "src": "identifier: value [1010,1015]",
      "dest": "identifier: value [19411,19416]"
    },
    {
      "src": "identifier: msg [16150,16153]",
      "dest": "identifier: msg [4217,4220]"
    },
    {
      "src": "}: } [31321,31322]",
      "dest": "}: } [36710,36711]"
    },
    {
      "src": "uint8: uint8 [43463,43468]",
      "dest": "uint8: uint8 [46145,46150]"
    },
    {
      "src": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [29110,29176]",
      "dest": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [37583,37649]"
    },
    {
      "src": ".: . [40620,40621]",
      "dest": ".: . [28734,28735]"
    },
    {
      "src": "call_argument [35017,35039]",
      "dest": "call_argument [41978,42043]"
    },
    {
      "src": ":=: := [29316,29318]",
      "dest": ":=: := [37927,37929]"
    },
    {
      "src": "primitive_type [12323,12330]",
      "dest": "primitive_type [1366,1373]"
    },
    {
      "src": "identifier: CompliantDepositTokenWithHook [43224,43253]",
      "dest": "identifier: TrueCurrency [45914,45926]"
    },
    {
      "src": "): ) [22948,22949]",
      "dest": "): ) [24569,24570]"
    },
    {
      "src": "comment: /**       @dev refund 15,000 gas     @dev costs slightly more than 10,200 gas     */ [31363,31450]",
      "dest": "comment: /**      * @dev Return the remaining sheep slots      */ [38505,38563]"
    },
    {
      "src": "state_mutability [11384,11388]",
      "dest": "state_mutability [9991,9995]"
    },
    {
      "src": "primitive_type [41805,41812]",
      "dest": "primitive_type [1803,1810]"
    },
    {
      "src": "call_argument [39021,39031]",
      "dest": "call_argument [29592,29602]"
    },
    {
      "src": "identifier: _tokenHolder [12390,12402]",
      "dest": "identifier: target [19701,19707]"
    },
    {
      "src": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [16416,16509]",
      "dest": "comment: /**      * @dev Throws if called by any account other than the owner.      */ [4298,4377]"
    },
    {
      "src": "=: = [43285,43286]",
      "dest": "=: = [45958,45959]"
    },
    {
      "src": "add: add [28756,28759]",
      "dest": "add: add [20490,20493]"
    },
    {
      "src": "uint256: uint256 [1077,1084]",
      "dest": "uint256: uint256 [18921,18928]"
    },
    {
      "src": "state_mutability [10549,10553]",
      "dest": "state_mutability [11345,11349]"
    },
    {
      "src": "true: true [33885,33889]",
      "dest": "true: true [26397,26401]"
    },
    {
      "src": "\": \" [25257,25258]",
      "dest": "\": \" [41441,41442]"
    },
    {
      "src": "uint256: uint256 [18997,19004]",
      "dest": "uint256: uint256 [38626,38633]"
    },
    {
      "src": "identifier: balanceOf [17661,17670]",
      "dest": "identifier: balanceOf [32008,32017]"
    },
    {
      "src": "state_variable_declaration [32927,32980]",
      "dest": "state_variable_declaration [40362,40415]"
    },
    {
      "src": "event_paramater [1133,1154]",
      "dest": "event_paramater [7980,8001]"
    },
    {
      "src": ",: , [38770,38771]",
      "dest": ",: , [27881,27882]"
    },
    {
      "src": "assignment_expression [16838,16861]",
      "dest": "assignment_expression [4934,4957]"
    },
    {
      "src": "primitive_type [11353,11360]",
      "dest": "primitive_type [9960,9967]"
    },
    {
      "src": "type_name [22236,22243]",
      "dest": "type_name [41856,41863]"
    },
    {
      "src": "return_type_definition [438,455]",
      "dest": "return_type_definition [6375,6392]"
    },
    {
      "src": "visibility [18643,18651]",
      "dest": "visibility [8806,8814]"
    },
    {
      "src": "type_name [12589,12596]",
      "dest": "type_name [18886,18893]"
    },
    {
      "src": "function_definition [43332,43414]",
      "dest": "function_definition [46005,46096]"
    },
    {
      "src": "identifier: location [28479,28487]",
      "dest": "identifier: location [36495,36503]"
    },
    {
      "src": "type_name [24255,24262]",
      "dest": "type_name [41256,41263]"
    },
    {
      "src": "): ) [5504,5505]",
      "dest": "): ) [26283,26284]"
    },
    {
      "src": "identifier: sheep [29310,29315]",
      "dest": "identifier: sheep [37921,37926]"
    },
    {
      "src": "pure: pure [10810,10814]",
      "dest": "pure: pure [12948,12952]"
    },
    {
      "src": "uint256: uint256 [18548,18555]",
      "dest": "uint256: uint256 [24016,24023]"
    },
    {
      "src": "(: ( [16332,16333]",
      "dest": "(: ( [4401,4402]"
    },
    {
      "src": "yul_evm_builtin [30744,30747]",
      "dest": "yul_evm_builtin [37827,37830]"
    },
    {
      "src": "uint256: uint256 [18666,18673]",
      "dest": "uint256: uint256 [23840,23847]"
    },
    {
      "src": "visibility [22512,22520]",
      "dest": "visibility [18936,18944]"
    },
    {
      "src": "(: ( [21287,21288]",
      "dest": "(: ( [33453,33454]"
    },
    {
      "src": "type_name [12422,12429]",
      "dest": "type_name [1696,1703]"
    },
    {
      "src": "pure: pure [43359,43363]",
      "dest": "pure: pure [46041,46045]"
    },
    {
      "src": "type_name [12796,12803]",
      "dest": "type_name [23969,23976]"
    },
    {
      "src": "parameter [6007,6014]",
      "dest": "parameter [13677,13684]"
    },
    {
      "src": "member_expression [8735,8745]",
      "dest": "member_expression [8760,8770]"
    },
    {
      "src": "type_cast_expression [41179,41207]",
      "dest": "type_cast_expression [16813,16826]"
    },
    {
      "src": "constant: constant [24086,24094]",
      "dest": "constant: constant [40333,40341]"
    },
    {
      "src": "call_argument [34201,34225]",
      "dest": "call_argument [44024,44069]"
    },
    {
      "src": "(: ( [39487,39488]",
      "dest": "(: ( [40517,40518]"
    },
    {
      "src": "call_expression [11234,11248]",
      "dest": "call_expression [10956,10985]"
    },
    {
      "src": "type_name [4348,4355]",
      "dest": "type_name [10025,10032]"
    },
    {
      "src": "identifier: owner [16368,16373]",
      "dest": "identifier: owner [4437,4442]"
    },
    {
      "src": "type_name [11184,11191]",
      "dest": "type_name [10874,10881]"
    },
    {
      "src": "returns: returns [20452,20459]",
      "dest": "returns: returns [24892,24899]"
    },
    {
      "src": "): ) [11373,11374]",
      "dest": "): ) [9980,9981]"
    },
    {
      "src": "return_type_definition [18539,18556]",
      "dest": "return_type_definition [24007,24024]"
    },
    {
      "src": "internal: internal [23683,23691]",
      "dest": "internal: internal [45051,45059]"
    },
    {
      "src": ",: , [31205,31206]",
      "dest": ",: , [36692,36693]"
    },
    {
      "src": "(: ( [28908,28909]",
      "dest": "(: ( [37119,37120]"
    },
    {
      "src": "member_expression [40608,40624]",
      "dest": "member_expression [28722,28738]"
    },
    {
      "src": "yul_variable_declaration [30953,30981]",
      "dest": "yul_variable_declaration [36180,36208]"
    },
    {
      "src": "call_argument [41105,41108]",
      "dest": "call_argument [41940,41947]"
    },
    {
      "src": "identifier: OwnershipTransferred [15862,15882]",
      "dest": "identifier: OwnershipTransferred [3952,3972]"
    },
    {
      "src": "string [41350,41363]",
      "dest": "string [34770,34817]"
    },
    {
      "src": "internal: internal [22512,22520]",
      "dest": "internal: internal [18936,18944]"
    },
    {
      "src": "[: [ [4963,4964]",
      "dest": "[: [ [29428,29429]"
    },
    {
      "src": "): ) [8711,8712]",
      "dest": "): ) [8692,8693]"
    },
    {
      "src": "false [13457,13462]",
      "dest": "false [678,683]"
    },
    {
      "src": "identifier: keccak256 [2423,2432]",
      "dest": "identifier: require [4625,4632]"
    },
    {
      "src": "return_type_definition [1024,1038]",
      "dest": "return_type_definition [7121,7135]"
    },
    {
      "src": "\": \" [16386,16387]",
      "dest": "\": \" [4455,4456]"
    },
    {
      "src": ",: , [28766,28767]",
      "dest": ",: , [36945,36946]"
    },
    {
      "src": ",: , [25806,25807]",
      "dest": ",: , [34146,34147]"
    },
    {
      "src": "=: = [4976,4977]",
      "dest": "=: = [29438,29439]"
    },
    {
      "src": "primitive_type [33798,33802]",
      "dest": "primitive_type [25567,25571]"
    },
    {
      "src": "internal: internal [19164,19172]",
      "dest": "internal: internal [34706,34714]"
    },
    {
      "src": "identifier: this [17409,17413]",
      "dest": "identifier: this [31662,31666]"
    },
    {
      "src": "type_name [22971,22978]",
      "dest": "type_name [24609,24616]"
    },
    {
      "src": "call_argument [10243,10244]",
      "dest": "call_argument [28594,28595]"
    },
    {
      "src": "(: ( [11397,11398]",
      "dest": "(: ( [10004,10005]"
    },
    {
      "src": "type_name [17581,17586]",
      "dest": "type_name [31927,31933]"
    },
    {
      "src": "): ) [12850,12851]",
      "dest": "): ) [24333,24334]"
    },
    {
      "src": "function_definition [21262,21446]",
      "dest": "function_definition [33440,33523]"
    },
    {
      "src": "public: public [13250,13256]",
      "dest": "public: public [491,497]"
    },
    {
      "src": "}: } [16868,16869]",
      "dest": "}: } [4964,4965]"
    },
    {
      "src": "identifier: value [24013,24018]",
      "dest": "identifier: value [32741,32746]"
    },
    {
      "src": "function_definition [526,593]",
      "dest": "function_definition [7454,7551]"
    },
    {
      "src": "identifier: require [16346,16353]",
      "dest": "identifier: require [4415,4422]"
    },
    {
      "src": "function: function [18494,18502]",
      "dest": "function: function [23950,23958]"
    },
    {
      "src": "{: { [20467,20468]",
      "dest": "{: { [24907,24908]"
    },
    {
      "src": "(: ( [11655,11656]",
      "dest": "(: ( [1066,1067]"
    },
    {
      "src": "): ) [17422,17423]",
      "dest": "): ) [31675,31676]"
    },
    {
      "src": "internal: internal [41528,41536]",
      "dest": "internal: internal [27741,27749]"
    },
    {
      "src": "identifier: newOwner [15949,15957]",
      "dest": "identifier: newOwner [4020,4028]"
    },
    {
      "src": "primitive_type [11656,11663]",
      "dest": "primitive_type [1067,1074]"
    },
    {
      "src": "parameter [23251,23265]",
      "dest": "parameter [43003,43017]"
    },
    {
      "src": "yul_block [31687,31801]",
      "dest": "yul_block [36712,36858]"
    },
    {
      "src": "type_name [15893,15900]",
      "dest": "type_name [3973,3980]"
    },
    {
      "src": "assignment_expression [25922,25936]",
      "dest": "assignment_expression [34287,34301]"
    },
    {
      "src": "expression_statement [25293,25329]",
      "dest": "expression_statement [41500,41523]"
    },
    {
      "src": "internal: internal [42113,42121]",
      "dest": "internal: internal [31130,31138]"
    },
    {
      "src": "uint256: uint256 [40178,40185]",
      "dest": "uint256: uint256 [45423,45430]"
    },
    {
      "src": "yul_path [31717,31725]",
      "dest": "yul_path [36831,36839]"
    },
    {
      "src": "visibility [13223,13229]",
      "dest": "visibility [464,470]"
    },
    {
      "src": "identifier: reclaimEther [17332,17344]",
      "dest": "identifier: reclaimEther [31577,31589]"
    },
    {
      "src": "}: } [29435,29436]",
      "dest": "}: } [38139,38140]"
    },
    {
      "src": "type_name [6461,6468]",
      "dest": "type_name [31114,31121]"
    },
    {
      "src": "call_expression [42735,42798]",
      "dest": "call_expression [29277,29344]"
    },
    {
      "src": "primitive_type [12404,12411]",
      "dest": "primitive_type [578,585]"
    },
    {
      "src": "identifier: balance [39521,39528]",
      "dest": "identifier: isBlacklisted [40548,40561]"
    },
    {
      "src": ",: , [1075,1076]",
      "dest": ",: , [5984,5985]"
    },
    {
      "src": "(: ( [38752,38753]",
      "dest": "(: ( [27857,27858]"
    },
    {
      "src": "pure: pure [43535,43539]",
      "dest": "pure: pure [46226,46230]"
    },
    {
      "src": "yul_function_call [29059,29072]",
      "dest": "yul_function_call [37373,37391]"
    },
    {
      "src": "event_definition [24026,24072]",
      "dest": "event_definition [40746,40792]"
    },
    {
      "src": ",: , [24003,24004]",
      "dest": ",: , [32731,32732]"
    },
    {
      "src": "primitive_type [1060,1067]",
      "dest": "primitive_type [24554,24561]"
    },
    {
      "src": "public: public [11894,11900]",
      "dest": "public: public [23810,23816]"
    },
    {
      "src": "solidity: solidity [7,15]",
      "dest": "solidity: solidity [5317,5325]"
    },
    {
      "src": "if_statement [10581,10618]",
      "dest": "if_statement [11600,11647]"
    },
    {
      "src": "(: ( [16791,16792]",
      "dest": "(: ( [4887,4888]"
    },
    {
      "src": "primitive_type [11721,11728]",
      "dest": "primitive_type [15189,15196]"
    },
    {
      "src": "expression_statement [17082,17103]",
      "dest": "expression_statement [5180,5201]"
    },
    {
      "src": "==: == [16365,16367]",
      "dest": "==: == [4434,4436]"
    },
    {
      "src": "\": \" [42883,42884]",
      "dest": "\": \" [30298,30299]"
    },
    {
      "src": "event_definition [23970,24020]",
      "dest": "event_definition [32698,32748]"
    },
    {
      "src": "): ) [20522,20523]",
      "dest": "): ) [24956,24957]"
    },
    {
      "src": "binary_expression [9150,9172]",
      "dest": "binary_expression [27777,27797]"
    },
    {
      "src": "identifier: _who [19142,19146]",
      "dest": "identifier: account [34681,34688]"
    },
    {
      "src": "comment: /* Defines the storage layout of the token implementaiton contract. Any newly declared state variables in future upgrades should be appened to the bottom. Never remove state variables from this list  */ [12978,13184]",
      "dest": "comment: /**  * @title ReclaimerToken  * @dev ERC20 token which allows owner to reclaim ERC20 tokens  * or ether sent to this contract  */ [31247,31380]"
    },
    {
      "src": "type_name [12283,12332]",
      "dest": "type_name [1328,1375]"
    },
    {
      "src": "variable_declaration [17637,17652]",
      "dest": "variable_declaration [31984,31999]"
    },
    {
      "src": "return: return [43658,43664]",
      "dest": "return: return [46372,46378]"
    },
    {
      "src": "yul_path [29279,29285]",
      "dest": "yul_path [38235,38241]"
    },
    {
      "src": "): ) [18525,18526]",
      "dest": "): ) [23984,23985]"
    },
    {
      "src": "string [43665,43671]",
      "dest": "string [46379,46385]"
    },
    {
      "src": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [29207,29273]",
      "dest": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [38163,38229]"
    },
    {
      "src": "(: ( [478,479]",
      "dest": "(: ( [5670,5671]"
    },
    {
      "src": "=: = [22549,22550]",
      "dest": "=: = [11006,11007]"
    },
    {
      "src": "primitive_type [12589,12596]",
      "dest": "primitive_type [18886,18893]"
    },
    {
      "src": "call_expression [16346,16388]",
      "dest": "call_expression [4415,4457]"
    },
    {
      "src": "state_variable_declaration [24078,24111]",
      "dest": "state_variable_declaration [40325,40356]"
    },
    {
      "src": "sub: sub [28379,28382]",
      "dest": "sub: sub [36491,36494]"
    },
    {
      "src": "call_argument [35078,35102]",
      "dest": "call_argument [43178,43218]"
    },
    {
      "src": "binary_expression [42744,42782]",
      "dest": "binary_expression [29285,29306]"
    },
    {
      "src": "yul_assignment [32016,32040]",
      "dest": "yul_assignment [38455,38479]"
    },
    {
      "src": "type_cast_expression [24630,24640]",
      "dest": "type_cast_expression [29387,29397]"
    },
    {
      "src": "yul_path [29062,29068]",
      "dest": "yul_path [37376,37382]"
    },
    {
      "src": "return: return [33400,33406]",
      "dest": "return: return [27162,27168]"
    },
    {
      "src": "primitive_type [447,454]",
      "dest": "primitive_type [6384,6391]"
    },
    {
      "src": "\": \" [41641,41642]",
      "dest": "\": \" [27837,27838]"
    },
    {
      "src": "primitive_type [24037,24044]",
      "dest": "primitive_type [40757,40764]"
    },
    {
      "src": "event_definition [597,669]",
      "dest": "event_definition [7728,7800]"
    },
    {
      "src": "primitive_type [13516,13523]",
      "dest": "primitive_type [737,744]"
    },
    {
      "src": "assignment_expression [17082,17102]",
      "dest": "assignment_expression [5180,5200]"
    },
    {
      "src": "inheritance_specifier [32713,32727]",
      "dest": "inheritance_specifier [32484,32498]"
    },
    {
      "src": "binary_expression [10647,10657]",
      "dest": "binary_expression [11695,11705]"
    },
    {
      "src": "state_mutability [32112,32116]",
      "dest": "state_mutability [38612,38616]"
    },
    {
      "src": "(: ( [16121,16122]",
      "dest": "(: ( [4188,4189]"
    },
    {
      "src": ",: , [34199,34200]",
      "dest": ",: , [44022,44023]"
    },
    {
      "src": "function_body [43647,43679]",
      "dest": "function_body [46361,46393]"
    },
    {
      "src": "{: { [31981,31982]",
      "dest": "{: { [38420,38421]"
    },
    {
      "src": "primitive_type [35544,35551]",
      "dest": "primitive_type [45098,45105]"
    },
    {
      "src": "parameter [21506,21525]",
      "dest": "parameter [26956,26979]"
    },
    {
      "src": "function_body [41017,41441]",
      "dest": "function_body [34732,34992]"
    },
    {
      "src": "(: ( [41237,41238]",
      "dest": "(: ( [34836,34837]"
    },
    {
      "src": "identifier: pendingOwner [17058,17070]",
      "dest": "identifier: pendingOwner [5156,5168]"
    },
    {
      "src": "parameter [12836,12850]",
      "dest": "parameter [24319,24333]"
    },
    {
      "src": "identifier: offset [29062,29068]",
      "dest": "identifier: offset [37376,37382]"
    },
    {
      "src": "uint256: uint256 [6337,6344]",
      "dest": "uint256: uint256 [12306,12313]"
    },
    {
      "src": "): ) [41363,41364]",
      "dest": "): ) [34817,34818]"
    },
    {
      "src": "user_defined_type [15834,15846]",
      "dest": "user_defined_type [3745,3757]"
    },
    {
      "src": "number_literal: 2 [43322,43323]",
      "dest": "number_literal: 2 [45995,45996]"
    },
    {
      "src": "identifier: rounding [43431,43439]",
      "dest": "identifier: rounding [46113,46121]"
    },
    {
      "src": "uint256: uint256 [12323,12330]",
      "dest": "uint256: uint256 [1366,1373]"
    },
    {
      "src": "string: string [13646,13652]",
      "dest": "string: string [870,876]"
    },
    {
      "src": "event_paramater [15933,15957]",
      "dest": "event_paramater [4004,4028]"
    },
    {
      "src": "type_name [22464,22471]",
      "dest": "type_name [25518,25525]"
    },
    {
      "src": "return: return [10665,10671]",
      "dest": "return: return [11756,11762]"
    },
    {
      "src": "function_body [10574,10679]",
      "dest": "function_body [11368,11772]"
    },
    {
      "src": "comment: /**     * @dev sets the original `owner` of the contract to the sender     * at construction. Must then be reinitialized      */ [15973,16104]",
      "dest": "comment: /**      * @dev emitted when ownership is transferred      * @param previousOwner previous owner of this contract      * @param newOwner new owner of this contract      */ [3765,3940]"
    },
    {
      "src": "state_variable_declaration [13549,13576]",
      "dest": "state_variable_declaration [770,797]"
    },
    {
      "src": "expression_statement [16346,16389]",
      "dest": "expression_statement [4415,4458]"
    },
    {
      "src": "yul_decimal_number: 0 [31727,31728]",
      "dest": "yul_decimal_number: 0 [36841,36842]"
    },
    {
      "src": "pure: pure [10549,10553]",
      "dest": "pure: pure [11345,11349]"
    },
    {
      "src": "uint256: uint256 [18794,18801]",
      "dest": "uint256: uint256 [38404,38411]"
    },
    {
      "src": "identifier: Transfer [40708,40716]",
      "dest": "identifier: Transfer [28824,28832]"
    },
    {
      "src": "address: address [13970,13977]",
      "dest": "address: address [1196,1203]"
    },
    {
      "src": "string_literal [42622,42653]",
      "dest": "string_literal [28598,28631]"
    },
    {
      "src": "type_name [13617,13623]",
      "dest": "type_name [841,847]"
    },
    {
      "src": "primitive_type [22464,22471]",
      "dest": "primitive_type [25518,25525]"
    },
    {
      "src": "identifier: _max [25868,25872]",
      "dest": "identifier: _max [34208,34212]"
    },
    {
      "src": "comment: /**       *@dev send all token balance of an arbitary erc20 token     in the contract to another address     */ [17439,17553]",
      "dest": "comment: /**      * @dev send all token balance of an arbitrary erc20 token      * in the contract to another address      * @param token token to reclaim      * @param _to address to send eth balance to      */ [31692,31899]"
    },
    {
      "src": "binary_expression [39921,39952]",
      "dest": "binary_expression [19497,19527]"
    },
    {
      "src": "call_argument [38768,38769]",
      "dest": "call_argument [27879,27880]"
    },
    {
      "src": "): ) [10572,10573]",
      "dest": "): ) [11366,11367]"
    },
    {
      "src": "parameter [43463,43468]",
      "dest": "parameter [46145,46150]"
    },
    {
      "src": "expression_statement [34113,34164]",
      "dest": "expression_statement [43062,43133]"
    },
    {
      "src": "type_name [6482,6489]",
      "dest": "type_name [1295,1302]"
    },
    {
      "src": "type_name [23219,23226]",
      "dest": "type_name [42950,42957]"
    },
    {
      "src": "type_cast_expression [41097,41109]",
      "dest": "type_cast_expression [41932,41948]"
    },
    {
      "src": "modifier_definition [9663,9747]",
      "dest": "modifier_definition [4586,4702]"
    },
    {
      "src": "primitive_type [25054,25061]",
      "dest": "primitive_type [33000,33007]"
    },
    {
      "src": "type_name [20620,20627]",
      "dest": "type_name [805,812]"
    },
    {
      "src": "sub: sub [29106,29109]",
      "dest": "sub: sub [37579,37582]"
    },
    {
      "src": "type_name [23066,23073]",
      "dest": "type_name [27690,27697]"
    },
    {
      "src": "identifier: TrueCAD [43211,43218]",
      "dest": "identifier: TrueCAD [45903,45910]"
    },
    {
      "src": "primitive_type [587,591]",
      "dest": "primitive_type [7545,7549]"
    },
    {
      "src": "}: } [20552,20553]",
      "dest": "}: } [24986,24987]"
    },
    {
      "src": "identifier: wipeBlacklistedAccount [40363,40385]",
      "dest": "identifier: _mint [28500,28505]"
    },
    {
      "src": "type_name [6007,6014]",
      "dest": "type_name [13677,13684]"
    },
    {
      "src": "identifier: Approval [1124,1132]",
      "dest": "identifier: Approval [7971,7979]"
    },
    {
      "src": "): ) [16808,16809]",
      "dest": "): ) [4904,4905]"
    },
    {
      "src": "identifier: RegistryClone [1257,1270]",
      "dest": "identifier: IERC20 [5421,5427]"
    },
    {
      "src": "identifier: b [10632,10633]",
      "dest": "identifier: b [11675,11676]"
    },
    {
      "src": "identifier: onlyOwner [16817,16826]",
      "dest": "identifier: onlyOwner [4913,4922]"
    },
    {
      "src": "function_definition [8694,8751]",
      "dest": "function_definition [8672,8778]"
    },
    {
      "src": "function_definition [10505,10679]",
      "dest": "function_definition [11301,11772]"
    },
    {
      "src": "(: ( [17701,17702]",
      "dest": "(: ( [32057,32058]"
    },
    {
      "src": "identifier: location [30754,30762]",
      "dest": "identifier: location [37831,37839]"
    },
    {
      "src": "identifier: _spender [12826,12834]",
      "dest": "identifier: recipient [24308,24317]"
    },
    {
      "src": "identifier: location [29409,29417]",
      "dest": "identifier: location [38113,38121]"
    },
    {
      "src": "call_expression [35051,35103]",
      "dest": "call_expression [43143,43219]"
    },
    {
      "src": "identifier: ROUNDING [43311,43319]",
      "dest": "identifier: ROUNDING [45984,45992]"
    },
    {
      "src": "uint256: uint256 [1002,1009]",
      "dest": "uint256: uint256 [19403,19410]"
    },
    {
      "src": "gt: gt [29059,29061]",
      "dest": "gt: gt [36631,36633]"
    },
    {
      "src": "string_literal [2433,2446]",
      "dest": "string_literal [4661,4681]"
    },
    {
      "src": "identifier: balanceOf [469,478]",
      "dest": "identifier: balanceOf [5661,5670]"
    },
    {
      "src": "call_argument [20512,20522]",
      "dest": "call_argument [24927,24939]"
    },
    {
      "src": "yul_path [31106,31114]",
      "dest": "yul_path [37815,37823]"
    },
    {
      "src": "identifier: Transfer [603,611]",
      "dest": "identifier: Transfer [7734,7742]"
    },
    {
      "src": "pure: pure [43449,43453]",
      "dest": "pure: pure [46131,46135]"
    },
    {
      "src": "{: { [43470,43471]",
      "dest": "{: { [46152,46153]"
    },
    {
      "src": "emit: emit [17025,17029]",
      "dest": "emit: emit [5123,5127]"
    },
    {
      "src": "yul_path [31676,31684]",
      "dest": "yul_path [37781,37789]"
    },
    {
      "src": "identifier: length [32016,32022]",
      "dest": "identifier: length [38455,38461]"
    },
    {
      "src": "return_type_definition [21331,21345]",
      "dest": "return_type_definition [24359,24373]"
    },
    {
      "src": "primitive_type [40727,40734]",
      "dest": "primitive_type [28833,28840]"
    },
    {
      "src": "): ) [25147,25148]",
      "dest": "): ) [41287,41288]"
    },
    {
      "src": "type_name [23251,23258]",
      "dest": "type_name [43003,43010]"
    },
    {
      "src": "emit_statement [17025,17072]",
      "dest": "emit_statement [5123,5170]"
    },
    {
      "src": "(: ( [1107,1108]",
      "dest": "(: ( [6019,6020]"
    },
    {
      "src": "uint256: uint256 [10824,10831]",
      "dest": "uint256: uint256 [12962,12969]"
    },
    {
      "src": "bool: bool [20461,20465]",
      "dest": "bool: bool [24901,24905]"
    },
    {
      "src": "string_literal [42410,42423]",
      "dest": "string_literal [30182,30220]"
    },
    {
      "src": ".: . [17660,17661]",
      "dest": ".: . [32007,32008]"
    },
    {
      "src": "identifier: a [10526,10527]",
      "dest": "identifier: a [11322,11323]"
    },
    {
      "src": "contract_body [43254,43779]",
      "dest": "contract_body [45927,46396]"
    },
    {
      "src": "}: } [43503,43504]",
      "dest": "}: } [46185,46186]"
    },
    {
      "src": "uint256: uint256 [13549,13556]",
      "dest": "uint256: uint256 [770,777]"
    },
    {
      "src": "primitive_type [23219,23226]",
      "dest": "primitive_type [42950,42957]"
    },
    {
      "src": "identifier: _min [25802,25806]",
      "dest": "identifier: _min [34142,34146]"
    },
    {
      "src": "type_name [2684,2691]",
      "dest": "type_name [903,910]"
    },
    {
      "src": "visibility [18527,18533]",
      "dest": "visibility [23986,23992]"
    },
    {
      "src": "expression_statement [25852,25887]",
      "dest": "expression_statement [34192,34252]"
    },
    {
      "src": "string_literal [43575,43584]",
      "dest": "string_literal [46273,46282]"
    },
    {
      "src": "type_name [12303,12331]",
      "dest": "type_name [1347,1374]"
    },
    {
      "src": "contract_body [398,672]",
      "dest": "contract_body [5428,8046]"
    },
    {
      "src": "call_argument [41276,41289]",
      "dest": "call_argument [34856,34905]"
    },
    {
      "src": "state_variable_declaration [13215,13236]",
      "dest": "state_variable_declaration [456,477]"
    },
    {
      "src": "modifier_invocation [16997,17013]",
      "dest": "modifier_invocation [5095,5111]"
    },
    {
      "src": "identifier: _who [23074,23078]",
      "dest": "identifier: sender [27698,27704]"
    },
    {
      "src": "primitive_type [13883,13890]",
      "dest": "primitive_type [1111,1118]"
    },
    {
      "src": "return_type_definition [3300,3314]",
      "dest": "return_type_definition [26996,27010]"
    },
    {
      "src": ",: , [29176,29177]",
      "dest": ",: , [37649,37650]"
    },
    {
      "src": "identifier: increaseApproval [21271,21287]",
      "dest": "identifier: burn [33449,33453]"
    },
    {
      "src": "identifier: redemptionAddressCount_Deprecated [13733,13766]",
      "dest": "identifier: redemptionAddressCount_Deprecated [960,993]"
    },
    {
      "src": "primitive_type [39935,39942]",
      "dest": "primitive_type [19497,19504]"
    },
    {
      "src": "identifier: _index [4310,4316]",
      "dest": "identifier: amount [28531,28537]"
    },
    {
      "src": "(: ( [17408,17409]",
      "dest": "(: ( [31661,31662]"
    },
    {
      "src": "primitive_type [4348,4355]",
      "dest": "primitive_type [10025,10032]"
    },
    {
      "src": "call_argument [2433,2446]",
      "dest": "call_argument [4661,4681]"
    },
    {
      "src": "function_body [18557,18600]",
      "dest": "function_body [24025,24069]"
    },
    {
      "src": "function_definition [22899,23035]",
      "dest": "function_definition [24520,24671]"
    },
    {
      "src": "call_argument [25966,25970]",
      "dest": "call_argument [34331,34335]"
    },
    {
      "src": "uint256: uint256 [20429,20436]",
      "dest": "uint256: uint256 [37120,37127]"
    },
    {
      "src": "identifier: _value [20504,20510]",
      "dest": "identifier: amount [24950,24956]"
    },
    {
      "src": "uint256: uint256 [37506,37513]",
      "dest": "uint256: uint256 [45145,45152]"
    },
    {
      "src": "state_mutability [43359,43363]",
      "dest": "state_mutability [46041,46045]"
    },
    {
      "src": "primitive_type [23066,23073]",
      "dest": "primitive_type [27690,27697]"
    },
    {
      "src": "return_type_definition [22284,22298]",
      "dest": "return_type_definition [45065,45079]"
    },
    {
      "src": "view: view [3295,3299]",
      "dest": "view: view [15215,15219]"
    },
    {
      "src": "return_type_definition [18430,18447]",
      "dest": "return_type_definition [10460,10477]"
    },
    {
      "src": "parameter [33331,33335]",
      "dest": "parameter [15229,15233]"
    },
    {
      "src": "primitive_type [23080,23087]",
      "dest": "primitive_type [27706,27713]"
    },
    {
      "src": "member_expression [39921,39931]",
      "dest": "member_expression [19497,19518]"
    },
    {
      "src": "(: ( [512,513]",
      "dest": "(: ( [5710,5711]"
    },
    {
      "src": "identifier: offset [29279,29285]",
      "dest": "identifier: offset [38235,38241]"
    },
    {
      "src": "view: view [18652,18656]",
      "dest": "view: view [23817,23821]"
    },
    {
      "src": "call_argument [40717,40725]",
      "dest": "call_argument [28845,28852]"
    },
    {
      "src": "type_name [634,641]",
      "dest": "type_name [7765,7772]"
    },
    {
      "src": "identifier: attributes [13991,14001]",
      "dest": "identifier: attributes_Deprecated [1217,1238]"
    },
    {
      "src": ".: . [16357,16358]",
      "dest": ".: . [4426,4427]"
    },
    {
      "src": "address: address [12005,12012]",
      "dest": "address: address [17903,17910]"
    },
    {
      "src": "type_name [18997,19004]",
      "dest": "type_name [38626,38633]"
    },
    {
      "src": "returns: returns [578,585]",
      "dest": "returns: returns [7536,7543]"
    },
    {
      "src": "primitive_type [12005,12012]",
      "dest": "primitive_type [17903,17910]"
    },
    {
      "src": ",: , [1000,1001]",
      "dest": ",: , [31112,31113]"
    },
    {
      "src": "parameter [23407,23423]",
      "dest": "parameter [25499,25516]"
    },
    {
      "src": "expression_statement [21357,21417]",
      "dest": "expression_statement [33490,33516]"
    },
    {
      "src": ",: , [28569,28570]",
      "dest": ",: , [37730,37731]"
    },
    {
      "src": "bool: bool [37669,37673]",
      "dest": "bool: bool [16970,16974]"
    },
    {
      "src": "function_body [16131,16223]",
      "dest": "function_body [4198,4290]"
    },
    {
      "src": "parameter [10790,10799]",
      "dest": "parameter [12900,12909]"
    },
    {
      "src": "external: external [24149,24157]",
      "dest": "external: external [41894,41902]"
    },
    {
      "src": "comment: /**  * @title ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/20  */ [742,833]",
      "dest": "comment: /**  * @title ClamableOwnable  * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.  * and provides basic authorization control functions. Inherits storage layout of  * ProxyStorage.  */ [3495,3714]"
    },
    {
      "src": "call_expression [34113,34163]",
      "dest": "call_expression [43062,43132]"
    },
    {
      "src": "identifier: registry [39943,39951]",
      "dest": "identifier: this [19505,19509]"
    },
    {
      "src": "string [43575,43584]",
      "dest": "string [46273,46282]"
    },
    {
      "src": "type_name [1002,1009]",
      "dest": "type_name [19403,19410]"
    },
    {
      "src": "parameter [23635,23647]",
      "dest": "parameter [44337,44352]"
    },
    {
      "src": "event_paramater [25054,25068]",
      "dest": "event_paramater [33000,33014]"
    },
    {
      "src": "}: } [29453,29454]",
      "dest": "}: } [38268,38269]"
    },
    {
      "src": "pure: pure [43715,43719]",
      "dest": "pure: pure [23673,23677]"
    },
    {
      "src": "): ) [490,491]",
      "dest": "): ) [5686,5687]"
    },
    {
      "src": "(: ( [22917,22918]",
      "dest": "(: ( [24538,24539]"
    },
    {
      "src": "{: { [31117,31118]",
      "dest": "{: { [36649,36650]"
    },
    {
      "src": "yul_path [28647,28655]",
      "dest": "yul_path [36634,36642]"
    },
    {
      "src": "visibility [42553,42561]",
      "dest": "visibility [28539,28547]"
    },
    {
      "src": "identifier: location [31717,31725]",
      "dest": "identifier: location [36831,36839]"
    },
    {
      "src": "sub: sub [28643,28646]",
      "dest": "sub: sub [36935,36938]"
    },
    {
      "src": "identifier: _addedValue [21514,21525]",
      "dest": "identifier: subtractedValue [26964,26979]"
    },
    {
      "src": "emit_statement [40703,40749]",
      "dest": "emit_statement [28819,28862]"
    },
    {
      "src": "identifier: b [11424,11425]",
      "dest": "identifier: b [10041,10042]"
    },
    {
      "src": "event: event [25034,25039]",
      "dest": "event: event [32980,32985]"
    },
    {
      "src": "parameter [1033,1037]",
      "dest": "parameter [7130,7134]"
    },
    {
      "src": "boolean_literal [33407,33411]",
      "dest": "boolean_literal [27169,27173]"
    },
    {
      "src": "identifier: oldValue [40739,40747]",
      "dest": "identifier: amount [28854,28860]"
    },
    {
      "src": "parameter [9100,9116]",
      "dest": "parameter [5967,5984]"
    },
    {
      "src": "expression_statement [25922,25937]",
      "dest": "expression_statement [34287,34302]"
    },
    {
      "src": "identifier: allowanceOf [12340,12351]",
      "dest": "identifier: finOpBalances_Deprecated [1376,1400]"
    },
    {
      "src": "{: { [17377,17378]",
      "dest": "{: { [31630,31631]"
    },
    {
      "src": "call_argument [42410,42423]",
      "dest": "call_argument [30182,30220]"
    },
    {
      "src": "(: ( [17580,17581]",
      "dest": "(: ( [31926,31927]"
    },
    {
      "src": "return_type_definition [43454,43469]",
      "dest": "return_type_definition [46136,46151]"
    },
    {
      "src": "identifier: _spender [23241,23249]",
      "dest": "identifier: recipient [42983,42992]"
    },
    {
      "src": "interface_declaration [1247,1368]",
      "dest": "interface_declaration [5411,8046]"
    },
    {
      "src": ":=: := [29103,29105]",
      "dest": ":=: := [37576,37578]"
    },
    {
      "src": "event_paramater [39488,39511]",
      "dest": "event_paramater [40518,40541]"
    },
    {
      "src": "visibility [158,166]",
      "dest": "visibility [5532,5540]"
    },
    {
      "src": "(: ( [21381,21382]",
      "dest": "(: ( [33495,33496]"
    },
    {
      "src": "(: ( [43548,43549]",
      "dest": "(: ( [46239,46240]"
    },
    {
      "src": "primitive_type [22293,22297]",
      "dest": "primitive_type [45074,45078]"
    },
    {
      "src": "{: { [16335,16336]",
      "dest": "{: { [4404,4405]"
    },
    {
      "src": "yul_identifier [28647,28655]",
      "dest": "yul_identifier [36634,36642]"
    },
    {
      "src": "visibility [25149,25157]",
      "dest": "visibility [12283,12291]"
    },
    {
      "src": "): ) [28494,28495]",
      "dest": "): ) [36511,36512]"
    },
    {
      "src": "call_expression [41229,41290]",
      "dest": "call_expression [34829,34906]"
    },
    {
      "src": "visibility [6504,6512]",
      "dest": "visibility [7112,7120]"
    },
    {
      "src": "call_argument [16209,16214]",
      "dest": "call_argument [4276,4281]"
    },
    {
      "src": "(: ( [10778,10779]",
      "dest": "(: ( [12888,12889]"
    },
    {
      "src": "yul_identifier [31676,31684]",
      "dest": "yul_identifier [37781,37789]"
    },
    {
      "src": "uint256: uint256 [41097,41104]",
      "dest": "uint256: uint256 [41932,41939]"
    },
    {
      "src": "=>: => [12300,12302]",
      "dest": "=>: => [1344,1346]"
    },
    {
      "src": "uint8: uint8 [43373,43378]",
      "dest": "uint8: uint8 [46055,46060]"
    },
    {
      "src": "address: address [19134,19141]",
      "dest": "address: address [34673,34680]"
    },
    {
      "src": "yul_decimal_number: 1 [31207,31208]",
      "dest": "yul_decimal_number: 1 [36694,36695]"
    },
    {
      "src": "function_definition [31913,32058]",
      "dest": "function_definition [38349,38497]"
    },
    {
      "src": "parameter [11878,11892]",
      "dest": "parameter [7096,7110]"
    },
    {
      "src": "): ) [13988,13989]",
      "dest": "): ) [1214,1215]"
    },
    {
      "src": "string_literal [35017,35039]",
      "dest": "string_literal [41978,42043]"
    },
    {
      "src": "type_name [13717,13724]",
      "dest": "type_name [944,951]"
    },
    {
      "src": "{: { [10431,10432]",
      "dest": "{: { [9701,9702]"
    },
    {
      "src": "identifier: owner [16142,16147]",
      "dest": "identifier: owner [4209,4214]"
    },
    {
      "src": "type_name [4723,4730]",
      "dest": "type_name [14320,14327]"
    },
    {
      "src": "visibility [43618,43624]",
      "dest": "visibility [46316,46322]"
    },
    {
      "src": ":=: := [32023,32025]",
      "dest": ":=: := [38462,38464]"
    },
    {
      "src": "): ) [39407,39408]",
      "dest": "): ) [28675,28676]"
    },
    {
      "src": "comment: // File: contracts/modularERC20/AllowanceSheet.sol [12104,12154]",
      "dest": "comment: /**  * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.  * Removing state variables has been necessary due to proxy pattern usage.  * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:  * - Remove state variables _name, _symbol, _decimals  * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage  * - Remove constructor  * - Solidity version changed from ^0.6.0 to 0.6.10  * - Contract made abstract  *  * See also: ClaimableOwnable.sol and ProxyStorage.sol  */ [20699,21342]"
    },
    {
      "src": "contract: contract [17194,17202]",
      "dest": "contract: contract [31391,31399]"
    },
    {
      "src": "primitive_type [1133,1140]",
      "dest": "primitive_type [7980,7987]"
    },
    {
      "src": "identifier: a [11361,11362]",
      "dest": "identifier: a [9968,9969]"
    },
    {
      "src": "function_body [21346,21446]",
      "dest": "function_body [33479,33523]"
    },
    {
      "src": "contract_declaration [43202,43779]",
      "dest": "contract_declaration [45894,46396]"
    },
    {
      "src": "parameter [18760,18774]",
      "dest": "parameter [33454,33468]"
    },
    {
      "src": "uint256: uint256 [11667,11674]",
      "dest": "uint256: uint256 [1078,1085]"
    },
    {
      "src": "type_name [41011,41015]",
      "dest": "type_name [42442,42446]"
    },
    {
      "src": "(: ( [10517,10518]",
      "dest": "(: ( [11313,11314]"
    },
    {
      "src": "expression_statement [16142,16161]",
      "dest": "expression_statement [4209,4228]"
    },
    {
      "src": "identifier: _who [3524,3528]",
      "dest": "identifier: account [28514,28521]"
    },
    {
      "src": "type_name [13516,13523]",
      "dest": "type_name [737,744]"
    },
    {
      "src": "address: address [16792,16799]",
      "dest": "address: address [4888,4895]"
    },
    {
      "src": "number_literal: 0 [40735,40736]",
      "dest": "number_literal: 0 [28841,28842]"
    },
    {
      "src": "call_argument [25257,25281]",
      "dest": "call_argument [41441,41488]"
    },
    {
      "src": "string_literal [43665,43671]",
      "dest": "string_literal [46379,46385]"
    },
    {
      "src": "external: external [26488,26496]",
      "dest": "external: external [33470,33478]"
    },
    {
      "src": "yul_path [28760,28766]",
      "dest": "yul_path [36939,36945]"
    },
    {
      "src": "(: ( [17135,17136]",
      "dest": "(: ( [5233,5234]"
    },
    {
      "src": "primitive_type [1181,1188]",
      "dest": "primitive_type [8028,8035]"
    },
    {
      "src": "uint256: uint256 [22464,22471]",
      "dest": "uint256: uint256 [25518,25525]"
    },
    {
      "src": "number_literal: 0 [24638,24639]",
      "dest": "number_literal: 0 [29395,29396]"
    },
    {
      "src": "yul_identifier [31571,31577]",
      "dest": "yul_identifier [36324,36330]"
    },
    {
      "src": "=: = [17653,17654]",
      "dest": "=: = [32000,32001]"
    },
    {
      "src": "add: add [30744,30747]",
      "dest": "add: add [37827,37830]"
    },
    {
      "src": "type_name [612,619]",
      "dest": "type_name [7743,7750]"
    },
    {
      "src": "=: = [25930,25931]",
      "dest": "=: = [34295,34296]"
    },
    {
      "src": "(: ( [29206,29207]",
      "dest": "(: ( [38162,38163]"
    },
    {
      "src": "(: ( [29109,29110]",
      "dest": "(: ( [37582,37583]"
    },
    {
      "src": "contract_declaration [26277,32611]",
      "dest": "contract_declaration [35895,38781]"
    },
    {
      "src": "assembly: assembly [28931,28939]",
      "dest": "assembly: assembly [37156,37164]"
    },
    {
      "src": "): ) [18673,18674]",
      "dest": "): ) [23847,23848]"
    },
    {
      "src": ",: , [25255,25256]",
      "dest": ",: , [41439,41440]"
    },
    {
      "src": "parameter [18548,18555]",
      "dest": "parameter [24016,24023]"
    },
    {
      "src": "sload: sload [32191,32196]",
      "dest": "sload: sload [38687,38692]"
    },
    {
      "src": "visibility [11894,11900]",
      "dest": "visibility [23810,23816]"
    },
    {
      "src": "pure: pure [33072,33076]",
      "dest": "pure: pure [22971,22975]"
    },
    {
      "src": "visibility [41528,41536]",
      "dest": "visibility [27741,27749]"
    },
    {
      "src": "parameter [941,948]",
      "dest": "parameter [5555,5562]"
    },
    {
      "src": "uint256: uint256 [10779,10786]",
      "dest": "uint256: uint256 [12889,12896]"
    },
    {
      "src": "yul_function_call [29402,29421]",
      "dest": "yul_function_call [38106,38125]"
    },
    {
      "src": "address: address [12796,12803]",
      "dest": "address: address [23969,23976]"
    },
    {
      "src": "state_variable_declaration [13391,13412]",
      "dest": "state_variable_declaration [616,637]"
    },
    {
      "src": "call_expression [25852,25886]",
      "dest": "call_expression [34192,34251]"
    },
    {
      "src": "returns: returns [22962,22969]",
      "dest": "returns: returns [24600,24607]"
    },
    {
      "src": "number_literal: 0 [38768,38769]",
      "dest": "number_literal: 0 [27879,27880]"
    },
    {
      "src": "yul_assignment [31181,31209]",
      "dest": "yul_assignment [36668,36696]"
    },
    {
      "src": "(: ( [39028,39029]",
      "dest": "(: ( [29599,29600]"
    },
    {
      "src": "{: { [31687,31688]",
      "dest": "{: { [36712,36713]"
    },
    {
      "src": "return_type_definition [4714,4731]",
      "dest": "return_type_definition [14311,14328]"
    },
    {
      "src": "\": \" [25280,25281]",
      "dest": "\": \" [41487,41488]"
    },
    {
      "src": "identifier: require [41301,41308]",
      "dest": "identifier: require [34743,34750]"
    },
    {
      "src": "(: ( [18996,18997]",
      "dest": "(: ( [38625,38626]"
    },
    {
      "src": "): ) [22297,22298]",
      "dest": "): ) [45078,45079]"
    },
    {
      "src": ",: , [17705,17706]",
      "dest": ",: , [32061,32062]"
    },
    {
      "src": "yul_identifier [32016,32022]",
      "dest": "yul_identifier [38455,38461]"
    },
    {
      "src": "type_name [11721,11728]",
      "dest": "type_name [15189,15196]"
    },
    {
      "src": "return_statement [10665,10674]",
      "dest": "return_statement [11756,11765]"
    },
    {
      "src": "identifier: value [1437,1442]",
      "dest": "identifier: proportion [1572,1582]"
    },
    {
      "src": "identifier: _addr [11871,11876]",
      "dest": "identifier: target [18314,18320]"
    },
    {
      "src": "primitive_type [1320,1327]",
      "dest": "primitive_type [15491,15498]"
    },
    {
      "src": "visibility [20445,20451]",
      "dest": "visibility [24868,24874]"
    },
    {
      "src": "identifier: newMax [25078,25084]",
      "dest": "identifier: newMax [33024,33030]"
    },
    {
      "src": "parameter [23066,23078]",
      "dest": "parameter [27690,27704]"
    },
    {
      "src": "true: true [21434,21438]",
      "dest": "true: true [24975,24979]"
    },
    {
      "src": "call_expression [25169,25219]",
      "dest": "call_expression [41319,41391]"
    },
    {
      "src": "type_name [11647,11675]",
      "dest": "type_name [1059,1086]"
    },
    {
      "src": "identifier: _max [25932,25936]",
      "dest": "identifier: _max [34297,34301]"
    },
    {
      "src": "return: return [20534,20540]",
      "dest": "return: return [25763,25769]"
    },
    {
      "src": "identifier: balanceOf [18503,18512]",
      "dest": "identifier: balanceOf [23959,23968]"
    },
    {
      "src": "address: address [41089,41096]",
      "dest": "address: address [32018,32025]"
    },
    {
      "src": "primitive_type [12611,12618]",
      "dest": "primitive_type [19368,19375]"
    },
    {
      "src": "primitive_type [10518,10525]",
      "dest": "primitive_type [11314,11321]"
    },
    {
      "src": "function_definition [17323,17431]",
      "dest": "function_definition [31568,31684]"
    },
    {
      "src": "comment: // File: contracts/HasOwner.sol [15573,15604]",
      "dest": "comment: // File: contracts/true-currencies-new/BurnableTokenWithBounds.sol [32086,32152]"
    },
    {
      "src": "parameter [10529,10538]",
      "dest": "parameter [11325,11334]"
    },
    {
      "src": "assembly_statement [28931,29447]",
      "dest": "assembly_statement [37156,38262]"
    },
    {
      "src": "state_variable_declaration [13874,13935]",
      "dest": "state_variable_declaration [1103,1163]"
    },
    {
      "src": "address: address [17345,17352]",
      "dest": "address: address [31590,31597]"
    },
    {
      "src": "): ) [39952,39953]",
      "dest": "): ) [19569,19570]"
    },
    {
      "src": "true [33885,33889]",
      "dest": "true [26397,26401]"
    },
    {
      "src": "{: { [25841,25842]",
      "dest": "{: { [34181,34182]"
    },
    {
      "src": "yul_path [31181,31189]",
      "dest": "yul_path [36668,36676]"
    },
    {
      "src": "(: ( [10646,10647]",
      "dest": "(: ( [11694,11695]"
    },
    {
      "src": "call_argument [40739,40747]",
      "dest": "call_argument [28854,28860]"
    },
    {
      "src": "identifier: sub [40621,40624]",
      "dest": "identifier: add [28735,28738]"
    },
    {
      "src": "visibility [18776,18784]",
      "dest": "visibility [17938,17946]"
    },
    {
      "src": "function: function [10505,10513]",
      "dest": "function: function [11301,11309]"
    },
    {
      "src": "\": \" [38798,38799]",
      "dest": "\": \" [43963,43964]"
    },
    {
      "src": "function_definition [16964,17146]",
      "dest": "function_definition [5062,5244]"
    },
    {
      "src": "variable_declaration [22532,22548]",
      "dest": "variable_declaration [10996,11005]"
    },
    {
      "src": "primitive_type [654,661]",
      "dest": "primitive_type [7785,7792]"
    },
    {
      "src": "address: address [38760,38767]",
      "dest": "address: address [27871,27878]"
    },
    {
      "src": "state_mutability [10810,10814]",
      "dest": "state_mutability [12948,12952]"
    },
    {
      "src": "function_definition [20394,20553]",
      "dest": "function_definition [24818,24987]"
    },
    {
      "src": "identifier: to [650,652]",
      "dest": "identifier: to [7781,7783]"
    },
    {
      "src": "): ) [21344,21345]",
      "dest": "): ) [24372,24373]"
    },
    {
      "src": "identifier: _who [23227,23231]",
      "dest": "identifier: sender [42958,42964]"
    },
    {
      "src": "identifier: _who [1314,1318]",
      "dest": "identifier: account [5679,5686]"
    },
    {
      "src": "yul_identifier [31106,31114]",
      "dest": "yul_identifier [37815,37823]"
    },
    {
      "src": "identifier: _to [37514,37517]",
      "dest": "identifier: account [45153,45160]"
    },
    {
      "src": "uint256: uint256 [10529,10536]",
      "dest": "uint256: uint256 [11325,11332]"
    },
    {
      "src": "=: = [24100,24101]",
      "dest": "=: = [40347,40348]"
    },
    {
      "src": "identifier: location [29094,29102]",
      "dest": "identifier: location [37567,37575]"
    },
    {
      "src": "address: address [9923,9930]",
      "dest": "address: address [7476,7483]"
    },
    {
      "src": "function: function [43332,43340]",
      "dest": "function: function [46005,46013]"
    },
    {
      "src": "false: false [13457,13462]",
      "dest": "false: false [678,683]"
    },
    {
      "src": "type_name [18439,18446]",
      "dest": "type_name [10469,10476]"
    },
    {
      "src": "function_definition [10766,11043]",
      "dest": "function_definition [12876,13154]"
    },
    {
      "src": "returns: returns [43454,43461]",
      "dest": "returns: returns [46136,46143]"
    },
    {
      "src": "primitive_type [1033,1037]",
      "dest": "primitive_type [7130,7134]"
    },
    {
      "src": "primitive_type [18963,18970]",
      "dest": "primitive_type [24852,24859]"
    },
    {
      "src": "identifier: owner [896,901]",
      "dest": "identifier: owner [24547,24552]"
    },
    {
      "src": "): ) [17137,17138]",
      "dest": "): ) [5235,5236]"
    },
    {
      "src": "primitive_type [17345,17352]",
      "dest": "primitive_type [31590,31605]"
    },
    {
      "src": "event: event [1118,1123]",
      "dest": "event: event [7965,7970]"
    },
    {
      "src": "expression_statement [35051,35104]",
      "dest": "expression_statement [43143,43220]"
    },
    {
      "src": "address: address [10235,10242]",
      "dest": "address: address [28586,28593]"
    },
    {
      "src": "string: string [43639,43645]",
      "dest": "string: string [46346,46352]"
    },
    {
      "src": "call_argument [10166,10171]",
      "dest": "call_argument [30374,30379]"
    },
    {
      "src": "(: ( [18547,18548]",
      "dest": "(: ( [24015,24016]"
    },
    {
      "src": "}: } [28788,28789]",
      "dest": "}: } [36972,36973]"
    },
    {
      "src": "internal: internal [37482,37490]",
      "dest": "internal: internal [16785,16793]"
    },
    {
      "src": ",: , [20502,20503]",
      "dest": ",: , [24939,24940]"
    },
    {
      "src": "==: == [10653,10655]",
      "dest": "==: == [11701,11703]"
    },
    {
      "src": "type_name [13848,13855]",
      "dest": "type_name [1426,1433]"
    },
    {
      "src": "parameter [22971,22978]",
      "dest": "parameter [24609,24616]"
    },
    {
      "src": "parameter [6461,6480]",
      "dest": "parameter [31114,31128]"
    },
    {
      "src": "): ) [24018,24019]",
      "dest": "): ) [32746,32747]"
    },
    {
      "src": "event: event [597,602]",
      "dest": "event: event [7728,7733]"
    },
    {
      "src": "returns: returns [438,445]",
      "dest": "returns: returns [6375,6382]"
    },
    {
      "src": "identifier: _to [38753,38756]",
      "dest": "identifier: recipient [27858,27867]"
    },
    {
      "src": "function_body [18675,18717]",
      "dest": "function_body [23849,23887]"
    },
    {
      "src": "==: == [9717,9719]",
      "dest": "==: == [4644,4646]"
    },
    {
      "src": "identifier: _subtractedValue [22472,22488]",
      "dest": "identifier: amount [25526,25532]"
    },
    {
      "src": "): ) [38799,38800]",
      "dest": "): ) [27920,27921]"
    },
    {
      "src": "type_name [1108,1112]",
      "dest": "type_name [6020,6024]"
    },
    {
      "src": "=>: => [13845,13847]",
      "dest": "=>: => [1423,1425]"
    },
    {
      "src": "yul_evm_builtin [29359,29362]",
      "dest": "yul_evm_builtin [38019,38022]"
    },
    {
      "src": "primitive_type [1002,1009]",
      "dest": "primitive_type [19403,19410]"
    },
    {
      "src": "yul_decimal_number: 0 [29380,29381]",
      "dest": "yul_decimal_number: 0 [38042,38043]"
    },
    {
      "src": "primitive_type [19148,19155]",
      "dest": "primitive_type [34690,34697]"
    },
    {
      "src": "function_definition [1043,1114]",
      "dest": "function_definition [5949,6026]"
    },
    {
      "src": "type_name [1340,1347]",
      "dest": "type_name [5986,5993]"
    },
    {
      "src": "state_mutability [42926,42930]",
      "dest": "state_mutability [45060,45064]"
    },
    {
      "src": "parameter [976,988]",
      "dest": "parameter [31088,31100]"
    },
    {
      "src": "): ) [29289,29290]",
      "dest": "): ) [38250,38251]"
    },
    {
      "src": "yul_identifier [31181,31189]",
      "dest": "yul_identifier [36668,36676]"
    },
    {
      "src": "assignment_expression [4947,5032]",
      "dest": "assignment_expression [29419,29508]"
    },
    {
      "src": "call_argument [39943,39951]",
      "dest": "call_argument [19505,19509]"
    },
    {
      "src": "return_type_definition [43630,43646]",
      "dest": "return_type_definition [46337,46360]"
    },
    {
      "src": "user_defined_type [32744,32767]",
      "dest": "user_defined_type [40283,40306]"
    },
    {
      "src": "address: address [9100,9107]",
      "dest": "address: address [5967,5974]"
    },
    {
      "src": "indexed: indexed [15901,15908]",
      "dest": "indexed: indexed [3981,3988]"
    },
    {
      "src": "(: ( [26485,26486]",
      "dest": "(: ( [36055,36056]"
    },
    {
      "src": "}: } [29446,29447]",
      "dest": "}: } [38261,38262]"
    },
    {
      "src": "call_argument [34182,34199]",
      "dest": "call_argument [43984,44022]"
    },
    {
      "src": "modifier_definition [16314,16408]",
      "dest": "modifier_definition [4383,4477]"
    },
    {
      "src": "event_paramater [1181,1194]",
      "dest": "event_paramater [8028,8041]"
    },
    {
      "src": "address: address [23393,23400]",
      "dest": "address: address [25483,25490]"
    },
    {
      "src": "parameter [16792,16808]",
      "dest": "parameter [4888,4904]"
    },
    {
      "src": "expression_statement [9698,9734]",
      "dest": "expression_statement [4625,4683]"
    },
    {
      "src": "state_variable_declaration [43261,43290]",
      "dest": "state_variable_declaration [45934,45963]"
    },
    {
      "src": "yul_function_call [28472,28495]",
      "dest": "yul_function_call [36491,36512]"
    },
    {
      "src": "uint256: uint256 [10790,10797]",
      "dest": "uint256: uint256 [12900,12907]"
    },
    {
      "src": "expression_statement [12880,12925]",
      "dest": "expression_statement [24385,24428]"
    },
    {
      "src": "): ) [20443,20444]",
      "dest": "): ) [24866,24867]"
    },
    {
      "src": "internal: internal [18979,18987]",
      "dest": "internal: internal [18369,18377]"
    },
    {
      "src": "call_expression [21357,21416]",
      "dest": "call_expression [33490,33515]"
    },
    {
      "src": "uint8: uint8 [43296,43301]",
      "dest": "uint8: uint8 [45969,45974]"
    },
    {
      "src": "visibility [20642,20650]",
      "dest": "visibility [10446,10454]"
    },
    {
      "src": "=: = [43320,43321]",
      "dest": "=: = [45993,45994]"
    },
    {
      "src": "type_name [13391,13398]",
      "dest": "type_name [616,623]"
    },
    {
      "src": "primitive_type [1156,1163]",
      "dest": "primitive_type [8003,8010]"
    },
    {
      "src": "call_argument [42744,42782]",
      "dest": "call_argument [29285,29306]"
    },
    {
      "src": "(: ( [43638,43639]",
      "dest": "(: ( [46345,46346]"
    },
    {
      "src": "function_definition [43600,43679]",
      "dest": "function_definition [46298,46393]"
    },
    {
      "src": "call_argument [40735,40736]",
      "dest": "call_argument [28841,28842]"
    },
    {
      "src": "identifier: add [11349,11352]",
      "dest": "identifier: add [9956,9959]"
    },
    {
      "src": "binary_expression [11241,11247]",
      "dest": "binary_expression [10964,10970]"
    },
    {
      "src": "type_name [13914,13921]",
      "dest": "type_name [1141,1148]"
    },
    {
      "src": "variable_declaration [37669,37681]",
      "dest": "variable_declaration [16970,16982]"
    },
    {
      "src": "state_mutability [43449,43453]",
      "dest": "state_mutability [46131,46135]"
    },
    {
      "src": "modifier_invocation [17367,17376]",
      "dest": "modifier_invocation [31620,31629]"
    },
    {
      "src": "primitive_type [39488,39495]",
      "dest": "primitive_type [40518,40525]"
    },
    {
      "src": "parameter [3309,3313]",
      "dest": "parameter [27005,27009]"
    },
    {
      "src": "\": \" [41988,41989]",
      "dest": "\": \" [28083,28084]"
    },
    {
      "src": "visibility [32105,32111]",
      "dest": "visibility [38605,38611]"
    },
    {
      "src": "yul_evm_builtin [32026,32031]",
      "dest": "yul_evm_builtin [38465,38470]"
    },
    {
      "src": "mapping: mapping [12303,12310]",
      "dest": "mapping: mapping [1347,1354]"
    },
    {
      "src": "string_literal [41976,41989]",
      "dest": "string_literal [28044,28084]"
    },
    {
      "src": "binary_expression [11439,11445]",
      "dest": "binary_expression [10061,10067]"
    },
    {
      "src": "identifier: a [11444,11445]",
      "dest": "identifier: a [10066,10067]"
    },
    {
      "src": "identifier: _burner [25312,25319]",
      "dest": "identifier: account [41506,41513]"
    },
    {
      "src": "type_name [12404,12411]",
      "dest": "type_name [578,585]"
    },
    {
      "src": "(: ( [41309,41310]",
      "dest": "(: ( [34750,34751]"
    },
    {
      "src": "visibility [30909,30917]",
      "dest": "visibility [36072,36080]"
    },
    {
      "src": "private: private [13477,13484]",
      "dest": "private: private [698,705]"
    },
    {
      "src": "call_expression [17388,17423]",
      "dest": "call_expression [31641,31676]"
    },
    {
      "src": "yul_identifier [28489,28494]",
      "dest": "yul_identifier [36505,36511]"
    },
    {
      "src": "uint256: uint256 [941,948]",
      "dest": "uint256: uint256 [5555,5562]"
    },
    {
      "src": "primitive_type [1077,1084]",
      "dest": "primitive_type [18921,18928]"
    },
    {
      "src": "identifier: setAllowance [12783,12795]",
      "dest": "identifier: transfer [24291,24299]"
    },
    {
      "src": "yul_function_call [28557,28573]",
      "dest": "yul_function_call [37718,37739]"
    },
    {
      "src": "primitive_type [13717,13724]",
      "dest": "primitive_type [944,951]"
    },
    {
      "src": "address: address [23219,23226]",
      "dest": "address: address [42950,42957]"
    },
    {
      "src": "yul_evm_builtin [28379,28382]",
      "dest": "yul_evm_builtin [36491,36494]"
    },
    {
      "src": "primitive_type [41179,41186]",
      "dest": "primitive_type [16813,16820]"
    },
    {
      "src": "type_name [11398,11405]",
      "dest": "type_name [19728,19735]"
    },
    {
      "src": "string_literal [25874,25885]",
      "dest": "string_literal [34214,34250]"
    },
    {
      "src": "(: ( [40624,40625]",
      "dest": "(: ( [28738,28739]"
    },
    {
      "src": "state_mutability [43715,43719]",
      "dest": "state_mutability [23673,23677]"
    },
    {
      "src": "parameter [11863,11876]",
      "dest": "parameter [18306,18320]"
    },
    {
      "src": "returns: returns [4714,4721]",
      "dest": "returns: returns [14311,14318]"
    },
    {
      "src": "boolean_literal [22392,22396]",
      "dest": "boolean_literal [24445,24449]"
    },
    {
      "src": "pure: pure [42926,42930]",
      "dest": "pure: pure [45060,45064]"
    },
    {
      "src": "): ) [3313,3314]",
      "dest": "): ) [27009,27010]"
    },
    {
      "src": "+: + [11422,11423]",
      "dest": "+: + [10039,10040]"
    },
    {
      "src": "uint256: uint256 [22599,22606]",
      "dest": "uint256: uint256 [11659,11666]"
    },
    {
      "src": "number_literal: 0x100000 [32971,32979]",
      "dest": "number_literal: 0x100000 [40406,40414]"
    },
    {
      "src": "primitive_type [976,983]",
      "dest": "primitive_type [31088,31095]"
    },
    {
      "src": "identifier: require [41229,41236]",
      "dest": "identifier: require [34829,34836]"
    },
    {
      "src": "identifier: a [10651,10652]",
      "dest": "identifier: a [11699,11700]"
    },
    {
      "src": "type_name [1077,1084]",
      "dest": "type_name [18921,18928]"
    },
    {
      "src": "): ) [4730,4731]",
      "dest": "): ) [14327,14328]"
    },
    {
      "src": "yul_evm_builtin [28756,28759]",
      "dest": "yul_evm_builtin [20490,20493]"
    },
    {
      "src": "identifier: transfer [17392,17400]",
      "dest": "identifier: transfer [31645,31653]"
    },
    {
      "src": "number_literal: 0 [17136,17137]",
      "dest": "number_literal: 0 [5234,5235]"
    },
    {
      "src": "call_expression [17687,17715]",
      "dest": "call_expression [32043,32071]"
    },
    {
      "src": "returns: returns [33322,33329]",
      "dest": "returns: returns [15220,15227]"
    },
    {
      "src": "view: view [31954,31958]",
      "dest": "view: view [38390,38394]"
    },
    {
      "src": "binary_expression [41238,41274]",
      "dest": "binary_expression [34837,34854]"
    },
    {
      "src": "expression_statement [40558,40583]",
      "dest": "expression_statement [28757,28809]"
    },
    {
      "src": "identifier: _min [25966,25970]",
      "dest": "identifier: _min [34331,34335]"
    },
    {
      "src": "public: public [33315,33321]",
      "dest": "public: public [26981,26987]"
    },
    {
      "src": "event: event [15856,15861]",
      "dest": "event: event [3946,3951]"
    },
    {
      "src": "primitive_type [10235,10242]",
      "dest": "primitive_type [28586,28593]"
    },
    {
      "src": "type_name [10529,10536]",
      "dest": "type_name [11325,11332]"
    },
    {
      "src": "function_body [8720,8751]",
      "dest": "function_body [8742,8778]"
    },
    {
      "src": "(: ( [4991,4992]",
      "dest": "(: ( [29462,29463]"
    },
    {
      "src": "yul_decimal_number: 0 [29383,29384]",
      "dest": "yul_decimal_number: 0 [38045,38046]"
    },
    {
      "src": "visibility [19164,19172]",
      "dest": "visibility [34706,34714]"
    },
    {
      "src": "internal: internal [21549,21557]",
      "dest": "internal: internal [19446,19454]"
    },
    {
      "src": ",: , [31057,31058]",
      "dest": ",: , [36456,36457]"
    },
    {
      "src": "visibility [3286,3294]",
      "dest": "visibility [15206,15214]"
    },
    {
      "src": "): ) [1015,1016]",
      "dest": "): ) [31128,31129]"
    },
    {
      "src": "uint256: uint256 [19148,19155]",
      "dest": "uint256: uint256 [34690,34697]"
    },
    {
      "src": "type_cast_expression [35544,35556]",
      "dest": "type_cast_expression [45098,45114]"
    },
    {
      "src": "uint256: uint256 [25070,25077]",
      "dest": "uint256: uint256 [33016,33023]"
    },
    {
      "src": "primitive_type [13837,13844]",
      "dest": "primitive_type [1415,1422]"
    },
    {
      "src": "identifier: _spender [22244,22252]",
      "dest": "identifier: account [41864,41871]"
    },
    {
      "src": "identifier: msg [16354,16357]",
      "dest": "identifier: msg [4423,4426]"
    },
    {
      "src": "(: ( [30753,30754]",
      "dest": "(: ( [37830,37831]"
    },
    {
      "src": "parameter [23219,23231]",
      "dest": "parameter [42950,42964]"
    },
    {
      "src": "address: address [12404,12411]",
      "dest": "address: address [578,585]"
    },
    {
      "src": "{: { [12869,12870]",
      "dest": "{: { [24374,24375]"
    },
    {
      "src": "type_name [40829,40833]",
      "dest": "type_name [41873,41877]"
    },
    {
      "src": "): ) [18814,18815]",
      "dest": "): ) [38418,38419]"
    },
    {
      "src": "call_argument [5000,5002]",
      "dest": "call_argument [29471,29507]"
    },
    {
      "src": "emit: emit [40703,40707]",
      "dest": "emit: emit [28819,28823]"
    },
    {
      "src": "user_defined_type [17581,17586]",
      "dest": "user_defined_type [31418,31423]"
    },
    {
      "src": "primitive_type [20461,20465]",
      "dest": "primitive_type [24901,24905]"
    },
    {
      "src": "}: } [25335,25336]",
      "dest": "}: } [41566,41567]"
    },
    {
      "src": "modifier_invocation [40411,40420]",
      "dest": "modifier_invocation [45448,45457]"
    },
    {
      "src": "true: true [22392,22396]",
      "dest": "true: true [24445,24449]"
    },
    {
      "src": "\": \" [41902,41903]",
      "dest": "\": \" [27883,27884]"
    },
    {
      "src": "identifier: BurnableTokenWithBounds [32744,32767]",
      "dest": "identifier: BurnableTokenWithBounds [40283,40306]"
    },
    {
      "src": "): ) [41108,41109]",
      "dest": "): ) [41947,41948]"
    },
    {
      "src": "identifier: _spender [21382,21390]",
      "dest": "identifier: amount [33508,33514]"
    },
    {
      "src": "variable_declaration_statement [22532,22589]",
      "dest": "variable_declaration_statement [10996,11014]"
    },
    {
      "src": "address: address [12312,12319]",
      "dest": "address: address [1355,1362]"
    },
    {
      "src": "primitive_type [20620,20627]",
      "dest": "primitive_type [805,812]"
    },
    {
      "src": "yul_decimal_number: 0 [29374,29375]",
      "dest": "yul_decimal_number: 0 [38036,38037]"
    },
    {
      "src": "parameter [23080,23096]",
      "dest": "parameter [27706,27723]"
    },
    {
      "src": "type_name [20461,20465]",
      "dest": "type_name [24901,24905]"
    },
    {
      "src": "): ) [25281,25282]",
      "dest": "): ) [41488,41489]"
    },
    {
      "src": "type_name [13981,13988]",
      "dest": "type_name [1207,1214]"
    },
    {
      "src": "variable_declaration [3900,3913]",
      "dest": "variable_declaration [13021,13030]"
    },
    {
      "src": "): ) [31684,31685]",
      "dest": "): ) [37794,37795]"
    },
    {
      "src": "function_body [16827,16869]",
      "dest": "function_body [4923,4965]"
    },
    {
      "src": "state_variable_declaration [13424,13463]",
      "dest": "state_variable_declaration [645,684]"
    },
    {
      "src": "type_name [23080,23087]",
      "dest": "type_name [27706,27713]"
    },
    {
      "src": "struct_member [1477,1495]",
      "dest": "struct_member [1593,1607]"
    },
    {
      "src": "(: ( [31944,31945]",
      "dest": "(: ( [38380,38381]"
    },
    {
      "src": "}: } [16222,16223]",
      "dest": "}: } [4289,4290]"
    },
    {
      "src": "bool: bool [35726,35730]",
      "dest": "bool: bool [40543,40547]"
    },
    {
      "src": "call_expression [17655,17676]",
      "dest": "call_expression [32002,32032]"
    },
    {
      "src": "function: function [10766,10774]",
      "dest": "function: function [12876,12884]"
    },
    {
      "src": ".: . [21408,21409]",
      "dest": ".: . [33499,33500]"
    },
    {
      "src": "identifier: transfer [535,543]",
      "dest": "identifier: transferFrom [7463,7475]"
    },
    {
      "src": "identifier: name_Deprecated [13624,13639]",
      "dest": "identifier: name_Deprecated [848,863]"
    },
    {
      "src": "(: ( [423,424]",
      "dest": "(: ( [6328,6329]"
    },
    {
      "src": "primitive_type [13278,13282]",
      "dest": "primitive_type [519,523]"
    },
    {
      "src": "(: ( [10242,10243]",
      "dest": "(: ( [28593,28594]"
    },
    {
      "src": "\": \" [34201,34202]",
      "dest": "\": \" [44024,44025]"
    },
    {
      "src": "public: public [13557,13563]",
      "dest": "public: public [778,784]"
    },
    {
      "src": ",: , [39511,39512]",
      "dest": ",: , [40541,40542]"
    },
    {
      "src": "type_cast_expression [39021,39031]",
      "dest": "type_cast_expression [29592,29602]"
    },
    {
      "src": "identifier: sender [16154,16160]",
      "dest": "identifier: sender [4221,4227]"
    },
    {
      "src": "primitive_type [4723,4730]",
      "dest": "primitive_type [14320,14327]"
    },
    {
      "src": "member_expression [21405,21415]",
      "dest": "member_expression [33496,33506]"
    },
    {
      "src": "): ) [39416,39417]",
      "dest": "): ) [28693,28694]"
    },
    {
      "src": "address: address [23407,23414]",
      "dest": "address: address [25499,25506]"
    },
    {
      "src": "identifier: onlyOwner [25831,25840]",
      "dest": "identifier: onlyOwner [34171,34180]"
    },
    {
      "src": "visibility [13250,13256]",
      "dest": "visibility [491,497]"
    },
    {
      "src": "uint256: uint256 [40041,40048]",
      "dest": "uint256: uint256 [29233,29240]"
    },
    {
      "src": "uint256: uint256 [12422,12429]",
      "dest": "uint256: uint256 [1696,1703]"
    },
    {
      "src": "yul_evm_builtin [32191,32196]",
      "dest": "yul_evm_builtin [38687,38692]"
    },
    {
      "src": "identifier: a [10628,10629]",
      "dest": "identifier: a [11671,11672]"
    },
    {
      "src": "\": \" [42422,42423]",
      "dest": "\": \" [30219,30220]"
    },
    {
      "src": "call_expression [2423,2447]",
      "dest": "call_expression [4625,4682]"
    },
    {
      "src": "primitive_type [1429,1436]",
      "dest": "primitive_type [1564,1571]"
    },
    {
      "src": "type_name [10563,10570]",
      "dest": "type_name [16769,16776]"
    },
    {
      "src": "type_cast_expression [39935,39952]",
      "dest": "type_cast_expression [19497,19510]"
    },
    {
      "src": "type_name [11218,11225]",
      "dest": "type_name [10936,10943]"
    },
    {
      "src": "type_name [990,997]",
      "dest": "type_name [31102,31109]"
    },
    {
      "src": "]: ] [4974,4975]",
      "dest": "]: ] [29436,29437]"
    },
    {
      "src": "}: } [28781,28782]",
      "dest": "}: } [36965,36966]"
    },
    {
      "src": "address: address [990,997]",
      "dest": "address: address [31102,31109]"
    },
    {
      "src": "identifier: _ [9740,9741]",
      "dest": "identifier: _ [4693,4694]"
    },
    {
      "src": "bool: bool [42145,42149]",
      "dest": "bool: bool [1814,1818]"
    },
    {
      "src": "visibility [7125,7133]",
      "dest": "visibility [6002,6010]"
    },
    {
      "src": "yul_identifier [29364,29369]",
      "dest": "yul_identifier [38026,38031]"
    },
    {
      "src": "string [35078,35102]",
      "dest": "string [43178,43218]"
    },
    {
      "src": "type_name [19148,19155]",
      "dest": "type_name [34690,34697]"
    },
    {
      "src": "uint256: uint256 [4723,4730]",
      "dest": "uint256: uint256 [14320,14327]"
    },
    {
      "src": "function_body [16335,16408]",
      "dest": "function_body [4404,4477]"
    },
    {
      "src": "call_argument [40625,40633]",
      "dest": "call_argument [28739,28745]"
    },
    {
      "src": "identifier: onlyOwner [40411,40420]",
      "dest": "identifier: onlyOwner [45448,45457]"
    },
    {
      "src": "function_body [31981,32058]",
      "dest": "function_body [38420,38497]"
    },
    {
      "src": "identifier: symbol_Deprecated [13653,13670]",
      "dest": "identifier: symbol_Deprecated [877,894]"
    },
    {
      "src": "string [25874,25885]",
      "dest": "string [34214,34250]"
    },
    {
      "src": "identifier: newValue [22607,22615]",
      "dest": "identifier: c [11667,11668]"
    },
    {
      "src": "(: ( [5499,5500]",
      "dest": "(: ( [26278,26279]"
    },
    {
      "src": "string [16375,16387]",
      "dest": "string [4444,4456]"
    },
    {
      "src": "bool: bool [13278,13282]",
      "dest": "bool: bool [519,523]"
    },
    {
      "src": "(: ( [9149,9150]",
      "dest": "(: ( [27776,27777]"
    },
    {
      "src": "primitive_type [13773,13780]",
      "dest": "primitive_type [1000,1007]"
    },
    {
      "src": "{: { [26317,26318]",
      "dest": "{: { [35923,35924]"
    },
    {
      "src": "primitive_type [513,520]",
      "dest": "primitive_type [5711,5718]"
    },
    {
      "src": "function_definition [11160,11273]",
      "dest": "function_definition [10850,11042]"
    },
    {
      "src": "identifier: c [11460,11461]",
      "dest": "identifier: c [10119,10120]"
    },
    {
      "src": ",: , [29285,29286]",
      "dest": ",: , [38241,38242]"
    },
    {
      "src": "(: ( [12311,12312]",
      "dest": "(: ( [1354,1355]"
    },
    {
      "src": "identifier: GasRefundToken [26286,26300]",
      "dest": "identifier: GasRefund [35913,35922]"
    },
    {
      "src": "indexed: indexed [1141,1148]",
      "dest": "indexed: indexed [7988,7995]"
    },
    {
      "src": "(: ( [4722,4723]",
      "dest": "(: ( [14319,14320]"
    },
    {
      "src": "yul_identifier [28959,28965]",
      "dest": "yul_identifier [37224,37230]"
    },
    {
      "src": "is: is [15831,15833]",
      "dest": "is: is [3742,3744]"
    },
    {
      "src": "primitive_type [37506,37513]",
      "dest": "primitive_type [45145,45152]"
    },
    {
      "src": "\": \" [42622,42623]",
      "dest": "\": \" [28598,28599]"
    },
    {
      "src": "using: using [19616,19621]",
      "dest": "using: using [22630,22635]"
    },
    {
      "src": "identifier: pendingOwner [9720,9732]",
      "dest": "identifier: pendingOwner [4647,4659]"
    },
    {
      "src": "): ) [31208,31209]",
      "dest": "): ) [36695,36696]"
    },
    {
      "src": "indexed: indexed [642,649]",
      "dest": "indexed: indexed [7773,7780]"
    },
    {
      "src": "address: address [22918,22925]",
      "dest": "address: address [42425,42432]"
    },
    {
      "src": "binary_expression [11032,11037]",
      "dest": "binary_expression [13033,13038]"
    },
    {
      "src": "yul_identifier [28760,28766]",
      "dest": "yul_identifier [36939,36945]"
    },
    {
      "src": "type_name [654,661]",
      "dest": "type_name [7785,7792]"
    },
    {
      "src": "identifier: REDEMPTION_ADDRESS_COUNT [35559,35583]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [45117,45141]"
    },
    {
      "src": "state_mutability [11204,11208]",
      "dest": "state_mutability [10922,10926]"
    },
    {
      "src": "identifier: _value [24141,24147]",
      "dest": "identifier: amount [36064,36070]"
    },
    {
      "src": "primitive_type [23649,23656]",
      "dest": "primitive_type [45034,45041]"
    },
    {
      "src": "variable_declaration [22599,22615]",
      "dest": "variable_declaration [11659,11668]"
    },
    {
      "src": "{: { [9691,9692]",
      "dest": "{: { [4614,4615]"
    },
    {
      "src": "primitive_type [13215,13222]",
      "dest": "primitive_type [456,463]"
    },
    {
      "src": ",: , [25194,25195]",
      "dest": ",: , [41350,41351]"
    },
    {
      "src": "call_argument [41936,41974]",
      "dest": "call_argument [28036,28042]"
    },
    {
      "src": "return_type_definition [11389,11408]",
      "dest": "return_type_definition [9996,10013]"
    },
    {
      "src": "(: ( [9169,9170]",
      "dest": "(: ( [27794,27795]"
    },
    {
      "src": "(: ( [39942,39943]",
      "dest": "(: ( [19504,19505]"
    },
    {
      "src": "returns: returns [43540,43547]",
      "dest": "returns: returns [46231,46238]"
    },
    {
      "src": "(: ( [43462,43463]",
      "dest": "(: ( [46144,46145]"
    },
    {
      "src": "identifier: _max [25816,25820]",
      "dest": "identifier: _max [34156,34160]"
    },
    {
      "src": "block_statement [10593,10618]",
      "dest": "block_statement [11612,11647]"
    },
    {
      "src": "identifier: value [1085,1090]",
      "dest": "identifier: value [18929,18934]"
    },
    {
      "src": "\": \" [25196,25197]",
      "dest": "\": \" [41352,41353]"
    },
    {
      "src": "identifier: offset [28760,28766]",
      "dest": "identifier: offset [36939,36945]"
    },
    {
      "src": "primitive_type [13981,13988]",
      "dest": "primitive_type [1207,1214]"
    },
    {
      "src": ".: . [17414,17415]",
      "dest": ".: . [31667,31668]"
    },
    {
      "src": ".: . [17692,17693]",
      "dest": ".: . [32048,32049]"
    },
    {
      "src": "yul_identifier [29094,29102]",
      "dest": "yul_identifier [37567,37575]"
    },
    {
      "src": "solidity_version: 0.4.23 [17,23]",
      "dest": "solidity_version: 0.6.0 [5327,5332]"
    },
    {
      "src": "type_name [23407,23414]",
      "dest": "type_name [25499,25506]"
    },
    {
      "src": "identifier: onlyOwner [17616,17625]",
      "dest": "identifier: onlyOwner [31963,31972]"
    },
    {
      "src": "\": \" [43665,43666]",
      "dest": "\": \" [46379,46380]"
    },
    {
      "src": "sload: sload [32026,32031]",
      "dest": "sload: sload [38465,38470]"
    },
    {
      "src": "public: public [43442,43448]",
      "dest": "public: public [46124,46130]"
    },
    {
      "src": "member_expression [17401,17422]",
      "dest": "member_expression [31654,31675]"
    },
    {
      "src": "type_name [17637,17644]",
      "dest": "type_name [31984,31991]"
    },
    {
      "src": "): ) [31010,31011]",
      "dest": "): ) [36293,36294]"
    },
    {
      "src": "(: ( [16353,16354]",
      "dest": "(: ( [4422,4423]"
    },
    {
      "src": "{: { [16131,16132]",
      "dest": "{: { [4198,4199]"
    },
    {
      "src": "primitive_type [12818,12825]",
      "dest": "primitive_type [24300,24307]"
    },
    {
      "src": "identifier: burnMax [13564,13571]",
      "dest": "identifier: burnMax [785,792]"
    },
    {
      "src": "type_name [23667,23674]",
      "dest": "type_name [43839,43846]"
    },
    {
      "src": "parameter [22464,22488]",
      "dest": "parameter [25518,25532]"
    },
    {
      "src": "}: } [11042,11043]",
      "dest": "}: } [13153,13154]"
    },
    {
      "src": "yul_identifier [31717,31725]",
      "dest": "yul_identifier [36831,36839]"
    },
    {
      "src": "yul_function_call [29359,29362]",
      "dest": "yul_function_call [38019,38024]"
    },
    {
      "src": "binary_expression [10585,10591]",
      "dest": "binary_expression [11604,11610]"
    },
    {
      "src": "yul_decimal_number: 0 [29371,29372]",
      "dest": "yul_decimal_number: 0 [38033,38034]"
    },
    {
      "src": "call_argument [17409,17413]",
      "dest": "call_argument [31662,31666]"
    },
    {
      "src": "call_argument [42784,42797]",
      "dest": "call_argument [29308,29343]"
    },
    {
      "src": "public: public [21324,21330]",
      "dest": "public: public [24335,24341]"
    },
    {
      "src": "uint256: uint256 [19635,19642]",
      "dest": "uint256: uint256 [22649,22656]"
    },
    {
      "src": "type_name [43639,43645]",
      "dest": "type_name [46346,46352]"
    },
    {
      "src": "visibility [12645,12651]",
      "dest": "visibility [22775,22781]"
    },
    {
      "src": "(: ( [20410,20411]",
      "dest": "(: ( [24834,24835]"
    },
    {
      "src": "identifier: _to [17353,17356]",
      "dest": "identifier: _to [31606,31609]"
    },
    {
      "src": "primitive_type [13242,13249]",
      "dest": "primitive_type [483,490]"
    },
    {
      "src": "primitive_type [40178,40185]",
      "dest": "primitive_type [45423,45430]"
    },
    {
      "src": "identifier: offset [29177,29183]",
      "dest": "identifier: offset [37651,37657]"
    },
    {
      "src": ",: , [1179,1180]",
      "dest": ",: , [8026,8027]"
    },
    {
      "src": "public: public [13524,13530]",
      "dest": "public: public [745,751]"
    },
    {
      "src": "identifier: length [4356,4362]",
      "dest": "identifier: c [10033,10034]"
    },
    {
      "src": "return_statement [22385,22397]",
      "dest": "return_statement [24438,24450]"
    },
    {
      "src": "type_name [13278,13282]",
      "dest": "type_name [519,523]"
    },
    {
      "src": "call_expression [42363,42424]",
      "dest": "call_expression [30153,30221]"
    },
    {
      "src": "uint256: uint256 [21506,21513]",
      "dest": "uint256: uint256 [26956,26963]"
    },
    {
      "src": "type_name [42145,42149]",
      "dest": "type_name [1814,1818]"
    },
    {
      "src": "comment: /**   * @dev Multiplies two numbers, throws on overflow.   */ [10438,10501]",
      "dest": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */ [9708,9941]"
    },
    {
      "src": "type_name [19635,19642]",
      "dest": "type_name [22649,22656]"
    },
    {
      "src": "yul_identifier [29409,29417]",
      "dest": "yul_identifier [38113,38121]"
    },
    {
      "src": "address: address [11656,11663]",
      "dest": "address: address [1067,1074]"
    },
    {
      "src": "type_name [976,983]",
      "dest": "type_name [31088,31095]"
    },
    {
      "src": "external: external [158,166]",
      "dest": "external: external [5532,5540]"
    },
    {
      "src": "function: function [21262,21270]",
      "dest": "function: function [33440,33448]"
    },
    {
      "src": "binary_expression [9706,9732]",
      "dest": "binary_expression [4633,4659]"
    },
    {
      "src": "primitive_type [3900,3907]",
      "dest": "primitive_type [13021,13028]"
    },
    {
      "src": "returns: returns [6328,6335]",
      "dest": "returns: returns [12297,12304]"
    },
    {
      "src": "): ) [667,668]",
      "dest": "): ) [7798,7799]"
    },
    {
      "src": "primitive_type [23393,23400]",
      "dest": "primitive_type [25483,25490]"
    },
    {
      "src": "uint256: uint256 [11173,11180]",
      "dest": "uint256: uint256 [10863,10870]"
    },
    {
      "src": "): ) [17675,17676]",
      "dest": "): ) [32031,32032]"
    },
    {
      "src": "uint256: uint256 [11878,11885]",
      "dest": "uint256: uint256 [7096,7103]"
    },
    {
      "src": "assignment_expression [16142,16160]",
      "dest": "assignment_expression [4209,4227]"
    },
    {
      "src": "identifier: location [29325,29333]",
      "dest": "identifier: location [37936,37944]"
    },
    {
      "src": "identifier: ProxyStorage [13195,13207]",
      "dest": "identifier: ProxyStorage [436,448]"
    },
    {
      "src": "identifier: _to [17388,17391]",
      "dest": "identifier: _to [31641,31644]"
    },
    {
      "src": "uint256: uint256 [11364,11371]",
      "dest": "uint256: uint256 [9971,9978]"
    },
    {
      "src": "type_name [24037,24044]",
      "dest": "type_name [40757,40764]"
    },
    {
      "src": "}: } [9746,9747]",
      "dest": "}: } [4701,4702]"
    },
    {
      "src": "yul_path [31771,31777]",
      "dest": "yul_path [37421,37427]"
    },
    {
      "src": "external: external [1356,1364]",
      "dest": "external: external [5688,5696]"
    },
    {
      "src": "(: ( [3308,3309]",
      "dest": "(: ( [27004,27005]"
    },
    {
      "src": "): ) [21415,21416]",
      "dest": "): ) [33514,33515]"
    },
    {
      "src": "type_name [19134,19141]",
      "dest": "type_name [34673,34680]"
    },
    {
      "src": "parameter [43373,43378]",
      "dest": "parameter [46055,46060]"
    },
    {
      "src": "parameter [23393,23405]",
      "dest": "parameter [25483,25497]"
    },
    {
      "src": "expression_statement [4947,5033]",
      "dest": "expression_statement [29419,29509]"
    },
    {
      "src": "string [41629,41642]",
      "dest": "string [27799,27838]"
    },
    {
      "src": "call_argument [25196,25218]",
      "dest": "call_argument [41352,41390]"
    },
    {
      "src": "(: ( [41104,41105]",
      "dest": "(: ( [41939,41940]"
    },
    {
      "src": "identifier: _value [40186,40192]",
      "dest": "identifier: amount [45431,45437]"
    },
    {
      "src": "primitive_type [13617,13623]",
      "dest": "primitive_type [841,847]"
    },
    {
      "src": "return_statement [33878,33890]",
      "dest": "return_statement [26390,26402]"
    },
    {
      "src": "function: function [26465,26473]",
      "dest": "function: function [36035,36043]"
    },
    {
      "src": "yul_function_call [30998,31011]",
      "dest": "yul_function_call [36276,36294]"
    },
    {
      "src": "identifier: require [34113,34120]",
      "dest": "identifier: require [43062,43069]"
    },
    {
      "src": "address: address [13469,13476]",
      "dest": "address: address [690,697]"
    },
    {
      "src": "identifier: onlyOwner [17909,17918]",
      "dest": "identifier: onlyOwner [41298,41307]"
    },
    {
      "src": "primitive_type [43549,43555]",
      "dest": "primitive_type [46240,46246]"
    },
    {
      "src": "identifier: _tokenHolder [12597,12609]",
      "dest": "identifier: target [18894,18900]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/ownership/Claimable.sol [9260,9324]",
      "dest": "comment: /*  * @dev Provides information about the current execution context, including the  * sender of the transaction and its data. While these are generally available  * via msg.sender and msg.data, they should not be accessed in such a direct  * manner, since when dealing with GSN meta-transactions the account sending and  * paying for execution may not be the actual sender (as far as an application  * is concerned).  *  * This contract is only required for intermediate, library-like contracts.  */ [8129,8637]"
    },
    {
      "src": "identifier: _spender [12619,12627]",
      "dest": "identifier: target [19376,19382]"
    },
    {
      "src": "mapping: mapping [13828,13835]",
      "dest": "mapping: mapping [1407,1414]"
    },
    {
      "src": "parameter [17581,17592]",
      "dest": "parameter [31927,31939]"
    },
    {
      "src": "string [42410,42423]",
      "dest": "string [30182,30220]"
    },
    {
      "src": "address: address [20620,20627]",
      "dest": "address: address [805,812]"
    },
    {
      "src": "returns: returns [932,939]",
      "dest": "returns: returns [5546,5553]"
    },
    {
      "src": "string_literal [42853,42884]",
      "dest": "string_literal [30263,30299]"
    },
    {
      "src": "internal: internal [18776,18784]",
      "dest": "internal: internal [17938,17946]"
    },
    {
      "src": "identifier: SetBurnBounds [25040,25053]",
      "dest": "identifier: SetBurnBounds [32986,32999]"
    },
    {
      "src": "call_argument [16354,16373]",
      "dest": "call_argument [4423,4442]"
    },
    {
      "src": "=>: => [13958,13960]",
      "dest": "=>: => [1185,1187]"
    },
    {
      "src": "yul_identifier [29310,29315]",
      "dest": "yul_identifier [37921,37926]"
    },
    {
      "src": "modifier_invocation [25831,25840]",
      "dest": "modifier_invocation [34171,34180]"
    },
    {
      "src": "bool: bool [33798,33802]",
      "dest": "bool: bool [25567,25571]"
    },
    {
      "src": "user_defined_type [43224,43253]",
      "dest": "user_defined_type [45914,45926]"
    },
    {
      "src": "call_argument [39029,39030]",
      "dest": "call_argument [29600,29601]"
    },
    {
      "src": "(: ( [29408,29409]",
      "dest": "(: ( [38112,38113]"
    },
    {
      "src": "}: } [41440,41441]",
      "dest": "}: } [34991,34992]"
    },
    {
      "src": "primitive_type [23251,23258]",
      "dest": "primitive_type [43003,43010]"
    },
    {
      "src": "array_access [4947,4975]",
      "dest": "array_access [29419,29437]"
    },
    {
      "src": "yul_evm_builtin [29275,29278]",
      "dest": "yul_evm_builtin [38231,38234]"
    },
    {
      "src": "visibility [11375,11383]",
      "dest": "visibility [9982,9990]"
    },
    {
      "src": "}: } [40755,40756]",
      "dest": "}: } [28868,28869]"
    },
    {
      "src": "=>: => [12320,12322]",
      "dest": "=>: => [1363,1365]"
    },
    {
      "src": "identifier: Burn [23976,23980]",
      "dest": "identifier: Burn [32704,32708]"
    },
    {
      "src": "): ) [29384,29385]",
      "dest": "): ) [38046,38047]"
    },
    {
      "src": "return_type_definition [5491,5505]",
      "dest": "return_type_definition [26270,26284]"
    },
    {
      "src": "identifier: reclaimToken [17568,17580]",
      "dest": "identifier: reclaimToken [31914,31926]"
    },
    {
      "src": "visibility [43352,43358]",
      "dest": "visibility [46025,46031]"
    },
    {
      "src": "comment: // A wrapper around the balanceOf mapping. [11526,11568]",
      "dest": "comment: // File: contracts/true-currencies-new/ERC20.sol [20647,20695]"
    },
    {
      "src": "visibility [43528,43534]",
      "dest": "visibility [46210,46216]"
    },
    {
      "src": "(: ( [10562,10563]",
      "dest": "(: ( [11358,11359]"
    },
    {
      "src": "primitive_type [33331,33335]",
      "dest": "primitive_type [15229,15233]"
    },
    {
      "src": "(: ( [25311,25312]",
      "dest": "(: ( [41505,41506]"
    },
    {
      "src": "): ) [18446,18447]",
      "dest": "): ) [10476,10477]"
    },
    {
      "src": "): ) [16988,16989]",
      "dest": "): ) [5086,5087]"
    },
    {
      "src": "number_literal: 0 [10243,10244]",
      "dest": "number_literal: 0 [28594,28595]"
    },
    {
      "src": "identifier: require [25169,25176]",
      "dest": "identifier: require [41319,41326]"
    },
    {
      "src": "): ) [39030,39031]",
      "dest": "): ) [29601,29602]"
    },
    {
      "src": "identifier: _addr [11729,11734]",
      "dest": "identifier: account [15197,15204]"
    },
    {
      "src": "identifier: _approveAllArgs [20478,20493]",
      "dest": "identifier: _approve [24918,24926]"
    },
    {
      "src": "type_name [25794,25801]",
      "dest": "type_name [34134,34141]"
    },
    {
      "src": "function_definition [43422,43504]",
      "dest": "function_definition [46104,46186]"
    },
    {
      "src": "user_defined_type [32713,32727]",
      "dest": "user_defined_type [32484,32498]"
    },
    {
      "src": "add: add [29764,29767]",
      "dest": "add: add [37718,37721]"
    },
    {
      "src": "returns: returns [504,511]",
      "dest": "returns: returns [5702,5709]"
    },
    {
      "src": "identifier: burnMin [13531,13538]",
      "dest": "identifier: burnMin [752,759]"
    },
    {
      "src": "type_cast_expression [10235,10245]",
      "dest": "type_cast_expression [28586,28596]"
    },
    {
      "src": "{: { [39904,39905]",
      "dest": "{: { [19478,19479]"
    },
    {
      "src": "type_name [23981,23988]",
      "dest": "type_name [32709,32716]"
    },
    {
      "src": ",: , [4998,4999]",
      "dest": ",: , [29469,29470]"
    },
    {
      "src": "primitive_type [11667,11674]",
      "dest": "primitive_type [1078,1085]"
    },
    {
      "src": "(: ( [22292,22293]",
      "dest": "(: ( [45073,45074]"
    },
    {
      "src": "identifier: approve [20403,20410]",
      "dest": "identifier: approve [24827,24834]"
    },
    {
      "src": "primitive_type [3309,3313]",
      "dest": "primitive_type [27005,27009]"
    },
    {
      "src": "visibility [16810,16816]",
      "dest": "visibility [4906,4912]"
    },
    {
      "src": "function: function [403,411]",
      "dest": "function: function [6310,6318]"
    },
    {
      "src": "public: public [43528,43534]",
      "dest": "public: public [46210,46216]"
    },
    {
      "src": "address: address [22236,22243]",
      "dest": "address: address [41856,41863]"
    },
    {
      "src": "address: address [23066,23073]",
      "dest": "address: address [27690,27697]"
    },
    {
      "src": "type_name [24057,24064]",
      "dest": "type_name [40777,40784]"
    },
    {
      "src": "identifier: b [10656,10657]",
      "dest": "identifier: b [11704,11705]"
    },
    {
      "src": "internal: internal [10801,10809]",
      "dest": "internal: internal [12939,12947]"
    },
    {
      "src": "uint256: uint256 [24078,24085]",
      "dest": "uint256: uint256 [40325,40332]"
    },
    {
      "src": "external: external [17607,17615]",
      "dest": "external: external [31954,31962]"
    },
    {
      "src": "string [40466,40495]",
      "dest": "string [44425,44470]"
    },
    {
      "src": "modifier_invocation [38724,38733]",
      "dest": "modifier_invocation [42466,42475]"
    },
    {
      "src": "using_directive [19616,19643]",
      "dest": "using_directive [22630,22657]"
    },
    {
      "src": "identifier: location [28647,28655]",
      "dest": "identifier: location [36634,36642]"
    },
    {
      "src": "primitive_type [40829,40833]",
      "dest": "primitive_type [41873,41877]"
    },
    {
      "src": "primitive_type [16197,16204]",
      "dest": "primitive_type [4264,4271]"
    },
    {
      "src": "function_definition [17559,17723]",
      "dest": "function_definition [31905,32079]"
    },
    {
      "src": "identifier: claimOwnership [16973,16987]",
      "dest": "identifier: claimOwnership [5071,5085]"
    },
    {
      "src": "parameter [11353,11362]",
      "dest": "parameter [9960,9969]"
    },
    {
      "src": "type_name [10518,10525]",
      "dest": "type_name [11314,11321]"
    },
    {
      "src": "function: function [8694,8702]",
      "dest": "function: function [8672,8680]"
    },
    {
      "src": "external: external [7125,7133]",
      "dest": "external: external [6002,6010]"
    },
    {
      "src": "(: ( [16204,16205]",
      "dest": "(: ( [4271,4272]"
    },
    {
      "src": "type_name [33798,33802]",
      "dest": "type_name [25567,25571]"
    },
    {
      "src": "}: } [21445,21446]",
      "dest": "}: } [33522,33523]"
    },
    {
      "src": "(: ( [940,941]",
      "dest": "(: ( [5554,5555]"
    },
    {
      "src": "identifier: setBurnBounds [25780,25793]",
      "dest": "identifier: setBurnBounds [34120,34133]"
    },
    {
      "src": "parameter [23649,23665]",
      "dest": "parameter [45034,45049]"
    },
    {
      "src": "returns: returns [18988,18995]",
      "dest": "returns: returns [38617,38624]"
    },
    {
      "src": "yul_evm_builtin [29059,29061]",
      "dest": "yul_evm_builtin [36631,36633]"
    },
    {
      "src": "primitive_type [9162,9169]",
      "dest": "primitive_type [27787,27794]"
    },
    {
      "src": "member_expression [9706,9716]",
      "dest": "member_expression [4633,4643]"
    },
    {
      "src": "identifier: assert [11234,11240]",
      "dest": "identifier: require [10956,10963]"
    },
    {
      "src": "variable_declaration_statement [17637,17677]",
      "dest": "variable_declaration_statement [31984,32033]"
    },
    {
      "src": "parameter [20429,20443]",
      "dest": "parameter [37120,37134]"
    },
    {
      "src": "member_expression [16354,16364]",
      "dest": "member_expression [4423,4433]"
    },
    {
      "src": "contract_declaration [24968,25988]",
      "dest": "contract_declaration [32439,34995]"
    },
    {
      "src": "type_name [12836,12843]",
      "dest": "type_name [24319,24326]"
    },
    {
      "src": "address: address [24255,24262]",
      "dest": "address: address [41256,41263]"
    },
    {
      "src": "(: ( [42743,42744]",
      "dest": "(: ( [29284,29285]"
    },
    {
      "src": "primitive_type [17594,17601]",
      "dest": "primitive_type [31941,31948]"
    },
    {
      "src": "primitive_type [41089,41096]",
      "dest": "primitive_type [32018,32025]"
    },
    {
      "src": "comment: // File: contracts/modularERC20/ModularBasicToken.sol [17980,18033]",
      "dest": "comment: /**  * @title Gas Reclaim Legacy  *  * Note: this contract does not affect any of the token logic. It merely  * exists so the TokenController (owner) can reclaim the sponsored gas  *  * Previously TrueCurrency has a feature called \"gas boost\" which allowed  * us to sponsor gas by setting non-empty storage slots to 1.  * We are depricating this feature, but there is a bunch of gas saved  * from years of sponsoring gas. This contract is meant to allow the owner  * to take advantage of this leftover gas. Once all the slots are used,  * this contract can be removed from TrueCurrency.  *  * Utilitzes the gas refund mechanism in EVM. Each time an non-empty  * storage slot is set to 0, evm will refund 15,000 to the sender.  * Also utilized the refund for selfdestruct, see gasRefund39  *  */ [35082,35893]"
    },
    {
      "src": ",: , [988,989]",
      "dest": ",: , [31100,31101]"
    },
    {
      "src": "yul_path [29325,29333]",
      "dest": "yul_path [37936,37944]"
    },
    {
      "src": "identifier: Mint [24032,24036]",
      "dest": "identifier: Mint [40752,40756]"
    },
    {
      "src": "identifier: previousOwner [15909,15922]",
      "dest": "identifier: previousOwner [3989,4002]"
    },
    {
      "src": "identifier: onlyPendingOwner [9672,9688]",
      "dest": "identifier: onlyPendingOwner [4595,4611]"
    },
    {
      "src": "comment: /**  * @title SafeMath  * @dev Math operations with safety checks that throw on error  */ [10320,10412]",
      "dest": "comment: // File: @openzeppelin/contracts/utils/Address.sol [14407,14457]"
    },
    {
      "src": "yul_function_call [28969,29042]",
      "dest": "yul_function_call [37234,37307]"
    },
    {
      "src": "assembly: assembly [31992,32000]",
      "dest": "assembly: assembly [38431,38439]"
    },
    {
      "src": "call_argument [39398,39408]",
      "dest": "call_argument [28666,28676]"
    },
    {
      "src": "public: public [22950,22956]",
      "dest": "public: public [24571,24577]"
    },
    {
      "src": "public: public [31947,31953]",
      "dest": "public: public [38383,38389]"
    },
    {
      "src": "visibility [25822,25830]",
      "dest": "visibility [34162,34170]"
    },
    {
      "src": "binary_expression [25860,25872]",
      "dest": "binary_expression [34200,34212]"
    },
    {
      "src": "\": \" [35101,35102]",
      "dest": "\": \" [43217,43218]"
    },
    {
      "src": "): ) [41989,41990]",
      "dest": "): ) [28084,28085]"
    },
    {
      "src": "identifier: _startIndex [6469,6480]",
      "dest": "identifier: amount [31122,31128]"
    },
    {
      "src": "type_name [32927,32934]",
      "dest": "type_name [40362,40369]"
    },
    {
      "src": "modifier: modifier [9663,9671]",
      "dest": "modifier: modifier [4586,4594]"
    },
    {
      "src": "identifier: require [25852,25859]",
      "dest": "identifier: require [34192,34199]"
    },
    {
      "src": "type_name [21506,21513]",
      "dest": "type_name [26956,26963]"
    },
    {
      "src": "(: ( [43525,43526]",
      "dest": "(: ( [46207,46208]"
    },
    {
      "src": "(: ( [39405,39406]",
      "dest": "(: ( [28673,28674]"
    },
    {
      "src": "(: ( [586,587]",
      "dest": "(: ( [7544,7545]"
    },
    {
      "src": "visibility [22950,22956]",
      "dest": "visibility [24571,24577]"
    },
    {
      "src": "type_name [25808,25815]",
      "dest": "type_name [34148,34155]"
    },
    {
      "src": "address: address [40727,40734]",
      "dest": "address: address [28833,28840]"
    },
    {
      "src": "): ) [35039,35040]",
      "dest": "): ) [42043,42044]"
    },
    {
      "src": "string_literal [41350,41363]",
      "dest": "string_literal [34770,34817]"
    },
    {
      "src": "}: } [17722,17723]",
      "dest": "}: } [32078,32079]"
    },
    {
      "src": "(: ( [1059,1060]",
      "dest": "(: ( [5966,5967]"
    },
    {
      "src": "{: { [40421,40422]",
      "dest": "{: { [28556,28557]"
    },
    {
      "src": "string [41276,41289]",
      "dest": "string [34856,34905]"
    },
    {
      "src": "type_name [24270,24277]",
      "dest": "type_name [41273,41280]"
    },
    {
      "src": ",: , [29273,29274]",
      "dest": ",: , [38229,38230]"
    },
    {
      "src": "): ) [16387,16388]",
      "dest": "): ) [4456,4457]"
    },
    {
      "src": "returns: returns [1099,1106]",
      "dest": "returns: returns [6011,6018]"
    },
    {
      "src": "identifier: _to [17702,17705]",
      "dest": "identifier: _to [32058,32061]"
    },
    {
      "src": "}: } [10617,10618]",
      "dest": "}: } [11646,11647]"
    },
    {
      "src": "(: ( [975,976]",
      "dest": "(: ( [31087,31088]"
    },
    {
      "src": "): ) [26486,26487]",
      "dest": "): ) [36070,36071]"
    },
    {
      "src": "yul_evm_builtin [29350,29353]",
      "dest": "yul_evm_builtin [38010,38013]"
    },
    {
      "src": "return_statement [18686,18710]",
      "dest": "return_statement [23860,23880]"
    },
    {
      "src": "type_name [10824,10831]",
      "dest": "type_name [12962,12969]"
    },
    {
      "src": "identifier: require [38745,38752]",
      "dest": "identifier: require [27850,27857]"
    },
    {
      "src": "}: } [17145,17146]",
      "dest": "}: } [5243,5244]"
    },
    {
      "src": "string [42784,42797]",
      "dest": "string [29308,29343]"
    },
    {
      "src": "parameter [17345,17356]",
      "dest": "parameter [31590,31609]"
    },
    {
      "src": "(: ( [40439,40440]",
      "dest": "(: ( [44406,44407]"
    },
    {
      "src": "parameter [10779,10788]",
      "dest": "parameter [12889,12898]"
    },
    {
      "src": "(: ( [887,888]",
      "dest": "(: ( [5529,5530]"
    },
    {
      "src": "string_literal [34201,34225]",
      "dest": "string_literal [44024,44069]"
    },
    {
      "src": "type_name [24078,24085]",
      "dest": "type_name [40325,40332]"
    },
    {
      "src": "internal: internal [35520,35528]",
      "dest": "internal: internal [14297,14305]"
    },
    {
      "src": "parameter [479,490]",
      "dest": "parameter [7492,7509]"
    },
    {
      "src": "state_variable_declaration [13773,13820]",
      "dest": "state_variable_declaration [1000,1051]"
    },
    {
      "src": "comment: /**       @dev refund 30,000 gas     @dev costs slightly more than 15,400 gas     */ [30793,30880]",
      "dest": "comment: /**      * @dev Return the remaining sponsored gas slots      */ [38277,38343]"
    },
    {
      "src": "identifier: who [487,490]",
      "dest": "identifier: recipient [7500,7509]"
    },
    {
      "src": "(: ( [12291,12292]",
      "dest": "(: ( [1335,1336]"
    },
    {
      "src": "uint256: uint256 [4857,4864]",
      "dest": "uint256: uint256 [30109,30116]"
    },
    {
      "src": "(: ( [38767,38768]",
      "dest": "(: ( [27878,27879]"
    },
    {
      "src": "call_argument [25321,25327]",
      "dest": "call_argument [41515,41521]"
    },
    {
      "src": "constant: constant [32935,32943]",
      "dest": "constant: constant [40370,40378]"
    },
    {
      "src": "visibility [37482,37490]",
      "dest": "visibility [16785,16793]"
    },
    {
      "src": "primitive_type [11173,11180]",
      "dest": "primitive_type [10863,10870]"
    },
    {
      "src": "parameter [903,918]",
      "dest": "parameter [24835,24850]"
    },
    {
      "src": "external: external [4124,4132]",
      "dest": "external: external [45439,45447]"
    },
    {
      "src": "): ) [42797,42798]",
      "dest": "): ) [29343,29344]"
    },
    {
      "src": "yul_identifier [31051,31057]",
      "dest": "yul_identifier [36450,36456]"
    },
    {
      "src": "bool: bool [41560,41564]",
      "dest": "bool: bool [1769,1773]"
    },
    {
      "src": "primitive_type [41097,41104]",
      "dest": "primitive_type [41932,41939]"
    },
    {
      "src": "identifier: allowance [878,887]",
      "dest": "identifier: totalSupply [5518,5529]"
    },
    {
      "src": "state_variable_declaration [12283,12352]",
      "dest": "state_variable_declaration [1328,1401]"
    },
    {
      "src": "(: ( [34997,34998]",
      "dest": "(: ( [41931,41932]"
    },
    {
      "src": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [10942,11019]",
      "dest": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [13049,13126]"
    },
    {
      "src": "function_definition [18608,18717]",
      "dest": "function_definition [23787,23887]"
    },
    {
      "src": "visibility [31479,31487]",
      "dest": "visibility [13654,13662]"
    },
    {
      "src": "identifier: to [24053,24055]",
      "dest": "identifier: to [40773,40775]"
    },
    {
      "src": "comment: /* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.      *******************************************************************************************************      ** length     input                                                         usage      *******************************************************************************************************      ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner      ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation      ** 32         uint256(11)                                                   gasRefundPool_Deprecated      ** 64         uint256(address),uint256(14)                                  balanceOf      ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance      ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes     **/ [14012,15566]",
      "dest": "comment: // reward token storage [1247,1270]"
    },
    {
      "src": "identifier: location [28561,28569]",
      "dest": "identifier: location [37722,37730]"
    },
    {
      "src": "}: } [11469,11470]",
      "dest": "}: } [14402,14403]"
    },
    {
      "src": "type_name [11736,11743]",
      "dest": "type_name [7511,7518]"
    },
    {
      "src": "public: public [43352,43358]",
      "dest": "public: public [46025,46031]"
    },
    {
      "src": "variable_declaration [4348,4362]",
      "dest": "variable_declaration [10025,10034]"
    },
    {
      "src": "return_statement [10602,10611]",
      "dest": "return_statement [11627,11636]"
    },
    {
      "src": "string_literal [16375,16387]",
      "dest": "string_literal [4444,4456]"
    },
    {
      "src": "address: address [888,895]",
      "dest": "address: address [24539,24546]"
    },
    {
      "src": ".: . [39924,39925]",
      "dest": ".: . [19510,19511]"
    },
    {
      "src": "identifier: HasOwner [15822,15830]",
      "dest": "identifier: ClaimableOwnable [3725,3741]"
    },
    {
      "src": "primitive_type [24630,24637]",
      "dest": "primitive_type [29387,29394]"
    },
    {
      "src": "call_argument [40440,40464]",
      "dest": "call_argument [44407,44423]"
    },
    {
      "src": "string: string [13617,13623]",
      "dest": "string: string [841,847]"
    },
    {
      "src": "identifier: _ [16399,16400]",
      "dest": "identifier: _ [4468,4469]"
    },
    {
      "src": ",: , [24055,24056]",
      "dest": ",: , [40775,40776]"
    },
    {
      "src": "identifier: sender [16358,16364]",
      "dest": "identifier: sender [4427,4433]"
    },
    {
      "src": "number_literal: 0 [39029,39030]",
      "dest": "number_literal: 0 [29600,29601]"
    },
    {
      "src": "address: address [479,486]",
      "dest": "address: address [7492,7499]"
    },
    {
      "src": "event_definition [15856,15965]",
      "dest": "event_definition [3946,4030]"
    },
    {
      "src": "yul_function_call [29106,29184]",
      "dest": "yul_function_call [37579,37658]"
    },
    {
      "src": "call_argument [34121,34138]",
      "dest": "call_argument [43070,43092]"
    },
    {
      "src": "parameter [25808,25820]",
      "dest": "parameter [34148,34160]"
    },
    {
      "src": "identifier: approve [1052,1059]",
      "dest": "identifier: transfer [5958,5966]"
    },
    {
      "src": "identifier: _getBalance [18617,18628]",
      "dest": "identifier: totalSupply [23796,23807]"
    },
    {
      "src": "contract: contract [24968,24976]",
      "dest": "contract: contract [32448,32456]"
    },
    {
      "src": "): ) [6344,6345]",
      "dest": "): ) [12313,12314]"
    },
    {
      "src": "parameter [1306,1318]",
      "dest": "parameter [5671,5686]"
    },
    {
      "src": "primitive_type [3516,3523]",
      "dest": "primitive_type [28506,28513]"
    },
    {
      "src": "call_argument [34998,35015]",
      "dest": "call_argument [41932,41976]"
    },
    {
      "src": "identifier: owner [17957,17962]",
      "dest": "identifier: owner [44098,44103]"
    },
    {
      "src": "\": \" [2445,2446]",
      "dest": "\": \" [4680,4681]"
    },
    {
      "src": "identifier: _attribute [4964,4974]",
      "dest": "identifier: _balances [29419,29428]"
    },
    {
      "src": "parameter [4302,4316]",
      "dest": "parameter [28523,28537]"
    },
    {
      "src": "identifier: ReclaimerToken [17203,17217]",
      "dest": "identifier: ReclaimerToken [31400,31414]"
    },
    {
      "src": "): ) [37517,37518]",
      "dest": "): ) [45160,45161]"
    },
    {
      "src": "returns: returns [22284,22291]",
      "dest": "returns: returns [45065,45072]"
    },
    {
      "src": "call_argument [38772,38799]",
      "dest": "call_argument [43921,43964]"
    },
    {
      "src": "\": \" [5087,5088]",
      "dest": "\": \" [27110,27111]"
    },
    {
      "src": "identifier: msg [9706,9709]",
      "dest": "identifier: msg [4633,4636]"
    },
    {
      "src": "parameter [11398,11407]",
      "dest": "parameter [19728,19744]"
    },
    {
      "src": "): ) [5031,5032]",
      "dest": "): ) [29507,29508]"
    },
    {
      "src": "function_definition [40922,41441]",
      "dest": "function_definition [34658,34992]"
    },
    {
      "src": "primitive_type [11398,11405]",
      "dest": "primitive_type [19728,19735]"
    },
    {
      "src": "type_name [43463,43468]",
      "dest": "type_name [46145,46150]"
    },
    {
      "src": "identifier: hasHook [38816,38823]",
      "dest": "identifier: success [19955,19962]"
    },
    {
      "src": "uint256: uint256 [17637,17644]",
      "dest": "uint256: uint256 [31984,31991]"
    },
    {
      "src": "type_name [1133,1140]",
      "dest": "type_name [7980,7987]"
    },
    {
      "src": "identifier: token [17655,17660]",
      "dest": "identifier: token [32002,32007]"
    },
    {
      "src": "{: { [26497,26498]",
      "dest": "{: { [36081,36082]"
    },
    {
      "src": "yul_identifier [28561,28569]",
      "dest": "yul_identifier [37722,37730]"
    },
    {
      "src": "string [42853,42884]",
      "dest": "string [30263,30299]"
    },
    {
      "src": "identifier: totalSupply_ [13399,13411]",
      "dest": "identifier: _totalSupply [624,636]"
    },
    {
      "src": "uint256: uint256 [18760,18767]",
      "dest": "uint256: uint256 [33454,33461]"
    },
    {
      "src": "type_name [21340,21344]",
      "dest": "type_name [24368,24372]"
    },
    {
      "src": "primitive_type [17637,17644]",
      "dest": "primitive_type [31984,31991]"
    },
    {
      "src": ",: , [29068,29069]",
      "dest": ",: , [37382,37383]"
    },
    {
      "src": "function: function [31913,31921]",
      "dest": "function: function [38349,38357]"
    },
    {
      "src": "identifier: OwnershipTransferred [17030,17050]",
      "dest": "identifier: OwnershipTransferred [5128,5148]"
    },
    {
      "src": "state_mutability [43535,43539]",
      "dest": "state_mutability [46226,46230]"
    },
    {
      "src": "identifier: symbol [43609,43615]",
      "dest": "identifier: symbol [46307,46313]"
    },
    {
      "src": "primitive_type [1108,1112]",
      "dest": "primitive_type [6020,6024]"
    },
    {
      "src": "internal: internal [42710,42718]",
      "dest": "internal: internal [30125,30133]"
    },
    {
      "src": "): ) [35102,35103]",
      "dest": "): ) [43218,43219]"
    },
    {
      "src": "yul_path [31051,31057]",
      "dest": "yul_path [36450,36456]"
    },
    {
      "src": "(: ( [1132,1133]",
      "dest": "(: ( [7979,7980]"
    },
    {
      "src": "identifier: owner [10166,10171]",
      "dest": "identifier: owner [30374,30379]"
    },
    {
      "src": "{: { [15847,15848]",
      "dest": "{: { [3758,3759]"
    },
    {
      "src": "call_argument [25177,25194]",
      "dest": "call_argument [41327,41350]"
    },
    {
      "src": "variable_declaration [38811,38823]",
      "dest": "variable_declaration [19950,19962]"
    },
    {
      "src": ",: , [17592,17593]",
      "dest": ",: , [31939,31940]"
    },
    {
      "src": "identifier: balance [17415,17422]",
      "dest": "identifier: balance [31668,31675]"
    },
    {
      "src": "(: ( [25965,25966]",
      "dest": "(: ( [34330,34331]"
    },
    {
      "src": "identifier: burnMax [25922,25929]",
      "dest": "identifier: burnMax [34287,34294]"
    },
    {
      "src": "uint256: uint256 [1340,1347]",
      "dest": "uint256: uint256 [5986,5993]"
    },
    {
      "src": "primitive_type [6482,6489]",
      "dest": "primitive_type [1295,1302]"
    },
    {
      "src": "identifier: sheep [29364,29369]",
      "dest": "identifier: sheep [38026,38031]"
    },
    {
      "src": "event_paramater [15893,15922]",
      "dest": "event_paramater [3973,4002]"
    },
    {
      "src": "): ) [16122,16123]",
      "dest": "): ) [4189,4190]"
    },
    {
      "src": "address: address [13883,13890]",
      "dest": "address: address [1111,1118]"
    },
    {
      "src": "): ) [43350,43351]",
      "dest": "): ) [46023,46024]"
    },
    {
      "src": "let: let [30953,30956]",
      "dest": "let: let [36180,36183]"
    },
    {
      "src": "): ) [40402,40403]",
      "dest": "): ) [28537,28538]"
    },
    {
      "src": "!=: != [9159,9161]",
      "dest": "!=: != [27784,27786]"
    },
    {
      "src": "uint256: uint256 [24270,24277]",
      "dest": "uint256: uint256 [41273,41280]"
    },
    {
      "src": "(: ( [13902,13903]",
      "dest": "(: ( [1129,1130]"
    },
    {
      "src": "parameter [17594,17605]",
      "dest": "parameter [31941,31952]"
    },
    {
      "src": "): ) [40495,40496]",
      "dest": "): ) [44470,44471]"
    },
    {
      "src": "primitive_type [43639,43645]",
      "dest": "primitive_type [46346,46352]"
    },
    {
      "src": "parameter [1108,1112]",
      "dest": "parameter [6020,6024]"
    },
    {
      "src": "public: public [33782,33788]",
      "dest": "public: public [25534,25540]"
    },
    {
      "src": "=: = [13539,13540]",
      "dest": "=: = [760,761]"
    },
    {
      "src": "assignment_expression [17113,17138]",
      "dest": "assignment_expression [5211,5236]"
    },
    {
      "src": "): ) [40736,40737]",
      "dest": "): ) [28842,28843]"
    },
    {
      "src": "returns: returns [43630,43637]",
      "dest": "returns: returns [46337,46344]"
    },
    {
      "src": "): ) [17413,17414]",
      "dest": "): ) [31666,31667]"
    },
    {
      "src": "primitive_type [24078,24085]",
      "dest": "primitive_type [40325,40332]"
    },
    {
      "src": "string [2433,2446]",
      "dest": "string [4661,4681]"
    },
    {
      "src": "sload: sload [29319,29324]",
      "dest": "sload: sload [37930,37935]"
    },
    {
      "src": "identifier: transferFrom [963,975]",
      "dest": "identifier: _beforeTokenTransfer [31067,31087]"
    },
    {
      "src": "return: return [11025,11031]",
      "dest": "return: return [13138,13144]"
    },
    {
      "src": "modifier_invocation [16817,16826]",
      "dest": "modifier_invocation [4913,4922]"
    },
    {
      "src": "expression_statement [9142,9174]",
      "dest": "expression_statement [27769,27840]"
    },
    {
      "src": "comment: /**  * @title ERC20Basic  * @dev Simpler version of ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/179  */ [245,376]",
      "dest": "comment: /**  * Defines the storage layout of the token implementation contract. Any  * newly declared state variables in future upgrades should be appended  * to the bottom. Never remove state variables from this list, however variables  * can be renamed. Please add _Deprecated to deprecated variables.  */ [121,425]"
    },
    {
      "src": "number_literal: 0 [16205,16206]",
      "dest": "number_literal: 0 [4272,4273]"
    },
    {
      "src": "return_type_definition [18988,19012]",
      "dest": "return_type_definition [38617,38641]"
    },
    {
      "src": "type_name [1060,1067]",
      "dest": "type_name [24554,24561]"
    },
    {
      "src": "parameter [1077,1090]",
      "dest": "parameter [18921,18934]"
    },
    {
      "src": "comment: /**   * @dev Adds two numbers, throws on overflow.   */ [11279,11336]",
      "dest": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */ [11050,11295]"
    },
    {
      "src": "=>: => [13978,13980]",
      "dest": "=>: => [1204,1206]"
    },
    {
      "src": "(: ( [25176,25177]",
      "dest": "(: ( [41326,41327]"
    },
    {
      "src": "): ) [11674,11675]",
      "dest": "): ) [1085,1086]"
    },
    {
      "src": "type_name [513,520]",
      "dest": "type_name [5711,5718]"
    },
    {
      "src": "primitive_type [9923,9930]",
      "dest": "primitive_type [7476,7483]"
    },
    {
      "src": "function: function [43512,43520]",
      "dest": "function: function [46194,46202]"
    },
    {
      "src": "identifier: pendingOwner [17113,17125]",
      "dest": "identifier: pendingOwner [5211,5223]"
    },
    {
      "src": "=>: => [11664,11666]",
      "dest": "=>: => [1075,1077]"
    },
    {
      "src": "yul_block [29073,29436]",
      "dest": "yul_block [37859,38140]"
    },
    {
      "src": "solidity_pragma_token [7,23]",
      "dest": "solidity_pragma_token [5317,5332]"
    },
    {
      "src": "primitive_type [18794,18801]",
      "dest": "primitive_type [38404,38411]"
    },
    {
      "src": "modifier: modifier [16314,16322]",
      "dest": "modifier: modifier [4383,4391]"
    },
    {
      "src": "(: ( [25237,25238]",
      "dest": "(: ( [41409,41410]"
    },
    {
      "src": "let: let [29090,29093]",
      "dest": "let: let [37563,37566]"
    },
    {
      "src": "primitive_type [42145,42149]",
      "dest": "primitive_type [1814,1818]"
    },
    {
      "src": "primitive_type [38760,38767]",
      "dest": "primitive_type [27871,27878]"
    },
    {
      "src": "identifier: _value [18971,18977]",
      "dest": "identifier: amount [24860,24866]"
    },
    {
      "src": "): ) [17605,17606]",
      "dest": "): ) [31952,31953]"
    },
    {
      "src": "(: ( [11438,11439]",
      "dest": "(: ( [10060,10061]"
    },
    {
      "src": ",: , [20510,20511]",
      "dest": ",: , [24948,24949]"
    },
    {
      "src": "(: ( [40734,40735]",
      "dest": "(: ( [28840,28841]"
    },
    {
      "src": "expression_statement [9740,9742]",
      "dest": "expression_statement [4693,4695]"
    },
    {
      "src": "): ) [18641,18642]",
      "dest": "): ) [23808,23809]"
    },
    {
      "src": "yul_variable_declaration [29090,29184]",
      "dest": "yul_variable_declaration [37563,37658]"
    },
    {
      "src": "comment: /**         Deploy (9 bytes)           PC Assembly       Opcodes                                       Stack           00 PUSH1(31)      60 1f                                         1f           02 DUP1           80                                            1f 1f           03 PUSH1(9)       60 09                                         1f 1f 09           05 RETURNDATASIZE 3d                                            1f 1f 09 00           06 CODECOPY       39                                            1f           07 RETURNDATASIZE 3d                                            1f 00           08 RETURN         f3         Sheep (31 bytes = 3 + 20 + 8)           PC Assembly       Opcodes                                       Stack           00 RETURNDATASIZE 3d                                            0           01 CALLER         33                                            0 caller           02 PUSH20(me)     73 memememememememememememememememememememe   0 caller me           17 EQ             14                                            0 valid           18 PUSH1(1d)      60 1d                                         0 valid 1d           1a JUMPI          57                                            0           1b DUP1           80                                            0 0           1c REVERT         fd           1d JUMPDEST       5b                                            0           1e SELFDESTRUCT   ff         */ [26508,27985]",
      "dest": "comment: // refund gas [36092,36105]"
    },
    {
      "src": "function_body [28920,29454]",
      "dest": "function_body [37145,38269]"
    },
    {
      "src": "string_literal [38772,38799]",
      "dest": "string_literal [43921,43964]"
    },
    {
      "src": "type_name [18963,18970]",
      "dest": "type_name [24852,24859]"
    },
    {
      "src": "): ) [569,570]",
      "dest": "): ) [7525,7526]"
    },
    {
      "src": "}: } [1529,1530]",
      "dest": "}: } [1613,1614]"
    },
    {
      "src": ",: , [40725,40726]",
      "dest": ",: , [28843,28844]"
    },
    {
      "src": "): ) [42423,42424]",
      "dest": "): ) [30220,30221]"
    },
    {
      "src": "identifier: location [31035,31043]",
      "dest": "identifier: location [36434,36442]"
    },
    {
      "src": "parameter [19134,19146]",
      "dest": "parameter [34673,34688]"
    },
    {
      "src": "mapping: mapping [12283,12290]",
      "dest": "mapping: mapping [1328,1335]"
    },
    {
      "src": "identifier: _value [4865,4871]",
      "dest": "identifier: amount [30117,30123]"
    },
    {
      "src": "(: ( [29358,29359]",
      "dest": "(: ( [38018,38019]"
    },
    {
      "src": "}: } [39970,39971]",
      "dest": "}: } [19652,19653]"
    },
    {
      "src": "): ) [11225,11226]",
      "dest": "): ) [10943,10944]"
    },
    {
      "src": "uint256: uint256 [10563,10570]",
      "dest": "uint256: uint256 [16769,16776]"
    },
    {
      "src": "call_argument [25312,25319]",
      "dest": "call_argument [41506,41513]"
    },
    {
      "src": ",: , [632,633]",
      "dest": ",: , [7763,7764]"
    },
    {
      "src": "contract_body [10431,11470]",
      "dest": "contract_body [9701,14403]"
    },
    {
      "src": "(: ( [611,612]",
      "dest": "(: ( [7742,7743]"
    },
    {
      "src": "returns: returns [33789,33796]",
      "dest": "returns: returns [25558,25565]"
    },
    {
      "src": "identifier: _to [17602,17605]",
      "dest": "identifier: _to [31949,31952]"
    },
    {
      "src": "address: address [1477,1484]",
      "dest": "address: address [1593,1600]"
    },
    {
      "src": "primitive_type [33738,33745]",
      "dest": "primitive_type [22681,22688]"
    },
    {
      "src": "return_type_definition [932,949]",
      "dest": "return_type_definition [5546,5563]"
    },
    {
      "src": "): ) [41206,41207]",
      "dest": "): ) [16825,16826]"
    },
    {
      "src": "primitive_type [20429,20436]",
      "dest": "primitive_type [37120,37127]"
    },
    {
      "src": "function_definition [28888,29454]",
      "dest": "function_definition [37099,38269]"
    },
    {
      "src": "expression_statement [17388,17424]",
      "dest": "expression_statement [31641,31677]"
    },
    {
      "src": "internal: internal [3286,3294]",
      "dest": "internal: internal [15206,15214]"
    },
    {
      "src": ".: . [17391,17392]",
      "dest": ".: . [31644,31645]"
    },
    {
      "src": "return: return [43391,43397]",
      "dest": "return: return [46073,46079]"
    },
    {
      "src": "call_argument [40727,40737]",
      "dest": "call_argument [28833,28843]"
    },
    {
      "src": "type_name [1477,1484]",
      "dest": "type_name [1593,1600]"
    },
    {
      "src": "identifier: _spender [20494,20502]",
      "dest": "identifier: spender [24941,24948]"
    },
    {
      "src": "function: function [43600,43608]",
      "dest": "function: function [46298,46306]"
    },
    {
      "src": "uint256: uint256 [24133,24140]",
      "dest": "uint256: uint256 [36056,36063]"
    },
    {
      "src": "yul_path [31197,31205]",
      "dest": "yul_path [36684,36692]"
    },
    {
      "src": "pure: pure [43625,43629]",
      "dest": "pure: pure [46332,46336]"
    },
    {
      "src": "primitive_type [18548,18555]",
      "dest": "primitive_type [24016,24023]"
    },
    {
      "src": "(: ( [8710,8711]",
      "dest": "(: ( [8691,8692]"
    },
    {
      "src": "identifier: div [10775,10778]",
      "dest": "identifier: div [12885,12888]"
    },
    {
      "src": "event_definition [1118,1196]",
      "dest": "event_definition [7965,8043]"
    },
    {
      "src": "contract_body [26317,32611]",
      "dest": "contract_body [35923,38781]"
    },
    {
      "src": "identifier: _value [1348,1354]",
      "dest": "identifier: amount [5994,6000]"
    },
    {
      "src": "mapping: mapping [13874,13881]",
      "dest": "mapping: mapping [1103,1110]"
    },
    {
      "src": "sload: sload [30967,30972]",
      "dest": "sload: sload [36194,36199]"
    },
    {
      "src": "visibility [23267,23275]",
      "dest": "visibility [43025,43033]"
    },
    {
      "src": "call_argument [24638,24639]",
      "dest": "call_argument [29395,29396]"
    },
    {
      "src": "address: address [15893,15900]",
      "dest": "address: address [3973,3980]"
    },
    {
      "src": "assembly_statement [31992,32051]",
      "dest": "assembly_statement [38431,38490]"
    },
    {
      "src": "yul_decimal_number: 0 [29377,29378]",
      "dest": "yul_decimal_number: 0 [38039,38040]"
    },
    {
      "src": "identifier: account [39504,39511]",
      "dest": "identifier: account [40534,40541]"
    },
    {
      "src": "function_definition [954,1039]",
      "dest": "function_definition [31058,31150]"
    },
    {
      "src": "identifier: newOwner [9108,9116]",
      "dest": "identifier: recipient [5975,5984]"
    },
    {
      "src": "yul_identifier [29325,29333]",
      "dest": "yul_identifier [37936,37944]"
    },
    {
      "src": "primitive_type [41715,41722]",
      "dest": "primitive_type [1758,1765]"
    },
    {
      "src": "): ) [13922,13923]",
      "dest": "): ) [1149,1150]"
    },
    {
      "src": "(: ( [25053,25054]",
      "dest": "(: ( [32999,33000]"
    },
    {
      "src": "identifier: pendingOwner [13257,13269]",
      "dest": "identifier: pendingOwner [498,510]"
    },
    {
      "src": "address: address [12382,12389]",
      "dest": "address: address [19693,19700]"
    },
    {
      "src": "{: { [16827,16828]",
      "dest": "{: { [4923,4924]"
    },
    {
      "src": "yul_evm_builtin [29106,29109]",
      "dest": "yul_evm_builtin [37579,37582]"
    },
    {
      "src": "): ) [12330,12331]",
      "dest": "): ) [1373,1374]"
    },
    {
      "src": "(: ( [39920,39921]",
      "dest": "(: ( [19496,19497]"
    },
    {
      "src": "visibility [4124,4132]",
      "dest": "visibility [45439,45447]"
    },
    {
      "src": "return_type_definition [18785,18815]",
      "dest": "return_type_definition [38395,38419]"
    },
    {
      "src": "yul_path [31571,31577]",
      "dest": "yul_path [36324,36330]"
    },
    {
      "src": "primitive_type [13469,13476]",
      "dest": "primitive_type [690,697]"
    },
    {
      "src": "type_name [1320,1327]",
      "dest": "type_name [15491,15498]"
    },
    {
      "src": "): ) [12331,12332]",
      "dest": "): ) [1374,1375]"
    },
    {
      "src": "identifier: offset [28959,28965]",
      "dest": "identifier: offset [37224,37230]"
    },
    {
      "src": "identifier: onlyOwner [38724,38733]",
      "dest": "identifier: onlyOwner [42466,42475]"
    },
    {
      "src": "primitive_type [43373,43378]",
      "dest": "primitive_type [46055,46060]"
    },
    {
      "src": "identifier: require [40432,40439]",
      "dest": "identifier: require [44399,44406]"
    },
    {
      "src": "type_name [11863,11870]",
      "dest": "type_name [18306,18313]"
    },
    {
      "src": "identifier: to [998,1000]",
      "dest": "identifier: to [31110,31112]"
    },
    {
      "src": "): ) [25885,25886]",
      "dest": "): ) [34250,34251]"
    },
    {
      "src": "{: { [25158,25159]",
      "dest": "{: { [41308,41309]"
    },
    {
      "src": "}: } [23034,23035]",
      "dest": "}: } [24670,24671]"
    },
    {
      "src": "): ) [43526,43527]",
      "dest": "): ) [46208,46209]"
    },
    {
      "src": "binary_expression [42372,42408]",
      "dest": "binary_expression [30161,30180]"
    },
    {
      "src": "yul_path [28479,28487]",
      "dest": "yul_path [36495,36503]"
    },
    {
      "src": "constant: constant [43267,43275]",
      "dest": "constant: constant [45940,45948]"
    },
    {
      "src": "<=: <= [11243,11245]",
      "dest": "<=: <= [10966,10968]"
    },
    {
      "src": ",: , [22930,22931]",
      "dest": ",: , [24552,24553]"
    },
    {
      "src": "identifier: sheep [28489,28494]",
      "dest": "identifier: amount [36505,36511]"
    },
    {
      "src": "(: ( [11352,11353]",
      "dest": "(: ( [9959,9960]"
    },
    {
      "src": "address: address [13215,13222]",
      "dest": "address: address [456,463]"
    },
    {
      "src": ",: , [20427,20428]",
      "dest": ",: , [24850,24851]"
    },
    {
      "src": "comment: //flexibility since burning could also be as good as disabled [25586,25647]",
      "dest": "comment: /**      * @dev Change the minimum and maximum amount that can be burned at once.      * Burning may be disabled by setting both to 0 (this will not be done      * under normal operation, but we can't add checks to disallow it without      * losing a lot of flexibility since burning could also be as good as disabled      * by setting the minimum extremely high, and we don't want to lock      * in any particular cap for the minimum)      * @param _min minimum amount that can be burned at once      * @param _max maximum amount that can be burned at once      */ [33531,34105]"
    },
    {
      "src": "address: address [2163,2170]",
      "dest": "address: address [1284,1291]"
    },
    {
      "src": "primitive_type [17128,17135]",
      "dest": "primitive_type [5226,5233]"
    },
    {
      "src": "address: address [12611,12618]",
      "dest": "address: address [19368,19375]"
    },
    {
      "src": "return_statement [11453,11462]",
      "dest": "return_statement [10112,10121]"
    },
    {
      "src": "\": \" [5000,5001]",
      "dest": "\": \" [29471,29472]"
    },
    {
      "src": "comment: //may be disabled by setting both to 0 (this will not be done under normal [25425,25499]",
      "dest": "comment: /**      * @dev Emitted when new burn bounds were set      * @param newMin new minimum burn amount      * @param newMax new maximum burn amount      * @notice `newMin` should never be greater than `newMax`      */ [32756,32974]"
    },
    {
      "src": "): ) [1112,1113]",
      "dest": "): ) [6024,6025]"
    },
    {
      "src": "pragma: pragma [0,6]",
      "dest": "pragma: pragma [5310,5316]"
    },
    {
      "src": "parameter [24270,24284]",
      "dest": "parameter [41273,41287]"
    },
    {
      "src": "(: ( [39397,39398]",
      "dest": "(: ( [28665,28666]"
    },
    {
      "src": "identifier: _spender [23088,23096]",
      "dest": "identifier: recipient [27714,27723]"
    },
    {
      "src": "parameter [12382,12402]",
      "dest": "parameter [19693,19707]"
    },
    {
      "src": "identifier: Transfer [39012,39020]",
      "dest": "identifier: Transfer [29574,29582]"
    },
    {
      "src": "returns: returns [18657,18664]",
      "dest": "returns: returns [23831,23838]"
    },
    {
      "src": "address: address [12589,12596]",
      "dest": "address: address [18886,18893]"
    },
    {
      "src": "call_argument [25972,25976]",
      "dest": "call_argument [34337,34341]"
    },
    {
      "src": "yul_function_call [32026,32040]",
      "dest": "yul_function_call [38465,38479]"
    },
    {
      "src": "yul_hex_number: 0xfffff [31059,31066]",
      "dest": "yul_hex_number: 0xfffff [36458,36465]"
    },
    {
      "src": "}: } [43591,43592]",
      "dest": "}: } [46289,46290]"
    },
    {
      "src": "view: view [32112,32116]",
      "dest": "view: view [38612,38616]"
    },
    {
      "src": "function_definition [11340,11467]",
      "dest": "function_definition [9947,10128]"
    },
    {
      "src": "identifier: SafeMath [19622,19630]",
      "dest": "identifier: SafeMath [22636,22644]"
    },
    {
      "src": "expression_statement [40593,40635]",
      "dest": "expression_statement [28707,28747]"
    },
    {
      "src": "is: is [43219,43221]",
      "dest": "is: is [45911,45913]"
    },
    {
      "src": "=: = [32969,32970]",
      "dest": "=: = [40404,40405]"
    },
    {
      "src": "): ) [16333,16334]",
      "dest": "): ) [4402,4403]"
    },
    {
      "src": "expression_statement [25169,25220]",
      "dest": "expression_statement [41319,41392]"
    },
    {
      "src": "event_paramater [24057,24070]",
      "dest": "event_paramater [40777,40790]"
    },
    {
      "src": "uint256: uint256 [3550,3557]",
      "dest": "uint256: uint256 [27725,27732]"
    },
    {
      "src": "call_argument [41310,41348]",
      "dest": "call_argument [34751,34768]"
    },
    {
      "src": "return_type_definition [5998,6015]",
      "dest": "return_type_definition [13668,13685]"
    },
    {
      "src": "for: for [19631,19634]",
      "dest": "for: for [22645,22648]"
    },
    {
      "src": "type_name [23233,23240]",
      "dest": "type_name [42975,42982]"
    },
    {
      "src": "parameter [10563,10572]",
      "dest": "parameter [16769,16783]"
    },
    {
      "src": "function_body [11409,11467]",
      "dest": "function_body [10014,10128]"
    },
    {
      "src": "string [35017,35039]",
      "dest": "string [41978,42043]"
    },
    {
      "src": "type_cast_expression [37506,37518]",
      "dest": "type_cast_expression [45145,45161]"
    },
    {
      "src": "{: { [1418,1419]",
      "dest": "{: { [1553,1554]"
    },
    {
      "src": "identifier: _value [11744,11750]",
      "dest": "identifier: amount [7519,7525]"
    },
    {
      "src": "identifier: transfer [17693,17701]",
      "dest": "identifier: transfer [32049,32057]"
    },
    {
      "src": "type_name [3250,3257]",
      "dest": "type_name [15518,15525]"
    },
    {
      "src": "{: { [17230,17231]",
      "dest": "{: { [31424,31425]"
    },
    {
      "src": "parameter [41011,41015]",
      "dest": "parameter [42442,42455]"
    },
    {
      "src": "state_variable_declaration [13469,13508]",
      "dest": "state_variable_declaration [690,729]"
    },
    {
      "src": "identifier: msg [21405,21408]",
      "dest": "identifier: msg [33496,33499]"
    },
    {
      "src": "binary_expression [24102,24110]",
      "dest": "binary_expression [40349,40355]"
    },
    {
      "src": "}: } [18599,18600]",
      "dest": "}: } [24068,24069]"
    },
    {
      "src": "yul_function_call [30967,30981]",
      "dest": "yul_function_call [36194,36208]"
    },
    {
      "src": "(: ( [28759,28760]",
      "dest": "(: ( [36938,36939]"
    },
    {
      "src": "state_variable_declaration [13646,13671]",
      "dest": "state_variable_declaration [870,895]"
    },
    {
      "src": "primitive_type [479,486]",
      "dest": "primitive_type [7492,7499]"
    },
    {
      "src": "bool: bool [33331,33335]",
      "dest": "bool: bool [15229,15233]"
    },
    {
      "src": "}: } [11466,11467]",
      "dest": "}: } [10127,10128]"
    },
    {
      "src": "type_name [11173,11180]",
      "dest": "type_name [10863,10870]"
    },
    {
      "src": "return_type_definition [11209,11226]",
      "dest": "return_type_definition [10927,10944]"
    },
    {
      "src": "comment: // File: contracts/modularERC20/ModularStandardToken.sol [19224,19280]",
      "dest": "comment: // File: contracts/true-currencies-new/TrueCAD.sol [45622,45672]"
    },
    {
      "src": "state_variable_declaration [13717,13767]",
      "dest": "state_variable_declaration [944,994]"
    },
    {
      "src": "(: ( [37513,37514]",
      "dest": "(: ( [45152,45153]"
    },
    {
      "src": "comment: // A wrapper around the allowanceOf mapping. [12158,12202]",
      "dest": "comment: /**  * @dev Implementation of the {IERC20} interface.  *  * This implementation is agnostic to the way tokens are created. This means  * that a supply mechanism has to be added in a derived contract using {_mint}.  * For a generic mechanism see {ERC20PresetMinterPauser}.  *  * TIP: For a detailed writeup see our guide  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How  * to implement supply mechanisms].  *  * We have followed general OpenZeppelin guidelines: functions revert instead  * of returning `false` on failure. This behavior is nonetheless conventional  * and does not conflict with the expectations of ERC20 applications.  *  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.  * This allows applications to reconstruct the allowance for all accounts just  * by listening to said events. Other implementations of the EIP may not emit  * these events, as it isn't required by the specification.  *  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}  * functions have been added to mitigate the well-known issues around setting  * allowances. See {IERC20-approve}.  */ [21375,22560]"
    },
    {
      "src": "call_argument [41238,41274]",
      "dest": "call_argument [34837,34854]"
    },
    {
      "src": "address: address [23080,23087]",
      "dest": "address: address [27706,27713]"
    },
    {
      "src": "identifier: value [662,667]",
      "dest": "identifier: value [7793,7798]"
    },
    {
      "src": "primitive_type [22236,22243]",
      "dest": "primitive_type [41856,41863]"
    },
    {
      "src": "public: public [13781,13787]",
      "dest": "public: public [1820,1826]"
    },
    {
      "src": "mapping: mapping [13961,13968]",
      "dest": "mapping: mapping [1188,1195]"
    },
    {
      "src": "identifier: totalSupply_ [40593,40605]",
      "dest": "identifier: _totalSupply [28707,28719]"
    },
    {
      "src": "string [41902,41915]",
      "dest": "string [27883,27920]"
    },
    {
      "src": "address: address [39935,39942]",
      "dest": "address: address [19497,19504]"
    },
    {
      "src": "primitive_type [2684,2691]",
      "dest": "primitive_type [903,910]"
    },
    {
      "src": "state_mutability [18534,18538]",
      "dest": "state_mutability [23993,23997]"
    },
    {
      "src": "contract_body [13208,15569]",
      "dest": "contract_body [449,3401]"
    },
    {
      "src": "type_name [5500,5504]",
      "dest": "type_name [26279,26283]"
    },
    {
      "src": "): ) [29183,29184]",
      "dest": "): ) [37657,37658]"
    },
    {
      "src": "primitive_type [13391,13398]",
      "dest": "primitive_type [616,623]"
    },
    {
      "src": "identifier: onlyOwner [39788,39797]",
      "dest": "identifier: onlyOwner [41903,41912]"
    },
    {
      "src": "uint256: uint256 [6007,6014]",
      "dest": "uint256: uint256 [13677,13684]"
    },
    {
      "src": "identifier: c [11406,11407]",
      "dest": "identifier: weiValue [19736,19744]"
    },
    {
      "src": "type_name [3516,3523]",
      "dest": "type_name [28506,28513]"
    },
    {
      "src": "(: ( [13969,13970]",
      "dest": "(: ( [1195,1196]"
    },
    {
      "src": "identifier: b [11266,11267]",
      "dest": "identifier: b [11012,11013]"
    },
    {
      "src": "primitive_type [18439,18446]",
      "dest": "primitive_type [10469,10476]"
    },
    {
      "src": "primitive_type [24270,24277]",
      "dest": "primitive_type [41273,41280]"
    },
    {
      "src": "identifier: sender [21409,21415]",
      "dest": "identifier: sender [33500,33506]"
    },
    {
      "src": "external: external [17900,17908]",
      "dest": "external: external [41289,41297]"
    },
    {
      "src": "function_definition [869,950]",
      "dest": "function_definition [5509,5564]"
    },
    {
      "src": "expression_statement [17113,17139]",
      "dest": "expression_statement [5211,5237]"
    },
    {
      "src": "function: function [16964,16972]",
      "dest": "function: function [5062,5070]"
    },
    {
      "src": "): ) [25327,25328]",
      "dest": "): ) [41521,41522]"
    },
    {
      "src": "}: } [25987,25988]",
      "dest": "}: } [34994,34995]"
    },
    {
      "src": "type_name [4823,4830]",
      "dest": "type_name [29216,29223]"
    },
    {
      "src": "expression_statement [11432,11447]",
      "dest": "expression_statement [10053,10100]"
    },
    {
      "src": "expression_statement [41927,41991]",
      "dest": "expression_statement [27994,28086]"
    },
    {
      "src": "primitive_type [15893,15900]",
      "dest": "primitive_type [3973,3980]"
    },
    {
      "src": ",: , [34138,34139]",
      "dest": ",: , [43092,43093]"
    },
    {
      "src": "type_name [18794,18801]",
      "dest": "type_name [38404,38411]"
    },
    {
      "src": "identifier: location [31676,31684]",
      "dest": "identifier: location [37781,37789]"
    },
    {
      "src": "address: address [17594,17601]",
      "dest": "address: address [31941,31948]"
    },
    {
      "src": "return_type_definition [10554,10573]",
      "dest": "return_type_definition [11350,11367]"
    },
    {
      "src": "identifier: b [11036,11037]",
      "dest": "identifier: b [13037,13038]"
    },
    {
      "src": "(: ( [17344,17345]",
      "dest": "(: ( [31589,31590]"
    },
    {
      "src": "expression_statement [39362,39418]",
      "dest": "expression_statement [28645,28695]"
    },
    {
      "src": "event_paramater [654,667]",
      "dest": "event_paramater [7785,7798]"
    },
    {
      "src": "sstore: sstore [29200,29206]",
      "dest": "sstore: sstore [38156,38162]"
    },
    {
      "src": "identifier: value [1189,1194]",
      "dest": "identifier: value [8036,8041]"
    },
    {
      "src": "event: event [23970,23975]",
      "dest": "event: event [32698,32703]"
    },
    {
      "src": "(: ( [43439,43440]",
      "dest": "(: ( [46121,46122]"
    },
    {
      "src": "primitive_type [10790,10797]",
      "dest": "primitive_type [12900,12907]"
    },
    {
      "src": "): ) [39528,39529]",
      "dest": "): ) [40561,40562]"
    },
    {
      "src": "comment: /**  * @title Standard ERC20 token  *  * @dev Implementation of the basic standard token.  * @dev https://github.com/ethereum/EIPs/issues/20  * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol  */ [19284,19556]",
      "dest": "comment: /**  * @title TrueCAD  * @dev This is the top-level ERC20 contract, but most of the interesting functionality is  * inherited - see the documentation on the corresponding contracts.  */ [45703,45892]"
    },
    {
      "src": "(: ( [25859,25860]",
      "dest": "(: ( [34199,34200]"
    },
    {
      "src": "yul_hex_number: 0xfffff [32032,32039]",
      "dest": "yul_hex_number: 0xfffff [38471,38478]"
    },
    {
      "src": "constructor: constructor [16110,16121]",
      "dest": "constructor: constructor [4177,4188]"
    },
    {
      "src": "call_argument [41629,41642]",
      "dest": "call_argument [27799,27838]"
    },
    {
      "src": "expression_statement [25897,25912]",
      "dest": "expression_statement [34262,34277]"
    },
    {
      "src": "}: } [16407,16408]",
      "dest": "}: } [4476,4477]"
    },
    {
      "src": "identifier: result [19005,19011]",
      "dest": "identifier: length [38634,38640]"
    },
    {
      "src": "indexed: indexed [23989,23996]",
      "dest": "indexed: indexed [32717,32724]"
    },
    {
      "src": "address: address [612,619]",
      "dest": "address: address [7743,7750]"
    },
    {
      "src": "function_body [20467,20553]",
      "dest": "function_body [24907,24987]"
    },
    {
      "src": ",: , [29378,29379]",
      "dest": ",: , [38040,38041]"
    },
    {
      "src": "identifier: totalSupply_ [40608,40620]",
      "dest": "identifier: _totalSupply [28722,28734]"
    },
    {
      "src": "string_literal [25196,25218]",
      "dest": "string_literal [41352,41390]"
    },
    {
      "src": "return_type_definition [18657,18674]",
      "dest": "return_type_definition [23831,23848]"
    },
    {
      "src": "visibility [21549,21557]",
      "dest": "visibility [19446,19454]"
    },
    {
      "src": "=: = [40606,40607]",
      "dest": "=: = [28720,28721]"
    },
    {
      "src": "(: ( [41186,41187]",
      "dest": "(: ( [16820,16821]"
    },
    {
      "src": "parameter [23425,23439]",
      "dest": "parameter [44354,44368]"
    },
    {
      "src": "string_literal [41902,41915]",
      "dest": "string_literal [27883,27920]"
    },
    {
      "src": "function: function [869,877]",
      "dest": "function: function [5509,5517]"
    },
    {
      "src": "mapping: mapping [11647,11654]",
      "dest": "mapping: mapping [1059,1066]"
    },
    {
      "src": "(: ( [6006,6007]",
      "dest": "(: ( [13676,13677]"
    },
    {
      "src": "primitive_type [10779,10786]",
      "dest": "primitive_type [12889,12896]"
    },
    {
      "src": "call_argument [17707,17714]",
      "dest": "call_argument [32063,32070]"
    },
    {
      "src": "uint256: uint256 [13773,13780]",
      "dest": "uint256: uint256 [1000,1007]"
    },
    {
      "src": "identifier: offset [31571,31577]",
      "dest": "identifier: offset [36324,36330]"
    },
    {
      "src": ",: , [31725,31726]",
      "dest": ",: , [36839,36840]"
    },
    {
      "src": "): ) [9171,9172]",
      "dest": "): ) [27796,27797]"
    },
    {
      "src": "function: function [17323,17331]",
      "dest": "function: function [31568,31576]"
    },
    {
      "src": "state_variable_declaration [13941,14002]",
      "dest": "state_variable_declaration [1169,1239]"
    },
    {
      "src": "identifier: REDEMPTION_ADDRESS_COUNT [32944,32968]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [40379,40403]"
    },
    {
      "src": "^:  ^ [15,17]",
      "dest": "^:  ^ [5325,5327]"
    },
    {
      "src": "identifier: owner [16209,16214]",
      "dest": "identifier: owner [4276,4281]"
    },
    {
      "src": "comment: // Fork of OpenZeppelin's BasicToken [18037,18073]",
      "dest": "comment: // File: contracts/true-currencies-new/TrueCurrency.sol [38785,38840]"
    },
    {
      "src": "address: address [25116,25123]",
      "dest": "address: address [544,551]"
    },
    {
      "src": "return_type_definition [22962,22979]",
      "dest": "return_type_definition [24600,24617]"
    },
    {
      "src": "(: ( [29353,29354]",
      "dest": "(: ( [38013,38014]"
    },
    {
      "src": "identifier: balance [17707,17714]",
      "dest": "identifier: balance [32063,32070]"
    },
    {
      "src": "): ) [43440,43441]",
      "dest": "): ) [46122,46123]"
    },
    {
      "src": ",: , [25872,25873]",
      "dest": ",: , [34212,34213]"
    },
    {
      "src": "parameter [3516,3528]",
      "dest": "parameter [28506,28521]"
    },
    {
      "src": "boolean_literal [21434,21438]",
      "dest": "boolean_literal [24975,24979]"
    },
    {
      "src": ",: , [35015,35016]",
      "dest": ",: , [41976,41977]"
    },
    {
      "src": "visibility [13725,13732]",
      "dest": "visibility [952,959]"
    },
    {
      "src": "primitive_type [12020,12027]",
      "dest": "primitive_type [26235,26242]"
    },
    {
      "src": "parameter [3550,3564]",
      "dest": "parameter [27725,27739]"
    },
    {
      "src": "function: function [526,534]",
      "dest": "function: function [7454,7462]"
    },
    {
      "src": "primitive_type [43261,43266]",
      "dest": "primitive_type [45934,45939]"
    },
    {
      "src": "number_literal: 0 [9170,9171]",
      "dest": "number_literal: 0 [27795,27796]"
    },
    {
      "src": "type_name [903,910]",
      "dest": "type_name [24835,24842]"
    },
    {
      "src": "parameter [990,1000]",
      "dest": "parameter [31102,31112]"
    },
    {
      "src": "identifier: require [34174,34181]",
      "dest": "identifier: require [43976,43983]"
    },
    {
      "src": "primitive_type [4857,4864]",
      "dest": "primitive_type [30109,30116]"
    },
    {
      "src": "\": \" [35017,35018]",
      "dest": "\": \" [41978,41979]"
    },
    {
      "src": "contract: contract [13186,13194]",
      "dest": "contract: contract [427,435]"
    },
    {
      "src": "yul_function_call [28756,28770]",
      "dest": "yul_function_call [36935,36954]"
    },
    {
      "src": "address: address [24630,24637]",
      "dest": "address: address [29387,29394]"
    },
    {
      "src": "(: ( [24637,24638]",
      "dest": "(: ( [29394,29395]"
    },
    {
      "src": "uint256: uint256 [13914,13921]",
      "dest": "uint256: uint256 [1141,1148]"
    },
    {
      "src": "function: function [22899,22907]",
      "dest": "function: function [24520,24528]"
    },
    {
      "src": "primitive_type [13903,13910]",
      "dest": "primitive_type [1130,1137]"
    },
    {
      "src": "primitive_type [10563,10570]",
      "dest": "primitive_type [16769,16776]"
    },
    {
      "src": "): ) [40977,40978]",
      "dest": "): ) [34704,34705]"
    },
    {
      "src": "true: true [33407,33411]",
      "dest": "true: true [27169,27173]"
    },
    {
      "src": "visibility [33782,33788]",
      "dest": "visibility [25534,25540]"
    },
    {
      "src": "call_argument [4992,4998]",
      "dest": "call_argument [29463,29469]"
    },
    {
      "src": "(: ( [41935,41936]",
      "dest": "(: ( [28035,28036]"
    },
    {
      "src": "parameter [5500,5504]",
      "dest": "parameter [26279,26283]"
    },
    {
      "src": "primitive_type [12292,12299]",
      "dest": "primitive_type [1336,1343]"
    },
    {
      "src": "inheritance_specifier [15834,15846]",
      "dest": "inheritance_specifier [3745,3757]"
    },
    {
      "src": ",: , [25131,25132]",
      "dest": ",: , [41271,41272]"
    },
    {
      "src": "parameter [1340,1354]",
      "dest": "parameter [5986,6000]"
    },
    {
      "src": "identifier: DECIMALS [43276,43284]",
      "dest": "identifier: DECIMALS [45949,45957]"
    },
    {
      "src": "expression_statement [39913,39954]",
      "dest": "expression_statement [19489,19571]"
    },
    {
      "src": "address: address [3516,3523]",
      "dest": "address: address [28506,28513]"
    },
    {
      "src": "return_statement [43568,43585]",
      "dest": "return_statement [46266,46283]"
    },
    {
      "src": "identifier: burnMin [25897,25904]",
      "dest": "identifier: burnMin [34262,34269]"
    }
  ],
  "actions": [
    {
      "action": "move-tree",
      "tree": "contract_declaration [13186,15569]",
      "parent": "source_file [0,46396]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [15813,17149]",
      "parent": "source_file [0,46396]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "pragma_directive [0,24]",
      "parent": "source_file [0,46396]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "interface_declaration [1247,1368]",
      "parent": "source_file [0,46396]",
      "at": 14
    },
    {
      "action": "move-tree",
      "tree": "comment: /**  * @title SafeMath  * @dev Math operations with safety checks that throw on error  */ [10320,10412]",
      "parent": "source_file [0,46396]",
      "at": 22
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [17194,17976]",
      "parent": "source_file [0,46396]",
      "at": 31
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [24968,25988]",
      "parent": "source_file [0,46396]",
      "at": 34
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [26277,32611]",
      "parent": "source_file [0,46396]",
      "at": 37
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/TrueCoinReceiver.sol [28,67]",
      "label": "// SPDX-License-Identifier: MIT"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol [174,241]",
      "label": "// File: contracts/true-currencies-new/ProxyStorage.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [94,117]",
      "parent": "source_file [0,46396]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title ERC20Basic  * @dev Simpler version of ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/179  */ [245,376]",
      "label": "/**  * Defines the storage layout of the token implementation contract. Any  * newly declared state variables in future upgrades should be appended  * to the bottom. Never remove state variables from this list, however variables  * can be renamed. Please add _Deprecated to deprecated variables.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol [676,738]",
      "label": "// File: contracts/true-currencies-new/ClaimableOwnable.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [3468,3491]",
      "parent": "source_file [0,46396]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/20  */ [742,833]",
      "label": "/**  * @title ClamableOwnable  * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.  * and provides basic authorization control functions. Inherits storage layout of  * ProxyStorage.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: registry/contracts/Registry.sol [1203,1243]",
      "label": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/ownership/Ownable.sol [8170,8232]",
      "label": "/**  * @dev Interface of the ERC20 standard as defined in the EIP.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Ownable  * @dev The Ownable contract has an owner address, and provides basic authorization control  * functions, this simplifies the implementation of \"user permissions\".  */ [8236,8429]",
      "label": "// File: @openzeppelin/contracts/GSN/Context.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [8102,8125]",
      "parent": "source_file [0,46396]",
      "at": 14
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/ownership/Claimable.sol [9260,9324]",
      "label": "/*  * @dev Provides information about the current execution context, including the  * sender of the transaction and its data. While these are generally available  * via msg.sender and msg.data, they should not be accessed in such a direct  * manner, since when dealing with GSN meta-transactions the account sending and  * paying for execution may not be the actual sender (as far as an application  * is concerned).  *  * This contract is only required for intermediate, library-like contracts.  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [8639,9022]",
      "parent": "source_file [0,46396]",
      "at": 16
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Claimable  * @dev Extension for the Ownable contract, where the ownership needs to be claimed.  * This allows the new owner to accept the transfer.  */ [9328,9497]",
      "label": "// File: @openzeppelin/contracts/math/SafeMath.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [9080,9103]",
      "parent": "source_file [0,46396]",
      "at": 18
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/math/SafeMath.sol [10258,10316]",
      "label": "/**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title SafeMath  * @dev Math operations with safety checks that throw on error  */ [10320,10412]",
      "label": "// File: @openzeppelin/contracts/utils/Address.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [14461,14484]",
      "parent": "source_file [0,46396]",
      "at": 22
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/modularERC20/BalanceSheet.sol [11474,11522]",
      "label": "/**  * @dev Collection of functions related to the address type  */"
    },
    {
      "action": "insert-node",
      "tree": "library_declaration [14559,20643]",
      "parent": "source_file [0,46396]",
      "at": 24
    },
    {
      "action": "update-node",
      "tree": "comment: // A wrapper around the balanceOf mapping. [11526,11568]",
      "label": "// File: contracts/true-currencies-new/ERC20.sol"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/modularERC20/AllowanceSheet.sol [12104,12154]",
      "label": "/**  * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.  * Removing state variables has been necessary due to proxy pattern usage.  * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:  * - Remove state variables _name, _symbol, _decimals  * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage  * - Remove constructor  * - Solidity version changed from ^0.6.0 to 0.6.10  * - Contract made abstract  *  * See also: ClaimableOwnable.sol and ProxyStorage.sol  */"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [21348,21371]",
      "parent": "source_file [0,46396]",
      "at": 27
    },
    {
      "action": "update-node",
      "tree": "comment: // A wrapper around the allowanceOf mapping. [12158,12202]",
      "label": "/**  * @dev Implementation of the {IERC20} interface.  *  * This implementation is agnostic to the way tokens are created. This means  * that a supply mechanism has to be added in a derived contract using {_mint}.  * For a generic mechanism see {ERC20PresetMinterPauser}.  *  * TIP: For a detailed writeup see our guide  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How  * to implement supply mechanisms].  *  * We have followed general OpenZeppelin guidelines: functions revert instead  * of returning `false` on failure. This behavior is nonetheless conventional  * and does not conflict with the expectations of ERC20 applications.  *  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.  * This allows applications to reconstruct the allowance for all accounts just  * by listening to said events. Other implementations of the EIP may not emit  * these events, as it isn't required by the specification.  *  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}  * functions have been added to mitigate the well-known issues around setting  * allowances. See {IERC20-approve}.  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [22562,31153]",
      "parent": "source_file [0,46396]",
      "at": 29
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/ProxyStorage.sol [12939,12974]",
      "label": "// File: contracts/true-currencies-new/ReclaimerToken.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [31218,31241]",
      "parent": "source_file [0,46396]",
      "at": 31
    },
    {
      "action": "update-node",
      "tree": "comment: /* Defines the storage layout of the token implementaiton contract. Any newly declared state variables in future upgrades should be appened to the bottom. Never remove state variables from this list  */ [12978,13184]",
      "label": "/**  * @title ReclaimerToken  * @dev ERC20 token which allows owner to reclaim ERC20 tokens  * or ether sent to this contract  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/HasOwner.sol [15573,15604]",
      "label": "// File: contracts/true-currencies-new/BurnableTokenWithBounds.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [32156,32179]",
      "parent": "source_file [0,46396]",
      "at": 35
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title HasOwner  * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin.   and provides basic authorization control functions. Inherits storage layout of   ProxyStorage.  */ [15608,15811]",
      "label": "/**  * @title BurnableTokenWithBounds  * @dev Burning functions as redeeming money from the system.  * The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/ReclaimerToken.sol [17153,17190]",
      "label": "// File: contracts/true-currencies-new/GasRefund.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [35055,35078]",
      "parent": "source_file [0,46396]",
      "at": 39
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/modularERC20/ModularBasicToken.sol [17980,18033]",
      "label": "/**  * @title Gas Reclaim Legacy  *  * Note: this contract does not affect any of the token logic. It merely  * exists so the TokenController (owner) can reclaim the sponsored gas  *  * Previously TrueCurrency has a feature called \"gas boost\" which allowed  * us to sponsor gas by setting non-empty storage slots to 1.  * We are depricating this feature, but there is a bunch of gas saved  * from years of sponsoring gas. This contract is meant to allow the owner  * to take advantage of this leftover gas. Once all the slots are used,  * this contract can be removed from TrueCurrency.  *  * Utilitzes the gas refund mechanism in EVM. Each time an non-empty  * storage slot is set to 0, evm will refund 15,000 to the sender.  * Also utilized the refund for selfdestruct, see gasRefund39  *  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // Fork of OpenZeppelin's BasicToken [18037,18073]",
      "label": "// File: contracts/true-currencies-new/TrueCurrency.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [38844,38867]",
      "parent": "source_file [0,46396]",
      "at": 43
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Basic token  * @dev Basic version of StandardToken, with no allowances.  */ [18075,18167]",
      "label": "/**  * @title TrueCurrency  * @dev TrueCurrency is an ERC20 with blacklist & redemption addresses  *  * TrueCurrency is a compliant stablecoin with blacklist and redemption  * addresses. Only the owner can blacklist accounts. Redemption addresses  * are assigned automatically to the first 0x100000 addresses. Sending  * tokens to the redemption address will trigger a burn operation. Only  * the owner can mint or blacklist accounts.  *  * This contract is owned by the TokenController, which manages token  * minting & admin functionality. See TokenController.sol  *  * See also: BurnableTokenWithBounds.sol  *  * ~~~~ Features ~~~~  *  * Redemption Addresses  * - The first 0x100000 addresses are redemption addresses  * - Tokens sent to redemption addresses are burned  * - Redemptions are tracked off-chain  * - Cannot mint tokens to redemption addresses  *  * Blacklist  * - Owner can blacklist accounts in accordance with local regulatory bodies  * - Only a court order will merit a blacklist; blacklisting is extremely rare  *  * Burn Bounds & CanBurn  * - Owner can set min & max burn amounts  * - Only accounts flagged in canBurn are allowed to burn tokens  * - canBurn prevents tokens from being sent to the incorrect address  *  * Reclaimer Token  * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [40249,45618]",
      "parent": "source_file [0,46396]",
      "at": 45
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/modularERC20/ModularStandardToken.sol [19224,19280]",
      "label": "// File: contracts/true-currencies-new/TrueCAD.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [45676,45699]",
      "parent": "source_file [0,46396]",
      "at": 47
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Standard ERC20 token  *  * @dev Implementation of the basic standard token.  * @dev https://github.com/ethereum/EIPs/issues/20  * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol  */ [19284,19556]",
      "label": "/**  * @title TrueCAD  * @dev This is the top-level ERC20 contract, but most of the interesting functionality is  * inherited - see the documentation on the corresponding contracts.  */"
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [13828,13868]",
      "parent": "contract_body [449,3401]",
      "at": 20
    },
    {
      "action": "update-node",
      "tree": "identifier: HasOwner [15822,15830]",
      "label": "ClaimableOwnable"
    },
    {
      "action": "move-tree",
      "tree": "event_definition [15856,15965]",
      "parent": "contract_body [3758,5247]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "constructor_definition [16110,16223]",
      "parent": "contract_body [3758,5247]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "modifier_definition [16314,16408]",
      "parent": "contract_body [3758,5247]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "function_definition [16765,16869]",
      "parent": "contract_body [3758,5247]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "identifier: RegistryClone [1257,1270]",
      "label": "IERC20"
    },
    {
      "action": "move-tree",
      "tree": "contract_body [398,672]",
      "parent": "interface_declaration [5411,8046]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "function_definition [403,456]",
      "parent": "contract_body [5428,8046]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [8639,8647]",
      "parent": "contract_declaration [8639,9022]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [8648,8656]",
      "parent": "contract_declaration [8639,9022]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: Context [8657,8664]",
      "parent": "contract_declaration [8639,9022]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "contract_body [8665,9022]",
      "parent": "contract_declaration [8639,9022]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "function_definition [11340,11467]",
      "parent": "contract_body [9701,14403]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "function_definition [10505,10679]",
      "parent": "contract_body [9701,14403]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "function_definition [10766,11043]",
      "parent": "contract_body [9701,14403]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "library: library [14559,14566]",
      "parent": "library_declaration [14559,20643]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: Address [14567,14574]",
      "parent": "library_declaration [14559,20643]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "contract_body [14575,20643]",
      "parent": "library_declaration [14559,20643]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [22562,22570]",
      "parent": "contract_declaration [22562,31153]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [22571,22579]",
      "parent": "contract_declaration [22562,31153]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: ERC20 [22580,22585]",
      "parent": "contract_declaration [22562,31153]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "is: is [22586,22588]",
      "parent": "contract_declaration [22562,31153]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22589,22605]",
      "parent": "contract_declaration [22562,31153]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [22605,22606]",
      "parent": "contract_declaration [22562,31153]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22607,22614]",
      "parent": "contract_declaration [22562,31153]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [22614,22615]",
      "parent": "contract_declaration [22562,31153]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22616,22622]",
      "parent": "contract_declaration [22562,31153]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "contract_body [22623,31153]",
      "parent": "contract_declaration [22562,31153]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [31382,31390]",
      "parent": "contract_declaration [31382,32082]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [32439,32447]",
      "parent": "contract_declaration [32439,34995]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "inheritance_specifier [32713,32727]",
      "parent": "contract_declaration [32439,34995]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "event_definition [25034,25086]",
      "parent": "contract_body [32499,34995]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "comment: //by setting the minimum extremely high, and we don't want to lock [25653,25719]",
      "parent": "contract_body [32499,34995]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [35895,35903]",
      "parent": "contract_declaration [35895,38781]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: GasRefundToken [26286,26300]",
      "label": "GasRefund"
    },
    {
      "action": "move-tree",
      "tree": "comment: /**       @dev refund 15,000 gas     @dev costs slightly more than 10,200 gas     */ [31363,31450]",
      "parent": "contract_body [35923,38781]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [40249,40257]",
      "parent": "contract_declaration [40249,45618]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [40258,40266]",
      "parent": "contract_declaration [40249,45618]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: TrueCurrency [40267,40279]",
      "parent": "contract_declaration [40249,45618]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "is: is [40280,40282]",
      "parent": "contract_declaration [40249,45618]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "inheritance_specifier [32744,32767]",
      "parent": "contract_declaration [40249,45618]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [40306,40307]",
      "parent": "contract_declaration [40249,45618]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [40308,40317]",
      "parent": "contract_declaration [40249,45618]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "contract_body [40318,45618]",
      "parent": "contract_declaration [40249,45618]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [544,572]",
      "parent": "contract_body [449,3401]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [578,608]",
      "parent": "contract_body [449,3401]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [805,833]",
      "parent": "contract_body [449,3401]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [903,938]",
      "parent": "contract_body [449,3401]",
      "at": 14
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [11647,11693]",
      "parent": "contract_body [449,3401]",
      "at": 21
    },
    {
      "action": "update-node",
      "tree": "comment: /* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.      *******************************************************************************************************      ** length     input                                                         usage      *******************************************************************************************************      ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner      ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation      ** 32         uint256(11)                                                   gasRefundPool_Deprecated      ** 64         uint256(address),uint256(14)                                  balanceOf      ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance      ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes     **/ [14012,15566]",
      "label": "// reward token storage"
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1276,1322]",
      "parent": "contract_body [449,3401]",
      "at": 21
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [12283,12352]",
      "parent": "contract_body [449,3401]",
      "at": 26
    },
    {
      "action": "insert-node",
      "tree": "comment: // true reward allocation [1466,1491]",
      "parent": "contract_body [449,3401]",
      "at": 24
    },
    {
      "action": "insert-node",
      "tree": "comment: // proportion: 1000 = 100% [1497,1523]",
      "parent": "contract_body [449,3401]",
      "at": 25
    },
    {
      "action": "move-tree",
      "tree": "struct_declaration [1397,1530]",
      "parent": "contract_body [449,3401]",
      "at": 30
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1620,1690]",
      "parent": "contract_body [449,3401]",
      "at": 27
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1696,1742]",
      "parent": "contract_body [449,3401]",
      "at": 28
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1750,1789]",
      "parent": "contract_body [449,3401]",
      "at": 29
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1795,1835]",
      "parent": "contract_body [449,3401]",
      "at": 30
    },
    {
      "action": "insert-node",
      "tree": "comment: /* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.      *******************************************************************************************************      ** length     input                                                         usage      *******************************************************************************************************      ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner      ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation      ** 32         uint256(11)                                                   gasRefundPool_Deprecated      ** 64         uint256(address),uint256(14)                                  balanceOf      ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance      ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes      **/ [1843,3398]",
      "parent": "contract_body [449,3401]",
      "at": 31
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev sets the original `owner` of the contract to the sender     * at construction. Must then be reinitialized      */ [15973,16104]",
      "label": "/**      * @dev emitted when ownership is transferred      * @param previousOwner previous owner of this contract      * @param newOwner new owner of this contract      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [16231,16308]",
      "label": "/**      * @dev sets the original `owner` of the contract to the sender      * at construction. Must then be reinitialized      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [16416,16509]",
      "label": "/**      * @dev Throws if called by any account other than the owner.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [16617,16759]",
      "label": "/**      * @dev Modifier throws if called by any account other than the pendingOwner.      */"
    },
    {
      "action": "move-tree",
      "tree": "modifier_definition [9663,9747]",
      "parent": "contract_body [3758,5247]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [16877,16958]",
      "label": "/**      * @dev Allows the current owner to set the pendingOwner address.      * @param newOwner The address to transfer ownership to.      */"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Allows the pendingOwner address to finalize the transfer.      */ [4973,5056]",
      "parent": "contract_body [3758,5247]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.4.23 [17,23]",
      "label": "0.6.0"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the amount of tokens in existence.      */ [5435,5503]",
      "parent": "contract_body [5428,8046]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "function_definition [869,950]",
      "parent": "contract_body [5428,8046]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the amount of tokens owned by `account`.      */ [5572,5646]",
      "parent": "contract_body [5428,8046]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Moves `amount` tokens from the caller's account to `recipient`.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * Emits a {Transfer} event.      */ [5728,5943]",
      "parent": "contract_body [5428,8046]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "function_definition [1043,1114]",
      "parent": "contract_body [5428,8046]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the remaining number of tokens that `spender` will be      * allowed to spend on behalf of `owner` through {transferFrom}. This is      * zero by default.      *      * This value changes when {approve} or {transferFrom} are called.      */ [6034,6304]",
      "parent": "contract_body [5428,8046]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * IMPORTANT: Beware that changing an allowance with this method brings the risk      * that someone may use both the old and the new allowance by unfortunate      * transaction ordering. One possible solution to mitigate this race      * condition is to first reduce the spender's allowance to 0 and set the      * desired value afterwards:      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729      *      * Emits an {Approval} event.      */ [6401,7056]",
      "parent": "contract_body [5428,8046]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [7062,7136]",
      "parent": "contract_body [5428,8046]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Moves `amount` tokens from `sender` to `recipient` using the      * allowance mechanism. `amount` is then deducted from the caller's      * allowance.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * Emits a {Transfer} event.      */ [7144,7448]",
      "parent": "contract_body [5428,8046]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when `value` tokens are moved from one account (`from`) to      * another (`to`).      *      * Note that `value` may be zero.      */ [7559,7722]",
      "parent": "contract_body [5428,8046]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when the allowance of a `spender` for an `owner` is set by      * a call to {approve}. `value` is the new allowance.      */ [7808,7959]",
      "parent": "contract_body [5428,8046]",
      "at": 15
    },
    {
      "action": "move-tree",
      "tree": "event_definition [1118,1196]",
      "parent": "contract_body [5428,8046]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "{: { [8665,8666]",
      "parent": "contract_body [8665,9022]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "function_definition [8694,8751]",
      "parent": "contract_body [8665,9022]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "function_definition [8786,9019]",
      "parent": "contract_body [8665,9022]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [9021,9022]",
      "parent": "contract_body [8665,9022]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "comment: /**   * @dev Multiplies two numbers, throws on overflow.   */ [10438,10501]",
      "label": "/**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**   * @dev Integer division of two numbers, truncating the quotient.   */ [10685,10762]",
      "label": "/**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */"
    },
    {
      "action": "insert-node",
      "tree": "function_definition [10411,10547]",
      "parent": "contract_body [9701,14403]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "comment: /**   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).   */ [11049,11156]",
      "label": "/**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**   * @dev Adds two numbers, throws on overflow.   */ [11279,11336]",
      "label": "/**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [11780,12242]",
      "parent": "contract_body [9701,14403]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [12248,12380]",
      "parent": "contract_body [9701,14403]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [12388,12870]",
      "parent": "contract_body [9701,14403]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [13162,13613]",
      "parent": "contract_body [9701,14403]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function_definition [13619,13749]",
      "parent": "contract_body [9701,14403]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [13757,14228]",
      "parent": "contract_body [9701,14403]",
      "at": 15
    },
    {
      "action": "insert-node",
      "tree": "function_definition [14234,14400]",
      "parent": "contract_body [9701,14403]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "{: { [14575,14576]",
      "parent": "contract_body [14575,20643]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns true if `account` is a contract.      *      * [IMPORTANT]      * ====      * It is unsafe to assume that an address for which this function returns      * false is an externally-owned account (EOA) and not a contract.      *      * Among others, `isContract` will return false for the following      * types of addresses:      *      *  - an externally-owned account      *  - a contract in construction      *  - an address where a contract will be created      *  - an address where a contract lived, but was destroyed      * ====      */ [14582,15163]",
      "parent": "contract_body [14575,20643]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "function_definition [15169,15788]",
      "parent": "contract_body [14575,20643]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to      * `recipient`, forwarding all available gas and reverting on errors.      *      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost      * of certain opcodes, possibly making contracts go over the 2300 gas limit      * imposed by `transfer`, making them unable to receive funds via      * `transfer`. {sendValue} removes this limitation.      *      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].      *      * IMPORTANT: because control is transferred to `recipient`, care must be      * taken to not create reentrancy vulnerabilities. Consider using      * {ReentrancyGuard} or the      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].      */ [15796,16717]",
      "parent": "contract_body [14575,20643]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function_definition [16723,17120]",
      "parent": "contract_body [14575,20643]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Performs a Solidity function call using a low level `call`. A      * plain`call` is an unsafe replacement for a function call: use this      * function instead.      *      * If `target` reverts with a revert reason, it is bubbled up by this      * function (like regular Solidity function calls).      *      * Returns the raw returned data. To convert to the expected return value,      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].      *      * Requirements:      *      * - `target` must be a contract.      * - calling `target` with `data` must not revert.      *      * _Available since v3.1._      */ [17128,17875]",
      "parent": "contract_body [14575,20643]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "function_definition [17881,18054]",
      "parent": "contract_body [14575,20643]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with      * `errorMessage` as a fallback revert reason when `target` reverts.      *      * _Available since v3.1._      */ [18062,18278]",
      "parent": "contract_body [14575,20643]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_definition [18284,18480]",
      "parent": "contract_body [14575,20643]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],      * but also transferring `value` wei to `target`.      *      * Requirements:      *      * - the calling contract must have an ETH balance of at least `value`.      * - the called Solidity function must be `payable`.      *      * _Available since v3.1._      */ [18488,18849]",
      "parent": "contract_body [14575,20643]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [18855,19081]",
      "parent": "contract_body [14575,20643]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but      * with `errorMessage` as a fallback revert reason when `target` reverts.      *      * _Available since v3.1._      */ [19089,19331]",
      "parent": "contract_body [14575,20643]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function_definition [19337,19653]",
      "parent": "contract_body [14575,20643]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_definition [19661,20640]",
      "parent": "contract_body [14575,20643]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "}: } [20642,20643]",
      "parent": "contract_body [14575,20643]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "{: { [22623,22624]",
      "parent": "contract_body [22623,31153]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "using_directive [19616,19643]",
      "parent": "contract_body [22623,31153]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "using_directive [22663,22689]",
      "parent": "contract_body [22623,31153]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the name of the token.      */ [22697,22753]",
      "parent": "contract_body [22623,31153]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function_definition [22759,22819]",
      "parent": "contract_body [22623,31153]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the symbol of the token, usually a shorter version of the      * name.      */ [22827,22932]",
      "parent": "contract_body [22623,31153]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "function_definition [22938,23000]",
      "parent": "contract_body [22623,31153]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the number of decimals used to get its user representation.      * For example, if `decimals` equals `2`, a balance of `505` tokens should      * be displayed to a user as `5,05` (`505 / 10 ** 2`).      *      * Tokens usually opt for a value of 18, imitating the relationship between      * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is      * called.      *      * NOTE: This information is only used for _display_ purposes: it in      * no way affects any of the arithmetic of the contract, including      * {IERC20-balanceOf} and {IERC20-transfer}.      */ [23008,23632]",
      "parent": "contract_body [22623,31153]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_definition [23638,23722]",
      "parent": "contract_body [22623,31153]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-totalSupply}.      */ [23730,23781]",
      "parent": "contract_body [22623,31153]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "function_definition [18608,18717]",
      "parent": "contract_body [22623,31153]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-balanceOf}.      */ [23895,23944]",
      "parent": "contract_body [22623,31153]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "function_definition [18494,18600]",
      "parent": "contract_body [22623,31153]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-transfer}.      *      * Requirements:      *      * - `recipient` cannot be the zero address.      * - the caller must have a balance of at least `amount`.      */ [24077,24276]",
      "parent": "contract_body [22623,31153]",
      "at": 13
    },
    {
      "action": "move-tree",
      "tree": "function_definition [12774,12932]",
      "parent": "contract_body [22623,31153]",
      "at": 14
    },
    {
      "action": "move-tree",
      "tree": ",: , [12816,12817]",
      "parent": "function_definition [24282,24457]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-allowance}.      */ [24465,24514]",
      "parent": "contract_body [22623,31153]",
      "at": 15
    },
    {
      "action": "move-tree",
      "tree": "function_definition [22899,23035]",
      "parent": "contract_body [22623,31153]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-approve}.      *      * Requirements:      *      * - `spender` cannot be the zero address.      */ [24679,24812]",
      "parent": "contract_body [22623,31153]",
      "at": 17
    },
    {
      "action": "move-tree",
      "tree": "function_definition [20394,20553]",
      "parent": "contract_body [22623,31153]",
      "at": 18
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-transferFrom}.      *      * Emits an {Approval} event indicating the updated allowance. This is not      * required by the EIP. See the note at the beginning of {ERC20};      *      * Requirements:      * - `sender` and `recipient` cannot be the zero address.      * - `sender` must have a balance of at least `amount`.      * - the caller must have allowance for ``sender``'s tokens of at least      * `amount`.      */ [24995,25455]",
      "parent": "contract_body [22623,31153]",
      "at": 19
    },
    {
      "action": "insert-node",
      "tree": "function_definition [25461,25782]",
      "parent": "contract_body [22623,31153]",
      "at": 20
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Atomically increases the allowance granted to `spender` by the caller.      *      * This is an alternative to {approve} that can be used as a mitigation for      * problems described in {IERC20-approve}.      *      * Emits an {Approval} event indicating the updated allowance.      *      * Requirements:      *      * - `spender` cannot be the zero address.      */ [25790,26185]",
      "parent": "contract_body [22623,31153]",
      "at": 21
    },
    {
      "action": "insert-node",
      "tree": "function_definition [26191,26409]",
      "parent": "contract_body [22623,31153]",
      "at": 22
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Atomically decreases the allowance granted to `spender` by the caller.      *      * This is an alternative to {approve} that can be used as a mitigation for      * problems described in {IERC20-approve}.      *      * Emits an {Approval} event indicating the updated allowance.      *      * Requirements:      *      * - `spender` cannot be the zero address.      * - `spender` must have allowance for the caller of at least      * `subtractedValue`.      */ [26417,26906]",
      "parent": "contract_body [22623,31153]",
      "at": 23
    },
    {
      "action": "insert-node",
      "tree": "function_definition [26912,27181]",
      "parent": "contract_body [22623,31153]",
      "at": 24
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Moves tokens `amount` from `sender` to `recipient`.      *      * This is internal function is equivalent to {transfer}, and can be used to      * e.g. implement automatic token fees, slashing mechanisms, etc.      *      * Emits a {Transfer} event.      *      * Requirements:      *      * - `sender` cannot be the zero address.      * - `recipient` cannot be the zero address.      * - `sender` must have a balance of at least `amount`.      */ [27189,27665]",
      "parent": "contract_body [22623,31153]",
      "at": 25
    },
    {
      "action": "insert-node",
      "tree": "function_definition [27671,28210]",
      "parent": "contract_body [22623,31153]",
      "at": 26
    },
    {
      "action": "insert-node",
      "tree": "comment: /** @dev Creates `amount` tokens and assigns them to `account`, increasing      * the total supply.      *      * Emits a {Transfer} event with `from` set to the zero address.      *      * Requirements      *      * - `to` cannot be the zero address.      */ [28218,28485]",
      "parent": "contract_body [22623,31153]",
      "at": 27
    },
    {
      "action": "move-tree",
      "tree": "function_definition [40354,40756]",
      "parent": "contract_body [22623,31153]",
      "at": 28
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Destroys `amount` tokens from `account`, reducing the      * total supply.      *      * Emits a {Transfer} event with `to` set to the zero address.      *      * Requirements      *      * - `account` cannot be the zero address.      * - `account` must have at least `amount` tokens.      */ [28877,29195]",
      "parent": "contract_body [22623,31153]",
      "at": 29
    },
    {
      "action": "insert-node",
      "tree": "function_definition [29201,29619]",
      "parent": "contract_body [22623,31153]",
      "at": 30
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.      *      * This is internal function is equivalent to `approve`, and can be used to      * e.g. set automatic allowances for certain subsystems, etc.      *      * Emits an {Approval} event.      *      * Requirements:      *      * - `owner` cannot be the zero address.      * - `spender` cannot be the zero address.      */ [29627,30053]",
      "parent": "contract_body [22623,31153]",
      "at": 31
    },
    {
      "action": "insert-node",
      "tree": "function_definition [30059,30405]",
      "parent": "contract_body [22623,31153]",
      "at": 32
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Hook that is called before any transfer of tokens. This includes      * minting and burning.      *      * Calling conditions:      *      * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens      * will be to transferred to `to`.      * - when `from` is zero, `amount` tokens will be minted for `to`.      * - when `to` is zero, `amount` of ``from``'s tokens will be burned.      * - `from` and `to` are never both zero.      *      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].      */ [30413,31002]",
      "parent": "contract_body [22623,31153]",
      "at": 33
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-empty-blocks [31008,31052]",
      "parent": "contract_body [22623,31153]",
      "at": 34
    },
    {
      "action": "move-tree",
      "tree": "function_definition [954,1039]",
      "parent": "contract_body [22623,31153]",
      "at": 35
    },
    {
      "action": "insert-node",
      "tree": "}: } [31152,31153]",
      "parent": "contract_body [22623,31153]",
      "at": 36
    },
    {
      "action": "move-tree",
      "tree": "user_defined_type [17581,17586]",
      "parent": "inheritance_specifier [31418,31423]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "comment: /**       *@dev send all eth balance in the contract to another address     */ [17237,17317]",
      "label": "/**      * @dev send all eth balance in the contract to another address      * @param _to address to send eth balance to      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**       *@dev send all token balance of an arbitary erc20 token     in the contract to another address     */ [17439,17553]",
      "label": "/**      * @dev send all token balance of an arbitrary erc20 token      * in the contract to another address      * @param token token to reclaim      * @param _to address to send eth balance to      */"
    },
    {
      "action": "update-node",
      "tree": "comment: //Change the minimum and maximum amount that can be burned at once. Burning [25344,25419]",
      "label": "/**      * @dev Emitted when `value` tokens are burnt from one account (`burner`)      * @param burner address which burned tokens      * @param value amount of tokens burned      */"
    },
    {
      "action": "move-tree",
      "tree": "event_definition [23970,24020]",
      "parent": "contract_body [32499,34995]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "comment: //may be disabled by setting both to 0 (this will not be done under normal [25425,25499]",
      "label": "/**      * @dev Emitted when new burn bounds were set      * @param newMin new minimum burn amount      * @param newMax new maximum burn amount      * @notice `newMin` should never be greater than `newMax`      */"
    },
    {
      "action": "update-node",
      "tree": "comment: //operation, but we can't add checks to disallow it without losing a lot of [25505,25580]",
      "label": "/**      * @dev Destroys `amount` tokens from `msg.sender`, reducing the      * total supply.      * @param amount amount of tokens to burn      *      * Emits a {Transfer} event with `to` set to the zero address.      * Emits a {Burn} event with `burner` set to `msg.sender`      *      * Requirements      *      * - `msg.sender` must have at least `amount` tokens.      *      */"
    },
    {
      "action": "move-tree",
      "tree": "function_definition [21262,21446]",
      "parent": "contract_body [32499,34995]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "comment: //flexibility since burning could also be as good as disabled [25586,25647]",
      "label": "/**      * @dev Change the minimum and maximum amount that can be burned at once.      * Burning may be disabled by setting both to 0 (this will not be done      * under normal operation, but we can't add checks to disallow it without      * losing a lot of flexibility since burning could also be as good as disabled      * by setting the minimum extremely high, and we don't want to lock      * in any particular cap for the minimum)      * @param _min minimum amount that can be burned at once      * @param _max maximum amount that can be burned at once      */"
    },
    {
      "action": "update-node",
      "tree": "comment: //by setting the minimum extremely high, and we don't want to lock [25653,25719]",
      "label": "/**      * @dev Checks if amount is within allowed burn bounds and      * destroys `amount` tokens from `account`, reducing the      * total supply.      * @param account account to burn tokens for      * @param amount amount of tokens to burn      *      * Emits a {Burn} event      */"
    },
    {
      "action": "move-tree",
      "tree": "function_definition [40922,41441]",
      "parent": "contract_body [32499,34995]",
      "at": 12
    },
    {
      "action": "update-node",
      "tree": "comment: /**       A buffer of \"Sheep\" runs from 0xffff...fffe down       They suicide when you call them, if you are their parent     */ [26326,26457]",
      "label": "/**      * @dev Refund 15,000 gas per slot.      * @param amount number of slots to free      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     @dev refund 39,000 gas     @dev costs slightly more than 16,100 gas     */ [28797,28882]",
      "label": "/**      * @dev use smart contract self-destruct to refund gas      * will refund 39,000 * amount gas      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**       @dev refund 30,000 gas     @dev costs slightly more than 15,400 gas     */ [30793,30880]",
      "label": "/**      * @dev Return the remaining sponsored gas slots      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**       @dev refund 15,000 gas     @dev costs slightly more than 10,200 gas     */ [31363,31450]",
      "label": "/**      * @dev Return the remaining sheep slots      */"
    },
    {
      "action": "insert-node",
      "tree": "function_definition [38569,38778]",
      "parent": "contract_body [35923,38781]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "{: { [40318,40319]",
      "parent": "contract_body [40318,45618]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [24078,24111]",
      "parent": "contract_body [40318,45618]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [32927,32980]",
      "parent": "contract_body [40318,45618]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when account blacklist status changes      */ [40423,40494]",
      "parent": "contract_body [40318,45618]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "event_definition [39459,39530]",
      "parent": "contract_body [40318,45618]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when `value` tokens are minted for `to`      * @param to address to mint tokens for      * @param value amount of tokens to be minted      */ [40571,40740]",
      "parent": "contract_body [40318,45618]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "event_definition [24026,24072]",
      "parent": "contract_body [40318,45618]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Creates `amount` tokens and assigns them to `account`, increasing      * the total supply.      * @param account address to mint tokens for      * @param amount amount of tokens to be minted      *      * Emits a {Mint} event      *      * Requirements      *      * - `account` cannot be the zero address.      * - `account` cannot be blacklisted.      * - `account` cannot be a redemption address.      */ [40800,41236]",
      "parent": "contract_body [40318,45618]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "function_definition [25094,25336]",
      "parent": "contract_body [40318,45618]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Set blacklisted status for the account.      * @param account address to set blacklist flag for      * @param _isBlacklisted blacklist flag value      *      * Requirements:      *      * - `msg.sender` should be owner.      */ [41575,41826]",
      "parent": "contract_body [40318,45618]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [41832,42154]",
      "parent": "contract_body [40318,45618]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Set canBurn status for the account.      * @param account address to set canBurn flag for      * @param _canBurn canBurn flag value      *      * Requirements:      *      * - `msg.sender` should be owner.      */ [42162,42399]",
      "parent": "contract_body [40318,45618]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function_definition [42405,42522]",
      "parent": "contract_body [40318,45618]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Check if neither account is blacklisted before performing transfer      * If transfer recipient is a redemption address, burns tokens      * @notice Transfer to redemption address will burn tokens with a 1 cent precision      * @param sender address of sender      * @param recipient address of recipient      * @param amount amount of tokens to transfer      */ [42530,42915]",
      "parent": "contract_body [40318,45618]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function_definition [42921,43502]",
      "parent": "contract_body [40318,45618]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Requere neither accounts to be blacklisted before approval      * @param owner address of owner giving approval      * @param spender address of spender to approve for      * @param amount amount of tokens to approve      */ [43510,43755]",
      "parent": "contract_body [40318,45618]",
      "at": 15
    },
    {
      "action": "insert-node",
      "tree": "function_definition [43761,44129]",
      "parent": "contract_body [40318,45618]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Check if tokens can be burned at address before burning      * @param account account to burn tokens from      * @param amount amount of tokens to burn      */ [44137,44316]",
      "parent": "contract_body [40318,45618]",
      "at": 17
    },
    {
      "action": "insert-node",
      "tree": "function_definition [44322,44518]",
      "parent": "contract_body [40318,45618]",
      "at": 18
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev First 0x100000-1 addresses (0x0000000000000000000000000000000000000001 to 0x00000000000000000000000000000000000fffff)      * are the redemption addresses.      * @param account address to check is a redemption address      *      * All transfers to redemption address will trigger token burn.      *      * @notice For transfer to succeed, canBurn must be true for redemption address      *      * @return is `account` a redemption address      */ [44526,44999]",
      "parent": "contract_body [40318,45618]",
      "at": 19
    },
    {
      "action": "insert-node",
      "tree": "function_definition [45005,45174]",
      "parent": "contract_body [40318,45618]",
      "at": 20
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev reclaim gas from legacy gas refund #1      * will refund 15,000 * amount gas to sender (minus exection cost)      * If gas pool is empty, refund 39,000 * amount gas by calling selfdestruct      */ [45182,45398]",
      "parent": "contract_body [40318,45618]",
      "at": 21
    },
    {
      "action": "insert-node",
      "tree": "function_definition [45404,45615]",
      "parent": "contract_body [40318,45618]",
      "at": 22
    },
    {
      "action": "insert-node",
      "tree": "}: } [45617,45618]",
      "parent": "contract_body [40318,45618]",
      "at": 23
    },
    {
      "action": "move-tree",
      "tree": "type_name [25116,25123]",
      "parent": "state_variable_declaration [544,572]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: balances_Deprecated [552,571]",
      "parent": "state_variable_declaration [544,572]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [12404,12411]",
      "parent": "state_variable_declaration [578,608]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: allowances_Deprecated [586,607]",
      "parent": "state_variable_declaration [578,608]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [13399,13411]",
      "label": "_totalSupply"
    },
    {
      "action": "move-tree",
      "tree": "type_name [20620,20627]",
      "parent": "state_variable_declaration [805,833]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: registry_Deprecated [813,832]",
      "parent": "state_variable_declaration [805,833]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "type_name [903,912]",
      "parent": "state_variable_declaration [903,938]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: gasRefundPool_Deprecated [913,937]",
      "parent": "state_variable_declaration [903,938]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: minimumGasPriceForFutureRefunds [13788,13819]",
      "label": "minimumGasPriceForFutureRefunds_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: balanceOf [11683,11692]",
      "label": "_balances"
    },
    {
      "action": "update-node",
      "tree": "identifier: _allowance [13924,13934]",
      "label": "_allowances"
    },
    {
      "action": "update-node",
      "tree": "identifier: attributes [13991,14001]",
      "label": "attributes_Deprecated"
    },
    {
      "action": "move-tree",
      "tree": "type_name [6482,6491]",
      "parent": "state_variable_declaration [1276,1322]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: finOps_Deprecated [1304,1321]",
      "parent": "state_variable_declaration [1276,1322]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: allowanceOf [12340,12351]",
      "label": "finOpBalances_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: _balanceOf [13857,13867]",
      "label": "finOpSupply_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: AttributeData [1404,1417]",
      "label": "RewardAllocation"
    },
    {
      "action": "insert-node",
      "tree": "type_name [1620,1658]",
      "parent": "state_variable_declaration [1620,1690]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _rewardDistribution_Deprecated [1659,1689]",
      "parent": "state_variable_declaration [1620,1690]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [12422,12429]",
      "parent": "state_variable_declaration [1696,1742]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: maxRewardProportion_Deprecated [1704,1734]",
      "parent": "state_variable_declaration [1696,1742]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "=: = [1735,1736]",
      "parent": "state_variable_declaration [1696,1742]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 1000 [1737,1741]",
      "parent": "state_variable_declaration [1696,1742]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "type_name [1750,1774]",
      "parent": "state_variable_declaration [1750,1789]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: isBlacklisted [1775,1788]",
      "parent": "state_variable_declaration [1750,1789]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "type_name [1795,1819]",
      "parent": "state_variable_declaration [1795,1835]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "visibility [13781,13787]",
      "parent": "state_variable_declaration [1795,1835]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: canBurn [1827,1834]",
      "parent": "state_variable_declaration [1795,1835]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: allowance [878,887]",
      "label": "totalSupply"
    },
    {
      "action": "move-tree",
      "tree": "visibility [158,166]",
      "parent": "function_definition [5509,5564]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "parameter [1306,1318]",
      "parent": "function_definition [5652,5720]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [1356,1364]",
      "parent": "function_definition [5652,5720]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: approve [1052,1059]",
      "label": "transfer"
    },
    {
      "action": "move-tree",
      "tree": "parameter [9100,9116]",
      "parent": "function_definition [5949,6026]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [1340,1354]",
      "parent": "function_definition [5949,6026]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [7125,7133]",
      "parent": "function_definition [5949,6026]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply [412,423]",
      "label": "allowance"
    },
    {
      "action": "insert-tree",
      "tree": "parameter [6329,6342]",
      "parent": "function_definition [6310,6393]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [6342,6343]",
      "parent": "function_definition [6310,6393]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [6344,6359]",
      "parent": "function_definition [6310,6393]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "visibility [6996,7004]",
      "parent": "function_definition [6310,6393]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [7062,7070]",
      "parent": "function_definition [7062,7136]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: approve [7071,7078]",
      "parent": "function_definition [7062,7136]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [7078,7079]",
      "parent": "function_definition [7062,7136]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [7079,7094]",
      "parent": "function_definition [7062,7136]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [7094,7095]",
      "parent": "function_definition [7062,7136]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [11878,11892]",
      "parent": "function_definition [7062,7136]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [7110,7111]",
      "parent": "function_definition [7062,7136]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [6504,6512]",
      "parent": "function_definition [7062,7136]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [1024,1038]",
      "parent": "function_definition [7062,7136]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: transfer [535,543]",
      "label": "transferFrom"
    },
    {
      "action": "move-tree",
      "tree": "parameter [9923,9939]",
      "parent": "function_definition [7454,7551]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [479,490]",
      "parent": "function_definition [7454,7551]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [7509,7510]",
      "parent": "function_definition [7454,7551]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [11736,11750]",
      "parent": "function_definition [7454,7551]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [4318,4326]",
      "parent": "function_definition [7454,7551]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: Ownable [8703,8710]",
      "label": "_msgSender"
    },
    {
      "action": "move-tree",
      "tree": "visibility [23098,23106]",
      "parent": "function_definition [8672,8778]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [23107,23111]",
      "parent": "function_definition [8672,8778]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [8708,8715]",
      "parent": "function_definition [8672,8778]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [8716,8741]",
      "parent": "function_definition [8672,8778]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [8786,8794]",
      "parent": "function_definition [8786,9019]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _msgData [8795,8803]",
      "parent": "function_definition [8786,9019]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [8803,8804]",
      "parent": "function_definition [8786,9019]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [8804,8805]",
      "parent": "function_definition [8786,9019]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [18643,18651]",
      "parent": "function_definition [8786,9019]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [18425,18429]",
      "parent": "function_definition [8786,9019]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [8820,8827]",
      "parent": "function_definition [8786,9019]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [8828,8850]",
      "parent": "function_definition [8786,9019]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "function_body [8851,9019]",
      "parent": "function_definition [8786,9019]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [10411,10419]",
      "parent": "function_definition [10411,10547]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: sub [10420,10423]",
      "parent": "function_definition [10411,10547]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [10423,10424]",
      "parent": "function_definition [10411,10547]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [10424,10433]",
      "parent": "function_definition [10411,10547]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [10433,10434]",
      "parent": "function_definition [10411,10547]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [10435,10444]",
      "parent": "function_definition [10411,10547]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [10444,10445]",
      "parent": "function_definition [10411,10547]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [20642,20650]",
      "parent": "function_definition [10411,10547]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [10455,10459]",
      "parent": "function_definition [10411,10547]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [18430,18447]",
      "parent": "function_definition [10411,10547]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [10478,10547]",
      "parent": "function_definition [10411,10547]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": ",: , [10883,10884]",
      "parent": "function_definition [10850,11042]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [10885,10911]",
      "parent": "function_definition [10850,11042]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [12248,12256]",
      "parent": "function_definition [12248,12380]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: div [12257,12260]",
      "parent": "function_definition [12248,12380]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [12260,12261]",
      "parent": "function_definition [12248,12380]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [12261,12270]",
      "parent": "function_definition [12248,12380]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [12270,12271]",
      "parent": "function_definition [12248,12380]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [12272,12281]",
      "parent": "function_definition [12248,12380]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [12281,12282]",
      "parent": "function_definition [12248,12380]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [25149,25157]",
      "parent": "function_definition [12248,12380]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [12292,12296]",
      "parent": "function_definition [12248,12380]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [6328,6345]",
      "parent": "function_definition [12248,12380]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [12315,12380]",
      "parent": "function_definition [12248,12380]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": ",: , [12909,12910]",
      "parent": "function_definition [12876,13154]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [12911,12937]",
      "parent": "function_definition [12876,13154]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [13619,13627]",
      "parent": "function_definition [13619,13749]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: mod [13628,13631]",
      "parent": "function_definition [13619,13749]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [13631,13632]",
      "parent": "function_definition [13619,13749]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [13632,13641]",
      "parent": "function_definition [13619,13749]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [13641,13642]",
      "parent": "function_definition [13619,13749]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [13643,13652]",
      "parent": "function_definition [13619,13749]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [13652,13653]",
      "parent": "function_definition [13619,13749]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [31479,31487]",
      "parent": "function_definition [13619,13749]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [13663,13667]",
      "parent": "function_definition [13619,13749]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [5998,6015]",
      "parent": "function_definition [13619,13749]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [13686,13749]",
      "parent": "function_definition [13619,13749]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [14234,14242]",
      "parent": "function_definition [14234,14400]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: mod [14243,14246]",
      "parent": "function_definition [14234,14400]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [14246,14247]",
      "parent": "function_definition [14234,14400]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [14247,14256]",
      "parent": "function_definition [14234,14400]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [14256,14257]",
      "parent": "function_definition [14234,14400]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [14258,14267]",
      "parent": "function_definition [14234,14400]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [14267,14268]",
      "parent": "function_definition [14234,14400]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [14269,14295]",
      "parent": "function_definition [14234,14400]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [14295,14296]",
      "parent": "function_definition [14234,14400]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [35520,35528]",
      "parent": "function_definition [14234,14400]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [14306,14310]",
      "parent": "function_definition [14234,14400]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [4714,4731]",
      "parent": "function_definition [14234,14400]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "function_body [14329,14400]",
      "parent": "function_definition [14234,14400]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function: function [15169,15177]",
      "parent": "function_definition [15169,15788]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: isContract [15178,15188]",
      "parent": "function_definition [15169,15788]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [15188,15189]",
      "parent": "function_definition [15169,15788]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [11721,11734]",
      "parent": "function_definition [15169,15788]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [15204,15205]",
      "parent": "function_definition [15169,15788]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [3286,3294]",
      "parent": "function_definition [15169,15788]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [3295,3299]",
      "parent": "function_definition [15169,15788]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [33322,33336]",
      "parent": "function_definition [15169,15788]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [15235,15788]",
      "parent": "function_definition [15169,15788]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [16723,16731]",
      "parent": "function_definition [16723,17120]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: sendValue [16732,16741]",
      "parent": "function_definition [16723,17120]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [16741,16742]",
      "parent": "function_definition [16723,17120]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [16742,16767]",
      "parent": "function_definition [16723,17120]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [16767,16768]",
      "parent": "function_definition [16723,17120]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [10563,10572]",
      "parent": "function_definition [16723,17120]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [16783,16784]",
      "parent": "function_definition [16723,17120]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [37482,37490]",
      "parent": "function_definition [16723,17120]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [16794,17120]",
      "parent": "function_definition [16723,17120]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [17881,17889]",
      "parent": "function_definition [17881,18054]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCall [17890,17902]",
      "parent": "function_definition [17881,18054]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [17902,17903]",
      "parent": "function_definition [17881,18054]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [12005,12018]",
      "parent": "function_definition [17881,18054]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [17917,17918]",
      "parent": "function_definition [17881,18054]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [17919,17936]",
      "parent": "function_definition [17881,18054]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [17936,17937]",
      "parent": "function_definition [17881,18054]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [18776,18784]",
      "parent": "function_definition [17881,18054]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [17947,17969]",
      "parent": "function_definition [17881,18054]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "function_body [17970,18054]",
      "parent": "function_definition [17881,18054]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [18284,18292]",
      "parent": "function_definition [18284,18480]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCall [18293,18305]",
      "parent": "function_definition [18284,18480]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18305,18306]",
      "parent": "function_definition [18284,18480]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [11863,11876]",
      "parent": "function_definition [18284,18480]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [18320,18321]",
      "parent": "function_definition [18284,18480]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18322,18339]",
      "parent": "function_definition [18284,18480]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [18339,18340]",
      "parent": "function_definition [18284,18480]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18341,18367]",
      "parent": "function_definition [18284,18480]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [18367,18368]",
      "parent": "function_definition [18284,18480]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [18979,18987]",
      "parent": "function_definition [18284,18480]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [18378,18400]",
      "parent": "function_definition [18284,18480]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [18401,18480]",
      "parent": "function_definition [18284,18480]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [18855,18863]",
      "parent": "function_definition [18855,19081]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCallWithValue [18864,18885]",
      "parent": "function_definition [18855,19081]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18885,18886]",
      "parent": "function_definition [18855,19081]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [12589,12609]",
      "parent": "function_definition [18855,19081]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [18900,18901]",
      "parent": "function_definition [18855,19081]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18902,18919]",
      "parent": "function_definition [18855,19081]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [18919,18920]",
      "parent": "function_definition [18855,19081]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [1077,1090]",
      "parent": "function_definition [18855,19081]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [18934,18935]",
      "parent": "function_definition [18855,19081]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [22512,22520]",
      "parent": "function_definition [18855,19081]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [18945,18967]",
      "parent": "function_definition [18855,19081]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "function_body [18968,19081]",
      "parent": "function_definition [18855,19081]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [19337,19345]",
      "parent": "function_definition [19337,19653]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCallWithValue [19346,19367]",
      "parent": "function_definition [19337,19653]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19367,19368]",
      "parent": "function_definition [19337,19653]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [12611,12627]",
      "parent": "function_definition [19337,19653]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [19382,19383]",
      "parent": "function_definition [19337,19653]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19384,19401]",
      "parent": "function_definition [19337,19653]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [19401,19402]",
      "parent": "function_definition [19337,19653]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [1002,1015]",
      "parent": "function_definition [19337,19653]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [19416,19417]",
      "parent": "function_definition [19337,19653]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19418,19444]",
      "parent": "function_definition [19337,19653]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "): ) [19444,19445]",
      "parent": "function_definition [19337,19653]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "visibility [21549,21557]",
      "parent": "function_definition [19337,19653]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [19455,19477]",
      "parent": "function_definition [19337,19653]",
      "at": 12
    },
    {
      "action": "move-tree",
      "tree": "function_body [39904,39971]",
      "parent": "function_definition [19337,19653]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function: function [19661,19669]",
      "parent": "function_definition [19661,20640]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _functionCallWithValue [19670,19692]",
      "parent": "function_definition [19661,20640]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19692,19693]",
      "parent": "function_definition [19661,20640]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [12382,12402]",
      "parent": "function_definition [19661,20640]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [19707,19708]",
      "parent": "function_definition [19661,20640]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19709,19726]",
      "parent": "function_definition [19661,20640]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [19726,19727]",
      "parent": "function_definition [19661,20640]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [11398,11407]",
      "parent": "function_definition [19661,20640]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [19744,19745]",
      "parent": "function_definition [19661,20640]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19746,19772]",
      "parent": "function_definition [19661,20640]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "): ) [19772,19773]",
      "parent": "function_definition [19661,20640]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "visibility [19774,19781]",
      "parent": "function_definition [19661,20640]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [19782,19804]",
      "parent": "function_definition [19661,20640]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_body [19805,20640]",
      "parent": "function_definition [19661,20640]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "using: using [22663,22668]",
      "parent": "using_directive [22663,22689]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "type_alias [22669,22676]",
      "parent": "using_directive [22663,22689]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "for: for [22677,22680]",
      "parent": "using_directive [22663,22689]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_name [33738,33745]",
      "parent": "using_directive [22663,22689]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function: function [22759,22767]",
      "parent": "function_definition [22759,22819]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: name [22768,22772]",
      "parent": "function_definition [22759,22819]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [22772,22773]",
      "parent": "function_definition [22759,22819]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [22773,22774]",
      "parent": "function_definition [22759,22819]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [12645,12651]",
      "parent": "function_definition [22759,22819]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [22782,22789]",
      "parent": "function_definition [22759,22819]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [22790,22794]",
      "parent": "function_definition [22759,22819]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [22795,22818]",
      "parent": "function_definition [22759,22819]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [22938,22946]",
      "parent": "function_definition [22938,23000]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: symbol [22947,22953]",
      "parent": "function_definition [22938,23000]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [22953,22954]",
      "parent": "function_definition [22938,23000]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [22954,22955]",
      "parent": "function_definition [22938,23000]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [12852,12858]",
      "parent": "function_definition [22938,23000]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [22963,22970]",
      "parent": "function_definition [22938,23000]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [33072,33076]",
      "parent": "function_definition [22938,23000]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [22976,22999]",
      "parent": "function_definition [22938,23000]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [23638,23646]",
      "parent": "function_definition [23638,23722]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: decimals [23647,23655]",
      "parent": "function_definition [23638,23722]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [23655,23656]",
      "parent": "function_definition [23638,23722]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [23656,23657]",
      "parent": "function_definition [23638,23722]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [12036,12042]",
      "parent": "function_definition [23638,23722]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [23665,23672]",
      "parent": "function_definition [23638,23722]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [43715,43719]",
      "parent": "function_definition [23638,23722]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [23678,23693]",
      "parent": "function_definition [23638,23722]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "function_body [23694,23722]",
      "parent": "function_definition [23638,23722]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: _getBalance [18617,18628]",
      "label": "totalSupply"
    },
    {
      "action": "move-tree",
      "tree": "visibility [11894,11900]",
      "parent": "function_definition [23787,23887]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [23822,23830]",
      "parent": "function_definition [23787,23887]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [12796,12816]",
      "parent": "function_definition [23950,24069]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [23998,24006]",
      "parent": "function_definition [23950,24069]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: setAllowance [12783,12795]",
      "label": "transfer"
    },
    {
      "action": "move-tree",
      "tree": "visibility [21324,21330]",
      "parent": "function_definition [24282,24457]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24342,24349]",
      "parent": "function_definition [24282,24457]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24350,24358]",
      "parent": "function_definition [24282,24457]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [21331,21345]",
      "parent": "function_definition [24282,24457]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "parameter [888,901]",
      "parent": "function_definition [24520,24671]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [1060,1075]",
      "parent": "function_definition [24520,24671]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24583,24590]",
      "parent": "function_definition [24520,24671]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24591,24599]",
      "parent": "function_definition [24520,24671]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "parameter [903,918]",
      "parent": "function_definition [24818,24987]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [18963,18977]",
      "parent": "function_definition [24818,24987]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24875,24882]",
      "parent": "function_definition [24818,24987]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24883,24891]",
      "parent": "function_definition [24818,24987]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [25461,25469]",
      "parent": "function_definition [25461,25782]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: transferFrom [25470,25482]",
      "parent": "function_definition [25461,25782]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [25482,25483]",
      "parent": "function_definition [25461,25782]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23393,23405]",
      "parent": "function_definition [25461,25782]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [25497,25498]",
      "parent": "function_definition [25461,25782]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [23407,23423]",
      "parent": "function_definition [25461,25782]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [25516,25517]",
      "parent": "function_definition [25461,25782]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [22464,22488]",
      "parent": "function_definition [25461,25782]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [25532,25533]",
      "parent": "function_definition [25461,25782]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [33782,33788]",
      "parent": "function_definition [25461,25782]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [25541,25548]",
      "parent": "function_definition [25461,25782]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [25549,25557]",
      "parent": "function_definition [25461,25782]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [33789,33803]",
      "parent": "function_definition [25461,25782]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_body [25573,25782]",
      "parent": "function_definition [25461,25782]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function: function [26191,26199]",
      "parent": "function_definition [26191,26409]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: increaseAllowance [26200,26217]",
      "parent": "function_definition [26191,26409]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [26217,26218]",
      "parent": "function_definition [26191,26409]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [26218,26233]",
      "parent": "function_definition [26191,26409]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [26233,26234]",
      "parent": "function_definition [26191,26409]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [12020,12034]",
      "parent": "function_definition [26191,26409]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [26253,26254]",
      "parent": "function_definition [26191,26409]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [5479,5485]",
      "parent": "function_definition [26191,26409]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [26262,26269]",
      "parent": "function_definition [26191,26409]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [5491,5505]",
      "parent": "function_definition [26191,26409]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_body [26285,26409]",
      "parent": "function_definition [26191,26409]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [26912,26920]",
      "parent": "function_definition [26912,27181]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: decreaseAllowance [26921,26938]",
      "parent": "function_definition [26912,27181]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [26938,26939]",
      "parent": "function_definition [26912,27181]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [26939,26954]",
      "parent": "function_definition [26912,27181]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [26954,26955]",
      "parent": "function_definition [26912,27181]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [21506,21525]",
      "parent": "function_definition [26912,27181]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [26979,26980]",
      "parent": "function_definition [26912,27181]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [33315,33321]",
      "parent": "function_definition [26912,27181]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [26988,26995]",
      "parent": "function_definition [26912,27181]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [3300,3314]",
      "parent": "function_definition [26912,27181]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_body [27011,27181]",
      "parent": "function_definition [26912,27181]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [27671,27679]",
      "parent": "function_definition [27671,28210]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _transfer [27680,27689]",
      "parent": "function_definition [27671,28210]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [27689,27690]",
      "parent": "function_definition [27671,28210]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23066,23078]",
      "parent": "function_definition [27671,28210]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [27704,27705]",
      "parent": "function_definition [27671,28210]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [23080,23096]",
      "parent": "function_definition [27671,28210]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [27723,27724]",
      "parent": "function_definition [27671,28210]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [3550,3564]",
      "parent": "function_definition [27671,28210]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [27739,27740]",
      "parent": "function_definition [27671,28210]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [41528,41536]",
      "parent": "function_definition [27671,28210]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [27750,27757]",
      "parent": "function_definition [27671,28210]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [27758,28210]",
      "parent": "function_definition [27671,28210]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: wipeBlacklistedAccount [40363,40385]",
      "label": "_mint"
    },
    {
      "action": "move-tree",
      "tree": "parameter [3516,3528]",
      "parent": "function_definition [28491,28869]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [28521,28522]",
      "parent": "function_definition [28491,28869]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [4302,4316]",
      "parent": "function_definition [28491,28869]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "visibility [42553,42561]",
      "parent": "function_definition [28491,28869]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [28548,28555]",
      "parent": "function_definition [28491,28869]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [40558,40583]",
      "parent": "function_body [28556,28869]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "function: function [29201,29209]",
      "parent": "function_definition [29201,29619]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _burn [29210,29215]",
      "parent": "function_definition [29201,29619]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [29215,29216]",
      "parent": "function_definition [29201,29619]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [4823,4835]",
      "parent": "function_definition [29201,29619]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [29231,29232]",
      "parent": "function_definition [29201,29619]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [40041,40055]",
      "parent": "function_definition [29201,29619]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [29247,29248]",
      "parent": "function_definition [29201,29619]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [24286,24294]",
      "parent": "function_definition [29201,29619]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [29258,29265]",
      "parent": "function_definition [29201,29619]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [29266,29619]",
      "parent": "function_definition [29201,29619]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [30059,30067]",
      "parent": "function_definition [30059,30405]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [30068,30076]",
      "parent": "function_definition [30059,30405]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30076,30077]",
      "parent": "function_definition [30059,30405]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [30077,30090]",
      "parent": "function_definition [30059,30405]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [30090,30091]",
      "parent": "function_definition [30059,30405]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [30092,30107]",
      "parent": "function_definition [30059,30405]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [30107,30108]",
      "parent": "function_definition [30059,30405]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [4857,4871]",
      "parent": "function_definition [30059,30405]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [30123,30124]",
      "parent": "function_definition [30059,30405]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [42710,42718]",
      "parent": "function_definition [30059,30405]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [30134,30141]",
      "parent": "function_definition [30059,30405]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [30142,30405]",
      "parent": "function_definition [30059,30405]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: transferFrom [963,975]",
      "label": "_beforeTokenTransfer"
    },
    {
      "action": "move-tree",
      "tree": "parameter [6461,6480]",
      "parent": "function_definition [31058,31150]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "visibility [42113,42121]",
      "parent": "function_definition [31058,31150]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [31139,31146]",
      "parent": "function_definition [31058,31150]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "function_body [31147,31150]",
      "parent": "function_definition [31058,31150]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: increaseApproval [21271,21287]",
      "label": "burn"
    },
    {
      "action": "move-tree",
      "tree": "parameter [18760,18774]",
      "parent": "function_definition [33440,33523]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [26488,26496]",
      "parent": "function_definition [33440,33523]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: _requireCanTransfer [40931,40950]",
      "label": "_burn"
    },
    {
      "action": "move-tree",
      "tree": "parameter [19134,19146]",
      "parent": "function_definition [34658,34992]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [19148,19162]",
      "parent": "function_definition [34658,34992]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [19164,19172]",
      "parent": "function_definition [34658,34992]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [34715,34722]",
      "parent": "function_definition [34658,34992]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [34723,34731]",
      "parent": "function_definition [34658,34992]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [41229,41291]",
      "parent": "function_body [34732,34992]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: sponsorGas2 [26474,26485]",
      "label": "gasRefund15"
    },
    {
      "action": "move-tree",
      "tree": "parameter [24133,24147]",
      "parent": "function_definition [36035,36973]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [30909,30917]",
      "parent": "function_definition [36035,36973]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "parameter [20429,20443]",
      "parent": "function_definition [37099,38269]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [18785,18815]",
      "parent": "function_definition [38349,38497]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "function: function [38569,38577]",
      "parent": "function_definition [38569,38778]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: remainingSheepRefundPool [38578,38602]",
      "parent": "function_definition [38569,38778]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38602,38603]",
      "parent": "function_definition [38569,38778]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [38603,38604]",
      "parent": "function_definition [38569,38778]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [32105,32111]",
      "parent": "function_definition [38569,38778]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [32112,32116]",
      "parent": "function_definition [38569,38778]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [18988,19012]",
      "parent": "function_definition [38569,38778]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "function_body [38642,38778]",
      "parent": "function_definition [38569,38778]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: WipeBlacklistedAccount [39465,39487]",
      "label": "Blacklisted"
    },
    {
      "action": "update-node",
      "tree": "identifier: _burnAllArgs [25103,25115]",
      "label": "mint"
    },
    {
      "action": "move-tree",
      "tree": "parameter [24255,24268]",
      "parent": "function_definition [41242,41567]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [24270,24284]",
      "parent": "function_definition [41242,41567]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [17900,17908]",
      "parent": "function_definition [41242,41567]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [17909,17918]",
      "parent": "function_definition [41242,41567]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [41832,41840]",
      "parent": "function_definition [41832,42154]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setBlacklisted [41841,41855]",
      "parent": "function_definition [41832,42154]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [41855,41856]",
      "parent": "function_definition [41832,42154]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [22236,22252]",
      "parent": "function_definition [41832,42154]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [41871,41872]",
      "parent": "function_definition [41832,42154]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [40829,40845]",
      "parent": "function_definition [41832,42154]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [41892,41893]",
      "parent": "function_definition [41832,42154]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [24149,24157]",
      "parent": "function_definition [41832,42154]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [39788,39797]",
      "parent": "function_definition [41832,42154]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [41913,42154]",
      "parent": "function_definition [41832,42154]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [42405,42413]",
      "parent": "function_definition [42405,42522]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setCanBurn [42414,42424]",
      "parent": "function_definition [42405,42522]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [42424,42425]",
      "parent": "function_definition [42405,42522]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [22918,22930]",
      "parent": "function_definition [42405,42522]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [42440,42441]",
      "parent": "function_definition [42405,42522]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [41011,41015]",
      "parent": "function_definition [42405,42522]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [42455,42456]",
      "parent": "function_definition [42405,42522]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [29484,29492]",
      "parent": "function_definition [42405,42522]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [38724,38733]",
      "parent": "function_definition [42405,42522]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "function_body [42476,42522]",
      "parent": "function_definition [42405,42522]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [42921,42929]",
      "parent": "function_definition [42921,43502]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _transfer [42930,42939]",
      "parent": "function_definition [42921,43502]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [42939,42940]",
      "parent": "function_definition [42921,43502]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23219,23231]",
      "parent": "function_definition [42921,43502]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [42964,42965]",
      "parent": "function_definition [42921,43502]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [23233,23249]",
      "parent": "function_definition [42921,43502]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [42992,42993]",
      "parent": "function_definition [42921,43502]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [23251,23265]",
      "parent": "function_definition [42921,43502]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [43023,43024]",
      "parent": "function_definition [42921,43502]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [23267,23275]",
      "parent": "function_definition [42921,43502]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [43034,43041]",
      "parent": "function_definition [42921,43502]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [43042,43050]",
      "parent": "function_definition [42921,43502]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function_body [43051,43502]",
      "parent": "function_definition [42921,43502]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function: function [43761,43769]",
      "parent": "function_definition [43761,44129]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [43770,43778]",
      "parent": "function_definition [43761,44129]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [43778,43779]",
      "parent": "function_definition [43761,44129]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [43789,43802]",
      "parent": "function_definition [43761,44129]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [43802,43803]",
      "parent": "function_definition [43761,44129]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [43813,43828]",
      "parent": "function_definition [43761,44129]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [43828,43829]",
      "parent": "function_definition [43761,44129]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [23667,23681]",
      "parent": "function_definition [43761,44129]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [43859,43860]",
      "parent": "function_definition [43761,44129]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [34002,34010]",
      "parent": "function_definition [43761,44129]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [43870,43878]",
      "parent": "function_definition [43761,44129]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [43879,44129]",
      "parent": "function_definition [43761,44129]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [44322,44330]",
      "parent": "function_definition [44322,44518]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _burn [44331,44336]",
      "parent": "function_definition [44322,44518]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [44336,44337]",
      "parent": "function_definition [44322,44518]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23635,23647]",
      "parent": "function_definition [44322,44518]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [44352,44353]",
      "parent": "function_definition [44322,44518]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [23425,23439]",
      "parent": "function_definition [44322,44518]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [44368,44369]",
      "parent": "function_definition [44322,44518]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [23441,23449]",
      "parent": "function_definition [44322,44518]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [44379,44387]",
      "parent": "function_definition [44322,44518]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [44388,44518]",
      "parent": "function_definition [44322,44518]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [45005,45013]",
      "parent": "function_definition [45005,45174]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: isRedemptionAddress [45014,45033]",
      "parent": "function_definition [45005,45174]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [45033,45034]",
      "parent": "function_definition [45005,45174]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23649,23665]",
      "parent": "function_definition [45005,45174]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [45049,45050]",
      "parent": "function_definition [45005,45174]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [23683,23691]",
      "parent": "function_definition [45005,45174]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [42926,42930]",
      "parent": "function_definition [45005,45174]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [22284,22298]",
      "parent": "function_definition [45005,45174]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [45080,45174]",
      "parent": "function_definition [45005,45174]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [45404,45412]",
      "parent": "function_definition [45404,45615]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: refundGas [45413,45422]",
      "parent": "function_definition [45404,45615]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [45422,45423]",
      "parent": "function_definition [45404,45615]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [40178,40192]",
      "parent": "function_definition [45404,45615]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [45437,45438]",
      "parent": "function_definition [45404,45615]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [4124,4132]",
      "parent": "function_definition [45404,45615]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [40411,40420]",
      "parent": "function_definition [45404,45615]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "function_body [45458,45615]",
      "parent": "function_definition [45404,45615]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: CompliantDepositTokenWithHook [43224,43253]",
      "label": "TrueCurrency"
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [46032,46040]",
      "parent": "function_definition [46005,46096]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [46217,46225]",
      "parent": "function_definition [46194,46290]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [46323,46331]",
      "parent": "function_definition [46298,46393]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "type_name [2684,2691]",
      "parent": "type_name [903,912]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "[: [ [910,911]",
      "parent": "type_name [903,912]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "]: ] [911,912]",
      "parent": "type_name [903,912]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1276,1283]",
      "parent": "type_name [1276,1303]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1283,1284]",
      "parent": "type_name [1276,1303]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [2163,2170]",
      "parent": "type_name [1276,1303]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1292,1294]",
      "parent": "type_name [1276,1303]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [1302,1303]",
      "parent": "type_name [1276,1303]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: value [1437,1442]",
      "label": "proportion"
    },
    {
      "action": "update-node",
      "tree": "identifier: adminAddr [1485,1494]",
      "label": "finOp"
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1620,1627]",
      "parent": "type_name [1620,1658]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1627,1628]",
      "parent": "type_name [1620,1658]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [42223,42230]",
      "parent": "type_name [1620,1658]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1636,1638]",
      "parent": "type_name [1620,1658]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "type_name [1639,1657]",
      "parent": "type_name [1620,1658]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [1657,1658]",
      "parent": "type_name [1620,1658]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1750,1757]",
      "parent": "type_name [1750,1774]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1757,1758]",
      "parent": "type_name [1750,1774]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [41715,41722]",
      "parent": "type_name [1750,1774]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1766,1768]",
      "parent": "type_name [1750,1774]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [41560,41564]",
      "parent": "type_name [1750,1774]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [1773,1774]",
      "parent": "type_name [1750,1774]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1795,1802]",
      "parent": "type_name [1795,1819]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1802,1803]",
      "parent": "type_name [1795,1819]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [41805,41812]",
      "parent": "type_name [1795,1819]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1811,1813]",
      "parent": "type_name [1795,1819]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [42145,42149]",
      "parent": "type_name [1795,1819]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [1818,1819]",
      "parent": "type_name [1795,1819]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [1314,1318]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [9108,9116]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [1348,1354]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [11886,11892]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [9931,9939]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: who [487,490]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [11744,11750]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "return_statement [8753,8771]",
      "parent": "function_body [8742,8778]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "parameter [10005,10012]",
      "parent": "return_type_definition [9996,10013]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [4348,4396]",
      "parent": "function_body [10014,10128]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [22532,22589]",
      "parent": "function_body [10945,11042]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [11359,11366]",
      "parent": "return_type_definition [11350,11367]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [11379,11458]",
      "parent": "function_body [11368,11772]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // benefit is lost if 'b' is also tested. [11468,11509]",
      "parent": "function_body [11368,11772]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [11519,11590]",
      "parent": "function_body [11368,11772]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [22599,22616]",
      "parent": "function_body [11368,11772]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [12982,13011]",
      "parent": "function_body [12971,13154]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [3900,3931]",
      "parent": "function_body [12971,13154]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [11729,11734]",
      "label": "account"
    },
    {
      "action": "insert-node",
      "tree": "{: { [15235,15236]",
      "parent": "function_body [15235,15788]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // According to EIP-1052, 0x0 is the value returned for not-yet created accounts [15246,15326]",
      "parent": "function_body [15235,15788]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned [15336,15421]",
      "parent": "function_body [15235,15788]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // for accounts without code, i.e. `keccak256('')` [15431,15481]",
      "parent": "function_body [15235,15788]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [15491,15508]",
      "parent": "function_body [15235,15788]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [15518,15607]",
      "parent": "function_body [15235,15788]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-inline-assembly [15617,15664]",
      "parent": "function_body [15235,15788]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "assembly_statement [15674,15719]",
      "parent": "function_body [15235,15788]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [15729,15781]",
      "parent": "function_body [15235,15788]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "}: } [15787,15788]",
      "parent": "function_body [15235,15788]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: c [10571,10572]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [16794,16795]",
      "parent": "function_body [16794,17120]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [16805,16879]",
      "parent": "function_body [16794,17120]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line avoid-low-level-calls, avoid-call-value [16891,16959]",
      "parent": "function_body [16794,17120]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [16969,17024]",
      "parent": "function_body [16794,17120]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [17034,17113]",
      "parent": "function_body [16794,17120]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [17119,17120]",
      "parent": "function_body [16794,17120]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [12013,12018]",
      "label": "target"
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [11871,11876]",
      "label": "target"
    },
    {
      "action": "insert-node",
      "tree": "{: { [18401,18402]",
      "parent": "function_body [18401,18480]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [18412,18473]",
      "parent": "function_body [18401,18480]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [18479,18480]",
      "parent": "function_body [18401,18480]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _tokenHolder [12597,12609]",
      "label": "target"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [12619,12627]",
      "label": "target"
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [19581,19646]",
      "parent": "function_body [19478,19653]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _tokenHolder [12390,12402]",
      "label": "target"
    },
    {
      "action": "update-node",
      "tree": "identifier: c [11406,11407]",
      "label": "weiValue"
    },
    {
      "action": "insert-node",
      "tree": "{: { [19805,19806]",
      "parent": "function_body [19805,20640]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [19816,19877]",
      "parent": "function_body [19805,20640]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line avoid-low-level-calls [19889,19939]",
      "parent": "function_body [19805,20640]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [19949,20028]",
      "parent": "function_body [19805,20640]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "if_statement [20038,20633]",
      "parent": "function_body [19805,20640]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [20639,20640]",
      "parent": "function_body [19805,20640]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _tokenHolder [12804,12816]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [12826,12834]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [12844,12850]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "return_statement [22385,22397]",
      "parent": "function_body [24374,24457]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [18971,18977]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "return_statement [21427,21439]",
      "parent": "function_body [24907,24987]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [23401,23405]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [23415,23423]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _subtractedValue [22472,22488]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [25573,25574]",
      "parent": "function_body [25573,25782]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [25584,25621]",
      "parent": "function_body [25573,25782]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [25631,25753]",
      "parent": "function_body [25573,25782]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "return_statement [20534,20546]",
      "parent": "function_body [25573,25782]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [25781,25782]",
      "parent": "function_body [25573,25782]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [12028,12034]",
      "label": "addedValue"
    },
    {
      "action": "insert-node",
      "tree": "{: { [26285,26286]",
      "parent": "function_body [26285,26409]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [26296,26380]",
      "parent": "function_body [26285,26409]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "return_statement [33878,33890]",
      "parent": "function_body [26285,26409]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [26408,26409]",
      "parent": "function_body [26285,26409]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _addedValue [21514,21525]",
      "label": "subtractedValue"
    },
    {
      "action": "insert-node",
      "tree": "{: { [27011,27012]",
      "parent": "function_body [27011,27181]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [27022,27152]",
      "parent": "function_body [27011,27181]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "return_statement [33400,33412]",
      "parent": "function_body [27011,27181]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [27180,27181]",
      "parent": "function_body [27011,27181]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [23074,23078]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [23088,23096]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [3558,3564]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [27758,27759]",
      "parent": "function_body [27758,28210]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [9142,9174]",
      "parent": "function_body [27758,28210]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [38745,38801]",
      "parent": "function_body [27758,28210]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [27934,27982]",
      "parent": "function_body [27758,28210]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [41927,41991]",
      "parent": "function_body [27758,28210]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [28096,28152]",
      "parent": "function_body [27758,28210]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "emit_statement [28162,28203]",
      "parent": "function_body [27758,28210]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "}: } [28209,28210]",
      "parent": "function_body [27758,28210]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [3524,3528]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _index [4310,4316]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [10220,10246]",
      "parent": "function_body [28556,28869]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [39362,39418]",
      "parent": "function_body [28556,28869]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": ",: , [40725,40726]",
      "parent": "emit_statement [28819,28862]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [40717,40725]",
      "parent": "emit_statement [28819,28862]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [4831,4835]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [40049,40055]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [29266,29267]",
      "parent": "function_body [29266,29619]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [42735,42799]",
      "parent": "function_body [29266,29619]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [29357,29407]",
      "parent": "function_body [29266,29619]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [4947,5033]",
      "parent": "function_body [29266,29619]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [29519,29559]",
      "parent": "function_body [29266,29619]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "emit_statement [39007,39053]",
      "parent": "function_body [29266,29619]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": ",: , [39031,39032]",
      "parent": "emit_statement [29569,29612]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [39021,39031]",
      "parent": "emit_statement [29569,29612]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "}: } [29618,29619]",
      "parent": "function_body [29266,29619]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [4865,4871]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [30142,30143]",
      "parent": "function_body [30142,30405]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [42363,42425]",
      "parent": "function_body [30142,30405]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [30232,30301]",
      "parent": "function_body [30142,30405]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [30313,30350]",
      "parent": "function_body [30142,30405]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "emit_statement [30360,30398]",
      "parent": "function_body [30142,30405]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [30404,30405]",
      "parent": "function_body [30142,30405]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _startIndex [6469,6480]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [18768,18774]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [19142,19146]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [19156,19162]",
      "label": "amount"
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [34919,34948]",
      "parent": "function_body [34732,34992]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "emit_statement [34958,34985]",
      "parent": "function_body [34732,34992]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [24141,24147]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "comment: /**         Deploy (9 bytes)           PC Assembly       Opcodes                                       Stack           00 PUSH1(31)      60 1f                                         1f           02 DUP1           80                                            1f 1f           03 PUSH1(9)       60 09                                         1f 1f 09           05 RETURNDATASIZE 3d                                            1f 1f 09 00           06 CODECOPY       39                                            1f           07 RETURNDATASIZE 3d                                            1f 00           08 RETURN         f3         Sheep (31 bytes = 3 + 20 + 8)           PC Assembly       Opcodes                                       Stack           00 RETURNDATASIZE 3d                                            0           01 CALLER         33                                            0 caller           02 PUSH20(me)     73 memememememememememememememememememememe   0 caller me           17 EQ             14                                            0 valid           18 PUSH1(1d)      60 1d                                         0 valid 1d           1a JUMPI          57                                            0           1b DUP1           80                                            0 0           1c REVERT         fd           1d JUMPDEST       5b                                            0           1e SELFDESTRUCT   ff         */ [26508,27985]",
      "label": "// refund gas"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [20437,20443]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [38642,38643]",
      "parent": "function_body [38642,38778]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assembly_statement [38653,38771]",
      "parent": "function_body [38642,38778]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [38777,38778]",
      "parent": "function_body [38642,38778]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_name [35726,35730]",
      "parent": "event_paramater [40543,40561]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: balance [39521,39528]",
      "label": "isBlacklisted"
    },
    {
      "action": "update-node",
      "tree": "identifier: _from [24263,24268]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [24278,24284]",
      "label": "amount"
    },
    {
      "action": "insert-tree",
      "tree": "emit_statement [41533,41560]",
      "parent": "function_body [41308,41567]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [22244,22252]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: blacklisted [40834,40845]",
      "label": "_isBlacklisted"
    },
    {
      "action": "insert-node",
      "tree": "{: { [41913,41914]",
      "parent": "function_body [41913,42154]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [34990,35041]",
      "parent": "function_body [41913,42154]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [42055,42095]",
      "parent": "function_body [41913,42154]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "emit_statement [42105,42147]",
      "parent": "function_body [41913,42154]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [42153,42154]",
      "parent": "function_body [41913,42154]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [22926,22930]",
      "label": "account"
    },
    {
      "action": "insert-node",
      "tree": "identifier: _canBurn [42447,42455]",
      "parent": "parameter [42442,42455]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [23227,23231]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [23241,23249]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [23259,23265]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [43051,43052]",
      "parent": "function_body [43051,43502]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [34113,34164]",
      "parent": "function_body [43051,43502]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [35051,35104]",
      "parent": "function_body [43051,43502]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "if_statement [43232,43495]",
      "parent": "function_body [43051,43502]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [43501,43502]",
      "parent": "function_body [43051,43502]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [23675,23681]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [43879,43880]",
      "parent": "function_body [43879,44129]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [43890,43966]",
      "parent": "function_body [43879,44129]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [34174,34227]",
      "parent": "function_body [43879,44129]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [44083,44122]",
      "parent": "function_body [43879,44129]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [44128,44129]",
      "parent": "function_body [43879,44129]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [23643,23647]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [23433,23439]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [44388,44389]",
      "parent": "function_body [44388,44518]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [40432,40497]",
      "parent": "function_body [44388,44518]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [44482,44511]",
      "parent": "function_body [44388,44518]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [44517,44518]",
      "parent": "function_body [44388,44518]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [23657,23665]",
      "label": "account"
    },
    {
      "action": "insert-node",
      "tree": "{: { [45080,45081]",
      "parent": "function_body [45080,45174]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [45091,45167]",
      "parent": "function_body [45080,45174]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [45173,45174]",
      "parent": "function_body [45080,45174]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [40186,40192]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "call_expression [2423,2447]",
      "parent": "expression_statement [4625,4683]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return: return [8753,8759]",
      "parent": "return_statement [8753,8771]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "member_expression [8735,8745]",
      "parent": "return_statement [8753,8771]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [11420,11425]",
      "parent": "variable_declaration_statement [10025,10043]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [11262,11267]",
      "parent": "variable_declaration_statement [10996,11014]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: c [11033,11034]",
      "parent": "return_statement [11026,11035]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "=: = [11669,11670]",
      "parent": "variable_declaration_statement [11659,11677]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [10628,10633]",
      "parent": "variable_declaration_statement [11659,11677]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [11032,11037]",
      "parent": "variable_declaration_statement [13021,13039]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: c [13145,13146]",
      "parent": "return_statement [13138,13147]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [15491,15507]",
      "parent": "variable_declaration_statement [15491,15508]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [15518,15537]",
      "parent": "variable_declaration_statement [15518,15607]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [15538,15539]",
      "parent": "variable_declaration_statement [15518,15607]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 [15540,15606]",
      "parent": "variable_declaration_statement [15518,15607]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "call_expression [16805,16878]",
      "parent": "expression_statement [16805,16879]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_tuple [16969,16985]",
      "parent": "variable_declaration_statement [16969,17024]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [16986,16987]",
      "parent": "variable_declaration_statement [16969,17024]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [16988,17023]",
      "parent": "variable_declaration_statement [16969,17024]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "return: return [18412,18418]",
      "parent": "return_statement [18412,18473]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [18419,18472]",
      "parent": "return_statement [18412,18473]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_tuple [19949,19988]",
      "parent": "variable_declaration_statement [19949,20028]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [19989,19990]",
      "parent": "variable_declaration_statement [19949,20028]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [19991,20027]",
      "parent": "variable_declaration_statement [19949,20028]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "if: if [20038,20040]",
      "parent": "if_statement [20038,20633]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20041,20042]",
      "parent": "if_statement [20038,20633]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: success [20042,20049]",
      "parent": "if_statement [20038,20633]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [20049,20050]",
      "parent": "if_statement [20038,20633]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [20051,20095]",
      "parent": "if_statement [20038,20633]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [20096,20100]",
      "parent": "if_statement [20038,20633]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "block_statement [20101,20633]",
      "parent": "if_statement [20038,20633]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "identifier: _totalSupply [23867,23879]",
      "parent": "return_statement [23860,23880]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "array_access [24043,24061]",
      "parent": "return_statement [24036,24062]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [24385,24427]",
      "parent": "expression_statement [24385,24428]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [24636,24663]",
      "parent": "return_statement [24629,24664]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [20512,20522]",
      "parent": "call_expression [24918,24957]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [20494,20502]",
      "parent": "call_expression [24918,24957]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "call_argument [20504,20510]",
      "parent": "call_expression [24918,24957]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "call_expression [27022,27151]",
      "parent": "expression_statement [27022,27152]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assignment_expression [27994,28085]",
      "parent": "expression_statement [27994,28086]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [28567,28632]",
      "parent": "expression_statement [28567,28633]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "assignment_expression [28757,28808]",
      "parent": "expression_statement [28757,28809]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [29357,29406]",
      "parent": "expression_statement [29357,29407]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [30232,30300]",
      "parent": "expression_statement [30232,30301]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "emit: emit [30360,30364]",
      "parent": "emit_statement [30360,30398]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: Approval [30365,30373]",
      "parent": "emit_statement [30360,30398]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30373,30374]",
      "parent": "emit_statement [30360,30398]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [10166,10171]",
      "parent": "emit_statement [30360,30398]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [30379,30380]",
      "parent": "emit_statement [30360,30398]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [30381,30388]",
      "parent": "emit_statement [30360,30398]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [30388,30389]",
      "parent": "emit_statement [30360,30398]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [30390,30396]",
      "parent": "emit_statement [30360,30398]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [30396,30397]",
      "parent": "emit_statement [30360,30398]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "user_defined_type [31927,31933]",
      "parent": "type_name [31927,31933]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": ",: , [21390,21391]",
      "parent": "call_expression [33490,33515]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "call_argument [21382,21390]",
      "parent": "call_expression [33490,33515]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: // get number of free slots [36139,36166]",
      "parent": "assembly_statement [36115,36966]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_variable_declaration [30953,30981]",
      "parent": "assembly_statement [36115,36966]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: // make sure there are enough slots [36224,36259]",
      "parent": "assembly_statement [36115,36966]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "yul_if_statement [36273,36345]",
      "parent": "assembly_statement [36115,36966]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "yul_if_statement [36359,36416]",
      "parent": "assembly_statement [36115,36966]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "yul_variable_declaration [31031,31067]",
      "parent": "assembly_statement [36115,36966]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "yul_variable_declaration [36480,36512]",
      "parent": "assembly_statement [36115,36966]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: // loop until amount is reached [36526,36557]",
      "parent": "assembly_statement [36115,36966]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "comment: // i = storage location [36571,36594]",
      "parent": "assembly_statement [36115,36966]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "yul_for_statement [36608,36858]",
      "parent": "assembly_statement [36115,36966]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "comment: // store new number of free slots [36872,36905]",
      "parent": "assembly_statement [36115,36966]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: // get amount of gas slots [37180,37206]",
      "parent": "assembly_statement [37156,38262]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // make sure there are enough slots [37321,37356]",
      "parent": "assembly_statement [37156,38262]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "yul_if_statement [37370,37442]",
      "parent": "assembly_statement [37156,38262]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "yul_if_statement [37456,37513]",
      "parent": "assembly_statement [37156,38262]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: // first sheep pointer [37527,37549]",
      "parent": "assembly_statement [37156,38262]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "yul_variable_declaration [29090,29184]",
      "parent": "assembly_statement [37156,38262]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: // last sheep pointer [37672,37693]",
      "parent": "assembly_statement [37156,38262]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "yul_variable_declaration [37707,37739]",
      "parent": "assembly_statement [37156,38262]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "yul_for_statement [37755,38140]",
      "parent": "assembly_statement [37156,38262]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [29200,29290]",
      "parent": "assembly_statement [37156,38262]",
      "at": 12
    },
    {
      "action": "update-node",
      "tree": "identifier: priorBalance [18802,18814]",
      "label": "length"
    },
    {
      "action": "update-node",
      "tree": "identifier: result [19005,19011]",
      "label": "length"
    },
    {
      "action": "insert-node",
      "tree": "assembly: assembly [38653,38661]",
      "parent": "assembly_statement [38653,38771]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [38662,38663]",
      "parent": "assembly_statement [38653,38771]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_assignment [38677,38760]",
      "parent": "assembly_statement [38653,38771]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [38770,38771]",
      "parent": "assembly_statement [38653,38771]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "call_expression [43890,43965]",
      "parent": "expression_statement [43890,43966]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [44083,44121]",
      "parent": "expression_statement [44083,44122]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return: return [45091,45097]",
      "parent": "return_statement [45091,45167]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [45098,45166]",
      "parent": "return_statement [45091,45167]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "memory: memory [46247,46253]",
      "parent": "parameter [46240,46253]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "memory: memory [46353,46359]",
      "parent": "parameter [46346,46359]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: keccak256 [2423,2432]",
      "label": "require"
    },
    {
      "action": "move-tree",
      "tree": "call_argument [9706,9732]",
      "parent": "call_expression [4625,4682]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [4659,4660]",
      "parent": "call_expression [4625,4682]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: length [4356,4362]",
      "label": "c"
    },
    {
      "action": "update-node",
      "tree": "identifier: assert [11432,11438]",
      "label": "require"
    },
    {
      "action": "insert-node",
      "tree": ",: , [10067,10068]",
      "parent": "call_expression [10053,10099]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [10069,10098]",
      "parent": "call_expression [10053,10099]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: assert [11234,11240]",
      "label": "require"
    },
    {
      "action": "insert-node",
      "tree": ",: , [10970,10971]",
      "parent": "call_expression [10956,10985]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [10972,10984]",
      "parent": "call_expression [10956,10985]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: oldValue [22540,22548]",
      "label": "c"
    },
    {
      "action": "update-node",
      "tree": "identifier: newValue [22607,22615]",
      "label": "c"
    },
    {
      "action": "update-node",
      "tree": "identifier: assert [10640,10646]",
      "label": "require"
    },
    {
      "action": "insert-node",
      "tree": ",: , [11705,11706]",
      "parent": "call_expression [11687,11743]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [11707,11742]",
      "parent": "call_expression [11687,11743]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: index [3908,3913]",
      "label": "c"
    },
    {
      "action": "move-tree",
      "tree": "type_name [1320,1327]",
      "parent": "variable_declaration [15491,15507]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: codehash [15499,15507]",
      "parent": "variable_declaration [15491,15507]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [3250,3257]",
      "parent": "variable_declaration [15518,15537]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: accountHash [15526,15537]",
      "parent": "variable_declaration [15518,15537]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [16805,16812]",
      "parent": "call_expression [16805,16878]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [16812,16813]",
      "parent": "call_expression [16805,16878]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [16813,16844]",
      "parent": "call_expression [16805,16878]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [16844,16845]",
      "parent": "call_expression [16805,16878]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [16846,16877]",
      "parent": "call_expression [16805,16878]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [16877,16878]",
      "parent": "call_expression [16805,16878]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "(: ( [16969,16970]",
      "parent": "variable_declaration_tuple [16969,16985]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [37669,37681]",
      "parent": "variable_declaration_tuple [16969,16985]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ",: , [16982,16983]",
      "parent": "variable_declaration_tuple [16969,16985]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [16984,16985]",
      "parent": "variable_declaration_tuple [16969,16985]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "identifier: _functionCallWithValue [18419,18441]",
      "parent": "call_expression [18419,18472]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18441,18442]",
      "parent": "call_expression [18419,18472]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18442,18448]",
      "parent": "call_expression [18419,18472]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [18448,18449]",
      "parent": "call_expression [18419,18472]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18450,18454]",
      "parent": "call_expression [18419,18472]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [18454,18455]",
      "parent": "call_expression [18419,18472]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [40580,40581]",
      "parent": "call_expression [18419,18472]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [18457,18458]",
      "parent": "call_expression [18419,18472]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18459,18471]",
      "parent": "call_expression [18419,18472]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "): ) [18471,18472]",
      "parent": "call_expression [18419,18472]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": ",: , [19527,19528]",
      "parent": "call_expression [19489,19570]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [19529,19569]",
      "parent": "call_expression [19489,19570]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19949,19950]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [38811,38823]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ",: , [19962,19963]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "variable_declaration [19964,19987]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [19987,19988]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [20101,20102]",
      "parent": "block_statement [20101,20633]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // Look for revert reason and bubble it up if present [20116,20169]",
      "parent": "block_statement [20101,20633]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "if_statement [20183,20622]",
      "parent": "block_statement [20101,20633]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [20632,20633]",
      "parent": "block_statement [20101,20633]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _approveAllArgs [20478,20493]",
      "label": "_approve"
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [27022,27030]",
      "parent": "call_expression [27022,27151]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [27030,27031]",
      "parent": "call_expression [27022,27151]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [27031,27043]",
      "parent": "call_expression [27022,27151]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [27043,27044]",
      "parent": "call_expression [27022,27151]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [27045,27052]",
      "parent": "call_expression [27022,27151]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [27052,27053]",
      "parent": "call_expression [27022,27151]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "call_argument [27054,27150]",
      "parent": "call_expression [27022,27151]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [27150,27151]",
      "parent": "call_expression [27022,27151]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [27797,27798]",
      "parent": "call_expression [27769,27839]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [41629,41642]",
      "parent": "call_expression [27769,27839]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "call_argument [41902,41915]",
      "parent": "call_expression [27850,27921]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "array_access [27994,28011]",
      "parent": "assignment_expression [27994,28085]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [28012,28013]",
      "parent": "assignment_expression [27994,28085]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_expression [41927,41990]",
      "parent": "assignment_expression [27994,28085]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [28567,28574]",
      "parent": "call_expression [28567,28632]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [28574,28575]",
      "parent": "call_expression [28567,28632]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [28575,28596]",
      "parent": "call_expression [28567,28632]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [28596,28597]",
      "parent": "call_expression [28567,28632]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [42622,42653]",
      "parent": "call_expression [28567,28632]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [28631,28632]",
      "parent": "call_expression [28567,28632]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "identifier: _beforeTokenTransfer [28645,28665]",
      "parent": "call_expression [28645,28694]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ",: , [28685,28686]",
      "parent": "call_expression [28645,28694]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [28687,28693]",
      "parent": "call_expression [28645,28694]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [40593,40605]",
      "label": "_totalSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: _account [40717,40725]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: oldValue [40739,40747]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: _beforeTokenTransfer [29357,29377]",
      "parent": "call_expression [29357,29406]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [29377,29378]",
      "parent": "call_expression [29357,29406]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [29378,29385]",
      "parent": "call_expression [29357,29406]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [29385,29386]",
      "parent": "call_expression [29357,29406]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [24630,24640]",
      "parent": "call_expression [29357,29406]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [29397,29398]",
      "parent": "call_expression [29357,29406]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [29399,29405]",
      "parent": "call_expression [29357,29406]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [29405,29406]",
      "parent": "call_expression [29357,29406]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "[: [ [4963,4964]",
      "parent": "array_access [29419,29437]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: originalTo [39033,39043]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [39045,39051]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [30232,30239]",
      "parent": "call_expression [30232,30300]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30239,30240]",
      "parent": "call_expression [30232,30300]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [30240,30261]",
      "parent": "call_expression [30232,30300]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [30261,30262]",
      "parent": "call_expression [30232,30300]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [42853,42884]",
      "parent": "call_expression [30232,30300]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [30299,30300]",
      "parent": "call_expression [30232,30300]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "payable: payable [31598,31605]",
      "parent": "primitive_type [31590,31605]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [32018,32031]",
      "parent": "call_expression [32002,32032]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _increaseApprovalAllArgs [21357,21381]",
      "label": "_burn"
    },
    {
      "action": "insert-node",
      "tree": "if: if [36273,36275]",
      "parent": "yul_if_statement [36273,36345]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [30998,31011]",
      "parent": "yul_if_statement [36273,36345]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_block [36295,36345]",
      "parent": "yul_if_statement [36273,36345]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "let: let [36480,36483]",
      "parent": "yul_variable_declaration [36480,36512]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_identifier [36484,36487]",
      "parent": "yul_variable_declaration [36480,36512]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ":=: := [36488,36490]",
      "parent": "yul_variable_declaration [36480,36512]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [28472,28495]",
      "parent": "yul_variable_declaration [36480,36512]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "for: for [36608,36611]",
      "parent": "yul_for_statement [36608,36858]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_block [36612,36630]",
      "parent": "yul_for_statement [36608,36858]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [28643,28659]",
      "parent": "yul_for_statement [36608,36858]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_block [31117,31322]",
      "parent": "yul_for_statement [36608,36858]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "yul_block [31687,31801]",
      "parent": "yul_for_statement [36608,36858]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [28688,28754]",
      "label": "0xfffff"
    },
    {
      "action": "insert-node",
      "tree": "if: if [37370,37372]",
      "parent": "yul_if_statement [37370,37442]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [29059,29072]",
      "parent": "yul_if_statement [37370,37442]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_block [37392,37442]",
      "parent": "yul_if_statement [37370,37442]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "let: let [37707,37710]",
      "parent": "yul_variable_declaration [37707,37739]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_identifier [37711,37714]",
      "parent": "yul_variable_declaration [37707,37739]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ":=: := [37715,37717]",
      "parent": "yul_variable_declaration [37707,37739]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [28557,28573]",
      "parent": "yul_variable_declaration [37707,37739]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "for: for [37755,37758]",
      "parent": "yul_for_statement [37755,38140]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_block [37759,37777]",
      "parent": "yul_for_statement [37755,38140]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [31670,31685]",
      "parent": "yul_for_statement [37755,38140]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "yul_block [37796,37858]",
      "parent": "yul_for_statement [37755,38140]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "yul_block [29073,29436]",
      "parent": "yul_for_statement [37755,38140]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [38677,38683]",
      "parent": "yul_assignment [38677,38760]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ":=: := [38684,38686]",
      "parent": "yul_assignment [38677,38760]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [38687,38760]",
      "parent": "yul_assignment [38677,38760]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: _mint [41500,41505]",
      "parent": "call_expression [41500,41522]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [43890,43897]",
      "parent": "call_expression [43890,43965]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [43897,43898]",
      "parent": "call_expression [43890,43965]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [43898,43919]",
      "parent": "call_expression [43890,43965]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [43919,43920]",
      "parent": "call_expression [43890,43965]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [38772,38799]",
      "parent": "call_expression [43890,43965]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [43964,43965]",
      "parent": "call_expression [43890,43965]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [44083,44097]",
      "parent": "call_expression [44083,44121]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [44097,44098]",
      "parent": "call_expression [44083,44121]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [17957,17962]",
      "parent": "call_expression [44083,44121]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [44103,44104]",
      "parent": "call_expression [44083,44121]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [44105,44112]",
      "parent": "call_expression [44083,44121]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [44112,44113]",
      "parent": "call_expression [44083,44121]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [44114,44120]",
      "parent": "call_expression [44083,44121]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [44120,44121]",
      "parent": "call_expression [44083,44121]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [35544,35583]",
      "parent": "binary_expression [45098,45166]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "&&: && [45142,45144]",
      "parent": "binary_expression [45098,45166]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [37506,37545]",
      "parent": "binary_expression [45098,45166]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [16813,16844]",
      "parent": "call_argument [16813,16844]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: hasHook [37674,37681]",
      "label": "success"
    },
    {
      "action": "update-node",
      "tree": "identifier: hasHook [38816,38823]",
      "label": "success"
    },
    {
      "action": "insert-node",
      "tree": "if: if [20183,20185]",
      "parent": "if_statement [20183,20622]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20186,20187]",
      "parent": "if_statement [20183,20622]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [20187,20208]",
      "parent": "if_statement [20183,20622]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [20208,20209]",
      "parent": "if_statement [20183,20622]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "block_statement [20210,20561]",
      "parent": "if_statement [20183,20622]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [20562,20566]",
      "parent": "if_statement [20183,20622]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [20567,20622]",
      "parent": "if_statement [20183,20622]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [24927,24939]",
      "parent": "call_argument [24927,24939]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [20494,20502]",
      "label": "spender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [20504,20510]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "call_expression [27054,27150]",
      "parent": "call_argument [27054,27150]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [28014,28035]",
      "parent": "call_expression [28014,28085]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [28575,28596]",
      "parent": "call_argument [28575,28596]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [39410,39416]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _attribute [4964,4974]",
      "label": "_balances"
    },
    {
      "action": "insert-node",
      "tree": "identifier: account [29429,29436]",
      "parent": "array_access [29419,29437]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [29440,29462]",
      "parent": "call_expression [29440,29508]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [32018,32031]",
      "parent": "call_argument [32018,32031]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [21382,21390]",
      "label": "amount"
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [36287,36293]",
      "parent": "yul_function_call [36276,36294]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [36295,36296]",
      "parent": "yul_block [36295,36345]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "yul_assignment [36314,36330]",
      "parent": "yul_block [36295,36345]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [36344,36345]",
      "parent": "yul_block [36295,36345]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [28379,28382]",
      "parent": "yul_function_call [36491,36512]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [29059,29061]",
      "parent": "yul_function_call [36631,36648]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [36644,36647]",
      "parent": "yul_function_call [36631,36648]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: // set storage location to zero [36731,36762]",
      "parent": "yul_block [36712,36858]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // this refunds 15,000 gas [36780,36806]",
      "parent": "yul_block [36712,36858]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [28643,28646]",
      "parent": "yul_function_call [36935,36954]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [36947,36953]",
      "parent": "yul_function_call [36935,36954]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "yul_evm_builtin [37373,37375]",
      "parent": "yul_function_call [37373,37391]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [37384,37390]",
      "parent": "yul_function_call [37373,37391]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [37392,37393]",
      "parent": "yul_block [37392,37442]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "yul_assignment [37411,37427]",
      "parent": "yul_block [37392,37442]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [37441,37442]",
      "parent": "yul_block [37392,37442]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [29764,29767]",
      "parent": "yul_function_call [37718,37739]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [37732,37738]",
      "parent": "yul_function_call [37718,37739]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [37789,37790]",
      "parent": "yul_function_call [37778,37795]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [37791,37794]",
      "parent": "yul_function_call [37778,37795]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [37796,37797]",
      "parent": "yul_block [37796,37858]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_assignment [30734,30767]",
      "parent": "yul_block [37796,37858]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [37857,37858]",
      "parent": "yul_block [37796,37858]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // load sheep address [37878,37899]",
      "parent": "yul_block [37859,38140]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // call selfdestruct on sheep [37963,37992]",
      "parent": "yul_block [37859,38140]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: // clear sheep address [38066,38088]",
      "parent": "yul_block [37859,38140]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [38243,38249]",
      "parent": "yul_function_call [38231,38250]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [32191,32196]",
      "parent": "yul_function_call [38687,38760]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38692,38693]",
      "parent": "yul_function_call [38687,38760]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [38693,38759]",
      "parent": "yul_function_call [38687,38760]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [38759,38760]",
      "parent": "yul_function_call [38687,38760]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "array_access [41327,41350]",
      "parent": "call_argument [41327,41350]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "unary_expression [41410,41439]",
      "parent": "call_argument [41410,41439]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _burner [25312,25319]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [25321,25327]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "identifier: _value [34998,35004]",
      "parent": "binary_expression [41932,41976]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "array_access [43070,43092]",
      "parent": "call_argument [43070,43092]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [43151,43176]",
      "parent": "call_argument [43151,43176]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [44407,44423]",
      "parent": "call_argument [44407,44423]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [45162,45164]",
      "parent": "binary_expression [45145,45166]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0 [45165,45166]",
      "parent": "binary_expression [45145,45166]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "member_expression [16813,16834]",
      "parent": "binary_expression [16813,16844]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [16835,16837]",
      "parent": "binary_expression [16813,16844]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [16838,16844]",
      "parent": "binary_expression [16813,16844]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "identifier: msg [39921,39924]",
      "parent": "member_expression [19497,19518]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [19519,19521]",
      "parent": "binary_expression [19497,19527]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: value [19522,19527]",
      "parent": "binary_expression [19497,19527]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "{: { [20210,20211]",
      "parent": "block_statement [20210,20561]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // The easiest way to bubble the revert reason is using memory via assembly [20229,20304]",
      "parent": "block_statement [20210,20561]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-inline-assembly [20324,20371]",
      "parent": "block_statement [20210,20561]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "assembly_statement [20389,20546]",
      "parent": "block_statement [20210,20561]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [20560,20561]",
      "parent": "block_statement [20210,20561]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [27054,27092]",
      "parent": "call_expression [27054,27150]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [27092,27093]",
      "parent": "call_expression [27054,27150]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [27093,27108]",
      "parent": "call_expression [27054,27150]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [27108,27109]",
      "parent": "call_expression [27054,27150]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [5087,5089]",
      "parent": "call_expression [27054,27150]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [27149,27150]",
      "parent": "call_expression [27054,27150]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [9150,9158]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [38753,38756]",
      "label": "recipient"
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [28036,28042]",
      "parent": "call_argument [28036,28042]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: account [28575,28582]",
      "parent": "binary_expression [28575,28596]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [28583,28585]",
      "parent": "binary_expression [28575,28596]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [10235,10245]",
      "parent": "binary_expression [28575,28596]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [40608,40620]",
      "label": "_totalSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: sub [40621,40624]",
      "label": "add"
    },
    {
      "action": "update-node",
      "tree": "identifier: oldValue [40625,40633]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: account [29285,29292]",
      "parent": "binary_expression [29285,29306]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [29293,29295]",
      "parent": "binary_expression [29285,29306]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "type_cast_expression [29296,29306]",
      "parent": "binary_expression [29285,29306]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [4992,4998]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: owner [30161,30166]",
      "parent": "binary_expression [30161,30180]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [30167,30169]",
      "parent": "binary_expression [30161,30180]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "type_cast_expression [30170,30180]",
      "parent": "binary_expression [30161,30180]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [41089,41096]",
      "parent": "type_cast_expression [32018,32031]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [32025,32026]",
      "parent": "type_cast_expression [32018,32031]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [17671,17675]",
      "parent": "type_cast_expression [32018,32031]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [32030,32031]",
      "parent": "type_cast_expression [32018,32031]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [34751,34757]",
      "parent": "binary_expression [34751,34768]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [34758,34760]",
      "parent": "binary_expression [34751,34768]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: burnMin [34761,34768]",
      "parent": "binary_expression [34751,34768]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [34837,34843]",
      "parent": "binary_expression [34837,34854]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "<=: <= [34844,34846]",
      "parent": "binary_expression [34837,34854]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: burnMax [34847,34854]",
      "parent": "binary_expression [34837,34854]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "lt: lt [36276,36278]",
      "parent": "yul_evm_builtin [36276,36278]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [36314,36320]",
      "parent": "yul_assignment [36314,36330]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ":=: := [36321,36323]",
      "parent": "yul_assignment [36314,36330]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "yul_path [31571,31577]",
      "parent": "yul_assignment [36314,36330]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [37411,37417]",
      "parent": "yul_assignment [37411,37427]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ":=: := [37418,37420]",
      "parent": "yul_assignment [37411,37427]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "yul_path [31771,31777]",
      "parent": "yul_assignment [37411,37427]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "lt: lt [37778,37780]",
      "parent": "yul_evm_builtin [37778,37780]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_path [31106,31114]",
      "parent": "yul_assignment [37815,37843]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [30748,30763]",
      "parent": "yul_assignment [37815,37843]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [41097,41109]",
      "parent": "binary_expression [41932,41976]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [34998,35004]",
      "label": "REDEMPTION_ADDRESS_COUNT"
    },
    {
      "action": "insert-tree",
      "tree": "array_access [43984,44007]",
      "parent": "binary_expression [43984,44022]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "||: || [44008,44010]",
      "parent": "binary_expression [43984,44022]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [44011,44022]",
      "parent": "binary_expression [43984,44022]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [41179,41207]",
      "parent": "member_expression [16813,16834]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [16826,16827]",
      "parent": "member_expression [16813,16834]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: balance [16827,16834]",
      "parent": "member_expression [16813,16834]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [39935,39952]",
      "parent": "member_expression [19497,19518]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: msg [39921,39924]",
      "label": "balance"
    },
    {
      "action": "insert-node",
      "tree": "assembly: assembly [20389,20397]",
      "parent": "assembly_statement [20389,20546]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [20398,20399]",
      "parent": "assembly_statement [20389,20546]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "yul_variable_declaration [20421,20461]",
      "parent": "assembly_statement [20389,20546]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [20483,20527]",
      "parent": "assembly_statement [20389,20546]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [20545,20546]",
      "parent": "assembly_statement [20389,20546]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: sheep [28489,28494]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [30744,30747]",
      "parent": "yul_function_call [37827,37843]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ",: , [37839,37840]",
      "parent": "yul_function_call [37827,37843]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "yul_decimal_number: 1 [37841,37842]",
      "parent": "yul_function_call [37827,37843]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [35552,35555]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [37514,37517]",
      "label": "account"
    },
    {
      "action": "move-tree",
      "tree": "call_argument [7189,7193]",
      "parent": "type_cast_expression [16813,16826]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "yul_evm_builtin [20483,20489]",
      "parent": "yul_function_call [20483,20527]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20489,20490]",
      "parent": "yul_function_call [20483,20527]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [20490,20509]",
      "parent": "yul_function_call [20483,20527]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [20509,20510]",
      "parent": "yul_function_call [20483,20527]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [20511,20526]",
      "parent": "yul_function_call [20483,20527]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [20526,20527]",
      "parent": "yul_function_call [20483,20527]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38022,38023]",
      "parent": "yul_function_call [38019,38024]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "): ) [38023,38024]",
      "parent": "yul_function_call [38019,38024]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [41105,41108]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: registry [39943,39951]",
      "label": "this"
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [28756,28759]",
      "parent": "yul_function_call [20490,20509]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20493,20494]",
      "parent": "yul_function_call [20490,20509]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_decimal_number: 32 [20494,20496]",
      "parent": "yul_function_call [20490,20509]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [20496,20497]",
      "parent": "yul_function_call [20490,20509]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [20498,20508]",
      "parent": "yul_function_call [20490,20509]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [20508,20509]",
      "parent": "yul_function_call [20490,20509]",
      "at": 5
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [71,79]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: TrueCoinReceiver [80,96]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [97,98]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [104,112]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: tokenFallback [113,126]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [126,127]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [128,140]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [140,141]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [142,155]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [156,157]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [104,167]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [169,170]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [97,170]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [71,170]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13307,13340]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13346,13383]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13584,13609]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13679,13711]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [11676,11682]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [6489,6490]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [6490,6491]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [12333,12339]"
    },
    {
      "action": "delete-tree",
      "tree": "struct_member [1453,1467]"
    },
    {
      "action": "delete-tree",
      "tree": "struct_member [1505,1523]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [378,386]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ERC20Basic [387,397]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [378,672]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [16515,16609]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [9698,9705]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9705,9706]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9732,9733]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [9698,9733]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [835,843]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ERC20 [844,849]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [850,852]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [853,863]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [864,865]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [1198,1199]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [864,1199]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [835,1199]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [1372,1380]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Registry [1381,1389]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [1390,1391]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // never remove any storage variables [1542,1579]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [1585,1606]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [1612,1640]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [1646,1663]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Stores arbitrary attributes for users. An example use case is an ERC20 [1671,1744]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // token that requires its users to go through a KYC/AML check - in this case [1750,1827]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate [1833,1914]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // that account can use the token. This mapping stores that value (1, in the [1920,1996]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // example) as well as which validator last set the value and at what time, [2002,2077]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // so that e.g. the check can be renewed at appropriate intervals. [2083,2149]"
    },
    {
      "action": "delete-node",
      "tree": "mapping: mapping [2155,2162]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2162,2163]"
    },
    {
      "action": "delete-node",
      "tree": "=>: => [2171,2173]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [2174,2207]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [2207,2208]"
    },
    {
      "action": "delete-node",
      "tree": "type_name [2155,2208]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: attributes [2209,2219]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [2155,2220]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // The logic governing who is allowed to set what attributes is abstracted as [2226,2303]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // this accessManager, so that it may be replaced by the owner as needed [2309,2381]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [2387,2394]"
    },
    {
      "action": "delete-node",
      "tree": "constant: constant [2395,2403]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: WRITE_PERMISSION [2404,2420]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [2421,2422]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [2387,2448]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [2454,2502]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [2510,2619]"
    },
    {
      "action": "delete-node",
      "tree": "event: event [2625,2630]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: SetAttribute [2631,2643]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2643,2644]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [2644,2663]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2663,2664]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [2665,2682]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2682,2683]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: value [2692,2697]"
    },
    {
      "action": "delete-node",
      "tree": "event_paramater [2684,2697]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2697,2698]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [2699,2712]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2712,2713]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [2714,2739]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [2739,2740]"
    },
    {
      "action": "delete-node",
      "tree": "event_definition [2625,2741]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [2747,2820]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [2826,2911]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [2917,3001]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Allows a write if either a) the writer is that Registry's owner, or [3009,3079]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // b) the writer is writing to attribute foo and that writer already has [3085,3157]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // the canWriteTo-foo attribute set (in that same Registry) [3163,3222]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [3228,3236]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: confirmWrite [3237,3249]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [3249,3250]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _attribute [3258,3268]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [3250,3268]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3268,3269]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [3270,3284]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [3284,3285]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [3315,3424]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [3228,3424]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Writes are allowed only if the accessManager approves [3432,3488]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [3494,3502]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setAttribute [3503,3515]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [3515,3516]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3528,3529]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [3530,3548]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3548,3549]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3564,3565]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [3566,3580]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [3580,3581]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [3582,3588]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [3589,3590]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [3600,3646]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [3656,3746]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [3756,3820]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [3832,3890]"
    },
    {
      "action": "delete-tree",
      "tree": "while_statement [3941,4047]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [4053,4054]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [3589,4054]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [3494,4054]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [4062,4070]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subscribe [4071,4080]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [4080,4081]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4081,4099]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4099,4100]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4101,4122]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [4122,4123]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [4133,4142]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [4143,4253]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [4062,4253]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [4261,4269]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: unsubscribe [4270,4281]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [4281,4282]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4282,4300]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4300,4301]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [4316,4317]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [4327,4336]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [4337,4338]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [4406,4431]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [4441,4508]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [4518,4588]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [4598,4642]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [4648,4649]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [4337,4649]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [4261,4649]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [4657,4665]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subscriberCount [4666,4681]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [4681,4682]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4682,4700]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [4700,4701]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [4702,4708]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [4709,4713]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [4732,4788]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [4657,4788]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [4796,4804]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setAttributeValue [4805,4822]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [4822,4823]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4835,4836]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4837,4855]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4855,4856]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [4871,4872]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [4873,4879]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [4880,4881]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [4891,4937]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [5043,5047]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: SetAttribute [5048,5060]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5060,5061]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5061,5065]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5065,5066]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5067,5077]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5077,5078]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5079,5085]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5085,5086]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5089,5090]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5091,5101]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [5101,5102]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [5043,5103]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [5113,5171]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [5181,5212]"
    },
    {
      "action": "delete-tree",
      "tree": "while_statement [5222,5328]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [5334,5335]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [4880,5335]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [4796,5335]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Returns true if the uint256 value stored for this attribute is non-zero [5343,5417]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [5423,5431]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: hasAttribute [5432,5444]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5444,5445]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5445,5457]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5457,5458]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5459,5477]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [5477,5478]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [5486,5490]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [5506,5571]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [5423,5571]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Returns the exact value of the attribute, as well as its metadata [5581,5649]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [5655,5917]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [5925,5933]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: getAttributeValue [5934,5951]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5951,5952]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5952,5964]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5964,5965]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5966,5984]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [5984,5985]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [5986,5992]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [5993,5997]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [6016,6076]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [5925,6076]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [6084,6243]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [6251,6259]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: getAttributeTimestamp [6260,6281]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [6281,6282]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [6282,6294]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [6294,6295]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [6296,6314]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6314,6315]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [6316,6322]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [6323,6327]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [6346,6410]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [6251,6410]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [6418,6426]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: syncAttribute [6427,6440]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [6440,6441]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [6441,6459]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [6459,6460]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [6480,6481]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addresses [6492,6502]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [6482,6502]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6502,6503]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [6513,6953]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [6418,6953]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [6961,6969]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reclaimEther [6970,6982]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [6982,6983]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [6983,6994]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6994,6995]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [7005,7014]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [7015,7069]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [6961,7069]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [7077,7085]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reclaimToken [7086,7098]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [7098,7099]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [7099,7110]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [7110,7111]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [7112,7123]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [7123,7124]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [7134,7143]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [7144,7145]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [7155,7170]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [7171,7172]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [7173,7188]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [7188,7189]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [7193,7194]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [7173,7194]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [7155,7195]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [7205,7234]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [7240,7241]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [7144,7241]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [7077,7241]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [7248,7325]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [7331,7425]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [7433,7526]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [7532,7626]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [7634,7776]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [7782,7886]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [7894,7975]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [7981,8163]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [8165,8166]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [1390,8166]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [1372,8166]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [901,902]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [920,926]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [492,498]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [1092,1098]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [426,432]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [544,554]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [556,569]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [571,577]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [1271,1272]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [1278,1286]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: syncAttributeValue [1287,1305]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1305,1306]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1318,1319]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _attribute [1328,1338]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [1320,1338]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1338,1339]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1354,1355]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [1278,1365]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [1367,1368]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [1271,1368]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [8431,8439]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Ownable [8440,8447]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [8448,8449]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [8453,8474]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [8482,8566]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev The Ownable constructor sets the original `owner` of the contract to the sender    * account.    */ [8574,8690]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Throws if called by any account other than the owner.    */ [8757,8832]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [8836,8906]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Allows the current owner to transfer control of the contract to a newOwner.    * @param newOwner The address to transfer ownership to.    */ [8912,9069]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [9073,9081]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferOwnership [9082,9099]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9099,9100]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9116,9117]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [9118,9124]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [9125,9134]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [9135,9136]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [9180,9223]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [9229,9246]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [9250,9251]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [9135,9251]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [9073,9251]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [9255,9256]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [8448,9256]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [8431,9256]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [8713,8719]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: owner [8727,8732]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [8733,8734]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [8727,8745]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [8727,8746]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [9499,9507]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Claimable [9508,9517]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [9518,9520]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [9521,9528]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [9529,9530]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [9534,9562]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Modifier throws if called by any account other than the pendingOwner.    */ [9568,9659]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Allows the current owner to set the pendingOwner address.    * @param newOwner The address to transfer ownership to.    */ [9753,9892]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [9896,9904]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferOwnership [9905,9922]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9922,9923]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9939,9940]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [9941,9950]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [9951,9957]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [9958,9994]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [9896,9994]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Allows the pendingOwner address to finalize the transfer.    */ [10000,10079]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [10083,10091]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: claimOwnership [10092,10106]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [10106,10107]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [10107,10108]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [10109,10125]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [10126,10132]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [10133,10134]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [10140,10144]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: OwnershipTransferred [10145,10165]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [10165,10166]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [10171,10172]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [10173,10185]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [10185,10186]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [10140,10187]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [10193,10214]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [10250,10251]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [10133,10251]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [10083,10251]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [10253,10254]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [9529,10254]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [9499,10254]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [4365,4395]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: c [11416,11417]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [11418,11419]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [11416,11425]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [11416,11426]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [22551,22588]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: c [10624,10625]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [10626,10627]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [10624,10633]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [10624,10634]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [3916,3930]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // assert(b > 0); // Solidity automatically throws when dividing by 0 [10840,10909]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // uint256 c = a / b; [10915,10936]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41187,41206]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: sender [39925,39931]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [39932,39934]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [39962,39964]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [11570,11578]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: BalanceSheet [11579,11591]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [11592,11594]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [11595,11604]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [11605,11606]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [11612,11639]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [11701,11709]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: addBalance [11710,11720]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11720,11721]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [11734,11735]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11750,11751]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [11752,11758]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [11759,11768]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [11769,11835]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [11701,11835]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [11843,11851]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subBalance [11852,11862]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11862,11863]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [11876,11877]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11892,11893]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [11901,11910]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [11911,11977]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [11843,11977]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [11985,11993]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setBalance [11994,12004]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [12004,12005]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12018,12019]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [12034,12035]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [12043,12052]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [12053,12097]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [11985,12097]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [12099,12100]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [11605,12100]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [11570,12100]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [18629,18641]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [18693,18709]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [18513,18525]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [18575,18592]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12834,12835]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [12859,12868]"
    },
    {
      "action": "delete-tree",
      "tree": "assignment_expression [12880,12924]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22932,22948]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [22998,23027]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [20411,20427]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [20512,20522]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [41927,41934]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [41936,41974]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40386,40402]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40404,40410]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: pendingOwner [10220,10232]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [10233,10234]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [10220,10245]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [39362,39397]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [40507,40548]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setBalance [40558,40569]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40569,40570]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [40570,40578]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40578,40579]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40581,40582]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [40558,40582]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [40645,40693]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [42744,42777]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [42778,42780]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [42781,42782]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [4947,4963]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: AttributeData [4978,4991]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5002,5003]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5004,5014]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5014,5015]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5016,5031]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [42372,42403]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [42404,42406]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [42407,42408]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [1017,1023]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [12204,12212]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: AllowanceSheet [12213,12227]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [12228,12230]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [12231,12240]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [12241,12242]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [12248,12275]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [12360,12368]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: addAllowance [12369,12381]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [12381,12382]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12402,12403]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _spender [12412,12420]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [12404,12420]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12420,12421]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _value [12430,12436]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [12422,12436]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [12436,12437]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [12438,12444]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [12445,12454]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [12455,12559]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [12360,12559]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [12567,12575]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subAllowance [12576,12588]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [12588,12589]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12609,12610]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12627,12628]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [12629,12643]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [12643,12644]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [12652,12661]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [12662,12766]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [12567,12766]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [12934,12935]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [12241,12935]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [12204,12935]"
    },
    {
      "action": "delete-tree",
      "tree": "user_defined_type [17221,17229]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**       *@dev allows owner of the contract to gain ownership of any contract that the contract currently owns     */ [17731,17851]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [17857,17865]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reclaimContract [17866,17881]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [17881,17882]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [17882,17898]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [17898,17899]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [17919,17920]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [17930,17956]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [17956,17957]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [17962,17963]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [17930,17963]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [17930,17964]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [17970,17971]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [17919,17971]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [17857,17971]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [25004,25024]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21288,21304]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21304,21305]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21306,21322]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [21392,21403]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21403,21404]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //in any particular cap for the minimum) [25725,25765]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40951,40964]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40966,40977]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40979,40987]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [40988,40992]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [40993,41000]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41001,41002]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41002,41009]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41009,41010]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41015,41016]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [40993,41016]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [41028,41055]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [41056,41057]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [41058,41088]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [41088,41089]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41096,41097]"
    },
    {
      "action": "delete-node",
      "tree": ">>: >> [41110,41112]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 20 [41113,41115]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [41097,41115]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [41097,41115]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41115,41116]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [41089,41116]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [41116,41117]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [41058,41117]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [41028,41118]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [41128,41130]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41131,41132]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [41132,41156]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41156,41157]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [41158,41159]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _to [41173,41176]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [41177,41178]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [41173,41207]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [41173,41208]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [41218,41219]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [41158,41219]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [41128,41219]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [41310,41343]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [41344,41346]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [41347,41348]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [41238,41269]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [41270,41272]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [41273,41274]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [41375,41434]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [26301,26303]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [26304,26316]"
    },
    {
      "action": "delete-node",
      "tree": "gt: gt [30998,31000]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [31009,31010]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [28472,28478]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 2 [28657,28658]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [31140,31159]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [31231,31250]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [31272,31303]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31751,31757]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31757,31758]"
    },
    {
      "action": "delete-node",
      "tree": "yul_hex_number: 0xfffff [31758,31765]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31765,31766]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31767,31770]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31770,31771]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31777,31778]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [31779,31780]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31780,31781]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31767,31781]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31781,31782]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31751,31782]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [28019,28109]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [28123,28203]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [28217,28248]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [28262,28349]"
    },
    {
      "action": "delete-node",
      "tree": "let: let [28363,28366]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_identifier [28367,28375]"
    },
    {
      "action": "delete-node",
      "tree": ":=: := [28376,28378]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [28382,28383]"
    },
    {
      "action": "delete-node",
      "tree": "yul_hex_number: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe [28383,28449]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [28449,28450]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [28451,28457]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [28457,28458]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [28379,28458]"
    },
    {
      "action": "delete-node",
      "tree": "yul_variable_declaration [28363,28458]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [28509,28536]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [28550,28556]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [28556,28557]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [28573,28574]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [28575,28580]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [28580,28581]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [28550,28581]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [28595,28622]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [28636,28642]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [28642,28643]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [28659,28660]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [28661,28666]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [28666,28667]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [28636,28667]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 3 [28768,28769]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 0 [29070,29071]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [28557,28560]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [28571,28572]"
    },
    {
      "action": "delete-node",
      "tree": "sload: sload [31670,31675]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [30734,30740]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [30748,30753]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [30747,30748]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [30763,30764]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [30765,30766]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [30766,30767]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [30744,30767]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [29287,29288]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [29056,29058]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [29056,29436]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [29462,29470]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: sponsorGas [29471,29481]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [29481,29482]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [29482,29483]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [29493,29494]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [29504,29558]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [29568,29593]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [29603,29611]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [29612,29613]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [29627,29655]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [29669,29697]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29711,29734]"
    },
    {
      "action": "delete-node",
      "tree": "let: let [29748,29751]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_identifier [29752,29760]"
    },
    {
      "action": "delete-node",
      "tree": ":=: := [29761,29763]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [29767,29768]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [29768,29774]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [29774,29775]"
    },
    {
      "action": "delete-node",
      "tree": "yul_hex_number: 0x100000 [29776,29784]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [29784,29785]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [29764,29785]"
    },
    {
      "action": "delete-node",
      "tree": "yul_variable_declaration [29748,29785]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29799,29828]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [29842,29870]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29884,29913]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [29927,29955]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29969,29998]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [30012,30040]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30054,30083]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [30097,30125]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30139,30168]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [30182,30210]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30224,30253]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [30267,30295]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30309,30338]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [30352,30380]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30394,30423]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [30437,30465]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30479,30508]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [30518,30519]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [29603,30519]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [30525,30526]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [29493,30526]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [29462,30526]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [30534,30542]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: minimumGasPriceForRefund [30543,30567]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [30567,30568]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [30568,30569]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [30570,30576]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [30577,30581]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [30582,30606]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30607,30608]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [30618,30626]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30627,30628]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [30642,30670]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [30684,30720]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [30777,30778]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [30618,30778]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [30784,30785]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [30607,30785]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [30534,30785]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [30886,30894]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: gasRefund30 [30895,30906]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [30906,30907]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [30907,30908]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30918,30919]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [30929,30937]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30938,30939]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [30995,30997]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31012,31013]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [31085,31087]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31088,31090]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31090,31091]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [31091,31099]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31099,31100]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31100,31105]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31105,31106]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31114,31115]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31100,31115]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31115,31116]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31088,31116]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [31085,31322]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31336,31337]"
    },
    {
      "action": "delete-node",
      "tree": "yul_block [31012,31337]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [30995,31337]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31347,31348]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [30929,31348]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31354,31355]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [30918,31355]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [30886,31355]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [31456,31464]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: gasRefund15 [31465,31476]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31476,31477]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31477,31478]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31488,31489]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [31499,31507]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31508,31509]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [31523,31551]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [31565,31567]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31568,31570]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31570,31571]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31577,31578]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [31579,31580]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31580,31581]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31568,31581]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31582,31583]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [31601,31637]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [31655,31657]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31658,31660]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31660,31661]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [31661,31669]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31669,31670]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31685,31686]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31658,31686]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [31655,31801]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31815,31816]"
    },
    {
      "action": "delete-node",
      "tree": "yul_block [31582,31816]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [31565,31816]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31826,31827]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [31499,31827]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31833,31834]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [31488,31834]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [31456,31834]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**       *@dev Return the remaining sponsored gas slots     */ [31842,31907]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [31959,31980]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [32066,32074]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: gasRefundPool [32075,32088]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [32088,32089]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [32089,32103]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [32103,32104]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [32117,32143]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [32144,32145]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [32155,32163]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [32164,32165]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [32179,32187]"
    },
    {
      "action": "delete-node",
      "tree": ":=: := [32188,32190]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [32196,32197]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [32197,32218]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [32218,32219]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [32191,32219]"
    },
    {
      "action": "delete-node",
      "tree": "yul_assignment [32179,32219]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [32229,32230]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [32155,32230]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [32236,32237]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [32144,32237]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [32066,32237]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [32245,32332]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [32340,32608]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [39513,39520]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burner [25124,25131]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [25116,25131]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [25133,25147]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [25177,25194]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [25238,25255]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [25293,25311]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burnMin [35008,35015]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [34121,34138]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [35059,35076]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _value [34182,34188]"
    },
    {
      "action": "delete-node",
      "tree": "<=: <= [34189,34191]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burnMax [34192,34199]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [40440,40464]"
    },
    {
      "action": "delete-node",
      "tree": "<: < [37519,37520]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: REDEMPTION_ADDRESS_COUNT [37521,37545]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [18169,18177]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularBasicToken [18178,18195]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [18196,18198]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [18199,18207]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [18208,18209]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [18215,18242]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [18250,18322]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev total number of tokens in existence     */ [18330,18389]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [18395,18403]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: totalSupply [18404,18415]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [18415,18416]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [18416,18417]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [18418,18424]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [18448,18486]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [18395,18486]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [18725,18733]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addBalance [18734,18745]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [18745,18746]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [18746,18758]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [18758,18759]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [18774,18775]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [18816,18920]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [18725,18920]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [18928,18936]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subBalance [18937,18948]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [18948,18949]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [18949,18961]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [18961,18962]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [18977,18978]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [19013,19105]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [18928,19105]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [19113,19121]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setBalance [19122,19133]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [19133,19134]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [19146,19147]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [19162,19163]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [19173,19217]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [19113,19217]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [19219,19220]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [18208,19220]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [18169,19220]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [19558,19566]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularStandardToken [19567,19587]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [19588,19590]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [19591,19608]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [19609,19610]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [19655,19733]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.      *      * Beware that changing an allowance with this method brings the risk that someone may use both the old      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729      * @param _spender The address which will spend the funds.      * @param _value The amount of tokens to be spent.      */ [19745,20388]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [20561,20569]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _approveAllArgs [20570,20585]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [20585,20586]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [20586,20602]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [20602,20603]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [20604,20618]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [20618,20619]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _tokenHolder [20628,20640]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [20620,20640]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [20640,20641]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [20651,20771]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [20561,20771]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Increase the amount of tokens that an owner allowed to a spender.      *      * approve should be called when allowed[_spender] == 0. To increment      * allowed value is better to use this function to avoid 2 calls (and wait until      * the first transaction is mined)      * From MonolithDAO Token.sol      * @param _spender The address which will spend the funds.      * @param _addedValue The amount of tokens to increase the allowance by.      */ [20779,21256]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [21454,21462]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _increaseApprovalAllArgs [21463,21487]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [21487,21488]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21488,21504]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21504,21505]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21525,21526]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21527,21547]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [21547,21548]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [21558,21714]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [21454,21714]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Decrease the amount of tokens that an owner allowed to a spender.      *      * approve should be called when allowed[_spender] == 0. To decrement      * allowed value is better to use this function to avoid 2 calls (and wait until      * the first transaction is mined)      * From MonolithDAO Token.sol      * @param _spender The address which will spend the funds.      * @param _subtractedValue The amount of tokens to decrease the allowance by.      */ [21722,22204]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [22210,22218]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: decreaseApproval [22219,22235]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [22235,22236]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22252,22253]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22254,22275]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [22275,22276]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [22277,22283]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [22299,22300]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [22310,22375]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [22403,22404]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [22299,22404]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [22210,22404]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [22412,22420]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _decreaseApprovalAllArgs [22421,22445]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [22445,22446]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22446,22462]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22462,22463]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22488,22489]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22490,22510]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [22510,22511]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [22521,22522]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [22626,22769]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [22779,22827]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [22837,22884]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [22890,22891]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [22521,22891]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [22412,22891]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23043,23051]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _getAllowance [23052,23065]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23065,23066]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23078,23079]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23096,23097]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [23112,23135]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [23136,23188]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23043,23188]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23196,23204]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addAllowance [23205,23218]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23218,23219]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23231,23232]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23249,23250]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23265,23266]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [23276,23362]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23196,23362]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23370,23378]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subAllowance [23379,23392]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23392,23393]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23405,23406]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23423,23424]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23439,23440]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [23450,23480]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [23480,23604]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23370,23604]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23612,23620]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setAllowance [23621,23634]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23634,23635]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23647,23648]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23665,23666]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23681,23682]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [23692,23746]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23612,23746]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [23748,23749]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [19609,23749]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [19558,23749]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/modularERC20/ModularBurnableToken.sol [23753,23809]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Burnable Token  * @dev Token that can be irreversibly burned (destroyed).  */ [23813,23907]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [23909,23917]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularBurnableToken [23918,23938]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [23939,23941]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [23942,23962]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [23963,23964]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [24119,24127]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burn [24128,24132]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [24132,24133]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [24147,24148]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [24158,24225]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [24119,24225]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [24233,24241]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnAllArgs [24242,24254]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [24254,24255]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [24268,24269]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [24284,24285]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [24295,24296]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // no need to require value <= totalSupply, since that would imply the [24306,24376]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sender's balance is greater than the totalSupply, which *should* be an assertion failure [24386,24477]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [24487,24514]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [24524,24564]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [24574,24599]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [24609,24613]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Transfer [24614,24622]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [24622,24623]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [24623,24628]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [24628,24629]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [24640,24641]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [24642,24648]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [24648,24649]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [24609,24650]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [24656,24657]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [24295,24657]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [24233,24657]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [24659,24660]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [23963,24660]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [23909,24660]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/BurnableTokenWithBounds.sol [24664,24710]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Burnable Token WithBounds  * @dev Burning functions as redeeming money from the system. The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */ [24714,24966]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/GasRefundToken.sol [25992,26029]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**   @title Gas Refund Token Allow any user to sponsor gas refunds for transfer and mints. Utilitzes the gas refund mechanism in EVM Each time an non-empty storage slot is set to 0, evm refund 15,000 to the sender of the transaction. */ [26033,26275]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/CompliantDepositTokenWithHook.sol [32615,32667]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [32671,32679]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: CompliantDepositTokenWithHook [32680,32709]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [32710,32712]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [32727,32728]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [32729,32742]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [32742,32743]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [32767,32768]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [32769,32783]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [32784,32785]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [32793,32858]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [32864,32921]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [32986,33036]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [33044,33052]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: canBurn [33053,33060]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [33060,33061]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [33061,33062]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [33063,33071]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [33077,33094]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [33044,33095]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev transfer token for a specified address     * @param _to The address to transfer to.     * @param _value The amount to be transferred.     */ [33103,33262]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [33268,33276]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transfer [33277,33285]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [33285,33286]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33286,33297]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33297,33298]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33299,33313]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [33313,33314]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [33337,33338]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [33348,33390]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [33418,33419]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [33337,33419]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [33268,33419]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfer tokens from one address to another      * @param _from address The address which you want to send tokens from      * @param _to address The address which you want to transfer to      * @param _value uint256 the amount of tokens to be transferred      */ [33427,33710]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [33716,33724]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferFrom [33725,33737]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [33737,33738]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _from [33746,33751]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [33738,33751]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33751,33752]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33753,33764]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33764,33765]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33766,33780]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [33780,33781]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [33804,33805]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [33815,33868]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [33896,33897]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [33804,33897]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [33716,33897]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [33905,33913]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnFromAllowanceAllArgs [33914,33939]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [33939,33940]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33940,33953]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33953,33954]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33955,33966]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33966,33967]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33968,33982]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33982,33983]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33984,34000]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [34000,34001]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [34011,34012]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34022,34068]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34078,34103]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [34237,34632]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [34642,34676]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34686,34726]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [34736,34759]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [34769,34808]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [34814,34815]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [34011,34815]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [33905,34815]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [34823,34831]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnFromAllArgs [34832,34848]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [34848,34849]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34849,34862]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [34862,34863]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34864,34875]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [34875,34876]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34877,34891]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [34891,34892]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [34893,34901]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [34902,34903]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34913,34945]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34955,34980]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [35114,35237]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [35247,35281]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [35291,35331]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [35341,35364]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [35374,35413]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [35419,35420]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [34902,35420]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [34823,35420]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [35428,35436]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferFromAllArgs [35437,35457]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [35457,35458]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35458,35471]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35471,35472]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35473,35484]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35484,35485]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35486,35500]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35500,35501]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35502,35518]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [35518,35519]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [35529,35530]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [35540,35542]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [35543,35544]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [35583,35584]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [35585,35705]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [35706,35710]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [35711,35712]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: hasHook [35731,35738]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [35726,35738]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [35726,35739]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [35753,35778]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [35792,35855]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [35869,36946]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [36960,37001]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [37015,37386]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [37396,37397]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [35711,37397]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [35540,37397]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [37403,37404]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [35529,37404]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [35428,37404]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [37412,37420]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferAllArgs [37421,37437]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [37437,37438]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37438,37451]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37451,37452]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37453,37464]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37464,37465]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37466,37480]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [37480,37481]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [37491,37492]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [37502,37504]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [37505,37506]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [37545,37546]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [37547,37648]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [37649,37653]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [37654,37655]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [37669,37682]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [37696,37712]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [37726,37779]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [37793,38220]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [38234,38268]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [38282,38648]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [38658,38659]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [37654,38659]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [37502,38659]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [38665,38666]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [37491,38666]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [37412,38666]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [38674,38682]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: mint [38683,38687]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [38687,38688]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38688,38699]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38699,38700]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38701,38715]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [38715,38716]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [38717,38723]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [38734,38735]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [38811,38824]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [38834,38859]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [38869,38907]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [38917,38957]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [38967,38997]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [39063,39151]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [39161,39186]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [39196,39198]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39199,39200]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: hasHook [39200,39207]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39207,39208]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [39209,39210]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [39224,39226]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39227,39228]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [39228,39245]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39245,39246]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [39247,39337]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [39338,39342]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [39343,39344]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [39432,39433]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [39343,39433]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [39224,39433]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [39443,39444]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [39209,39444]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [39196,39444]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [39450,39451]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [38734,39451]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [38674,39451]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [39536,39580]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Point to the registry that contains all compliance related data     @param _registry The address of the registry instance     */ [39588,39734]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [39740,39748]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setRegistry [39749,39760]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39760,39761]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [39761,39779]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39779,39780]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [39781,39787]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [39798,39874]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [39740,39874]"
    },
    {
      "action": "delete-node",
      "tree": "modifier: modifier [39882,39890]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: onlyRegistry [39891,39903]"
    },
    {
      "action": "delete-node",
      "tree": "modifier_definition [39882,39971]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [39979,39987]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: syncAttributeValue [39988,40006]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40006,40007]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40007,40019]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40019,40020]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40021,40039]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40039,40040]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40055,40056]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40057,40063]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [40064,40076]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [40077,40133]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [39979,40133]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [40141,40149]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnAllArgs [40150,40162]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40162,40163]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40163,40176]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40176,40177]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40192,40193]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40194,40202]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [40203,40288]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [40141,40288]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Destroy the tokens owned by a blacklisted account [40296,40348]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [40764,40772]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _isBlacklisted [40773,40787]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40787,40788]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40788,40804]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40804,40805]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40806,40814]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [40815,40819]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [40820,40827]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40828,40829]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40845,40846]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [40820,40846]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [40847,40914]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [40764,40914]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [41449,41457]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanTransferFrom [41458,41481]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41481,41482]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41482,41498]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41498,41499]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41500,41513]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41513,41514]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41515,41526]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41526,41527]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [41537,41541]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [41542,41549]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41550,41551]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41551,41558]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41558,41559]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [41560,41564]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41564,41565]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [41542,41565]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [41566,41567]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [41577,41584]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41585,41586]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41586,41627]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41627,41628]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41642,41643]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [41577,41643]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [41577,41644]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [41654,41681]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [41682,41683]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [41684,41714]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [41714,41715]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41722,41723]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41723,41741]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41741,41742]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [41715,41742]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [41742,41743]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [41684,41743]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [41654,41744]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [41754,41756]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41757,41758]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [41758,41782]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41782,41783]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [41784,41785]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _to [41799,41802]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [41803,41804]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41812,41813]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41813,41832]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41832,41833]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [41805,41833]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [41799,41833]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [41799,41834]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [41844,41845]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [41784,41845]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [41754,41845]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [41855,41862]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41863,41864]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41864,41900]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41900,41901]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41915,41916]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [41855,41916]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [41855,41917]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [42001,42060]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42066,42067]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [41566,42067]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [41449,42067]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [42075,42083]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanMint [42084,42099]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42099,42100]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [42100,42111]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42111,42112]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [42122,42126]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [42127,42134]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42135,42136]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [42136,42143]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [42143,42144]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [42145,42149]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42149,42150]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [42127,42150]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [42151,42152]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [42162,42189]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [42190,42191]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [42192,42222]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [42222,42223]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42230,42231]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [42231,42249]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42249,42250]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [42223,42250]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [42250,42251]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [42192,42251]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [42162,42252]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [42262,42353]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [42435,42494]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42500,42501]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [42151,42501]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [42075,42501]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [42509,42517]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireOnlyCanBurn [42518,42537]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42537,42538]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [42538,42551]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42551,42552]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [42562,42566]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [42567,42568]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [42578,42585]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42586,42587]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [42587,42620]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [42620,42621]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42653,42654]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [42578,42654]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [42578,42655]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42661,42662]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [42567,42662]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [42509,42662]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [42670,42678]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanBurn [42679,42694]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42694,42695]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [42695,42708]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42708,42709]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [42719,42723]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [42724,42725]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [42809,42816]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42817,42818]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [42818,42851]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [42851,42852]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42884,42885]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [42809,42885]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [42809,42886]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42892,42893]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [42724,42893]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [42670,42893]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [42901,42909]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: paused [42910,42916]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42916,42917]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42917,42918]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [42919,42925]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [42931,42945]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [42946,42977]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [42901,42977]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42979,42980]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [32784,42980]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [32671,42980]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueCAD.sol [42984,43014]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /** @title TrueCAD * @dev This is the top-level ERC20 contract, but most of the interesting functionality is * inherited - see the documentation on the corresponding contracts. */ [43018,43200]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [43687,43695]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: canBurn [43696,43703]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [43703,43704]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [43704,43705]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [43706,43714]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [43720,43737]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [43738,43776]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [43687,43776]"
    }
  ]
}