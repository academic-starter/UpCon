{
  "matches": [
    {
      "src": "type_name [3501,3508]",
      "dest": "type_name [5079,5086]"
    },
    {
      "src": "address: address [3501,3508]",
      "dest": "address: address [5079,5086]"
    },
    {
      "src": "external: external [2873,2881]",
      "dest": "external: external [4431,4439]"
    },
    {
      "src": "import: import [662,668]",
      "dest": "import: import [662,668]"
    },
    {
      "src": "visibility [2256,2262]",
      "dest": "visibility [3822,3828]"
    },
    {
      "src": "yul_identifier [4117,4132]",
      "dest": "yul_identifier [5695,5710]"
    },
    {
      "src": "yul_decimal_number: 0 [4141,4142]",
      "dest": "yul_decimal_number: 0 [5719,5720]"
    },
    {
      "src": "type_name [2277,2284]",
      "dest": "type_name [3843,3850]"
    },
    {
      "src": "identifier: CALL_PROXY_IMPL_SLOT [2327,2347]",
      "dest": "identifier: CALL_PROXY_IMPL_SLOT [3893,3913]"
    },
    {
      "src": "returns: returns [1811,1818]",
      "dest": "returns: returns [1884,1891]"
    },
    {
      "src": "inheritance_specifier [1605,1620]",
      "dest": "inheritance_specifier [1637,1652]"
    },
    {
      "src": "variable_declaration [3501,3524]",
      "dest": "variable_declaration [5079,5102]"
    },
    {
      "src": "type_name [2851,2858]",
      "dest": "type_name [4417,4424]"
    },
    {
      "src": ".: . [2970,2971]",
      "dest": ".: . [4517,4518]"
    },
    {
      "src": "assembly: assembly [2357,2365]",
      "dest": "assembly: assembly [3923,3931]"
    },
    {
      "src": "}: } [2425,2426]",
      "dest": "}: } [3991,3992]"
    },
    {
      "src": "{: { [3194,3195]",
      "dest": "{: { [4741,4742]"
    },
    {
      "src": ",: , [4142,4143]",
      "dest": ",: , [5720,5721]"
    },
    {
      "src": "type_name [1819,1823]",
      "dest": "type_name [1893,1897]"
    },
    {
      "src": "(: ( [2072,2073]",
      "dest": "(: ( [2877,2878]"
    },
    {
      "src": "bytes32: bytes32 [2312,2319]",
      "dest": "bytes32: bytes32 [3878,3885]"
    },
    {
      "src": "yul_function_call [4239,4255]",
      "dest": "yul_function_call [5817,5833]"
    },
    {
      "src": "function_definition [2221,2426]",
      "dest": "function_definition [3787,3992]"
    },
    {
      "src": "yul_decimal_number: 0 [4160,4161]",
      "dest": "yul_decimal_number: 0 [5738,5739]"
    },
    {
      "src": "false: false [1842,1847]",
      "dest": "false: false [1916,1921]"
    },
    {
      "src": "yul_decimal_number: 0 [4480,4481]",
      "dest": "yul_decimal_number: 0 [6034,6035]"
    },
    {
      "src": "import_directive [662,689]",
      "dest": "import_directive [662,689]"
    },
    {
      "src": "yul_function_call [3922,3956]",
      "dest": "yul_function_call [5500,5534]"
    },
    {
      "src": "primitive_type [1880,1885]",
      "dest": "primitive_type [2664,2669]"
    },
    {
      "src": "function_definition [2834,2991]",
      "dest": "function_definition [4400,4538]"
    },
    {
      "src": "call_argument [2944,2969]",
      "dest": "call_argument [4491,4516]"
    },
    {
      "src": "): ) [2983,2984]",
      "dest": "): ) [4530,4531]"
    },
    {
      "src": "yul_evm_builtin [2399,2404]",
      "dest": "yul_evm_builtin [3965,3970]"
    },
    {
      "src": "bytes32: bytes32 [2577,2584]",
      "dest": "bytes32: bytes32 [4143,4150]"
    },
    {
      "src": "variable_declaration_statement [3638,3664]",
      "dest": "variable_declaration_statement [5216,5242]"
    },
    {
      "src": "calldatacopy: calldatacopy [3922,3934]",
      "dest": "calldatacopy: calldatacopy [5500,5512]"
    },
    {
      "src": "identifier: _implementation [3570,3585]",
      "dest": "identifier: _implementation [5148,5163]"
    },
    {
      "src": "assembly_statement [2357,2420]",
      "dest": "assembly_statement [3923,3986]"
    },
    {
      "src": "(: ( [2056,2057]",
      "dest": "(: ( [2861,2862]"
    },
    {
      "src": "function_body [2913,2991]",
      "dest": "function_body [4460,4538]"
    },
    {
      "src": "): ) [1899,1900]",
      "dest": "): ) [2683,2684]"
    },
    {
      "src": "import_directive [717,746]",
      "dest": "import_directive [717,746]"
    },
    {
      "src": ",: , [4161,4162]",
      "dest": ",: , [5739,5740]"
    },
    {
      "src": "yul_decimal_number: 0 [3935,3936]",
      "dest": "yul_decimal_number: 0 [5513,5514]"
    },
    {
      "src": "revert_statement [3204,3247]",
      "dest": "revert_statement [4751,4794]"
    },
    {
      "src": "{: { [2913,2914]",
      "dest": "{: { [4460,4461]"
    },
    {
      "src": "identifier: impl [2005,2009]",
      "dest": "identifier: impl [2810,2814]"
    },
    {
      "src": "(: ( [3210,3211]",
      "dest": "(: ( [4757,4758]"
    },
    {
      "src": "identifier: length [1951,1957]",
      "dest": "identifier: length [2735,2741]"
    },
    {
      "src": "=: = [2325,2326]",
      "dest": "=: = [3891,3892]"
    },
    {
      "src": "primitive_type [3589,3596]",
      "dest": "primitive_type [5167,5174]"
    },
    {
      "src": "public: public [2256,2262]",
      "dest": "public: public [3822,3828]"
    },
    {
      "src": "identifier: BlockDirectCall [1605,1620]",
      "dest": "identifier: BlockDirectCall [1637,1652]"
    },
    {
      "src": "yul_function_call [4110,4115]",
      "dest": "yul_function_call [5688,5693]"
    },
    {
      "src": "call_argument [2136,2140]",
      "dest": "call_argument [2941,2945]"
    },
    {
      "src": "return: return [2923,2929]",
      "dest": "return: return [4470,4476]"
    },
    {
      "src": "}: } [2990,2991]",
      "dest": "}: } [4537,4538]"
    },
    {
      "src": "yul_path [2652,2656]",
      "dest": "yul_path [4218,4222]"
    },
    {
      "src": ".: . [3657,3658]",
      "dest": ".: . [5235,5236]"
    },
    {
      "src": "solidity_version_comparison_operator [651,653]",
      "dest": "solidity_version_comparison_operator [651,653]"
    },
    {
      "src": "pragma: pragma [636,642]",
      "dest": "pragma: pragma [636,642]"
    },
    {
      "src": "string: string [1676,1682]",
      "dest": "string: string [1707,1713]"
    },
    {
      "src": "comment: /*       This entry point serves only transactions with empty calldata. (i.e. pure value transfer tx).       We don't expect to receive such, thus block them.     */ [2997,3162]",
      "dest": "comment: /*       This entry point serves only transactions with empty calldata. (i.e. pure value transfer tx).       We don't expect to receive such, thus block them.     */ [4544,4709]"
    },
    {
      "src": "pragma_directive [636,660]",
      "dest": "pragma_directive [636,660]"
    },
    {
      "src": "}: } [4425,4426]",
      "dest": "}: } [5987,5988]"
    },
    {
      "src": "modifier_invocation [1910,1927]",
      "dest": "modifier_invocation [2694,2711]"
    },
    {
      "src": "}: } [2419,2420]",
      "dest": "}: } [3985,3986]"
    },
    {
      "src": "string [2076,2098]",
      "dest": "string [2881,2903]"
    },
    {
      "src": "\": \" [754,755]",
      "dest": "\": \" [754,755]"
    },
    {
      "src": "\": \" [3626,3627]",
      "dest": "\": \" [5204,5205]"
    },
    {
      "src": "): ) [4498,4499]",
      "dest": "): ) [6052,6053]"
    },
    {
      "src": "identifier: initialize [1869,1879]",
      "dest": "identifier: initialize [2653,2663]"
    },
    {
      "src": "yul_decimal_number: 0 [3938,3939]",
      "dest": "yul_decimal_number: 0 [5516,5517]"
    },
    {
      "src": "(: ( [3470,3471]",
      "dest": "(: ( [5017,5018]"
    },
    {
      "src": "(: ( [3174,3175]",
      "dest": "(: ( [4721,4722]"
    },
    {
      "src": "(: ( [4113,4114]",
      "dest": "(: ( [5691,5692]"
    },
    {
      "src": "boolean_literal [1842,1847]",
      "dest": "boolean_literal [1916,1921]"
    },
    {
      "src": "identifier: CALL_PROXY_VERSION [1699,1717]",
      "dest": "identifier: CALL_PROXY_VERSION [1730,1748]"
    },
    {
      "src": "\": \" [744,745]",
      "dest": "\": \" [744,745]"
    },
    {
      "src": "visibility [2559,2566]",
      "dest": "visibility [4125,4132]"
    },
    {
      "src": "{: { [1825,1826]",
      "dest": "{: { [1899,1900]"
    },
    {
      "src": "!=: != [3586,3588]",
      "dest": "!=: != [5164,5166]"
    },
    {
      "src": "call_expression [2049,2099]",
      "dest": "call_expression [2854,2904]"
    },
    {
      "src": "yul_identifier [2658,2675]",
      "dest": "yul_identifier [4224,4241]"
    },
    {
      "src": "(: ( [1796,1797]",
      "dest": "(: ( [1869,1870]"
    },
    {
      "src": "external: external [1901,1909]",
      "dest": "external: external [2685,2693]"
    },
    {
      "src": "returndatasize: returndatasize [4391,4405]",
      "dest": "returndatasize: returndatasize [5957,5971]"
    },
    {
      "src": "{: { [2366,2367]",
      "dest": "{: { [3932,3933]"
    },
    {
      "src": "): ) [2140,2141]",
      "dest": "): ) [2945,2946]"
    },
    {
      "src": "yul_identifier [4095,4101]",
      "dest": "yul_identifier [5673,5679]"
    },
    {
      "src": "identifier: slot [2320,2324]",
      "dest": "identifier: slot [3886,3890]"
    },
    {
      "src": "yul_assignment [2380,2410]",
      "dest": "yul_assignment [3946,3976]"
    },
    {
      "src": "state_mutability [3186,3193]",
      "dest": "state_mutability [4733,4740]"
    },
    {
      "src": "address: address [3589,3596]",
      "dest": "address: address [5167,5174]"
    },
    {
      "src": "public: public [1799,1805]",
      "dest": "public: public [1872,1878]"
    },
    {
      "src": "identifier: setCallProxyImplementation [2109,2135]",
      "dest": "identifier: setCallProxyImplementation [2914,2940]"
    },
    {
      "src": "fallback_receive_definition [3167,3253]",
      "dest": "fallback_receive_definition [4714,4800]"
    },
    {
      "src": "): ) [3471,3472]",
      "dest": "): ) [5018,5019]"
    },
    {
      "src": "call_argument [2057,2074]",
      "dest": "call_argument [2862,2879]"
    },
    {
      "src": "parameter [1880,1899]",
      "dest": "parameter [2664,2683]"
    },
    {
      "src": "primitive_type [1676,1682]",
      "dest": "primitive_type [1707,1713]"
    },
    {
      "src": "yul_function_call [3941,3955]",
      "dest": "yul_function_call [5519,5533]"
    },
    {
      "src": "(: ( [4156,4157]",
      "dest": "(: ( [5734,5735]"
    },
    {
      "src": "identifier: slot [2652,2656]",
      "dest": "identifier: slot [4218,4222]"
    },
    {
      "src": ".: . [2015,2016]",
      "dest": ".: . [2820,2821]"
    },
    {
      "src": "expression_statement [1938,1988]",
      "dest": "expression_statement [2722,2793]"
    },
    {
      "src": "{: { [4359,4360]",
      "dest": "{: { [5929,5930]"
    },
    {
      "src": "yul_path [2658,2675]",
      "dest": "yul_path [4224,4241]"
    },
    {
      "src": "identifier: require [1938,1945]",
      "dest": "identifier: require [2722,2729]"
    },
    {
      "src": "{: { [2302,2303]",
      "dest": "{: { [3868,3869]"
    },
    {
      "src": "returns: returns [2268,2275]",
      "dest": "returns: returns [3834,3841]"
    },
    {
      "src": ":=: := [2396,2398]",
      "dest": ":=: := [3962,3964]"
    },
    {
      "src": "}: } [2147,2148]",
      "dest": "}: } [3167,3168]"
    },
    {
      "src": "): ) [4406,4407]",
      "dest": "): ) [5972,5973]"
    },
    {
      "src": "returns: returns [2895,2902]",
      "dest": "returns: returns [4445,4452]"
    },
    {
      "src": "call_expression [2930,2984]",
      "dest": "call_expression [4477,4531]"
    },
    {
      "src": "function_definition [1860,2148]",
      "dest": "function_definition [2644,3168]"
    },
    {
      "src": "): ) [3175,3176]",
      "dest": "): ) [4722,4723]"
    },
    {
      "src": "variable_declaration [2577,2589]",
      "dest": "variable_declaration [4143,4155]"
    },
    {
      "src": "yul_decimal_number: 0 [4388,4389]",
      "dest": "yul_decimal_number: 0 [5954,5955]"
    },
    {
      "src": "=: = [3525,3526]",
      "dest": "=: = [5103,5104]"
    },
    {
      "src": "import: import [747,753]",
      "dest": "import: import [747,753]"
    },
    {
      "src": "return_type_definition [2268,2301]",
      "dest": "return_type_definition [3834,3867]"
    },
    {
      "src": "type_name [1997,2004]",
      "dest": "type_name [2802,2809]"
    },
    {
      "src": "(: ( [2967,2968]",
      "dest": "(: ( [4514,4515]"
    },
    {
      "src": "identifier: decode [2016,2022]",
      "dest": "identifier: decode [2821,2827]"
    },
    {
      "src": "uint256: uint256 [3638,3645]",
      "dest": "uint256: uint256 [5216,5223]"
    },
    {
      "src": "): ) [4157,4158]",
      "dest": "): ) [5735,5736]"
    },
    {
      "src": "inheritance_specifier [1622,1634]",
      "dest": "inheritance_specifier [1654,1666]"
    },
    {
      "src": ",: , [2074,2075]",
      "dest": ",: , [2879,2880]"
    },
    {
      "src": "number_literal: 0x0 [3597,3600]",
      "dest": "number_literal: 0x0 [5175,5178]"
    },
    {
      "src": "address: address [1662,1669]",
      "dest": "address: address [1693,1700]"
    },
    {
      "src": "type_name [3638,3645]",
      "dest": "type_name [5216,5223]"
    },
    {
      "src": "primitive_type [2312,2319]",
      "dest": "primitive_type [3878,3885]"
    },
    {
      "src": ",: , [4237,4238]",
      "dest": ",: , [5815,5816]"
    },
    {
      "src": "): ) [2098,2099]",
      "dest": "): ) [2903,2904]"
    },
    {
      "src": "bool: bool [2903,2907]",
      "dest": "bool: bool [4454,4458]"
    },
    {
      "src": "parameter [2277,2300]",
      "dest": "parameter [3843,3866]"
    },
    {
      "src": "type_alias [1648,1657]",
      "dest": "type_alias [1679,1688]"
    },
    {
      "src": "state_mutability [3482,3489]",
      "dest": "state_mutability [5029,5036]"
    },
    {
      "src": "return_statement [1835,1848]",
      "dest": "return_statement [1909,1922]"
    },
    {
      "src": "\": \" [1720,1721]",
      "dest": "\": \" [1751,1752]"
    },
    {
      "src": "): ) [4254,4255]",
      "dest": "): ) [5832,5833]"
    },
    {
      "src": "^:  ^ [651,653]",
      "dest": "^:  ^ [651,653]"
    },
    {
      "src": "yul_evm_builtin [4105,4109]",
      "dest": "yul_evm_builtin [5683,5687]"
    },
    {
      "src": "(: ( [4109,4110]",
      "dest": "(: ( [5687,5688]"
    },
    {
      "src": "identifier: isValid [2843,2850]",
      "dest": "identifier: isValid [4409,4416]"
    },
    {
      "src": "identifier: setCallProxyImplementation [2505,2531]",
      "dest": "identifier: setCallProxyImplementation [4071,4097]"
    },
    {
      "src": "function: function [2834,2842]",
      "dest": "function: function [4400,4408]"
    },
    {
      "src": "string_literal [3603,3627]",
      "dest": "string_literal [5181,5205]"
    },
    {
      "src": "{: { [1928,1929]",
      "dest": "{: { [2712,2713]"
    },
    {
      "src": "yul_evm_builtin [4391,4405]",
      "dest": "yul_evm_builtin [5957,5971]"
    },
    {
      "src": "parenthesized_expression [3210,3246]",
      "dest": "parenthesized_expression [4757,4793]"
    },
    {
      "src": "identifier: newImplementation [2540,2557]",
      "dest": "identifier: newImplementation [4106,4123]"
    },
    {
      "src": "address: address [2532,2539]",
      "dest": "address: address [4098,4105]"
    },
    {
      "src": "import: import [717,723]",
      "dest": "import: import [717,723]"
    },
    {
      "src": "state_mutability [1806,1810]",
      "dest": "state_mutability [1879,1883]"
    },
    {
      "src": "call_argument [2029,2038]",
      "dest": "call_argument [2834,2843]"
    },
    {
      "src": "identifier: require [3562,3569]",
      "dest": "identifier: require [5140,5147]"
    },
    {
      "src": ",: , [1620,1621]",
      "dest": ",: , [1652,1653]"
    },
    {
      "src": "}: } [2691,2692]",
      "dest": "}: } [4257,4258]"
    },
    {
      "src": "\": \" [765,766]",
      "dest": "\": \" [765,766]"
    },
    {
      "src": "let: let [4091,4094]",
      "dest": "let: let [5669,5672]"
    },
    {
      "src": "(: ( [2978,2979]",
      "dest": "(: ( [4525,4526]"
    },
    {
      "src": "=: = [1718,1719]",
      "dest": "=: = [1749,1750]"
    },
    {
      "src": "yul_evm_builtin [4144,4156]",
      "dest": "yul_evm_builtin [5722,5734]"
    },
    {
      "src": "call_argument [2023,2027]",
      "dest": "call_argument [2828,2832]"
    },
    {
      "src": "): ) [2675,2676]",
      "dest": "): ) [4241,4242]"
    },
    {
      "src": "yul_evm_builtin [4110,4113]",
      "dest": "yul_evm_builtin [5688,5691]"
    },
    {
      "src": "yul_switch_statement [4270,4518]",
      "dest": "yul_switch_statement [5848,6068]"
    },
    {
      "src": "call_expression [3527,3552]",
      "dest": "call_expression [5105,5130]"
    },
    {
      "src": "yul_identifier [2652,2656]",
      "dest": "yul_identifier [4218,4222]"
    },
    {
      "src": "type_cast_expression [3589,3601]",
      "dest": "type_cast_expression [5167,5179]"
    },
    {
      "src": "\": \" [724,725]",
      "dest": "\": \" [724,725]"
    },
    {
      "src": "calldatasize: calldatasize [3941,3953]",
      "dest": "calldatasize: calldatasize [5519,5531]"
    },
    {
      "src": "yul_evm_builtin [4239,4253]",
      "dest": "yul_evm_builtin [5817,5831]"
    },
    {
      "src": "identifier: slot [2585,2589]",
      "dest": "identifier: slot [4151,4155]"
    },
    {
      "src": "visibility [1683,1689]",
      "dest": "visibility [1714,1720]"
    },
    {
      "src": "state_variable_declaration [1676,1728]",
      "dest": "state_variable_declaration [1707,1759]"
    },
    {
      "src": "contract_body [1635,4536]",
      "dest": "contract_body [1667,6086]"
    },
    {
      "src": "bytes32: bytes32 [2851,2858]",
      "dest": "bytes32: bytes32 [4417,4424]"
    },
    {
      "src": "identifier: CallProxy [1592,1601]",
      "dest": "identifier: CallProxy [1624,1633]"
    },
    {
      "src": "call_expression [2930,2970]",
      "dest": "call_expression [4477,4517]"
    },
    {
      "src": "function_body [2302,2426]",
      "dest": "function_body [3868,3992]"
    },
    {
      "src": "address: address [2030,2037]",
      "dest": "address: address [2835,2842]"
    },
    {
      "src": "variable_declaration [1997,2009]",
      "dest": "variable_declaration [2802,2814]"
    },
    {
      "src": "(: ( [3953,3954]",
      "dest": "(: ( [5531,5532]"
    },
    {
      "src": "external: external [3177,3185]",
      "dest": "external: external [4724,4732]"
    },
    {
      "src": "): ) [2409,2410]",
      "dest": "): ) [3975,3976]"
    },
    {
      "src": "primitive_type [2577,2584]",
      "dest": "primitive_type [4143,4150]"
    },
    {
      "src": "identifier: result [4277,4283]",
      "dest": "identifier: result [5855,5861]"
    },
    {
      "src": "(: ( [2651,2652]",
      "dest": "(: ( [4217,4218]"
    },
    {
      "src": "comment: // delegatecall returns 0 on error. [4300,4335]",
      "dest": "comment: // delegatecall returns 0 on error. [5874,5909]"
    },
    {
      "src": "{: { [1635,1636]",
      "dest": "{: { [1667,1668]"
    },
    {
      "src": "}: } [4517,4518]",
      "dest": "}: } [6067,6068]"
    },
    {
      "src": "returndatasize: returndatasize [4239,4253]",
      "dest": "returndatasize: returndatasize [5817,5831]"
    },
    {
      "src": "import_directive [747,767]",
      "dest": "import_directive [747,767]"
    },
    {
      "src": "yul_function_call [4381,4408]",
      "dest": "yul_function_call [5947,5974]"
    },
    {
      "src": "parameter [1819,1823]",
      "dest": "parameter [1893,1897]"
    },
    {
      "src": "user_defined_type [1622,1634]",
      "dest": "user_defined_type [1654,1666]"
    },
    {
      "src": "string [697,715]",
      "dest": "string [697,715]"
    },
    {
      "src": "\": \" [1985,1986]",
      "dest": "\": \" [2790,2791]"
    },
    {
      "src": "variable_declaration_statement [1997,2040]",
      "dest": "variable_declaration_statement [2802,2845]"
    },
    {
      "src": "): ) [4255,4256]",
      "dest": "): ) [5833,5834]"
    },
    {
      "src": "): ) [2969,2970]",
      "dest": "): ) [4516,4517]"
    },
    {
      "src": "comment: // block because it will not return to Solidity code. We overwrite the [3781,3851]",
      "dest": "comment: // block because it will not return to Solidity code. We overwrite the [5359,5429]"
    },
    {
      "src": "\": \" [714,715]",
      "dest": "\": \" [714,715]"
    },
    {
      "src": "visibility [2873,2881]",
      "dest": "visibility [4431,4439]"
    },
    {
      "src": "primitive_type [2903,2907]",
      "dest": "primitive_type [4454,4458]"
    },
    {
      "src": "returndatacopy: returndatacopy [4218,4232]",
      "dest": "returndatacopy: returndatacopy [5796,5810]"
    },
    {
      "src": "visibility [3177,3185]",
      "dest": "visibility [4724,4732]"
    },
    {
      "src": "function_definition [1779,1854]",
      "dest": "function_definition [1852,1928]"
    },
    {
      "src": "bytes: bytes [1880,1885]",
      "dest": "bytes: bytes [2664,2669]"
    },
    {
      "src": "(: ( [3596,3597]",
      "dest": "(: ( [5174,5175]"
    },
    {
      "src": ",: , [4115,4116]",
      "dest": ",: , [5693,5694]"
    },
    {
      "src": "comment: /*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "dest": "comment: /*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]"
    },
    {
      "src": "call_argument [3603,3627]",
      "dest": "call_argument [5181,5205]"
    },
    {
      "src": "call_expression [1938,1987]",
      "dest": "call_expression [2722,2792]"
    },
    {
      "src": "identifier: fact [2979,2983]",
      "dest": "identifier: fact [4526,4530]"
    },
    {
      "src": "}: } [4527,4528]",
      "dest": "}: } [6077,6078]"
    },
    {
      "src": "\": \" [687,688]",
      "dest": "\": \" [687,688]"
    },
    {
      "src": "(: ( [4479,4480]",
      "dest": "(: ( [6033,6034]"
    },
    {
      "src": "): ) [3551,3552]",
      "dest": "): ) [5129,5130]"
    },
    {
      "src": "constant: constant [1690,1698]",
      "dest": "constant: constant [1721,1729]"
    },
    {
      "src": "=: = [2590,2591]",
      "dest": "=: = [4156,4157]"
    },
    {
      "src": "assembly: assembly [2622,2630]",
      "dest": "assembly: assembly [4188,4196]"
    },
    {
      "src": "sload: sload [2399,2404]",
      "dest": "sload: sload [3965,3970]"
    },
    {
      "src": "call_argument [2979,2983]",
      "dest": "call_argument [4526,4530]"
    },
    {
      "src": "(: ( [4405,4406]",
      "dest": "(: ( [5971,5972]"
    },
    {
      "src": "\": \" [697,698]",
      "dest": "\": \" [697,698]"
    },
    {
      "src": "yul_block [4451,4518]",
      "dest": "yul_block [6009,6068]"
    },
    {
      "src": "variable_declaration_statement [3501,3553]",
      "dest": "variable_declaration_statement [5079,5131]"
    },
    {
      "src": ",: , [4132,4133]",
      "dest": ",: , [5710,5711]"
    },
    {
      "src": "function_body [3194,3253]",
      "dest": "function_body [4741,4800]"
    },
    {
      "src": "(: ( [4387,4388]",
      "dest": "(: ( [5953,5954]"
    },
    {
      "src": "primitive_type [2851,2858]",
      "dest": "primitive_type [4417,4424]"
    },
    {
      "src": "): ) [4499,4500]",
      "dest": "): ) [6053,6054]"
    },
    {
      "src": "{: { [2567,2568]",
      "dest": "{: { [4133,4134]"
    },
    {
      "src": "fallback_receive_definition [3462,4534]",
      "dest": "fallback_receive_definition [5009,6084]"
    },
    {
      "src": "yul_function_call [4483,4499]",
      "dest": "yul_function_call [6037,6053]"
    },
    {
      "src": ",: , [2656,2657]",
      "dest": ",: , [4222,4223]"
    },
    {
      "src": "identifier: data [2023,2027]",
      "dest": "identifier: data [2828,2832]"
    },
    {
      "src": "gas: gas [4110,4113]",
      "dest": "gas: gas [5688,5691]"
    },
    {
      "src": "identifier: value [3658,3663]",
      "dest": "identifier: value [5236,5241]"
    },
    {
      "src": "type_name [2532,2539]",
      "dest": "type_name [4098,4105]"
    },
    {
      "src": "}: } [1853,1854]",
      "dest": "}: } [1927,1928]"
    },
    {
      "src": "yul_decimal_number: 0 [4357,4358]",
      "dest": "yul_decimal_number: 0 [5927,5928]"
    },
    {
      "src": "payable: payable [3482,3489]",
      "dest": "payable: payable [5029,5036]"
    },
    {
      "src": "string [1720,1727]",
      "dest": "string [1751,1758]"
    },
    {
      "src": "function_body [1928,2148]",
      "dest": "function_body [2712,3168]"
    },
    {
      "src": "contract: contract [1583,1591]",
      "dest": "contract: contract [1615,1623]"
    },
    {
      "src": "yul_function_call [2399,2410]",
      "dest": "yul_function_call [3965,3976]"
    },
    {
      "src": "yul_identifier [2405,2409]",
      "dest": "yul_identifier [3971,3975]"
    },
    {
      "src": "yul_decimal_number: 0 [4236,4237]",
      "dest": "yul_decimal_number: 0 [5814,5815]"
    },
    {
      "src": "identifier: isFrozen [1788,1796]",
      "dest": "identifier: isFrozen [1861,1869]"
    },
    {
      "src": "yul_identifier [4134,4139]",
      "dest": "yul_identifier [5712,5717]"
    },
    {
      "src": "switch: switch [4270,4276]",
      "dest": "switch: switch [5848,5854]"
    },
    {
      "src": "visibility [3473,3481]",
      "dest": "visibility [5020,5028]"
    },
    {
      "src": "call: call [4105,4109]",
      "dest": "call: call [5683,5687]"
    },
    {
      "src": "solidity_version: 0.6.11 [653,659]",
      "dest": "solidity_version: 0.6.11 [653,659]"
    },
    {
      "src": "string [754,766]",
      "dest": "string [754,766]"
    },
    {
      "src": "identifier: newImplementation [2658,2675]",
      "dest": "identifier: newImplementation [4224,4241]"
    },
    {
      "src": "function: function [1779,1787]",
      "dest": "function: function [1852,1860]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]",
      "dest": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]"
    },
    {
      "src": "}: } [3252,3253]",
      "dest": "}: } [4799,4800]"
    },
    {
      "src": "(: ( [1879,1880]",
      "dest": "(: ( [2663,2664]"
    },
    {
      "src": "parameter [2903,2907]",
      "dest": "parameter [4454,4458]"
    },
    {
      "src": "pure: pure [1806,1810]",
      "dest": "pure: pure [1879,1883]"
    },
    {
      "src": "yul_function_call [2645,2676]",
      "dest": "yul_function_call [4211,4242]"
    },
    {
      "src": "yul_evm_builtin [4483,4497]",
      "dest": "yul_evm_builtin [6037,6051]"
    },
    {
      "src": "): ) [3954,3955]",
      "dest": "): ) [5532,5533]"
    },
    {
      "src": "comment: /**   CallProxy is a 'call' based proxy.   It is a facade to a real implementation,   only that unlike the Proxy pattern, it uses call and not delegatecall,   so that the state is recorded on the called contract.    This contract is expected to be placed behind the regular proxy,   thus:   1. Implementation address is stored in a hashed slot (other than proxy's one...).   2. No state variable is allowed in low address ranges.   3. Setting of implementation is done in initialize.   4. isFrozen and initialize are implemented, to be compliant with Proxy.    This implementation is intentionally minimal,   and has no management or governance.   The assumption is that if a different implementation is needed, it will be performed   in an upgradeTo a new deployed CallProxy, pointing to a new implementation. */ [769,1582]",
      "dest": "comment: /**   CallProxy is a 'call' based proxy.   It is a facade to a real implementation,   only that unlike the Proxy pattern, it uses call and not delegatecall,   so that the state is recorded on the called contract.    This contract is expected to be placed behind the regular proxy,   thus:   1. Implementation address is stored in a hashed slot (other than proxy's one...).   2. No state variable is allowed in low address ranges.   3. Setting of implementation is done in initialize.   4. isFrozen and initialize are implemented, to be compliant with Proxy.    This implementation is intentionally minimal,   and has no management or governance.   The assumption is that if a different implementation is needed, it will be performed   in an upgradeTo a new deployed CallProxy, pointing to a new implementation. */ [769,1582]"
    },
    {
      "src": ".: . [2061,2062]",
      "dest": ".: . [2866,2867]"
    },
    {
      "src": "for: for [1658,1661]",
      "dest": "for: for [1689,1692]"
    },
    {
      "src": "yul_decimal_number: 0 [4233,4234]",
      "dest": "yul_decimal_number: 0 [5811,5812]"
    },
    {
      "src": "\": \" [2076,2077]",
      "dest": "\": \" [2881,2882]"
    },
    {
      "src": "primitive_type [1819,1823]",
      "dest": "primitive_type [1893,1897]"
    },
    {
      "src": "string [3603,3627]",
      "dest": "string [5181,5205]"
    },
    {
      "src": "(: ( [2276,2277]",
      "dest": "(: ( [3842,3843]"
    },
    {
      "src": "variable_declaration_statement [2312,2348]",
      "dest": "variable_declaration_statement [3878,3914]"
    },
    {
      "src": "primitive_type [2030,2037]",
      "dest": "primitive_type [2835,2842]"
    },
    {
      "src": "\": \" [1965,1966]",
      "dest": "\": \" [2770,2771]"
    },
    {
      "src": "yul_function_call [4473,4500]",
      "dest": "yul_function_call [6027,6054]"
    },
    {
      "src": "call_argument [1946,1963]",
      "dest": "call_argument [2730,2768]"
    },
    {
      "src": "yul_function_call [4144,4158]",
      "dest": "yul_function_call [5722,5736]"
    },
    {
      "src": "): ) [2038,2039]",
      "dest": "): ) [2843,2844]"
    },
    {
      "src": "\": \" [669,670]",
      "dest": "\": \" [669,670]"
    },
    {
      "src": "identifier: msg [3654,3657]",
      "dest": "identifier: msg [5232,5235]"
    },
    {
      "src": "yul_path [4117,4132]",
      "dest": "yul_path [5695,5710]"
    },
    {
      "src": "call_argument [3597,3600]",
      "dest": "call_argument [5175,5178]"
    },
    {
      "src": "): ) [2557,2558]",
      "dest": "): ) [4123,4124]"
    },
    {
      "src": "(: ( [4232,4233]",
      "dest": "(: ( [5810,5811]"
    },
    {
      "src": "=: = [2010,2011]",
      "dest": "=: = [2815,2816]"
    },
    {
      "src": ",: , [1963,1964]",
      "dest": ",: , [2768,2769]"
    },
    {
      "src": ",: , [3936,3937]",
      "dest": ",: , [5514,5515]"
    },
    {
      "src": "string [3211,3245]",
      "dest": "string [4758,4792]"
    },
    {
      "src": "identifier: Addresses [1648,1657]",
      "dest": "identifier: Addresses [1679,1688]"
    },
    {
      "src": "string [669,688]",
      "dest": "string [669,688]"
    },
    {
      "src": "): ) [4164,4165]",
      "dest": "): ) [5742,5743]"
    },
    {
      "src": "identifier: require [2049,2056]",
      "dest": "identifier: require [2854,2861]"
    },
    {
      "src": "type_name [1676,1682]",
      "dest": "type_name [1707,1713]"
    },
    {
      "src": "revert: revert [4381,4387]",
      "dest": "revert: revert [5947,5953]"
    },
    {
      "src": "using: using [1642,1647]",
      "dest": "using: using [1673,1678]"
    },
    {
      "src": "identifier: fact [2859,2863]",
      "dest": "identifier: fact [4425,4429]"
    },
    {
      "src": "(: ( [2531,2532]",
      "dest": "(: ( [4097,4098]"
    },
    {
      "src": "yul_evm_builtin [4218,4232]",
      "dest": "yul_evm_builtin [5796,5810]"
    },
    {
      "src": "identifier: _implementation [2285,2300]",
      "dest": "identifier: _implementation [3851,3866]"
    },
    {
      "src": "(: ( [4253,4254]",
      "dest": "(: ( [5831,5832]"
    },
    {
      "src": "call_expression [2012,2039]",
      "dest": "call_expression [2817,2844]"
    },
    {
      "src": "string_literal [3211,3245]",
      "dest": "string_literal [4758,4792]"
    },
    {
      "src": "{: { [3490,3491]",
      "dest": "{: { [5037,5038]"
    },
    {
      "src": "): ) [3955,3956]",
      "dest": "): ) [5533,5534]"
    },
    {
      "src": "case: case [4352,4356]",
      "dest": "case: case [5922,5926]"
    },
    {
      "src": "): ) [1797,1798]",
      "dest": "): ) [1870,1871]"
    },
    {
      "src": "identifier: CALL_PROXY_IMPL_SLOT [2592,2612]",
      "dest": "identifier: CALL_PROXY_IMPL_SLOT [4158,4178]"
    },
    {
      "src": "}: } [2685,2686]",
      "dest": "}: } [4251,4252]"
    },
    {
      "src": "(: ( [3550,3551]",
      "dest": "(: ( [5128,5129]"
    },
    {
      "src": "\": \" [2097,2098]",
      "dest": "\": \" [2902,2903]"
    },
    {
      "src": "contract_declaration [1583,4536]",
      "dest": "contract_declaration [1615,6086]"
    },
    {
      "src": "(: ( [2135,2136]",
      "dest": "(: ( [2940,2941]"
    },
    {
      "src": "identifier: value [3646,3651]",
      "dest": "identifier: value [5224,5229]"
    },
    {
      "src": "fallback: fallback [3462,3470]",
      "dest": "fallback: fallback [5009,5017]"
    },
    {
      "src": "solidity: solidity [643,651]",
      "dest": "solidity: solidity [643,651]"
    },
    {
      "src": "\": \" [3244,3245]",
      "dest": "\": \" [4791,4792]"
    },
    {
      "src": "source_file [0,4537]",
      "dest": "source_file [0,6087]"
    },
    {
      "src": "function: function [2221,2229]",
      "dest": "function: function [3787,3795]"
    },
    {
      "src": "yul_function_call [4105,4165]",
      "dest": "yul_function_call [5683,5743]"
    },
    {
      "src": "parameter [2532,2557]",
      "dest": "parameter [4098,4123]"
    },
    {
      "src": "false [1842,1847]",
      "dest": "false [1916,1921]"
    },
    {
      "src": "call_argument [1965,1986]",
      "dest": "call_argument [2770,2791]"
    },
    {
      "src": ".: . [1950,1951]",
      "dest": ".: . [2734,2735]"
    },
    {
      "src": "expression_statement [2049,2100]",
      "dest": "expression_statement [2854,2905]"
    },
    {
      "src": "member_expression [2930,2978]",
      "dest": "member_expression [4477,4525]"
    },
    {
      "src": "identifier: _implementation [3509,3524]",
      "dest": "identifier: _implementation [5087,5102]"
    },
    {
      "src": "): ) [4407,4408]",
      "dest": "): ) [5973,5974]"
    },
    {
      "src": "yul_function_call [4218,4256]",
      "dest": "yul_function_call [5796,5834]"
    },
    {
      "src": "yul_variable_declaration [4091,4165]",
      "dest": "yul_variable_declaration [5669,5743]"
    },
    {
      "src": "calldata: calldata [1886,1894]",
      "dest": "calldata: calldata [2670,2678]"
    },
    {
      "src": "returndatasize: returndatasize [4483,4497]",
      "dest": "returndatasize: returndatasize [6037,6051]"
    },
    {
      "src": "(: ( [2902,2903]",
      "dest": "(: ( [4453,4454]"
    },
    {
      "src": "comment: // Solidity scratch pad at memory position 0. [3864,3909]",
      "dest": "comment: // Solidity scratch pad at memory position 0. [5442,5487]"
    },
    {
      "src": "view: view [2882,2886]",
      "dest": "view: view [4440,4444]"
    },
    {
      "src": "(: ( [2404,2405]",
      "dest": "(: ( [3970,3971]"
    },
    {
      "src": "return: return [1835,1841]",
      "dest": "return: return [1909,1915]"
    },
    {
      "src": "identifier: IFactRegistry [2930,2943]",
      "dest": "identifier: IFactRegistry [4477,4490]"
    },
    {
      "src": "return_type_definition [2895,2908]",
      "dest": "return_type_definition [4445,4459]"
    },
    {
      "src": "yul_identifier [2380,2395]",
      "dest": "yul_identifier [3946,3961]"
    },
    {
      "src": "state_mutability [2263,2267]",
      "dest": "state_mutability [3829,3833]"
    },
    {
      "src": "\": \" [3211,3212]",
      "dest": "\": \" [4758,4759]"
    },
    {
      "src": "type_name [1662,1669]",
      "dest": "type_name [1693,1700]"
    },
    {
      "src": "identifier: data [1946,1950]",
      "dest": "identifier: data [2730,2734]"
    },
    {
      "src": "(: ( [4497,4498]",
      "dest": "(: ( [6051,6052]"
    },
    {
      "src": "identifier: impl [2057,2061]",
      "dest": "identifier: impl [2862,2866]"
    },
    {
      "src": "yul_path [2405,2409]",
      "dest": "yul_path [3971,3975]"
    },
    {
      "src": "bool: bool [1819,1823]",
      "dest": "bool: bool [1893,1897]"
    },
    {
      "src": "function_definition [2496,2692]",
      "dest": "function_definition [4062,4258]"
    },
    {
      "src": "function_body [3490,4534]",
      "dest": "function_body [5037,6084]"
    },
    {
      "src": "comment: /*       Sets the call proxy implementation address.     */ [2432,2491]",
      "dest": "comment: /*       Sets the call proxy implementation address.     */ [3998,4057]"
    },
    {
      "src": "variable_declaration_statement [2577,2613]",
      "dest": "variable_declaration_statement [4143,4179]"
    },
    {
      "src": "identifier: impl [2136,2140]",
      "dest": "identifier: impl [2941,2945]"
    },
    {
      "src": "primitive_type [3638,3645]",
      "dest": "primitive_type [5216,5223]"
    },
    {
      "src": "visibility [1901,1909]",
      "dest": "visibility [2685,2693]"
    },
    {
      "src": "address: address [2277,2284]",
      "dest": "address: address [3843,3850]"
    },
    {
      "src": "yul_function_call [4391,4407]",
      "dest": "yul_function_call [5957,5973]"
    },
    {
      "src": "variable_declaration [2312,2324]",
      "dest": "variable_declaration [3878,3890]"
    },
    {
      "src": "function_body [1825,1854]",
      "dest": "function_body [1899,1928]"
    },
    {
      "src": "primitive_type [2277,2284]",
      "dest": "primitive_type [3843,3850]"
    },
    {
      "src": ",: , [4139,4140]",
      "dest": ",: , [5717,5718]"
    },
    {
      "src": "return: return [4473,4479]",
      "dest": "return: return [6027,6033]"
    },
    {
      "src": "yul_evm_builtin [3922,3934]",
      "dest": "yul_evm_builtin [5500,5512]"
    },
    {
      "src": "parenthesized_expression [2029,2038]",
      "dest": "parenthesized_expression [2834,2843]"
    },
    {
      "src": "expression_statement [2109,2142]",
      "dest": "expression_statement [2914,2947]"
    },
    {
      "src": "yul_evm_builtin [4381,4387]",
      "dest": "yul_evm_builtin [5947,5953]"
    },
    {
      "src": "\": \" [1726,1727]",
      "dest": "\": \" [1757,1758]"
    },
    {
      "src": "==: == [1958,1960]",
      "dest": "==: == [2742,2744]"
    },
    {
      "src": "(: ( [1945,1946]",
      "dest": "(: ( [2729,2730]"
    },
    {
      "src": "expression_statement [3562,3629]",
      "dest": "expression_statement [5140,5207]"
    },
    {
      "src": "variable_declaration [3638,3651]",
      "dest": "variable_declaration [5216,5229]"
    },
    {
      "src": "visibility [1799,1805]",
      "dest": "visibility [1872,1878]"
    },
    {
      "src": "import: import [690,696]",
      "dest": "import: import [690,696]"
    },
    {
      "src": "return_type_definition [1811,1824]",
      "dest": "return_type_definition [1884,1898]"
    },
    {
      "src": "): ) [2907,2908]",
      "dest": "): ) [4458,4459]"
    },
    {
      "src": "call_expression [2057,2074]",
      "dest": "call_expression [2862,2879]"
    },
    {
      "src": "assembly_statement [2622,2686]",
      "dest": "assembly_statement [4188,4252]"
    },
    {
      "src": "member_expression [1946,1957]",
      "dest": "member_expression [2730,2741]"
    },
    {
      "src": "binary_expression [3570,3601]",
      "dest": "binary_expression [5148,5179]"
    },
    {
      "src": "primitive_type [1662,1669]",
      "dest": "primitive_type [1693,1700]"
    },
    {
      "src": "type_name [2903,2907]",
      "dest": "type_name [4454,4458]"
    },
    {
      "src": "identifier: data [1895,1899]",
      "dest": "identifier: data [2679,2683]"
    },
    {
      "src": "yul_identifier [4277,4283]",
      "dest": "yul_identifier [5855,5861]"
    },
    {
      "src": "string_literal [1720,1727]",
      "dest": "string_literal [1751,1758]"
    },
    {
      "src": "): ) [2254,2255]",
      "dest": "): ) [3820,3821]"
    },
    {
      "src": "parameter [2851,2863]",
      "dest": "parameter [4417,4429]"
    },
    {
      "src": "primitive_type [3501,3508]",
      "dest": "primitive_type [5079,5086]"
    },
    {
      "src": ",: , [4158,4159]",
      "dest": ",: , [5736,5737]"
    },
    {
      "src": "comment: // Call the implementation. [3970,3997]",
      "dest": "comment: // Call the implementation. [5548,5575]"
    },
    {
      "src": "): ) [2968,2969]",
      "dest": "): ) [4515,4516]"
    },
    {
      "src": "(: ( [2850,2851]",
      "dest": "(: ( [4416,4417]"
    },
    {
      "src": "yul_path [2380,2395]",
      "dest": "yul_path [3946,3961]"
    },
    {
      "src": "identifier: callProxyImplementation [2230,2253]",
      "dest": "identifier: callProxyImplementation [3796,3819]"
    },
    {
      "src": "yul_path [4277,4283]",
      "dest": "yul_path [5855,5861]"
    },
    {
      "src": "identifier: abi [2012,2015]",
      "dest": "identifier: abi [2817,2820]"
    },
    {
      "src": "number_literal: 32 [1961,1963]",
      "dest": "number_literal: 32 [2745,2747]"
    },
    {
      "src": "): ) [2863,2864]",
      "dest": "): ) [4429,4430]"
    },
    {
      "src": "identifier: notCalledDirectly [1910,1927]",
      "dest": "identifier: notCalledDirectly [2694,2711]"
    },
    {
      "src": "sstore: sstore [2645,2651]",
      "dest": "sstore: sstore [4211,4217]"
    },
    {
      "src": "comment: // Proxy client - initialize & isFrozen. [1734,1774]",
      "dest": "comment: // Proxy client - initialize & isFrozen. [1765,1805]"
    },
    {
      "src": "(: ( [3569,3570]",
      "dest": "(: ( [5147,5148]"
    },
    {
      "src": "(: ( [3934,3935]",
      "dest": "(: ( [5512,5513]"
    },
    {
      "src": "binary_expression [1946,1963]",
      "dest": "binary_expression [2730,2747]"
    },
    {
      "src": "view: view [2263,2267]",
      "dest": "view: view [3829,3833]"
    },
    {
      "src": "function: function [2496,2504]",
      "dest": "function: function [4062,4070]"
    },
    {
      "src": "}: } [4535,4536]",
      "dest": "}: } [6085,6086]"
    },
    {
      "src": "(: ( [2022,2023]",
      "dest": "(: ( [2827,2828]"
    },
    {
      "src": "{: { [2631,2632]",
      "dest": "{: { [4197,4198]"
    },
    {
      "src": ",: , [4481,4482]",
      "dest": ",: , [6035,6036]"
    },
    {
      "src": "comment: /*       An explicit isValid entry point, used to make isValid a part of the ABI and visible       on Etherscan (and alike).     */ [2698,2829]",
      "dest": "comment: /*       An explicit isValid entry point, used to make isValid a part of the ABI and visible       on Etherscan (and alike).     */ [4264,4395]"
    },
    {
      "src": "): ) [2073,2074]",
      "dest": "): ) [2878,2879]"
    },
    {
      "src": "comment: // Copy msg.data. We take full control of memory in this inline assembly [3696,3768]",
      "dest": "comment: // Copy msg.data. We take full control of memory in this inline assembly [5274,5346]"
    },
    {
      "src": "): ) [1823,1824]",
      "dest": "): ) [1897,1898]"
    },
    {
      "src": "assembly: assembly [3673,3681]",
      "dest": "assembly: assembly [5251,5259]"
    },
    {
      "src": "call_argument [3570,3601]",
      "dest": "call_argument [5148,5179]"
    },
    {
      "src": "): ) [2037,2038]",
      "dest": "): ) [2842,2843]"
    },
    {
      "src": "): ) [2300,2301]",
      "dest": "): ) [3866,3867]"
    },
    {
      "src": "member_expression [2012,2022]",
      "dest": "member_expression [2817,2827]"
    },
    {
      "src": ",: , [4234,4235]",
      "dest": ",: , [5812,5813]"
    },
    {
      "src": "comment: // out and outsize are 0 for now, as we don't know the out size yet. [4010,4078]",
      "dest": "comment: // out and outsize are 0 for now, as we don't know the out size yet. [5588,5656]"
    },
    {
      "src": "user_defined_type [1605,1620]",
      "dest": "user_defined_type [1637,1652]"
    },
    {
      "src": "(: ( [2943,2944]",
      "dest": "(: ( [4490,4491]"
    },
    {
      "src": ",: , [4389,4390]",
      "dest": ",: , [5955,5956]"
    },
    {
      "src": "comment: /*       Returns the call proxy implementation address.     */ [2154,2216]",
      "dest": "comment: /*       Returns the call proxy implementation address.     */ [3720,3782]"
    },
    {
      "src": "member_expression [2057,2072]",
      "dest": "member_expression [2862,2877]"
    },
    {
      "src": "string [724,745]",
      "dest": "string [724,745]"
    },
    {
      "src": "public: public [1683,1689]",
      "dest": "public: public [1714,1720]"
    },
    {
      "src": "member_expression [3654,3663]",
      "dest": "member_expression [5232,5241]"
    },
    {
      "src": "(: ( [2029,2030]",
      "dest": "(: ( [2834,2835]"
    },
    {
      "src": "(: ( [1818,1819]",
      "dest": "(: ( [1892,1893]"
    },
    {
      "src": "string [1965,1986]",
      "dest": "string [2770,2791]"
    },
    {
      "src": "{: { [3682,3683]",
      "dest": "{: { [5260,5261]"
    },
    {
      "src": "call_expression [2109,2141]",
      "dest": "call_expression [2914,2946]"
    },
    {
      "src": "): ) [3600,3601]",
      "dest": "): ) [5178,5179]"
    },
    {
      "src": "\": \" [3603,3604]",
      "dest": "\": \" [5181,5182]"
    },
    {
      "src": "): ) [3245,3246]",
      "dest": "): ) [4792,4793]"
    },
    {
      "src": "): ) [4114,4115]",
      "dest": "): ) [5692,5693]"
    },
    {
      "src": "identifier: isContract [2062,2072]",
      "dest": "identifier: isContract [2867,2877]"
    },
    {
      "src": "comment: /*       Contract's default function. Pass execution to the implementation contract (using call).       It returns back to the external caller whatever the implementation called code returns.     */ [3259,3457]",
      "dest": "comment: /*       Contract's default function. Pass execution to the implementation contract (using call).       It returns back to the external caller whatever the implementation called code returns.     */ [4806,5004]"
    },
    {
      "src": "yul_decimal_number: 0 [4163,4164]",
      "dest": "yul_decimal_number: 0 [5741,5742]"
    },
    {
      "src": "payable: payable [3186,3193]",
      "dest": "payable: payable [4733,4740]"
    },
    {
      "src": "primitive_type [1997,2004]",
      "dest": "primitive_type [2802,2809]"
    },
    {
      "src": "=: = [3652,3653]",
      "dest": "=: = [5230,5231]"
    },
    {
      "src": "is: is [1602,1604]",
      "dest": "is: is [1634,1636]"
    },
    {
      "src": "calldatasize: calldatasize [4144,4156]",
      "dest": "calldatasize: calldatasize [5722,5734]"
    },
    {
      "src": "private: private [2559,2566]",
      "dest": "private: private [4125,4132]"
    },
    {
      "src": "yul_evm_builtin [4473,4479]",
      "dest": "yul_evm_builtin [6027,6033]"
    },
    {
      "src": "yul_block [4359,4426]",
      "dest": "yul_block [5929,5988]"
    },
    {
      "src": ":=: := [4102,4104]",
      "dest": ":=: := [5680,5682]"
    },
    {
      "src": "return_statement [2923,2985]",
      "dest": "return_statement [4470,4532]"
    },
    {
      "src": "(: ( [2253,2254]",
      "dest": "(: ( [3819,3820]"
    },
    {
      "src": "address: address [1997,2004]",
      "dest": "address: address [2802,2809]"
    },
    {
      "src": "assembly_statement [3673,4528]",
      "dest": "assembly_statement [5251,6078]"
    },
    {
      "src": "call_argument [2076,2098]",
      "dest": "call_argument [2881,2903]"
    },
    {
      "src": "type_name [2312,2319]",
      "dest": "type_name [3878,3885]"
    },
    {
      "src": ",: , [2027,2028]",
      "dest": ",: , [2832,2833]"
    },
    {
      "src": "call_expression [2944,2969]",
      "dest": "call_expression [4491,4516]"
    },
    {
      "src": "default: default [4443,4450]",
      "dest": "default: default [6001,6008]"
    },
    {
      "src": "identifier: isValid [2971,2978]",
      "dest": "identifier: isValid [4518,4525]"
    },
    {
      "src": ",: , [3939,3940]",
      "dest": ",: , [5517,5518]"
    },
    {
      "src": "import_directive [690,716]",
      "dest": "import_directive [690,716]"
    },
    {
      "src": "): ) [3627,3628]",
      "dest": "): ) [5205,5206]"
    },
    {
      "src": "identifier: result [4095,4101]",
      "dest": "identifier: result [5673,5679]"
    },
    {
      "src": "call_expression [3562,3628]",
      "dest": "call_expression [5140,5206]"
    },
    {
      "src": "yul_evm_builtin [2645,2651]",
      "dest": "yul_evm_builtin [4211,4217]"
    },
    {
      "src": "identifier: _implementation [2380,2395]",
      "dest": "identifier: _implementation [3946,3961]"
    },
    {
      "src": "type_name [1880,1885]",
      "dest": "type_name [2664,2669]"
    },
    {
      "src": "identifier: slot [2405,2409]",
      "dest": "identifier: slot [3971,3975]"
    },
    {
      "src": "identifier: value [4134,4139]",
      "dest": "identifier: value [5712,5717]"
    },
    {
      "src": "primitive_type [2532,2539]",
      "dest": "primitive_type [4098,4105]"
    },
    {
      "src": "identifier: callProxyImplementation [2944,2967]",
      "dest": "identifier: callProxyImplementation [4491,4514]"
    },
    {
      "src": "yul_evm_builtin [3941,3953]",
      "dest": "yul_evm_builtin [5519,5531]"
    },
    {
      "src": "state_mutability [2882,2886]",
      "dest": "state_mutability [4440,4444]"
    },
    {
      "src": "identifier: StorageSlots [1622,1634]",
      "dest": "identifier: StorageSlots [1654,1666]"
    },
    {
      "src": "identifier: callProxyImplementation [3527,3550]",
      "dest": "identifier: callProxyImplementation [5105,5128]"
    },
    {
      "src": "function: function [1860,1868]",
      "dest": "function: function [2644,2652]"
    },
    {
      "src": "comment: // Copy the returned data. [4179,4205]",
      "dest": "comment: // Copy the returned data. [5757,5783]"
    },
    {
      "src": "solidity_pragma_token [643,659]",
      "dest": "solidity_pragma_token [643,659]"
    },
    {
      "src": "}: } [4533,4534]",
      "dest": "}: } [6083,6084]"
    },
    {
      "src": ",: , [3601,3602]",
      "dest": ",: , [5179,5180]"
    },
    {
      "src": "identifier: _implementation [4117,4132]",
      "dest": "identifier: _implementation [5695,5710]"
    },
    {
      "src": "type_name [2577,2584]",
      "dest": "type_name [4143,4150]"
    },
    {
      "src": "string_literal [2076,2098]",
      "dest": "string_literal [2881,2903]"
    },
    {
      "src": "using_directive [1642,1670]",
      "dest": "using_directive [1673,1701]"
    },
    {
      "src": "string_literal [1965,1986]",
      "dest": "string_literal [2770,2791]"
    },
    {
      "src": "yul_path [4134,4139]",
      "dest": "yul_path [5712,5717]"
    },
    {
      "src": "revert: revert [3204,3210]",
      "dest": "revert: revert [4751,4757]"
    },
    {
      "src": "{: { [4451,4452]",
      "dest": "{: { [6009,6010]"
    },
    {
      "src": "function_body [2567,2692]",
      "dest": "function_body [4133,4258]"
    },
    {
      "src": "receive: receive [3167,3174]",
      "dest": "receive: receive [4714,4721]"
    },
    {
      "src": "external: external [3473,3481]",
      "dest": "external: external [5020,5028]"
    },
    {
      "src": "): ) [1986,1987]",
      "dest": "): ) [2791,2792]"
    }
  ],
  "actions": [
    {
      "action": "insert-node",
      "tree": "comment: // NOLINTNEXTLINE locked-ether. [1583,1614]",
      "parent": "source_file [0,6087]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: // NOLINTNEXTLINE: external-function. [1810,1847]",
      "parent": "contract_body [1667,6086]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /*       Proxy calls the function initialize upon activating an implementation.       In the context of the CallProxy contract, the mainstream operation of       initialize is to extract the real implementation from the passed call data,       and to save it in the CallProxyImplementation slot.        However, in a case of EIC flow,       The implementation address is set, as in the normal flow, and then the       EIC initialize() function is called with the remaining data.        Case I (no EIC):         [0 .. 31] implementation address        Case II (EIC):         data length >= 64         [0  .. 31] implementation address         [32 .. 63] EIC address         [64 -    ] EIC init data.     */ [1934,2639]",
      "parent": "contract_body [1667,6086]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "function_definition [3174,3714]",
      "parent": "contract_body [1667,6086]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "if_statement [2956,3162]",
      "parent": "function_body [2712,3168]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: // NOLINT locked-ether. [5047,5070]",
      "parent": "function_body [5037,6084]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [2730,2768]",
      "parent": "call_argument [2730,2768]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "member_expression [2730,2762]",
      "parent": "binary_expression [2730,2768]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [2763,2765]",
      "parent": "binary_expression [2730,2768]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 64 [2766,2768]",
      "parent": "binary_expression [2730,2768]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [2730,2755]",
      "parent": "member_expression [2730,2762]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [2755,2756]",
      "parent": "member_expression [2730,2762]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: length [2756,2762]",
      "parent": "member_expression [2730,2762]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [1946,1963]",
      "parent": "binary_expression [2730,2755]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "||: || [2748,2750]",
      "parent": "binary_expression [2730,2755]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: data [2751,2755]",
      "parent": "binary_expression [2730,2755]",
      "at": 2
    }
  ]
}