{
  "matches": [
    {
      "src": "): ) [1663,1664]",
      "dest": "): ) [1734,1735]"
    },
    {
      "src": "internal: internal [2021,2029]",
      "dest": "internal: internal [2084,2092]"
    },
    {
      "src": "call_argument [2400,2432]",
      "dest": "call_argument [2495,2527]"
    },
    {
      "src": "function: function [953,961]",
      "dest": "function: function [953,961]"
    },
    {
      "src": "string [2256,2285]",
      "dest": "string [2351,2380]"
    },
    {
      "src": "comment: // Adding a verifier to the list is immediate - this is used for fast resolution of [3180,3263]",
      "dest": "comment: // Adding a verifier to the list is immediate - this is used for fast resolution of [3326,3409]"
    },
    {
      "src": "identifier: ApprovalChainData [3498,3515]",
      "dest": "identifier: ApprovalChainData [3644,3661]"
    },
    {
      "src": "identifier: realContractId [2417,2431]",
      "dest": "identifier: realContractId [2512,2526]"
    },
    {
      "src": ",: , [2781,2782]",
      "dest": ",: , [2885,2886]"
    },
    {
      "src": "variable_declaration_statement [2114,2230]",
      "dest": "variable_declaration_statement [2173,2325]"
    },
    {
      "src": "uint256: uint256 [1000,1007]",
      "dest": "uint256: uint256 [1000,1007]"
    },
    {
      "src": "): ) [2939,2940]",
      "dest": "): ) [3087,3088]"
    },
    {
      "src": "member_expression [1642,1659]",
      "dest": "member_expression [1713,1730]"
    },
    {
      "src": "string_literal [1719,1743]",
      "dest": "string_literal [1790,1814]"
    },
    {
      "src": "internal: internal [1429,1437]",
      "dest": "internal: internal [1456,1464]"
    },
    {
      "src": "string: string [2921,2927]",
      "dest": "string: string [3069,3075]"
    },
    {
      "src": "(: ( [816,817]",
      "dest": "(: ( [816,817]"
    },
    {
      "src": "): ) [2227,2228]",
      "dest": "): ) [2313,2314]"
    },
    {
      "src": "{: { [3516,3517]",
      "dest": "{: { [3662,3663]"
    },
    {
      "src": "visibility [2806,2814]",
      "dest": "visibility [2910,2918]"
    },
    {
      "src": "): ) [2497,2498]",
      "dest": "): ) [2601,2602]"
    },
    {
      "src": "primitive_type [3846,3853]",
      "dest": "primitive_type [3991,3998]"
    },
    {
      "src": "]: ] [3534,3535]",
      "dest": "]: ] [3680,3681]"
    },
    {
      "src": "call_argument [2350,2358]",
      "dest": "call_argument [2445,2453]"
    },
    {
      "src": "type_name [2129,2134]",
      "dest": "type_name [2188,2193]"
    },
    {
      "src": "(: ( [1614,1615]",
      "dest": "(: ( [1685,1686]"
    },
    {
      "src": "uint256: uint256 [833,840]",
      "dest": "uint256: uint256 [833,840]"
    },
    {
      "src": "{: { [2815,2816]",
      "dest": "{: { [2919,2920]"
    },
    {
      "src": "primitive_type [1711,1715]",
      "dest": "primitive_type [1782,1786]"
    },
    {
      "src": "}: } [1754,1755]",
      "dest": "}: } [1825,1826]"
    },
    {
      "src": "identifier: account [785,792]",
      "dest": "identifier: account [785,792]"
    },
    {
      "src": "\": \" [1085,1086]",
      "dest": "\": \" [1085,1086]"
    },
    {
      "src": ",: , [2838,2839]",
      "dest": ",: , [2986,2987]"
    },
    {
      "src": "assembly_statement [855,916]",
      "dest": "assembly_statement [855,916]"
    },
    {
      "src": "(: ( [2376,2377]",
      "dest": "(: ( [2471,2472]"
    },
    {
      "src": "call_argument [2063,2078]",
      "dest": "call_argument [2122,2137]"
    },
    {
      "src": ".: . [1690,1691]",
      "dest": ".: . [1761,1762]"
    },
    {
      "src": ",: , [1606,1607]",
      "dest": ",: , [1677,1678]"
    },
    {
      "src": "identifier: list [3536,3540]",
      "dest": "identifier: list [3682,3686]"
    },
    {
      "src": "identifier: call [2880,2884]",
      "dest": "identifier: call [3028,3032]"
    },
    {
      "src": "{: { [864,865]",
      "dest": "{: { [864,865]"
    },
    {
      "src": "variable_declaration_tuple [1035,1051]",
      "dest": "variable_declaration_tuple [1035,1051]"
    },
    {
      "src": "identifier: decode [1691,1697]",
      "dest": "identifier: decode [1762,1768]"
    },
    {
      "src": "parameter [1989,2011]",
      "dest": "parameter [2060,2082]"
    },
    {
      "src": "identifier: success [1599,1606]",
      "dest": "identifier: success [1670,1677]"
    },
    {
      "src": "type_name [1036,1040]",
      "dest": "type_name [1036,1040]"
    },
    {
      "src": "identifier: tokenAddress [1554,1566]",
      "dest": "identifier: tokenAddress [1625,1637]"
    },
    {
      "src": "type_name [2826,2830]",
      "dest": "type_name [2974,2978]"
    },
    {
      "src": ",: , [2079,2080]",
      "dest": ",: , [2138,2139]"
    },
    {
      "src": "function_definition [953,1144]",
      "dest": "function_definition [953,1171]"
    },
    {
      "src": "parameter [981,998]",
      "dest": "parameter [981,998]"
    },
    {
      "src": "call_expression [2400,2432]",
      "dest": "call_expression [2495,2527]"
    },
    {
      "src": "identifier: safeTokenContractCall [1362,1383]",
      "dest": "identifier: safeTokenContractCall [1389,1410]"
    },
    {
      "src": "variable_declaration [2129,2152]",
      "dest": "variable_declaration [2188,2211]"
    },
    {
      "src": "primitive_type [1527,1532]",
      "dest": "primitive_type [1598,1603]"
    },
    {
      "src": "}: } [946,947]",
      "dest": "}: } [946,947]"
    },
    {
      "src": "call_argument [1599,1606]",
      "dest": "call_argument [1670,1677]"
    },
    {
      "src": "call_argument [1698,1708]",
      "dest": "call_argument [1769,1779]"
    },
    {
      "src": "expression_statement [2369,2499]",
      "dest": "expression_statement [2464,2603]"
    },
    {
      "src": "): ) [1479,1480]",
      "dest": "): ) [1506,1507]"
    },
    {
      "src": "(: ( [2927,2928]",
      "dest": "(: ( [3075,3076]"
    },
    {
      "src": "=: = [1552,1553]",
      "dest": "=: = [1623,1624]"
    },
    {
      "src": "member_expression [2327,2337]",
      "dest": "member_expression [2422,2432]"
    },
    {
      "src": "(: ( [1598,1599]",
      "dest": "(: ( [1669,1670]"
    },
    {
      "src": "returns: returns [808,815]",
      "dest": "returns: returns [808,815]"
    },
    {
      "src": "): ) [2285,2286]",
      "dest": "): ) [2380,2381]"
    },
    {
      "src": "primitive_type [2115,2119]",
      "dest": "primitive_type [2174,2178]"
    },
    {
      "src": "memory: memory [2846,2852]",
      "dest": "memory: memory [2994,3000]"
    },
    {
      "src": "): ) [2358,2359]",
      "dest": "): ) [2453,2454]"
    },
    {
      "src": "identifier: success [1106,1113]",
      "dest": "identifier: success [1133,1140]"
    },
    {
      "src": "function_definition [2725,2947]",
      "dest": "function_definition [2829,3095]"
    },
    {
      "src": "yul_path [878,882]",
      "dest": "yul_path [878,882]"
    },
    {
      "src": "primitive_type [2129,2134]",
      "dest": "primitive_type [2188,2193]"
    },
    {
      "src": "identifier: encodeWithSignature [2195,2214]",
      "dest": "identifier: encodeWithSignature [2281,2300]"
    },
    {
      "src": "contract_body [3019,3886]",
      "dest": "contract_body [3166,4031]"
    },
    {
      "src": "type_cast_expression [2921,2939]",
      "dest": "type_cast_expression [3069,3087]"
    },
    {
      "src": "bytes: bytes [1406,1411]",
      "dest": "bytes: bytes [1433,1438]"
    },
    {
      "src": "}: } [2949,2950]",
      "dest": "}: } [3096,3097]"
    },
    {
      "src": ":: : [1074,1075]",
      "dest": ":: : [1074,1075]"
    },
    {
      "src": ".: . [2171,2172]",
      "dest": ".: . [2230,2231]"
    },
    {
      "src": "identifier: contractAddress [2063,2078]",
      "dest": "identifier: contractAddress [2122,2137]"
    },
    {
      "src": "\": \" [1482,1483]",
      "dest": "\": \" [1509,1510]"
    },
    {
      "src": "identifier: recipient [989,998]",
      "dest": "identifier: recipient [989,998]"
    },
    {
      "src": "memory: memory [2303,2309]",
      "dest": "memory: memory [2398,2404]"
    },
    {
      "src": "function: function [757,765]",
      "dest": "function: function [757,765]"
    },
    {
      "src": "}: } [915,916]",
      "dest": "}: } [915,916]"
    },
    {
      "src": "library_declaration [2998,3886]",
      "dest": "library_declaration [3145,4031]"
    },
    {
      "src": "identifier: isContract [766,776]",
      "dest": "identifier: isContract [766,776]"
    },
    {
      "src": "string [2215,2227]",
      "dest": "string [2301,2313]"
    },
    {
      "src": "call_argument [2081,2103]",
      "dest": "call_argument [2140,2162]"
    },
    {
      "src": "address: address [1964,1971]",
      "dest": "address: address [2035,2042]"
    },
    {
      "src": "memory: memory [2789,2795]",
      "dest": "memory: memory [2893,2899]"
    },
    {
      "src": "string: string [1608,1614]",
      "dest": "string: string [1679,1685]"
    },
    {
      "src": "): ) [821,822]",
      "dest": "): ) [821,822]"
    },
    {
      "src": "identifier: size [878,882]",
      "dest": "identifier: size [878,882]"
    },
    {
      "src": ",: , [1525,1526]",
      "dest": ",: , [1596,1597]"
    },
    {
      "src": "primitive_type [3526,3533]",
      "dest": "primitive_type [3672,3679]"
    },
    {
      "src": "call_argument [1482,1501]",
      "dest": "call_argument [1509,1528]"
    },
    {
      "src": "expression_statement [1098,1138]",
      "dest": "expression_statement [1125,1165]"
    },
    {
      "src": "call_expression [1098,1137]",
      "dest": "call_expression [1125,1164]"
    },
    {
      "src": "): ) [2011,2012]",
      "dest": "): ) [2082,2083]"
    },
    {
      "src": "string [1482,1501]",
      "dest": "string [1509,1528]"
    },
    {
      "src": "call_argument [1115,1136]",
      "dest": "call_argument [1142,1163]"
    },
    {
      "src": "call_argument [2465,2497]",
      "dest": "call_argument [2560,2592]"
    },
    {
      "src": "identifier: encodePacked [2404,2416]",
      "dest": "identifier: encodePacked [2499,2511]"
    },
    {
      "src": "primitive_type [777,784]",
      "dest": "primitive_type [777,784]"
    },
    {
      "src": "=: = [2325,2326]",
      "dest": "=: = [2420,2421]"
    },
    {
      "src": "call_expression [1679,1744]",
      "dest": "call_expression [1750,1815]"
    },
    {
      "src": "parameter [2761,2781]",
      "dest": "parameter [2865,2885]"
    },
    {
      "src": "identifier: tokenAddress [2769,2781]",
      "dest": "identifier: tokenAddress [2873,2885]"
    },
    {
      "src": "identifier: returndata [1698,1708]",
      "dest": "identifier: returndata [1769,1779]"
    },
    {
      "src": "call_expression [2369,2498]",
      "dest": "call_expression [2464,2602]"
    },
    {
      "src": "(: ( [2214,2215]",
      "dest": "(: ( [2300,2301]"
    },
    {
      "src": "string_literal [1084,1086]",
      "dest": "string_literal [1084,1086]"
    },
    {
      "src": "variable_declaration [2296,2324]",
      "dest": "variable_declaration [2391,2419]"
    },
    {
      "src": "type_name [2840,2845]",
      "dest": "type_name [2988,2993]"
    },
    {
      "src": "call_argument [2912,2919]",
      "dest": "call_argument [3060,3067]"
    },
    {
      "src": "address: address [2761,2768]",
      "dest": "address: address [2865,2872]"
    },
    {
      "src": ".: . [2403,2404]",
      "dest": ".: . [2498,2499]"
    },
    {
      "src": "): ) [2152,2153]",
      "dest": "): ) [2211,2212]"
    },
    {
      "src": "): ) [1716,1717]",
      "dest": "): ) [1787,1788]"
    },
    {
      "src": "primitive_type [1384,1391]",
      "dest": "primitive_type [1411,1418]"
    },
    {
      "src": "call_expression [2904,2940]",
      "dest": "call_expression [3052,3088]"
    },
    {
      "src": "): ) [1625,1626]",
      "dest": "): ) [1696,1697]"
    },
    {
      "src": "address: address [3526,3533]",
      "dest": "address: address [3672,3679]"
    },
    {
      "src": "visibility [1016,1024]",
      "dest": "visibility [1016,1024]"
    },
    {
      "src": "\": \" [2081,2082]",
      "dest": "\": \" [2140,2141]"
    },
    {
      "src": "(: ( [2884,2885]",
      "dest": "(: ( [3032,3033]"
    },
    {
      "src": "\": \" [2496,2497]",
      "dest": "\": \" [2591,2592]"
    },
    {
      "src": "type_name [3846,3853]",
      "dest": "type_name [3991,3998]"
    },
    {
      "src": "(: ( [1571,1572]",
      "dest": "(: ( [1642,1643]"
    },
    {
      "src": "primitive_type [2826,2830]",
      "dest": "primitive_type [2974,2978]"
    },
    {
      "src": "member_expression [1687,1697]",
      "dest": "member_expression [1758,1768]"
    },
    {
      "src": "call_argument [2417,2431]",
      "dest": "call_argument [2512,2526]"
    },
    {
      "src": "): ) [2863,2864]",
      "dest": "): ) [3011,3012]"
    },
    {
      "src": "call_expression [1591,1627]",
      "dest": "call_expression [1662,1698]"
    },
    {
      "src": "identifier: call [2172,2176]",
      "dest": "identifier: call [2231,2235]"
    },
    {
      "src": "}: } [3883,3884]",
      "dest": "}: } [4028,4029]"
    },
    {
      "src": "identifier: size [932,936]",
      "dest": "identifier: size [932,936]"
    },
    {
      "src": "number_literal: 0 [939,940]",
      "dest": "number_literal: 0 [939,940]"
    },
    {
      "src": "if: if [1638,1640]",
      "dest": "if: if [1709,1711]"
    },
    {
      "src": "struct_expression [1054,1083]",
      "dest": "struct_expression [1054,1083]"
    },
    {
      "src": "parameter [1384,1404]",
      "dest": "parameter [1411,1431]"
    },
    {
      "src": "(: ( [2114,2115]",
      "dest": "(: ( [2173,2174]"
    },
    {
      "src": "string: string [2296,2302]",
      "dest": "string: string [2391,2397]"
    },
    {
      "src": "(: ( [1105,1106]",
      "dest": "(: ( [1132,1133]"
    },
    {
      "src": "variable_declaration [1036,1048]",
      "dest": "variable_declaration [1036,1048]"
    },
    {
      "src": "struct_field_assignment [1069,1082]",
      "dest": "struct_field_assignment [1069,1082]"
    },
    {
      "src": ".: . [1566,1567]",
      "dest": ".: . [1637,1638]"
    },
    {
      "src": "call_argument [2247,2254]",
      "dest": "call_argument [2342,2349]"
    },
    {
      "src": "{: { [1068,1069]",
      "dest": "{: { [1068,1069]"
    },
    {
      "src": "library: library [733,740]",
      "dest": "library: library [733,740]"
    },
    {
      "src": "internal: internal [2806,2814]",
      "dest": "internal: internal [2910,2918]"
    },
    {
      "src": "identifier: contractAddress [1972,1987]",
      "dest": "identifier: contractAddress [2043,2058]"
    },
    {
      "src": "^:  ^ [651,653]",
      "dest": "^:  ^ [651,653]"
    },
    {
      "src": "call_argument [2052,2079]",
      "dest": "call_argument [2111,2138]"
    },
    {
      "src": "identifier: require [2044,2051]",
      "dest": "identifier: require [2103,2110]"
    },
    {
      "src": "function_definition [757,947]",
      "dest": "function_definition [757,947]"
    },
    {
      "src": "(: ( [2246,2247]",
      "dest": "(: ( [2341,2342]"
    },
    {
      "src": "): ) [905,906]",
      "dest": "): ) [905,906]"
    },
    {
      "src": "string_literal [2256,2285]",
      "dest": "string_literal [2351,2380]"
    },
    {
      "src": "\": \" [1719,1720]",
      "dest": "\": \" [1790,1791]"
    },
    {
      "src": "type_name [3526,3535]",
      "dest": "type_name [3672,3681]"
    },
    {
      "src": "type_name [1513,1517]",
      "dest": "type_name [1584,1588]"
    },
    {
      "src": "solidity_pragma_token [643,659]",
      "dest": "solidity_pragma_token [643,659]"
    },
    {
      "src": "): ) [1501,1502]",
      "dest": "): ) [1528,1529]"
    },
    {
      "src": "identifier: validateContractId [1945,1963]",
      "dest": "identifier: validateContractId [2016,2034]"
    },
    {
      "src": "comment: /*       Similar to safeTokenContractCall, but always ignores the return value.        Assumes some other method is used to detect the failures       (e.g. balance is checked before and after the call).     */ [2511,2720]",
      "dest": "comment: /*       Similar to safeTokenContractCall, but always ignores the return value.        Assumes some other method is used to detect the failures       (e.g. balance is checked before and after the call).     */ [2615,2824]"
    },
    {
      "src": "library: library [2998,3005]",
      "dest": "library: library [3145,3152]"
    },
    {
      "src": "expression_statement [2044,2105]",
      "dest": "expression_statement [2103,2164]"
    },
    {
      "src": "function_body [2815,2947]",
      "dest": "function_body [2919,3095]"
    },
    {
      "src": ",: , [1480,1481]",
      "dest": ",: , [1507,1508]"
    },
    {
      "src": "): ) [2078,2079]",
      "dest": "): ) [2137,2138]"
    },
    {
      "src": "comment: /*       Validates that the passed contract address is of a real contract,       and that its id hash (as infered fromn identify()) matched the expected one.     */ [1767,1931]",
      "dest": "comment: /*       Validates that the passed contract address is of a real contract,       and that its id hash (as infered fromn identify()) matched the expected one.     */ [1838,2002]"
    },
    {
      "src": "yul_function_call [886,906]",
      "dest": "yul_function_call [886,906]"
    },
    {
      "src": "uint256: uint256 [3846,3853]",
      "dest": "uint256: uint256 [3991,3998]"
    },
    {
      "src": "): ) [1086,1087]",
      "dest": "): ) [1086,1087]"
    },
    {
      "src": "identifier: callData [1419,1427]",
      "dest": "identifier: callData [1446,1454]"
    },
    {
      "src": "contract_body [751,2950]",
      "dest": "contract_body [751,3097]"
    },
    {
      "src": ".: . [1652,1653]",
      "dest": ".: . [1723,1724]"
    },
    {
      "src": "call_argument [1710,1716]",
      "dest": "call_argument [1781,1787]"
    },
    {
      "src": ",: , [2451,2452]",
      "dest": ",: , [2546,2547]"
    },
    {
      "src": "bytes32: bytes32 [1989,1996]",
      "dest": "bytes32: bytes32 [2060,2067]"
    },
    {
      "src": "identifier: returndata [2142,2152]",
      "dest": "identifier: returndata [2201,2211]"
    },
    {
      "src": "type_name [1406,1411]",
      "dest": "type_name [1433,1438]"
    },
    {
      "src": "yul_evm_builtin [886,897]",
      "dest": "yul_evm_builtin [886,897]"
    },
    {
      "src": "string_literal [2215,2227]",
      "dest": "string_literal [2301,2313]"
    },
    {
      "src": "(: ( [1383,1384]",
      "dest": "(: ( [1410,1411]"
    },
    {
      "src": "return_type_definition [808,822]",
      "dest": "return_type_definition [808,822]"
    },
    {
      "src": "\": \" [1084,1085]",
      "dest": "\": \" [1084,1085]"
    },
    {
      "src": "expression_statement [1591,1628]",
      "dest": "expression_statement [1662,1699]"
    },
    {
      "src": "identifier: tokenAddress [1467,1479]",
      "dest": "identifier: tokenAddress [1494,1506]"
    },
    {
      "src": "type_name [1527,1532]",
      "dest": "type_name [1598,1603]"
    },
    {
      "src": "expression_statement [2239,2287]",
      "dest": "expression_statement [2334,2382]"
    },
    {
      "src": "call_argument [1615,1625]",
      "dest": "call_argument [1686,1696]"
    },
    {
      "src": "member_expression [2191,2214]",
      "dest": "member_expression [2277,2300]"
    },
    {
      "src": "): ) [1626,1627]",
      "dest": "): ) [1697,1698]"
    },
    {
      "src": "): ) [3853,3854]",
      "dest": "): ) [3998,3999]"
    },
    {
      "src": ",: , [1404,1405]",
      "dest": ",: , [1431,1432]"
    },
    {
      "src": "(: ( [2176,2177]",
      "dest": "(: ( [2235,2236]"
    },
    {
      "src": "call_argument [2885,2893]",
      "dest": "call_argument [3033,3041]"
    },
    {
      "src": "identifier: require [2239,2246]",
      "dest": "identifier: require [2334,2341]"
    },
    {
      "src": "visibility [1429,1437]",
      "dest": "visibility [1456,1464]"
    },
    {
      "src": "primitive_type [1513,1517]",
      "dest": "primitive_type [1584,1588]"
    },
    {
      "src": "}: } [1143,1144]",
      "dest": "}: } [1170,1171]"
    },
    {
      "src": ",: , [2127,2128]",
      "dest": ",: , [2186,2187]"
    },
    {
      "src": "}: } [3885,3886]",
      "dest": "}: } [4030,4031]"
    },
    {
      "src": "call_argument [1719,1743]",
      "dest": "call_argument [1790,1814]"
    },
    {
      "src": "type_name [833,840]",
      "dest": "type_name [833,840]"
    },
    {
      "src": "identifier: callData [1572,1580]",
      "dest": "identifier: callData [1643,1651]"
    },
    {
      "src": "comment: /*   II. StarkExTypes - Common data types. */ [2952,2997]",
      "dest": "comment: /*   II. StarkExTypes - Common data types. */ [3099,3144]"
    },
    {
      "src": "number_literal: 0 [1662,1663]",
      "dest": "number_literal: 0 [1733,1734]"
    },
    {
      "src": "call_expression [1687,1717]",
      "dest": "call_expression [1758,1788]"
    },
    {
      "src": "mapping: mapping [3826,3833]",
      "dest": "mapping: mapping [3972,3979]"
    },
    {
      "src": "call_argument [2215,2227]",
      "dest": "call_argument [2301,2313]"
    },
    {
      "src": "identifier: success [2120,2127]",
      "dest": "identifier: success [2179,2186]"
    },
    {
      "src": "string_literal [2081,2103]",
      "dest": "string_literal [2140,2162]"
    },
    {
      "src": "primitive_type [2783,2788]",
      "dest": "primitive_type [2887,2892]"
    },
    {
      "src": "comment: // Structure representing a list of verifiers (validity/availability). [3026,3096]",
      "dest": "comment: // Structure representing a list of verifiers (validity/availability). [3172,3242]"
    },
    {
      "src": "variable_declaration_tuple [2114,2153]",
      "dest": "variable_declaration_tuple [2173,2212]"
    },
    {
      "src": "identifier: tokenAddress [1392,1404]",
      "dest": "identifier: tokenAddress [1419,1431]"
    },
    {
      "src": "variable_declaration [2840,2863]",
      "dest": "variable_declaration [2988,3011]"
    },
    {
      "src": "): ) [1743,1744]",
      "dest": "): ) [1814,1815]"
    },
    {
      "src": "identifier: abi [2191,2194]",
      "dest": "identifier: abi [2277,2280]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]",
      "dest": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]"
    },
    {
      "src": ",: , [2348,2349]",
      "dest": ",: , [2443,2444]"
    },
    {
      "src": "call_expression [1448,1502]",
      "dest": "call_expression [1475,1529]"
    },
    {
      "src": "call_argument [1456,1480]",
      "dest": "call_argument [1483,1507]"
    },
    {
      "src": "): ) [792,793]",
      "dest": "): ) [792,793]"
    },
    {
      "src": "\": \" [1742,1743]",
      "dest": "\": \" [1813,1814]"
    },
    {
      "src": "identifier: realContractId [2310,2324]",
      "dest": "identifier: realContractId [2405,2419]"
    },
    {
      "src": "bool: bool [817,821]",
      "dest": "bool: bool [817,821]"
    },
    {
      "src": ".: . [2330,2331]",
      "dest": ".: . [2425,2426]"
    },
    {
      "src": "identifier: success [2831,2838]",
      "dest": "identifier: success [2979,2986]"
    },
    {
      "src": "comment: // Removing from the list is time-locked, to ensure that any user of the system [3297,3376]",
      "dest": "comment: // Removing from the list is time-locked, to ensure that any user of the system [3443,3522]"
    },
    {
      "src": "\": \" [2226,2227]",
      "dest": "\": \" [2312,2313]"
    },
    {
      "src": "primitive_type [2761,2768]",
      "dest": "primitive_type [2865,2872]"
    },
    {
      "src": "identifier: returndata [1642,1652]",
      "dest": "identifier: returndata [1713,1723]"
    },
    {
      "src": "call_expression [2191,2228]",
      "dest": "call_expression [2277,2314]"
    },
    {
      "src": "memory: memory [1412,1418]",
      "dest": "memory: memory [1439,1445]"
    },
    {
      "src": "(: ( [1083,1084]",
      "dest": "(: ( [1083,1084]"
    },
    {
      "src": "variable_declaration_tuple [1512,1551]",
      "dest": "variable_declaration_tuple [1583,1622]"
    },
    {
      "src": "comment: /*       Safe wrapper around ERC20/ERC721 calls.       This is required because many deployed ERC20 contracts don't return a value.       See https://github.com/ethereum/solidity/issues/4116.     */ [1150,1348]",
      "dest": "comment: /*       Safe wrapper around ERC20/ERC721 calls.       This is required because many deployed ERC20 contracts don't return a value.       See https://github.com/ethereum/solidity/issues/4116.     */ [1177,1375]"
    },
    {
      "src": "function_definition [1936,2505]",
      "dest": "function_definition [2007,2609]"
    },
    {
      "src": "(: ( [2350,2351]",
      "dest": "(: ( [2445,2446]"
    },
    {
      "src": "string_literal [1482,1501]",
      "dest": "string_literal [1509,1528]"
    },
    {
      "src": "solidity: solidity [643,651]",
      "dest": "solidity: solidity [643,651]"
    },
    {
      "src": "identifier: StarkExTypes [3006,3018]",
      "dest": "identifier: StarkExTypes [3153,3165]"
    },
    {
      "src": "identifier: returndata [2928,2938]",
      "dest": "identifier: returndata [3076,3086]"
    },
    {
      "src": ".: . [1063,1064]",
      "dest": ".: . [1063,1064]"
    },
    {
      "src": "variable_declaration_statement [2825,2895]",
      "dest": "variable_declaration_statement [2973,3043]"
    },
    {
      "src": "}: } [2504,2505]",
      "dest": "}: } [2608,2609]"
    },
    {
      "src": "primitive_type [817,821]",
      "dest": "primitive_type [817,821]"
    },
    {
      "src": "address: address [777,784]",
      "dest": "address: address [777,784]"
    },
    {
      "src": "comment: /*   Common Utility librarries.   I. Addresses (extending address). */ [662,732]",
      "dest": "comment: /*   Common Utility librarries.   I. Addresses (extending address). */ [662,732]"
    },
    {
      "src": "state_mutability [803,807]",
      "dest": "state_mutability [803,807]"
    },
    {
      "src": "=>: => [3843,3845]",
      "dest": "=>: => [3988,3990]"
    },
    {
      "src": "address: address [981,988]",
      "dest": "address: address [981,988]"
    },
    {
      "src": "identifier: tokenAddress [2867,2879]",
      "dest": "identifier: tokenAddress [3015,3027]"
    },
    {
      "src": "comment: // removed. [3475,3486]",
      "dest": "comment: // removed. [3621,3632]"
    },
    {
      "src": "visibility [2021,2029]",
      "dest": "visibility [2084,2092]"
    },
    {
      "src": "function_body [1025,1144]",
      "dest": "function_body [1025,1171]"
    },
    {
      "src": "): ) [1427,1428]",
      "dest": "): ) [1454,1455]"
    },
    {
      "src": "): ) [1580,1581]",
      "dest": "): ) [1651,1652]"
    },
    {
      "src": ">: > [937,938]",
      "dest": ">: > [937,938]"
    },
    {
      "src": "\": \" [1500,1501]",
      "dest": "\": \" [1527,1528]"
    },
    {
      "src": "primitive_type [981,988]",
      "dest": "primitive_type [981,988]"
    },
    {
      "src": "identifier: returndata [2853,2863]",
      "dest": "identifier: returndata [3001,3011]"
    },
    {
      "src": "(: ( [2760,2761]",
      "dest": "(: ( [2864,2865]"
    },
    {
      "src": "call_expression [2867,2894]",
      "dest": "call_expression [3015,3042]"
    },
    {
      "src": "=: = [1052,1053]",
      "dest": "=: = [1052,1053]"
    },
    {
      "src": "(: ( [1686,1687]",
      "dest": "(: ( [1757,1758]"
    },
    {
      "src": "type_name [1000,1007]",
      "dest": "type_name [1000,1007]"
    },
    {
      "src": "variable_declaration [1513,1525]",
      "dest": "variable_declaration [1584,1596]"
    },
    {
      "src": "identifier: isContract [1456,1466]",
      "dest": "identifier: isContract [1483,1493]"
    },
    {
      "src": "primitive_type [2351,2357]",
      "dest": "primitive_type [2446,2452]"
    },
    {
      "src": "extcodesize: extcodesize [886,897]",
      "dest": "extcodesize: extcodesize [886,897]"
    },
    {
      "src": "variable_declaration_statement [2296,2360]",
      "dest": "variable_declaration_statement [2391,2455]"
    },
    {
      "src": "primitive_type [3835,3842]",
      "dest": "primitive_type [3980,3987]"
    },
    {
      "src": "variable_declaration_tuple [2825,2864]",
      "dest": "variable_declaration_tuple [2973,3012]"
    },
    {
      "src": "member_expression [2156,2176]",
      "dest": "member_expression [2215,2235]"
    },
    {
      "src": "variable_declaration [2115,2127]",
      "dest": "variable_declaration [2174,2186]"
    },
    {
      "src": "(: ( [2416,2417]",
      "dest": "(: ( [2511,2512]"
    },
    {
      "src": "string_literal [2465,2497]",
      "dest": "string_literal [2560,2592]"
    },
    {
      "src": "primitive_type [1989,1996]",
      "dest": "primitive_type [2060,2067]"
    },
    {
      "src": "): ) [1136,1137]",
      "dest": "): ) [1163,1164]"
    },
    {
      "src": "(: ( [2337,2338]",
      "dest": "(: ( [2432,2433]"
    },
    {
      "src": "{: { [1025,1026]",
      "dest": "{: { [1025,1026]"
    },
    {
      "src": "call_argument [2256,2285]",
      "dest": "call_argument [2351,2380]"
    },
    {
      "src": "bytes: bytes [2840,2845]",
      "dest": "bytes: bytes [2988,2993]"
    },
    {
      "src": "struct_member [3526,3541]",
      "dest": "struct_member [3672,3687]"
    },
    {
      "src": "type_name [981,988]",
      "dest": "type_name [981,988]"
    },
    {
      "src": "primitive_type [2921,2927]",
      "dest": "primitive_type [3069,3075]"
    },
    {
      "src": "comment: // A statement is valid only if all the verifiers in the list agree on it. [3101,3175]",
      "dest": "comment: // A statement is valid only if all the verifiers in the list agree on it. [3247,3321]"
    },
    {
      "src": "string [2081,2103]",
      "dest": "string [2140,2162]"
    },
    {
      "src": "call_argument [2390,2451]",
      "dest": "call_argument [2485,2546]"
    },
    {
      "src": "identifier: value [1069,1074]",
      "dest": "identifier: value [1069,1074]"
    },
    {
      "src": "(: ( [3834,3835]",
      "dest": "(: ( [3979,3980]"
    },
    {
      "src": "string [1115,1136]",
      "dest": "string [1142,1163]"
    },
    {
      "src": "parameter [2783,2804]",
      "dest": "parameter [2887,2908]"
    },
    {
      "src": "(: ( [980,981]",
      "dest": "(: ( [980,981]"
    },
    {
      "src": "yul_assignment [878,906]",
      "dest": "yul_assignment [878,906]"
    },
    {
      "src": "bool: bool [1036,1040]",
      "dest": "bool: bool [1036,1040]"
    },
    {
      "src": "comment: // Removal of the verifier with address A is allowed only in the case the value [3645,3724]",
      "dest": "comment: // Removal of the verifier with address A is allowed only in the case the value [3791,3870]"
    },
    {
      "src": "address: address [1384,1391]",
      "dest": "address: address [1411,1418]"
    },
    {
      "src": "call_argument [2928,2938]",
      "dest": "call_argument [3076,3086]"
    },
    {
      "src": "parameter [1964,1987]",
      "dest": "parameter [2035,2058]"
    },
    {
      "src": "{: { [1438,1439]",
      "dest": "{: { [1465,1466]"
    },
    {
      "src": ",: , [1987,1988]",
      "dest": ",: , [2058,2059]"
    },
    {
      "src": "identifier: length [1653,1659]",
      "dest": "identifier: length [1724,1730]"
    },
    {
      "src": "member_expression [1054,1068]",
      "dest": "member_expression [1054,1068]"
    },
    {
      "src": "type_name [3826,3854]",
      "dest": "type_name [3972,3999]"
    },
    {
      "src": "type_name [2761,2768]",
      "dest": "type_name [2865,2872]"
    },
    {
      "src": "==: == [2434,2436]",
      "dest": "==: == [2529,2531]"
    },
    {
      "src": "identifier: unlockedForRemovalTime [3855,3877]",
      "dest": "identifier: unlockedForRemovalTime [4000,4022]"
    },
    {
      "src": "function_body [2034,2505]",
      "dest": "function_body [2093,2609]"
    },
    {
      "src": "parameter [1000,1014]",
      "dest": "parameter [1000,1014]"
    },
    {
      "src": "): ) [2938,2939]",
      "dest": "): ) [3086,3087]"
    },
    {
      "src": "primitive_type [1036,1040]",
      "dest": "primitive_type [1036,1040]"
    },
    {
      "src": "(: ( [897,898]",
      "dest": "(: ( [897,898]"
    },
    {
      "src": "function: function [1936,1944]",
      "dest": "function: function [2007,2015]"
    },
    {
      "src": "variable_declaration_statement [1035,1088]",
      "dest": "variable_declaration_statement [1035,1088]"
    },
    {
      "src": "type_name [1964,1971]",
      "dest": "type_name [2035,2042]"
    },
    {
      "src": "call_argument [1608,1626]",
      "dest": "call_argument [1679,1697]"
    },
    {
      "src": "identifier: require [1448,1455]",
      "dest": "identifier: require [1475,1482]"
    },
    {
      "src": "call_expression [2044,2104]",
      "dest": "call_expression [2103,2163]"
    },
    {
      "src": "bytes: bytes [2129,2134]",
      "dest": "bytes: bytes [2188,2193]"
    },
    {
      "src": "variable_declaration [2826,2838]",
      "dest": "variable_declaration [2974,2986]"
    },
    {
      "src": "member_expression [2867,2884]",
      "dest": "member_expression [3015,3032]"
    },
    {
      "src": "library_declaration [733,2950]",
      "dest": "library_declaration [733,3097]"
    },
    {
      "src": "(: ( [2911,2912]",
      "dest": "(: ( [3059,3060]"
    },
    {
      "src": ",: , [1048,1049]",
      "dest": ",: , [1048,1049]"
    },
    {
      "src": "source_file [0,3887]",
      "dest": "source_file [0,4032]"
    },
    {
      "src": "binary_expression [2390,2451]",
      "dest": "binary_expression [2485,2546]"
    },
    {
      "src": "binary_expression [932,940]",
      "dest": "binary_expression [932,940]"
    },
    {
      "src": "identifier: recipient [1054,1063]",
      "dest": "identifier: recipient [1054,1063]"
    },
    {
      "src": "call_expression [1554,1581]",
      "dest": "call_expression [1625,1652]"
    },
    {
      "src": "function_body [1438,1761]",
      "dest": "function_body [1465,1832]"
    },
    {
      "src": "}: } [2946,2947]",
      "dest": "}: } [3094,3095]"
    },
    {
      "src": "call_expression [2239,2286]",
      "dest": "call_expression [2334,2381]"
    },
    {
      "src": ",: , [1708,1709]",
      "dest": ",: , [1779,1780]"
    },
    {
      "src": "): ) [1014,1015]",
      "dest": "): ) [1014,1015]"
    },
    {
      "src": "call_expression [2327,2359]",
      "dest": "call_expression [2422,2454]"
    },
    {
      "src": "struct_member [3826,3878]",
      "dest": "struct_member [3972,4023]"
    },
    {
      "src": "identifier: account [898,905]",
      "dest": "identifier: account [898,905]"
    },
    {
      "src": "function_body [823,947]",
      "dest": "function_body [823,947]"
    },
    {
      "src": "string: string [2351,2357]",
      "dest": "string: string [2446,2452]"
    },
    {
      "src": "identifier: require [1679,1686]",
      "dest": "identifier: require [1750,1757]"
    },
    {
      "src": "primitive_type [833,840]",
      "dest": "primitive_type [833,840]"
    },
    {
      "src": "{: { [1665,1666]",
      "dest": "{: { [1736,1737]"
    },
    {
      "src": "visibility [794,802]",
      "dest": "visibility [794,802]"
    },
    {
      "src": "comment: /*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "dest": "comment: /*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]"
    },
    {
      "src": "identifier: returndata [1540,1550]",
      "dest": "identifier: returndata [1611,1621]"
    },
    {
      "src": "parenthesized_expression [1710,1716]",
      "dest": "parenthesized_expression [1781,1787]"
    },
    {
      "src": "expression_statement [1679,1745]",
      "dest": "expression_statement [1750,1816]"
    },
    {
      "src": "parameter [777,792]",
      "dest": "parameter [777,792]"
    },
    {
      "src": "member_expression [2400,2416]",
      "dest": "member_expression [2495,2511]"
    },
    {
      "src": "identifier: success [1041,1048]",
      "dest": "identifier: success [1041,1048]"
    },
    {
      "src": "): ) [1550,1551]",
      "dest": "): ) [1621,1622]"
    },
    {
      "src": "): ) [2357,2358]",
      "dest": "): ) [2452,2453]"
    },
    {
      "src": "identifier: require [2904,2911]",
      "dest": "identifier: require [3052,3059]"
    },
    {
      "src": "internal: internal [794,802]",
      "dest": "internal: internal [794,802]"
    },
    {
      "src": "(: ( [1963,1964]",
      "dest": "(: ( [2034,2035]"
    },
    {
      "src": "type_name [1384,1391]",
      "dest": "type_name [1411,1418]"
    },
    {
      "src": "identifier: require [2369,2376]",
      "dest": "identifier: require [2464,2471]"
    },
    {
      "src": "parameter [817,821]",
      "dest": "parameter [817,821]"
    },
    {
      "src": "call_argument [1084,1086]",
      "dest": "call_argument [1084,1086]"
    },
    {
      "src": "identifier: callData [2885,2893]",
      "dest": "identifier: callData [3033,3041]"
    },
    {
      "src": "identifier: require [1591,1598]",
      "dest": "identifier: require [1662,1669]"
    },
    {
      "src": "): ) [2432,2433]",
      "dest": "): ) [2527,2528]"
    },
    {
      "src": "primitive_type [2296,2302]",
      "dest": "primitive_type [2391,2397]"
    },
    {
      "src": "identifier: performEthTransfer [962,980]",
      "dest": "identifier: performEthTransfer [962,980]"
    },
    {
      "src": "string [2465,2497]",
      "dest": "string [2560,2592]"
    },
    {
      "src": "identifier: contractAddress [2156,2171]",
      "dest": "identifier: contractAddress [2215,2230]"
    },
    {
      "src": "): ) [2431,2432]",
      "dest": "): ) [2526,2527]"
    },
    {
      "src": "struct: struct [3491,3497]",
      "dest": "struct: struct [3637,3643]"
    },
    {
      "src": "identifier: returndata [2338,2348]",
      "dest": "identifier: returndata [2433,2443]"
    },
    {
      "src": "identifier: size [841,845]",
      "dest": "identifier: size [841,845]"
    },
    {
      "src": "identifier: uncheckedTokenContractCall [2734,2760]",
      "dest": "identifier: uncheckedTokenContractCall [2838,2864]"
    },
    {
      "src": "solidity_version: 0.6.11 [653,659]",
      "dest": "solidity_version: 0.6.11 [653,659]"
    },
    {
      "src": ",: , [2254,2255]",
      "dest": ",: , [2349,2350]"
    },
    {
      "src": "identifier: call [1567,1571]",
      "dest": "identifier: call [1638,1642]"
    },
    {
      "src": "string_literal [1115,1136]",
      "dest": "string_literal [1142,1163]"
    },
    {
      "src": "type_name [817,821]",
      "dest": "type_name [817,821]"
    },
    {
      "src": ".: . [2879,2880]",
      "dest": ".: . [3027,3028]"
    },
    {
      "src": "primitive_type [1964,1971]",
      "dest": "primitive_type [2035,2042]"
    },
    {
      "src": "=: = [2865,2866]",
      "dest": "=: = [3013,3014]"
    },
    {
      "src": "type_cast_expression [1608,1626]",
      "dest": "type_cast_expression [1679,1697]"
    },
    {
      "src": "primitive_type [1000,1007]",
      "dest": "primitive_type [1000,1007]"
    },
    {
      "src": "identifier: abi [1687,1690]",
      "dest": "identifier: abi [1758,1761]"
    },
    {
      "src": "(: ( [1455,1456]",
      "dest": "(: ( [1482,1483]"
    },
    {
      "src": "memory: memory [1533,1539]",
      "dest": "memory: memory [1604,1610]"
    },
    {
      "src": "(: ( [2825,2826]",
      "dest": "(: ( [2973,2974]"
    },
    {
      "src": "(: ( [2062,2063]",
      "dest": "(: ( [2121,2122]"
    },
    {
      "src": "call_argument [1687,1717]",
      "dest": "call_argument [1758,1788]"
    },
    {
      "src": "expression_statement [1448,1503]",
      "dest": "expression_statement [1475,1530]"
    },
    {
      "src": "memory: memory [2135,2141]",
      "dest": "memory: memory [2194,2200]"
    },
    {
      "src": "(: ( [2399,2400]",
      "dest": "(: ( [2494,2495]"
    },
    {
      "src": "bool: bool [1513,1517]",
      "dest": "bool: bool [1584,1588]"
    },
    {
      "src": "binary_expression [1642,1663]",
      "dest": "binary_expression [1713,1734]"
    },
    {
      "src": "[: [ [3533,3534]",
      "dest": "[: [ [3679,3680]"
    },
    {
      "src": "yul_path [898,905]",
      "dest": "yul_path [898,905]"
    },
    {
      "src": ",: , [1717,1718]",
      "dest": ",: , [1788,1789]"
    },
    {
      "src": "(: ( [1641,1642]",
      "dest": "(: ( [1712,1713]"
    },
    {
      "src": "(: ( [776,777]",
      "dest": "(: ( [776,777]"
    },
    {
      "src": "call_expression [2390,2433]",
      "dest": "call_expression [2485,2528]"
    },
    {
      "src": "member_expression [1554,1571]",
      "dest": "member_expression [1625,1642]"
    },
    {
      "src": "call_argument [1572,1580]",
      "dest": "call_argument [1643,1651]"
    },
    {
      "src": "call_expression [2156,2229]",
      "dest": "call_expression [2215,2324]"
    },
    {
      "src": ">: > [1660,1661]",
      "dest": ">: > [1731,1732]"
    },
    {
      "src": "\": \" [2284,2285]",
      "dest": "\": \" [2379,2380]"
    },
    {
      "src": "call_argument [1467,1479]",
      "dest": "call_argument [1494,1506]"
    },
    {
      "src": "call_expression [2052,2079]",
      "dest": "call_expression [2111,2138]"
    },
    {
      "src": "assembly: assembly [855,863]",
      "dest": "assembly: assembly [855,863]"
    },
    {
      "src": "identifier: abi [2400,2403]",
      "dest": "identifier: abi [2495,2498]"
    },
    {
      "src": "call_expression [1054,1087]",
      "dest": "call_expression [1054,1087]"
    },
    {
      "src": "pragma: pragma [636,642]",
      "dest": "pragma: pragma [636,642]"
    },
    {
      "src": "call_expression [1456,1480]",
      "dest": "call_expression [1483,1507]"
    },
    {
      "src": "parenthesized_expression [2350,2358]",
      "dest": "parenthesized_expression [2445,2453]"
    },
    {
      "src": "variable_declaration [833,845]",
      "dest": "variable_declaration [833,845]"
    },
    {
      "src": "{: { [823,824]",
      "dest": "{: { [823,824]"
    },
    {
      "src": "identifier: isContract [2052,2062]",
      "dest": "identifier: isContract [2111,2121]"
    },
    {
      "src": "identifier: expectedIdHash [1997,2011]",
      "dest": "identifier: expectedIdHash [2068,2082]"
    },
    {
      "src": "identifier: expectedIdHash [2437,2451]",
      "dest": "identifier: expectedIdHash [2532,2546]"
    },
    {
      "src": "{: { [2034,2035]",
      "dest": "{: { [2093,2094]"
    },
    {
      "src": "address: address [3835,3842]",
      "dest": "address: address [3980,3987]"
    },
    {
      "src": "bytes: bytes [2783,2788]",
      "dest": "bytes: bytes [2887,2892]"
    },
    {
      "src": "yul_identifier [898,905]",
      "dest": "yul_identifier [898,905]"
    },
    {
      "src": "variable_declaration [1527,1550]",
      "dest": "variable_declaration [1598,1621]"
    },
    {
      "src": "identifier: require [1098,1105]",
      "dest": "identifier: require [1125,1132]"
    },
    {
      "src": "(: ( [1710,1711]",
      "dest": "(: ( [1781,1782]"
    },
    {
      "src": "type_name [2296,2302]",
      "dest": "type_name [2391,2397]"
    },
    {
      "src": "=: = [2154,2155]",
      "dest": "=: = [2213,2214]"
    },
    {
      "src": "{: { [751,752]",
      "dest": "{: { [751,752]"
    },
    {
      "src": ",: , [1113,1114]",
      "dest": ",: , [1140,1141]"
    },
    {
      "src": "call_argument [2921,2939]",
      "dest": "call_argument [3069,3087]"
    },
    {
      "src": "type_name [1989,1996]",
      "dest": "type_name [2060,2067]"
    },
    {
      "src": "primitive_type [2840,2845]",
      "dest": "primitive_type [2988,2993]"
    },
    {
      "src": "identifier: amount [1008,1014]",
      "dest": "identifier: amount [1008,1014]"
    },
    {
      "src": "\": \" [1135,1136]",
      "dest": "\": \" [1162,1163]"
    },
    {
      "src": "function: function [2725,2733]",
      "dest": "function: function [2829,2837]"
    },
    {
      "src": "): ) [2804,2805]",
      "dest": "): ) [2908,2909]"
    },
    {
      "src": "bool: bool [2826,2830]",
      "dest": "bool: bool [2974,2978]"
    },
    {
      "src": "variable_declaration_statement [833,846]",
      "dest": "variable_declaration_statement [833,846]"
    },
    {
      "src": "\": \" [2102,2103]",
      "dest": "\": \" [2161,2162]"
    },
    {
      "src": "type_name [2115,2119]",
      "dest": "type_name [2174,2178]"
    },
    {
      "src": "): ) [1050,1051]",
      "dest": "): ) [1050,1051]"
    },
    {
      "src": ",: , [2919,2920]",
      "dest": ",: , [3067,3068]"
    },
    {
      "src": "if_statement [1638,1755]",
      "dest": "if_statement [1709,1826]"
    },
    {
      "src": "{: { [3019,3020]",
      "dest": "{: { [3166,3167]"
    },
    {
      "src": "call_argument [1106,1113]",
      "dest": "call_argument [1133,1140]"
    },
    {
      "src": "expression_statement [2904,2941]",
      "dest": "expression_statement [3052,3089]"
    },
    {
      "src": "comment: // Represents the time after which the verifier with the given address can be removed. [3550,3636]",
      "dest": "comment: // Represents the time after which the verifier with the given address can be removed. [3696,3782]"
    },
    {
      "src": "identifier: returndata [1615,1625]",
      "dest": "identifier: returndata [1686,1696]"
    },
    {
      "src": "\": \" [2215,2216]",
      "dest": "\": \" [2301,2302]"
    },
    {
      "src": "pragma_directive [636,660]",
      "dest": "pragma_directive [636,660]"
    },
    {
      "src": "identifier: success [2912,2919]",
      "dest": "identifier: success [3060,3067]"
    },
    {
      "src": "type_name [3526,3533]",
      "dest": "type_name [3672,3679]"
    },
    {
      "src": "identifier: amount [1076,1082]",
      "dest": "identifier: amount [1076,1082]"
    },
    {
      "src": "call_argument [2338,2348]",
      "dest": "call_argument [2433,2443]"
    },
    {
      "src": "call_argument [2191,2228]",
      "dest": "call_argument [2277,2314]"
    },
    {
      "src": "return: return [925,931]",
      "dest": "return: return [925,931]"
    },
    {
      "src": "(: ( [1697,1698]",
      "dest": "(: ( [1768,1769]"
    },
    {
      "src": "identifier: keccak256 [2390,2399]",
      "dest": "identifier: keccak256 [2485,2494]"
    },
    {
      "src": "parameter [1406,1427]",
      "dest": "parameter [1433,1454]"
    },
    {
      "src": "\": \" [2465,2466]",
      "dest": "\": \" [2560,2561]"
    },
    {
      "src": "solidity_version_comparison_operator [651,653]",
      "dest": "solidity_version_comparison_operator [651,653]"
    },
    {
      "src": "bool: bool [1711,1715]",
      "dest": "bool: bool [1782,1786]"
    },
    {
      "src": "): ) [2893,2894]",
      "dest": "): ) [3041,3042]"
    },
    {
      "src": "type_name [2783,2788]",
      "dest": "type_name [2887,2892]"
    },
    {
      "src": "identifier: abi [2327,2330]",
      "dest": "identifier: abi [2422,2425]"
    },
    {
      "src": "string [1719,1743]",
      "dest": "string [1790,1814]"
    },
    {
      "src": "yul_identifier [878,882]",
      "dest": "yul_identifier [878,882]"
    },
    {
      "src": "bool: bool [2115,2119]",
      "dest": "bool: bool [2174,2178]"
    },
    {
      "src": "return_statement [925,941]",
      "dest": "return_statement [925,941]"
    },
    {
      "src": "(: ( [2051,2052]",
      "dest": "(: ( [2110,2111]"
    },
    {
      "src": "(: ( [1466,1467]",
      "dest": "(: ( [1493,1494]"
    },
    {
      "src": "primitive_type [1608,1614]",
      "dest": "primitive_type [1679,1685]"
    },
    {
      "src": "internal: internal [1016,1024]",
      "dest": "internal: internal [1016,1024]"
    },
    {
      "src": "type_name [777,784]",
      "dest": "type_name [777,784]"
    },
    {
      "src": "primitive_type [1406,1411]",
      "dest": "primitive_type [1433,1438]"
    },
    {
      "src": "bytes: bytes [1527,1532]",
      "dest": "bytes: bytes [1598,1603]"
    },
    {
      "src": "): ) [2228,2229]",
      "dest": "): ) [2323,2324]"
    },
    {
      "src": "view: view [803,807]",
      "dest": "view: view [803,807]"
    },
    {
      "src": "struct_declaration [3491,3884]",
      "dest": "struct_declaration [3637,4029]"
    },
    {
      "src": "identifier: call [1064,1068]",
      "dest": "identifier: call [1064,1068]"
    },
    {
      "src": "): ) [1715,1716]",
      "dest": "): ) [1786,1787]"
    },
    {
      "src": ":=: := [883,885]",
      "dest": ":=: := [883,885]"
    },
    {
      "src": "block_statement [1665,1755]",
      "dest": "block_statement [1736,1826]"
    },
    {
      "src": "identifier: success [1518,1525]",
      "dest": "identifier: success [1589,1596]"
    },
    {
      "src": "function_definition [1353,1761]",
      "dest": "function_definition [1380,1832]"
    },
    {
      "src": "comment: // of unlockedForRemovalTime[A] != 0 and unlockedForRemovalTime[A] < (current time). [3733,3817]",
      "dest": "comment: // of unlockedForRemovalTime[A] != 0 and unlockedForRemovalTime[A] < (current time). [3879,3963]"
    },
    {
      "src": "variable_declaration_statement [1512,1582]",
      "dest": "variable_declaration_statement [1583,1653]"
    },
    {
      "src": "identifier: success [2247,2254]",
      "dest": "identifier: success [2342,2349]"
    },
    {
      "src": "): ) [2103,2104]",
      "dest": "): ) [2162,2163]"
    },
    {
      "src": "(: ( [1512,1513]",
      "dest": "(: ( [1583,1584]"
    },
    {
      "src": "comment: // any soundness issues. [3268,3292]",
      "dest": "comment: // any soundness issues. [3414,3438]"
    },
    {
      "src": "string [1084,1086]",
      "dest": "string [1084,1086]"
    },
    {
      "src": "\": \" [2256,2257]",
      "dest": "\": \" [2351,2352]"
    },
    {
      "src": "\": \" [1115,1116]",
      "dest": "\": \" [1142,1143]"
    },
    {
      "src": "comment: // not content with the announced removal has ample time to leave the system before it is [3381,3470]",
      "dest": "comment: // not content with the announced removal has ample time to leave the system before it is [3527,3616]"
    },
    {
      "src": "identifier: callData [2796,2804]",
      "dest": "identifier: callData [2900,2908]"
    },
    {
      "src": "(: ( [1035,1036]",
      "dest": "(: ( [1035,1036]"
    },
    {
      "src": "identifier: decode [2331,2337]",
      "dest": "identifier: decode [2426,2432]"
    },
    {
      "src": "}: } [1082,1083]",
      "dest": "}: } [1082,1083]"
    },
    {
      "src": ".: . [2194,2195]",
      "dest": ".: . [2280,2281]"
    },
    {
      "src": "identifier: Addresses [741,750]",
      "dest": "identifier: Addresses [741,750]"
    },
    {
      "src": "}: } [1760,1761]",
      "dest": "}: } [1831,1832]"
    },
    {
      "src": "function: function [1353,1361]",
      "dest": "function: function [1380,1388]"
    },
    {
      "src": ",: , [998,999]",
      "dest": ",: , [998,999]"
    }
  ],
  "actions": [
    {
      "action": "insert-node",
      "tree": "comment: // NOLINT: low-level-calls. [1089,1116]",
      "parent": "function_body [1025,1171]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // NOLINTNEXTLINE: low-level-calls. [1539,1574]",
      "parent": "function_body [1465,1832]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // NOLINTNEXTLINE: low-level-calls. [2929,2964]",
      "parent": "function_body [2919,3095]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // NOLINT: low-level-calls. [2237,2264]",
      "parent": "call_expression [2215,2324]",
      "at": 2
    }
  ]
}