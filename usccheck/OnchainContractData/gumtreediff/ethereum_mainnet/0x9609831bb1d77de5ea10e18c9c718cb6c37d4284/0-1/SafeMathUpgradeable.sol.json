{
  "matches": [
    {
      "src": "type_name [4029,4036]",
      "dest": "type_name [4029,4036]"
    },
    {
      "src": "identifier: c [792,793]",
      "dest": "identifier: c [792,793]"
    },
    {
      "src": "pure: pure [4015,4019]",
      "dest": "pure: pure [4015,4019]"
    },
    {
      "src": "tuple_expression [1185,1195]",
      "dest": "tuple_expression [1185,1195]"
    },
    {
      "src": "): ) [1194,1195]",
      "dest": "): ) [1194,1195]"
    },
    {
      "src": "(: ( [818,819]",
      "dest": "(: ( [818,819]"
    },
    {
      "src": "binary_expression [5289,5294]",
      "dest": "binary_expression [5289,5294]"
    },
    {
      "src": "number_literal: 0 [841,842]",
      "dest": "number_literal: 0 [841,842]"
    },
    {
      "src": "binary_expression [2247,2252]",
      "dest": "binary_expression [2247,2252]"
    },
    {
      "src": ",: , [739,740]",
      "dest": ",: , [739,740]"
    },
    {
      "src": "identifier: b [4608,4609]",
      "dest": "identifier: b [4608,4609]"
    },
    {
      "src": "return_statement [857,874]",
      "dest": "return_statement [857,874]"
    },
    {
      "src": "(: ( [1050,1051]",
      "dest": "(: ( [1050,1051]"
    },
    {
      "src": "variable_declaration_statement [1798,1816]",
      "dest": "variable_declaration_statement [1798,1816]"
    },
    {
      "src": "binary_expression [6879,6884]",
      "dest": "binary_expression [6879,6884]"
    },
    {
      "src": "return_statement [1209,1230]",
      "dest": "return_statement [1209,1230]"
    },
    {
      "src": "primitive_type [5836,5843]",
      "dest": "primitive_type [5836,5843]"
    },
    {
      "src": "identifier: b [2251,2252]",
      "dest": "identifier: b [2251,2252]"
    },
    {
      "src": "uint256: uint256 [6787,6794]",
      "dest": "uint256: uint256 [6787,6794]"
    },
    {
      "src": "identifier: a [5289,5290]",
      "dest": "identifier: a [5289,5290]"
    },
    {
      "src": ",: , [1221,1222]",
      "dest": ",: , [1221,1222]"
    },
    {
      "src": "type_name [2454,2461]",
      "dest": "type_name [2454,2461]"
    },
    {
      "src": "if_statement [1756,1785]",
      "dest": "if_statement [1756,1785]"
    },
    {
      "src": "returns: returns [726,733]",
      "dest": "returns: returns [726,733]"
    },
    {
      "src": "): ) [748,749]",
      "dest": "): ) [748,749]"
    },
    {
      "src": "internal: internal [1095,1103]",
      "dest": "internal: internal [1095,1103]"
    },
    {
      "src": "{: { [770,771]",
      "dest": "{: { [770,771]"
    },
    {
      "src": "): ) [842,843]",
      "dest": "): ) [842,843]"
    },
    {
      "src": ",: , [2463,2464]",
      "dest": ",: , [2463,2464]"
    },
    {
      "src": "primitive_type [696,703]",
      "dest": "primitive_type [696,703]"
    },
    {
      "src": "false: false [2581,2586]",
      "dest": "false: false [2581,2586]"
    },
    {
      "src": "binary_expression [1223,1228]",
      "dest": "binary_expression [1223,1228]"
    },
    {
      "src": "): ) [5267,5268]",
      "dest": "): ) [5267,5268]"
    },
    {
      "src": "): ) [2525,2526]",
      "dest": "): ) [2525,2526]"
    },
    {
      "src": "variable_declaration [1798,1807]",
      "dest": "variable_declaration [1798,1807]"
    },
    {
      "src": "{: { [2176,2177]",
      "dest": "{: { [2176,2177]"
    },
    {
      "src": "): ) [5981,5982]",
      "dest": "): ) [5981,5982]"
    },
    {
      "src": ",: , [5967,5968]",
      "dest": ",: , [5967,5968]"
    },
    {
      "src": "uint256: uint256 [1798,1805]",
      "dest": "uint256: uint256 [1798,1805]"
    },
    {
      "src": "identifier: b [3275,3276]",
      "dest": "identifier: b [3275,3276]"
    },
    {
      "src": "(: ( [4577,4578]",
      "dest": "(: ( [4577,4578]"
    },
    {
      "src": ",: , [839,840]",
      "dest": ",: , [839,840]"
    },
    {
      "src": "primitive_type [2102,2109]",
      "dest": "primitive_type [2102,2109]"
    },
    {
      "src": "identifier: sub [3252,3255]",
      "dest": "identifier: sub [3252,3255]"
    },
    {
      "src": "returns: returns [3635,3642]",
      "dest": "returns: returns [3635,3642]"
    },
    {
      "src": "primitive_type [6712,6719]",
      "dest": "primitive_type [6712,6719]"
    },
    {
      "src": "binary_expression [1171,1176]",
      "dest": "binary_expression [1171,1176]"
    },
    {
      "src": "pure: pure [3287,3291]",
      "dest": "pure: pure [3287,3291]"
    },
    {
      "src": ",: , [1888,1889]",
      "dest": ",: , [1888,1889]"
    },
    {
      "src": "return_statement [2604,2625]",
      "dest": "return_statement [2604,2625]"
    },
    {
      "src": "binary_expression [3670,3675]",
      "dest": "binary_expression [3670,3675]"
    },
    {
      "src": "): ) [1490,1491]",
      "dest": "): ) [1490,1491]"
    },
    {
      "src": "function_definition [4520,4616]",
      "dest": "function_definition [4520,4616]"
    },
    {
      "src": "type_name [3599,3606]",
      "dest": "type_name [3599,3606]"
    },
    {
      "src": "-: - [3329,3330]",
      "dest": "-: - [3329,3330]"
    },
    {
      "src": "parameter [6731,6757]",
      "dest": "parameter [6731,6757]"
    },
    {
      "src": "parameter [2518,2525]",
      "dest": "parameter [2518,2525]"
    },
    {
      "src": "{: { [4587,4588]",
      "dest": "{: { [4587,4588]"
    },
    {
      "src": "number_literal: 0 [1765,1766]",
      "dest": "number_literal: 0 [1765,1766]"
    },
    {
      "src": "(: ( [1775,1776]",
      "dest": "(: ( [1775,1776]"
    },
    {
      "src": "<=: <= [5249,5251]",
      "dest": "<=: <= [5249,5251]"
    },
    {
      "src": "function_definition [2876,2972]",
      "dest": "function_definition [2876,2972]"
    },
    {
      "src": "parameter [2102,2111]",
      "dest": "parameter [2102,2111]"
    },
    {
      "src": "uint256: uint256 [2454,2461]",
      "dest": "uint256: uint256 [2454,2461]"
    },
    {
      "src": "type_name [4544,4551]",
      "dest": "type_name [4544,4551]"
    },
    {
      "src": "}: } [4615,4616]",
      "dest": "}: } [4615,4616]"
    },
    {
      "src": "parameter [1483,1490]",
      "dest": "parameter [1483,1490]"
    },
    {
      "src": "(: ( [6786,6787]",
      "dest": "(: ( [6786,6787]"
    },
    {
      "src": "identifier: a [6879,6880]",
      "dest": "identifier: a [6879,6880]"
    },
    {
      "src": "type_name [2934,2941]",
      "dest": "type_name [2934,2941]"
    },
    {
      "src": "return: return [857,863]",
      "dest": "return: return [857,863]"
    },
    {
      "src": "function_body [1133,1246]",
      "dest": "function_body [1133,1246]"
    },
    {
      "src": "primitive_type [2889,2896]",
      "dest": "primitive_type [2889,2896]"
    },
    {
      "src": "primitive_type [5140,5146]",
      "dest": "primitive_type [5140,5146]"
    },
    {
      "src": "(: ( [5195,5196]",
      "dest": "(: ( [5195,5196]"
    },
    {
      "src": "type_name [5196,5203]",
      "dest": "type_name [5196,5203]"
    },
    {
      "src": "false: false [834,839]",
      "dest": "false: false [834,839]"
    },
    {
      "src": "tuple_expression [864,873]",
      "dest": "tuple_expression [864,873]"
    },
    {
      "src": "uint256: uint256 [2102,2109]",
      "dest": "uint256: uint256 [2102,2109]"
    },
    {
      "src": "function_definition [5080,5311]",
      "dest": "function_definition [5080,5311]"
    },
    {
      "src": "number_literal: 0 [2588,2589]",
      "dest": "number_literal: 0 [2588,2589]"
    },
    {
      "src": "(: ( [3300,3301]",
      "dest": "(: ( [3300,3301]"
    },
    {
      "src": "identifier: b [2194,2195]",
      "dest": "identifier: b [2194,2195]"
    },
    {
      "src": "identifier: b [3618,3619]",
      "dest": "identifier: b [3618,3619]"
    },
    {
      "src": "pure: pure [1463,1467]",
      "dest": "pure: pure [1463,1467]"
    },
    {
      "src": "return_statement [2953,2966]",
      "dest": "return_statement [2953,2966]"
    },
    {
      "src": "internal: internal [3621,3629]",
      "dest": "internal: internal [3621,3629]"
    },
    {
      "src": "return_statement [826,844]",
      "dest": "return_statement [826,844]"
    },
    {
      "src": "identifier: b [800,801]",
      "dest": "identifier: b [800,801]"
    },
    {
      "src": "true: true [865,869]",
      "dest": "true: true [865,869]"
    },
    {
      "src": "type_name [677,684]",
      "dest": "type_name [677,684]"
    },
    {
      "src": "(: ( [2580,2581]",
      "dest": "(: ( [2580,2581]"
    },
    {
      "src": "visibility [712,720]",
      "dest": "visibility [712,720]"
    },
    {
      "src": "{: { [750,751]",
      "dest": "{: { [750,751]"
    },
    {
      "src": "boolean_literal [1776,1780]",
      "dest": "boolean_literal [1776,1780]"
    },
    {
      "src": "internal: internal [4006,4014]",
      "dest": "internal: internal [4006,4014]"
    },
    {
      "src": "(: ( [1852,1853]",
      "dest": "(: ( [1852,1853]"
    },
    {
      "src": "primitive_type [5817,5824]",
      "dest": "primitive_type [5817,5824]"
    },
    {
      "src": "type_name [1477,1481]",
      "dest": "type_name [1477,1481]"
    },
    {
      "src": "}: } [4066,4067]",
      "dest": "}: } [4066,4067]"
    },
    {
      "src": "{: { [2547,2548]",
      "dest": "{: { [2547,2548]"
    },
    {
      "src": "identifier: add [2885,2888]",
      "dest": "identifier: add [2885,2888]"
    },
    {
      "src": "function_body [2156,2270]",
      "dest": "function_body [2156,2270]"
    },
    {
      "src": "identifier: div [5804,5807]",
      "dest": "identifier: div [5804,5807]"
    },
    {
      "src": "==: == [2196,2198]",
      "dest": "==: == [2196,2198]"
    },
    {
      "src": "internal: internal [2911,2919]",
      "dest": "internal: internal [2911,2919]"
    },
    {
      "src": "state_mutability [2498,2502]",
      "dest": "state_mutability [2498,2502]"
    },
    {
      "src": "identifier: b [4552,4553]",
      "dest": "identifier: b [4552,4553]"
    },
    {
      "src": "return_statement [5996,6009]",
      "dest": "return_statement [5996,6009]"
    },
    {
      "src": "if: if [815,817]",
      "dest": "if: if [815,817]"
    },
    {
      "src": "identifier: a [2618,2619]",
      "dest": "identifier: a [2618,2619]"
    },
    {
      "src": "parameter [5102,5111]",
      "dest": "parameter [5102,5111]"
    },
    {
      "src": "type_name [2900,2907]",
      "dest": "type_name [2900,2907]"
    },
    {
      "src": "memory: memory [5147,5153]",
      "dest": "memory: memory [5147,5153]"
    },
    {
      "src": "return_statement [5282,5295]",
      "dest": "return_statement [5282,5295]"
    },
    {
      "src": "type_name [2518,2525]",
      "dest": "type_name [2518,2525]"
    },
    {
      "src": "function: function [2429,2437]",
      "dest": "function: function [2429,2437]"
    },
    {
      "src": "): ) [6857,6858]",
      "dest": "): ) [6857,6858]"
    },
    {
      "src": "identifier: a [1427,1428]",
      "dest": "identifier: a [1427,1428]"
    },
    {
      "src": "(: ( [1170,1171]",
      "dest": "(: ( [1170,1171]"
    },
    {
      "src": "type_name [3610,3617]",
      "dest": "type_name [3610,3617]"
    },
    {
      "src": "function_body [4587,4616]",
      "dest": "function_body [4587,4616]"
    },
    {
      "src": "comment: // because it relies on the compiler's built in overflow checks. [219,283]",
      "dest": "comment: // because it relies on the compiler's built in overflow checks. [219,283]"
    },
    {
      "src": "comment: // This version of SafeMath should only be used with Solidity 0.8 or later, [143,218]",
      "dest": "comment: // This version of SafeMath should only be used with Solidity 0.8 or later, [143,218]"
    },
    {
      "src": "return_type_definition [2132,2155]",
      "dest": "return_type_definition [2132,2155]"
    },
    {
      "src": ",: , [1481,1482]",
      "dest": ",: , [1481,1482]"
    },
    {
      "src": "): ) [3619,3620]",
      "dest": "): ) [3619,3620]"
    },
    {
      "src": "primitive_type [1798,1805]",
      "dest": "primitive_type [1798,1805]"
    },
    {
      "src": "identifier: errorMessage [6745,6757]",
      "dest": "identifier: errorMessage [6745,6757]"
    },
    {
      "src": "function_body [4038,4067]",
      "dest": "function_body [4038,4067]"
    },
    {
      "src": "true [2241,2245]",
      "dest": "true [2241,2245]"
    },
    {
      "src": "tuple_expression [2209,2219]",
      "dest": "tuple_expression [2209,2219]"
    },
    {
      "src": "type_name [2083,2090]",
      "dest": "type_name [2083,2090]"
    },
    {
      "src": "returns: returns [5902,5909]",
      "dest": "returns: returns [5902,5909]"
    },
    {
      "src": "(: ( [2073,2074]",
      "dest": "(: ( [2073,2074]"
    },
    {
      "src": "function: function [4520,4528]",
      "dest": "function: function [4520,4528]"
    },
    {
      "src": ",: , [4542,4543]",
      "dest": ",: , [4542,4543]"
    },
    {
      "src": "returns: returns [2925,2932]",
      "dest": "returns: returns [2925,2932]"
    },
    {
      "src": "type_name [741,748]",
      "dest": "type_name [741,748]"
    },
    {
      "src": "function: function [2058,2066]",
      "dest": "function: function [2058,2066]"
    },
    {
      "src": "identifier: b [1171,1172]",
      "dest": "identifier: b [1171,1172]"
    },
    {
      "src": "tuple_expression [2580,2590]",
      "dest": "tuple_expression [2580,2590]"
    },
    {
      "src": "parameter [1438,1447]",
      "dest": "parameter [1438,1447]"
    },
    {
      "src": "call_expression [6830,6858]",
      "dest": "call_expression [6830,6858]"
    },
    {
      "src": "identifier: c [1890,1891]",
      "dest": "identifier: c [1890,1891]"
    },
    {
      "src": "return_statement [4048,4061]",
      "dest": "return_statement [4048,4061]"
    },
    {
      "src": "(: ( [2888,2889]",
      "dest": "(: ( [2888,2889]"
    },
    {
      "src": "primitive_type [1118,1122]",
      "dest": "primitive_type [1118,1122]"
    },
    {
      "src": ",: , [1858,1859]",
      "dest": ",: , [1858,1859]"
    },
    {
      "src": "function_definition [3586,3682]",
      "dest": "function_definition [3586,3682]"
    },
    {
      "src": "{: { [5205,5206]",
      "dest": "{: { [5205,5206]"
    },
    {
      "src": "solidity: solidity [114,122]",
      "dest": "solidity: solidity [114,122]"
    },
    {
      "src": "contract_body [510,6903]",
      "dest": "contract_body [510,6903]"
    },
    {
      "src": "state_mutability [721,725]",
      "dest": "state_mutability [721,725]"
    },
    {
      "src": "): ) [824,825]",
      "dest": "): ) [824,825]"
    },
    {
      "src": "false: false [2210,2215]",
      "dest": "false: false [2210,2215]"
    },
    {
      "src": "): ) [2154,2155]",
      "dest": "): ) [2154,2155]"
    },
    {
      "src": "state_mutability [6773,6777]",
      "dest": "state_mutability [6773,6777]"
    },
    {
      "src": "true: true [1776,1780]",
      "dest": "true: true [1776,1780]"
    },
    {
      "src": "false [1853,1858]",
      "dest": "false [1853,1858]"
    },
    {
      "src": "function_body [5205,5311]",
      "dest": "function_body [5205,5311]"
    },
    {
      "src": "identifier: b [1446,1447]",
      "dest": "identifier: b [1446,1447]"
    },
    {
      "src": "binary_expression [2618,2623]",
      "dest": "binary_expression [2618,2623]"
    },
    {
      "src": "true: true [1884,1888]",
      "dest": "true: true [1884,1888]"
    },
    {
      "src": "parameter [5836,5845]",
      "dest": "parameter [5836,5845]"
    },
    {
      "src": "): ) [1452,1453]",
      "dest": "): ) [1452,1453]"
    },
    {
      "src": ",: , [5111,5112]",
      "dest": ",: , [5111,5112]"
    },
    {
      "src": "return_statement [1768,1785]",
      "dest": "return_statement [1768,1785]"
    },
    {
      "src": "identifier: a [5252,5253]",
      "dest": "identifier: a [5252,5253]"
    },
    {
      "src": "primitive_type [1419,1426]",
      "dest": "primitive_type [1419,1426]"
    },
    {
      "src": "return_type_definition [5187,5204]",
      "dest": "return_type_definition [5187,5204]"
    },
    {
      "src": "function_body [2527,2641]",
      "dest": "function_body [2527,2641]"
    },
    {
      "src": "return_type_definition [2925,2942]",
      "dest": "return_type_definition [2925,2942]"
    },
    {
      "src": "return_type_definition [1468,1491]",
      "dest": "return_type_definition [1468,1491]"
    },
    {
      "src": "return: return [4597,4603]",
      "dest": "return: return [4597,4603]"
    },
    {
      "src": "{: { [3310,3311]",
      "dest": "{: { [3310,3311]"
    },
    {
      "src": "/: / [2249,2250]",
      "dest": "/: / [2249,2250]"
    },
    {
      "src": "parameter [4544,4553]",
      "dest": "parameter [4544,4553]"
    },
    {
      "src": "identifier: b [5844,5845]",
      "dest": "identifier: b [5844,5845]"
    },
    {
      "src": "): ) [6794,6795]",
      "dest": "): ) [6794,6795]"
    },
    {
      "src": "}: } [1245,1246]",
      "dest": "}: } [1245,1246]"
    },
    {
      "src": "return_type_definition [6778,6795]",
      "dest": "return_type_definition [6778,6795]"
    },
    {
      "src": "true [1776,1780]",
      "dest": "true [1776,1780]"
    },
    {
      "src": "primitive_type [2141,2145]",
      "dest": "primitive_type [2141,2145]"
    },
    {
      "src": "identifier: b [2110,2111]",
      "dest": "identifier: b [2110,2111]"
    },
    {
      "src": "expression_statement [5239,5269]",
      "dest": "expression_statement [5239,5269]"
    },
    {
      "src": "return_statement [1178,1196]",
      "dest": "return_statement [1178,1196]"
    },
    {
      "src": "return: return [1768,1774]",
      "dest": "return: return [1768,1774]"
    },
    {
      "src": "): ) [4036,4037]",
      "dest": "): ) [4036,4037]"
    },
    {
      "src": "binary_expression [5962,5967]",
      "dest": "binary_expression [5962,5967]"
    },
    {
      "src": "identifier: b [5293,5294]",
      "dest": "identifier: b [5293,5294]"
    },
    {
      "src": "}: } [6018,6019]",
      "dest": "}: } [6018,6019]"
    },
    {
      "src": "number_literal: 0 [1860,1861]",
      "dest": "number_literal: 0 [1860,1861]"
    },
    {
      "src": "return: return [1876,1882]",
      "dest": "return: return [1876,1882]"
    },
    {
      "src": "): ) [872,873]",
      "dest": "): ) [872,873]"
    },
    {
      "src": "type_name [1483,1490]",
      "dest": "type_name [1483,1490]"
    },
    {
      "src": "{: { [5920,5921]",
      "dest": "{: { [5920,5921]"
    },
    {
      "src": "{: { [1492,1493]",
      "dest": "{: { [1492,1493]"
    },
    {
      "src": "primitive_type [2512,2516]",
      "dest": "primitive_type [2512,2516]"
    },
    {
      "src": "type_name [6693,6700]",
      "dest": "type_name [6693,6700]"
    },
    {
      "src": "uint256: uint256 [3984,3991]",
      "dest": "uint256: uint256 [3984,3991]"
    },
    {
      "src": "pure: pure [4564,4568]",
      "dest": "pure: pure [4564,4568]"
    },
    {
      "src": "identifier: SafeMathUpgradeable [490,509]",
      "dest": "identifier: SafeMathUpgradeable [490,509]"
    },
    {
      "src": "): ) [1766,1767]",
      "dest": "): ) [1766,1767]"
    },
    {
      "src": "uint256: uint256 [3644,3651]",
      "dest": "uint256: uint256 [3644,3651]"
    },
    {
      "src": "return: return [6872,6878]",
      "dest": "return: return [6872,6878]"
    },
    {
      "src": ">: > [6840,6841]",
      "dest": ">: > [6840,6841]"
    },
    {
      "src": "}: } [2640,2641]",
      "dest": "}: } [2640,2641]"
    },
    {
      "src": "type_name [3256,3263]",
      "dest": "type_name [3256,3263]"
    },
    {
      "src": "(: ( [1759,1760]",
      "dest": "(: ( [1759,1760]"
    },
    {
      "src": "}: } [1902,1903]",
      "dest": "}: } [1902,1903]"
    },
    {
      "src": "identifier: a [5825,5826]",
      "dest": "identifier: a [5825,5826]"
    },
    {
      "src": "binary_expression [1833,1838]",
      "dest": "binary_expression [1833,1838]"
    },
    {
      "src": "primitive_type [2454,2461]",
      "dest": "primitive_type [2454,2461]"
    },
    {
      "src": "(: ( [3983,3984]",
      "dest": "(: ( [3983,3984]"
    },
    {
      "src": "internal: internal [1454,1462]",
      "dest": "internal: internal [1454,1462]"
    },
    {
      "src": "comment: /**      * @dev Returns the integer division of two unsigned integers, reverting with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [5317,5790]",
      "dest": "comment: /**      * @dev Returns the integer division of two unsigned integers, reverting with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [5317,5790]"
    },
    {
      "src": "primitive_type [1060,1067]",
      "dest": "primitive_type [1060,1067]"
    },
    {
      "src": ",: , [5253,5254]",
      "dest": ",: , [5253,5254]"
    },
    {
      "src": "identifier: b [5247,5248]",
      "dest": "identifier: b [5247,5248]"
    },
    {
      "src": ",: , [869,870]",
      "dest": ",: , [869,870]"
    },
    {
      "src": "identifier: a [4541,4542]",
      "dest": "identifier: a [4541,4542]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [896,1030]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [896,1030]"
    },
    {
      "src": "identifier: tryMul [1403,1409]",
      "dest": "identifier: tryMul [1403,1409]"
    },
    {
      "src": "type_name [1438,1445]",
      "dest": "type_name [1438,1445]"
    },
    {
      "src": "): ) [3651,3652]",
      "dest": "): ) [3651,3652]"
    },
    {
      "src": "internal: internal [3278,3286]",
      "dest": "internal: internal [3278,3286]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * reverting when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [4073,4515]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * reverting when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [4073,4515]"
    },
    {
      "src": ",: , [6702,6703]",
      "dest": ",: , [6702,6703]"
    },
    {
      "src": "{: { [3653,3654]",
      "dest": "{: { [3653,3654]"
    },
    {
      "src": "): ) [2218,2219]",
      "dest": "): ) [2218,2219]"
    },
    {
      "src": "identifier: b [2908,2909]",
      "dest": "identifier: b [2908,2909]"
    },
    {
      "src": "identifier: b [6007,6008]",
      "dest": "identifier: b [6007,6008]"
    },
    {
      "src": "primitive_type [2518,2525]",
      "dest": "primitive_type [2518,2525]"
    },
    {
      "src": "call_argument [6838,6843]",
      "dest": "call_argument [6838,6843]"
    },
    {
      "src": "true: true [2241,2245]",
      "dest": "true: true [2241,2245]"
    },
    {
      "src": "binary_expression [1760,1766]",
      "dest": "binary_expression [1760,1766]"
    },
    {
      "src": ",: , [1122,1123]",
      "dest": ",: , [1122,1123]"
    },
    {
      "src": "type_name [5855,5861]",
      "dest": "type_name [5855,5861]"
    },
    {
      "src": "uint256: uint256 [5836,5843]",
      "dest": "uint256: uint256 [5836,5843]"
    },
    {
      "src": "identifier: b [2481,2482]",
      "dest": "identifier: b [2481,2482]"
    },
    {
      "src": "(: ( [2511,2512]",
      "dest": "(: ( [2511,2512]"
    },
    {
      "src": "type_name [6712,6719]",
      "dest": "type_name [6712,6719]"
    },
    {
      "src": "returns: returns [2132,2139]",
      "dest": "returns: returns [2132,2139]"
    },
    {
      "src": "(: ( [3598,3599]",
      "dest": "(: ( [3598,3599]"
    },
    {
      "src": "if_statement [815,844]",
      "dest": "if_statement [815,844]"
    },
    {
      "src": "return: return [826,832]",
      "dest": "return: return [826,832]"
    },
    {
      "src": "false [2210,2215]",
      "dest": "false [2210,2215]"
    },
    {
      "src": ",: , [2898,2899]",
      "dest": ",: , [2898,2899]"
    },
    {
      "src": "parameter [3256,3265]",
      "dest": "parameter [3256,3265]"
    },
    {
      "src": "uint256: uint256 [3610,3617]",
      "dest": "uint256: uint256 [3610,3617]"
    },
    {
      "src": "identifier: b [2964,2965]",
      "dest": "identifier: b [2964,2965]"
    },
    {
      "src": "identifier: b [5129,5130]",
      "dest": "identifier: b [5129,5130]"
    },
    {
      "src": "): ) [2589,2590]",
      "dest": "): ) [2589,2590]"
    },
    {
      "src": "binary_expression [5247,5253]",
      "dest": "binary_expression [5247,5253]"
    },
    {
      "src": "type_name [5817,5824]",
      "dest": "type_name [5817,5824]"
    },
    {
      "src": "number_literal: 0 [2217,2218]",
      "dest": "number_literal: 0 [2217,2218]"
    },
    {
      "src": "identifier: errorMessage [5869,5881]",
      "dest": "identifier: errorMessage [5869,5881]"
    },
    {
      "src": "): ) [2116,2117]",
      "dest": "): ) [2116,2117]"
    },
    {
      "src": "comment: /**      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [1252,1389]",
      "dest": "comment: /**      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [1252,1389]"
    },
    {
      "src": "if_statement [2190,2220]",
      "dest": "if_statement [2190,2220]"
    },
    {
      "src": "state_mutability [3630,3634]",
      "dest": "state_mutability [3630,3634]"
    },
    {
      "src": "=: = [1808,1809]",
      "dest": "=: = [1808,1809]"
    },
    {
      "src": "call_expression [5954,5982]",
      "dest": "call_expression [5954,5982]"
    },
    {
      "src": "primitive_type [4029,4036]",
      "dest": "primitive_type [4029,4036]"
    },
    {
      "src": "}: } [5310,5311]",
      "dest": "}: } [5310,5311]"
    },
    {
      "src": "-: - [1225,1226]",
      "dest": "-: - [1225,1226]"
    },
    {
      "src": "identifier: a [2462,2463]",
      "dest": "identifier: a [2462,2463]"
    },
    {
      "src": "parameter [5855,5881]",
      "dest": "parameter [5855,5881]"
    },
    {
      "src": "primitive_type [2900,2907]",
      "dest": "primitive_type [2900,2907]"
    },
    {
      "src": "function: function [3586,3594]",
      "dest": "function: function [3586,3594]"
    },
    {
      "src": "(: ( [1832,1833]",
      "dest": "(: ( [1832,1833]"
    },
    {
      "src": "}: } [1239,1240]",
      "dest": "}: } [1239,1240]"
    },
    {
      "src": "function_body [5920,6025]",
      "dest": "function_body [5920,6025]"
    },
    {
      "src": "return: return [2573,2579]",
      "dest": "return: return [2573,2579]"
    },
    {
      "src": "identifier: c [1806,1807]",
      "dest": "identifier: c [1806,1807]"
    },
    {
      "src": "function: function [5080,5088]",
      "dest": "function: function [5080,5088]"
    },
    {
      "src": "parameter [1124,1131]",
      "dest": "parameter [1124,1131]"
    },
    {
      "src": "visibility [1454,1462]",
      "dest": "visibility [1454,1462]"
    },
    {
      "src": "tuple_expression [2240,2253]",
      "dest": "tuple_expression [2240,2253]"
    },
    {
      "src": "identifier: tryDiv [2067,2073]",
      "dest": "identifier: tryDiv [2067,2073]"
    },
    {
      "src": "primitive_type [2147,2154]",
      "dest": "primitive_type [2147,2154]"
    },
    {
      "src": "parameter [2512,2516]",
      "dest": "parameter [2512,2516]"
    },
    {
      "src": "solidity_pragma_token [114,129]",
      "dest": "solidity_pragma_token [114,129]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * CAUTION: This function is deprecated because it requires allocating memory for the error      * message unnecessarily. For custom revert reasons use {trySub}.      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [4622,5075]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * CAUTION: This function is deprecated because it requires allocating memory for the error      * message unnecessarily. For custom revert reasons use {trySub}.      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [4622,5075]"
    },
    {
      "src": "identifier: b [3331,3332]",
      "dest": "identifier: b [3331,3332]"
    },
    {
      "src": "): ) [2909,2910]",
      "dest": "): ) [2909,2910]"
    },
    {
      "src": "primitive_type [4533,4540]",
      "dest": "primitive_type [4533,4540]"
    },
    {
      "src": "parameter [5817,5826]",
      "dest": "parameter [5817,5826]"
    },
    {
      "src": "block_statement [5215,5305]",
      "dest": "block_statement [5215,5305]"
    },
    {
      "src": "==: == [2567,2569]",
      "dest": "==: == [2567,2569]"
    },
    {
      "src": "internal: internal [712,720]",
      "dest": "internal: internal [712,720]"
    },
    {
      "src": "uint256: uint256 [1483,1490]",
      "dest": "uint256: uint256 [1483,1490]"
    },
    {
      "src": "): ) [1228,1229]",
      "dest": "): ) [1228,1229]"
    },
    {
      "src": "uint256: uint256 [1124,1131]",
      "dest": "uint256: uint256 [1124,1131]"
    },
    {
      "src": ",: , [1069,1070]",
      "dest": ",: , [1069,1070]"
    },
    {
      "src": "identifier: b [6838,6839]",
      "dest": "identifier: b [6838,6839]"
    },
    {
      "src": "identifier: a [1760,1761]",
      "dest": "identifier: a [1760,1761]"
    },
    {
      "src": "primitive_type [677,684]",
      "dest": "primitive_type [677,684]"
    },
    {
      "src": "(: ( [667,668]",
      "dest": "(: ( [667,668]"
    },
    {
      "src": "{: { [2943,2944]",
      "dest": "{: { [2943,2944]"
    },
    {
      "src": "}: } [883,884]",
      "dest": "}: } [883,884]"
    },
    {
      "src": "returns: returns [5187,5194]",
      "dest": "returns: returns [5187,5194]"
    },
    {
      "src": "primitive_type [3267,3274]",
      "dest": "primitive_type [3267,3274]"
    },
    {
      "src": "string: string [5140,5146]",
      "dest": "string: string [5140,5146]"
    },
    {
      "src": "uint256: uint256 [2473,2480]",
      "dest": "uint256: uint256 [2473,2480]"
    },
    {
      "src": "}: } [889,890]",
      "dest": "}: } [889,890]"
    },
    {
      "src": "return: return [2604,2610]",
      "dest": "return: return [2604,2610]"
    },
    {
      "src": "return_statement [4597,4610]",
      "dest": "return_statement [4597,4610]"
    },
    {
      "src": "(: ( [3643,3644]",
      "dest": "(: ( [3643,3644]"
    },
    {
      "src": "parameter [1060,1069]",
      "dest": "parameter [1060,1069]"
    },
    {
      "src": "tuple_expression [1852,1862]",
      "dest": "tuple_expression [1852,1862]"
    },
    {
      "src": "state_mutability [3287,3291]",
      "dest": "state_mutability [3287,3291]"
    },
    {
      "src": "identifier: c [819,820]",
      "dest": "identifier: c [819,820]"
    },
    {
      "src": "tuple_expression [2611,2624]",
      "dest": "tuple_expression [2611,2624]"
    },
    {
      "src": "tuple_expression [833,843]",
      "dest": "tuple_expression [833,843]"
    },
    {
      "src": "number_literal: 0 [1193,1194]",
      "dest": "number_literal: 0 [1193,1194]"
    },
    {
      "src": "%: % [6881,6882]",
      "dest": "%: % [6881,6882]"
    },
    {
      "src": "{: { [6816,6817]",
      "dest": "{: { [6816,6817]"
    },
    {
      "src": "): ) [5171,5172]",
      "dest": "): ) [5171,5172]"
    },
    {
      "src": "function: function [5795,5803]",
      "dest": "function: function [5795,5803]"
    },
    {
      "src": "parameter [3610,3619]",
      "dest": "parameter [3610,3619]"
    },
    {
      "src": "): ) [2941,2942]",
      "dest": "): ) [2941,2942]"
    },
    {
      "src": "primitive_type [6693,6700]",
      "dest": "primitive_type [6693,6700]"
    },
    {
      "src": "return: return [3320,3326]",
      "dest": "return: return [3320,3326]"
    },
    {
      "src": "(: ( [6837,6838]",
      "dest": "(: ( [6837,6838]"
    },
    {
      "src": "type_name [696,703]",
      "dest": "type_name [696,703]"
    },
    {
      "src": "identifier: sub [5089,5092]",
      "dest": "identifier: sub [5089,5092]"
    },
    {
      "src": "primitive_type [6731,6737]",
      "dest": "primitive_type [6731,6737]"
    },
    {
      "src": "type_name [3267,3274]",
      "dest": "type_name [3267,3274]"
    },
    {
      "src": "library_declaration [482,6903]",
      "dest": "library_declaration [482,6903]"
    },
    {
      "src": "string: string [6731,6737]",
      "dest": "string: string [6731,6737]"
    },
    {
      "src": "type_name [1124,1131]",
      "dest": "type_name [1124,1131]"
    },
    {
      "src": "state_mutability [4015,4019]",
      "dest": "state_mutability [4015,4019]"
    },
    {
      "src": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations.  *  * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler  * now has built in overflow checking.  */ [285,481]",
      "dest": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations.  *  * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler  * now has built in overflow checking.  */ [285,481]"
    },
    {
      "src": "(: ( [864,865]",
      "dest": "(: ( [864,865]"
    },
    {
      "src": "type_name [784,791]",
      "dest": "type_name [784,791]"
    },
    {
      "src": "primitive_type [1438,1445]",
      "dest": "primitive_type [1438,1445]"
    },
    {
      "src": "return_statement [3663,3676]",
      "dest": "return_statement [3663,3676]"
    },
    {
      "src": "identifier: errorMessage [5969,5981]",
      "dest": "identifier: errorMessage [5969,5981]"
    },
    {
      "src": "binary_expression [2194,2200]",
      "dest": "binary_expression [2194,2200]"
    },
    {
      "src": "visibility [3278,3286]",
      "dest": "visibility [3278,3286]"
    },
    {
      "src": "binary_expression [6003,6008]",
      "dest": "binary_expression [6003,6008]"
    },
    {
      "src": "comment: /**      * @dev Returns the addition of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [516,647]",
      "dest": "comment: /**      * @dev Returns the addition of two unsigned integers, with an overflow flag.      *      * _Available since v3.4._      */ [516,647]"
    },
    {
      "src": "(: ( [5807,5808]",
      "dest": "(: ( [5807,5808]"
    },
    {
      "src": "true [1884,1888]",
      "dest": "true [1884,1888]"
    },
    {
      "src": "call_argument [5255,5267]",
      "dest": "call_argument [5255,5267]"
    },
    {
      "src": "}: } [6894,6895]",
      "dest": "}: } [6894,6895]"
    },
    {
      "src": "primitive_type [2083,2090]",
      "dest": "primitive_type [2083,2090]"
    },
    {
      "src": "identifier: a [796,797]",
      "dest": "identifier: a [796,797]"
    },
    {
      "src": "}: } [6902,6903]",
      "dest": "}: } [6902,6903]"
    },
    {
      "src": "tuple_expression [1883,1892]",
      "dest": "tuple_expression [1883,1892]"
    },
    {
      "src": "primitive_type [5121,5128]",
      "dest": "primitive_type [5121,5128]"
    },
    {
      "src": "parameter [5911,5918]",
      "dest": "parameter [5911,5918]"
    },
    {
      "src": "internal: internal [2489,2497]",
      "dest": "internal: internal [2489,2497]"
    },
    {
      "src": "return: return [5996,6002]",
      "dest": "return: return [5996,6002]"
    },
    {
      "src": "uint256: uint256 [2083,2090]",
      "dest": "uint256: uint256 [2083,2090]"
    },
    {
      "src": "function_definition [3971,4067]",
      "dest": "function_definition [3971,4067]"
    },
    {
      "src": "function: function [1394,1402]",
      "dest": "function: function [1394,1402]"
    },
    {
      "src": "primitive_type [1124,1131]",
      "dest": "primitive_type [1124,1131]"
    },
    {
      "src": "type_name [5121,5128]",
      "dest": "type_name [5121,5128]"
    },
    {
      "src": "{: { [4038,4039]",
      "dest": "{: { [4038,4039]"
    },
    {
      "src": "boolean_literal [2210,2215]",
      "dest": "boolean_literal [2210,2215]"
    },
    {
      "src": ",: , [2516,2517]",
      "dest": ",: , [2516,2517]"
    },
    {
      "src": "primitive_type [5855,5861]",
      "dest": "primitive_type [5855,5861]"
    },
    {
      "src": "type_name [3984,3991]",
      "dest": "type_name [3984,3991]"
    },
    {
      "src": "(: ( [2611,2612]",
      "dest": "(: ( [2611,2612]"
    },
    {
      "src": "internal: internal [2118,2126]",
      "dest": "internal: internal [2118,2126]"
    },
    {
      "src": "(: ( [5092,5093]",
      "dest": "(: ( [5092,5093]"
    },
    {
      "src": "state_mutability [2920,2924]",
      "dest": "state_mutability [2920,2924]"
    },
    {
      "src": "comment: // CAUTION [132,142]",
      "dest": "comment: // CAUTION [132,142]"
    },
    {
      "src": "): ) [2487,2488]",
      "dest": "): ) [2487,2488]"
    },
    {
      "src": "uint256: uint256 [5121,5128]",
      "dest": "uint256: uint256 [5121,5128]"
    },
    {
      "src": "identifier: a [1223,1224]",
      "dest": "identifier: a [1223,1224]"
    },
    {
      "src": "number_literal: 0 [1782,1783]",
      "dest": "number_literal: 0 [1782,1783]"
    },
    {
      "src": "identifier: a [5110,5111]",
      "dest": "identifier: a [5110,5111]"
    },
    {
      "src": "return_statement [2573,2591]",
      "dest": "return_statement [2573,2591]"
    },
    {
      "src": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [1526,1605]",
      "dest": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [1526,1605]"
    },
    {
      "src": "state_mutability [1463,1467]",
      "dest": "state_mutability [1463,1467]"
    },
    {
      "src": "identifier: b [704,705]",
      "dest": "identifier: b [704,705]"
    },
    {
      "src": "type_name [5911,5918]",
      "dest": "type_name [5911,5918]"
    },
    {
      "src": "(: ( [734,735]",
      "dest": "(: ( [734,735]"
    },
    {
      "src": ",: , [3993,3994]",
      "dest": ",: , [3993,3994]"
    },
    {
      "src": "primitive_type [2934,2941]",
      "dest": "primitive_type [2934,2941]"
    },
    {
      "src": "block_statement [5930,6019]",
      "dest": "block_statement [5930,6019]"
    },
    {
      "src": "(: ( [1117,1118]",
      "dest": "(: ( [1117,1118]"
    },
    {
      "src": ",: , [5130,5131]",
      "dest": ",: , [5130,5131]"
    },
    {
      "src": "source_file [0,6904]",
      "dest": "source_file [0,6904]"
    },
    {
      "src": "{: { [1133,1134]",
      "dest": "{: { [1133,1134]"
    },
    {
      "src": "}: } [2634,2635]",
      "dest": "}: } [2634,2635]"
    },
    {
      "src": "boolean_literal [1884,1888]",
      "dest": "boolean_literal [1884,1888]"
    },
    {
      "src": "primitive_type [3644,3651]",
      "dest": "primitive_type [3644,3651]"
    },
    {
      "src": "function_definition [1035,1246]",
      "dest": "function_definition [1035,1246]"
    },
    {
      "src": "identifier: c [1833,1834]",
      "dest": "identifier: c [1833,1834]"
    },
    {
      "src": "block_statement [6806,6895]",
      "dest": "block_statement [6806,6895]"
    },
    {
      "src": "identifier: tryAdd [661,667]",
      "dest": "identifier: tryAdd [661,667]"
    },
    {
      "src": "call_argument [5969,5981]",
      "dest": "call_argument [5969,5981]"
    },
    {
      "src": "identifier: b [1227,1228]",
      "dest": "identifier: b [1227,1228]"
    },
    {
      "src": "function_definition [5795,6025]",
      "dest": "function_definition [5795,6025]"
    },
    {
      "src": "(: ( [1185,1186]",
      "dest": "(: ( [1185,1186]"
    },
    {
      "src": "boolean_literal [1853,1858]",
      "dest": "boolean_literal [1853,1858]"
    },
    {
      "src": "return_type_definition [2503,2526]",
      "dest": "return_type_definition [2503,2526]"
    },
    {
      "src": "identifier: require [6830,6837]",
      "dest": "identifier: require [6830,6837]"
    },
    {
      "src": "false [1186,1191]",
      "dest": "false [1186,1191]"
    },
    {
      "src": "type_name [3995,4002]",
      "dest": "type_name [3995,4002]"
    },
    {
      "src": "type_name [1798,1805]",
      "dest": "type_name [1798,1805]"
    },
    {
      "src": "primitive_type [3301,3308]",
      "dest": "primitive_type [3301,3308]"
    },
    {
      "src": "return_statement [6872,6885]",
      "dest": "return_statement [6872,6885]"
    },
    {
      "src": "uint256: uint256 [6693,6700]",
      "dest": "uint256: uint256 [6693,6700]"
    },
    {
      "src": "function: function [652,660]",
      "dest": "function: function [652,660]"
    },
    {
      "src": "string: string [5855,5861]",
      "dest": "string: string [5855,5861]"
    },
    {
      "src": "library: library [482,489]",
      "dest": "library: library [482,489]"
    },
    {
      "src": "(: ( [2564,2565]",
      "dest": "(: ( [2564,2565]"
    },
    {
      "src": "parameter [5196,5203]",
      "dest": "parameter [5196,5203]"
    },
    {
      "src": "}: } [3681,3682]",
      "dest": "}: } [3681,3682]"
    },
    {
      "src": ",: , [6721,6722]",
      "dest": ",: , [6721,6722]"
    },
    {
      "src": "visibility [2489,2497]",
      "dest": "visibility [2489,2497]"
    },
    {
      "src": "false [834,839]",
      "dest": "false [834,839]"
    },
    {
      "src": "parameter [1419,1428]",
      "dest": "parameter [1419,1428]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [0,31]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "): ) [5918,5919]",
      "dest": "): ) [5918,5919]"
    },
    {
      "src": "parameter [2147,2154]",
      "dest": "parameter [2147,2154]"
    },
    {
      "src": "): ) [1093,1094]",
      "dest": "): ) [1093,1094]"
    },
    {
      "src": ",: , [3608,3609]",
      "dest": ",: , [3608,3609]"
    },
    {
      "src": "identifier: b [3674,3675]",
      "dest": "identifier: b [3674,3675]"
    },
    {
      "src": "identifier: c [871,872]",
      "dest": "identifier: c [871,872]"
    },
    {
      "src": "false: false [1853,1858]",
      "dest": "false: false [1853,1858]"
    },
    {
      "src": "(: ( [5910,5911]",
      "dest": "(: ( [5910,5911]"
    },
    {
      "src": ",: , [2092,2093]",
      "dest": ",: , [2092,2093]"
    },
    {
      "src": "internal: internal [6764,6772]",
      "dest": "internal: internal [6764,6772]"
    },
    {
      "src": "return_type_definition [3292,3309]",
      "dest": "return_type_definition [3292,3309]"
    },
    {
      "src": "type_name [5140,5146]",
      "dest": "type_name [5140,5146]"
    },
    {
      "src": "pure: pure [5182,5186]",
      "dest": "pure: pure [5182,5186]"
    },
    {
      "src": "): ) [6762,6763]",
      "dest": "): ) [6762,6763]"
    },
    {
      "src": "pure: pure [1104,1108]",
      "dest": "pure: pure [1104,1108]"
    },
    {
      "src": "uint256: uint256 [696,703]",
      "dest": "uint256: uint256 [696,703]"
    },
    {
      "src": "function_body [3653,3682]",
      "dest": "function_body [3653,3682]"
    },
    {
      "src": "state_mutability [5182,5186]",
      "dest": "state_mutability [5182,5186]"
    },
    {
      "src": "parameter [6787,6794]",
      "dest": "parameter [6787,6794]"
    },
    {
      "src": "uint256: uint256 [2889,2896]",
      "dest": "uint256: uint256 [2889,2896]"
    },
    {
      "src": "=: = [794,795]",
      "dest": "=: = [794,795]"
    },
    {
      "src": ",: , [2145,2146]",
      "dest": ",: , [2145,2146]"
    },
    {
      "src": "returns: returns [4020,4027]",
      "dest": "returns: returns [4020,4027]"
    },
    {
      "src": "parameter [3267,3276]",
      "dest": "parameter [3267,3276]"
    },
    {
      "src": "): ) [710,711]",
      "dest": "): ) [710,711]"
    },
    {
      "src": "function_body [750,890]",
      "dest": "function_body [750,890]"
    },
    {
      "src": "return_type_definition [5902,5919]",
      "dest": "return_type_definition [5902,5919]"
    },
    {
      "src": "function_definition [3243,3339]",
      "dest": "function_definition [3243,3339]"
    },
    {
      "src": "identifier: trySub [1044,1050]",
      "dest": "identifier: trySub [1044,1050]"
    },
    {
      "src": "returns: returns [2503,2510]",
      "dest": "returns: returns [2503,2510]"
    },
    {
      "src": "identifier: b [2622,2623]",
      "dest": "identifier: b [2622,2623]"
    },
    {
      "src": "): ) [4585,4586]",
      "dest": "): ) [4585,4586]"
    },
    {
      "src": "parameter [2141,2145]",
      "dest": "parameter [2141,2145]"
    },
    {
      "src": "uint256: uint256 [2934,2941]",
      "dest": "uint256: uint256 [2934,2941]"
    },
    {
      "src": "memory: memory [5862,5868]",
      "dest": "memory: memory [5862,5868]"
    },
    {
      "src": "visibility [3621,3629]",
      "dest": "visibility [3621,3629]"
    },
    {
      "src": "returns: returns [1109,1116]",
      "dest": "returns: returns [1109,1116]"
    },
    {
      "src": "type_name [2147,2154]",
      "dest": "type_name [2147,2154]"
    },
    {
      "src": "identifier: a [1175,1176]",
      "dest": "identifier: a [1175,1176]"
    },
    {
      "src": "(: ( [2444,2445]",
      "dest": "(: ( [2444,2445]"
    },
    {
      "src": "if: if [2561,2563]",
      "dest": "if: if [2561,2563]"
    },
    {
      "src": "parameter [5121,5130]",
      "dest": "parameter [5121,5130]"
    },
    {
      "src": "identifier: a [6003,6004]",
      "dest": "identifier: a [6003,6004]"
    },
    {
      "src": "return: return [4048,4054]",
      "dest": "return: return [4048,4054]"
    },
    {
      "src": "identifier: b [1842,1843]",
      "dest": "identifier: b [1842,1843]"
    },
    {
      "src": "function_definition [2429,2641]",
      "dest": "function_definition [2429,2641]"
    },
    {
      "src": "comment: /**      * @dev Returns the division of two unsigned integers, with a division by zero flag.      *      * _Available since v3.4._      */ [1915,2053]",
      "dest": "comment: /**      * @dev Returns the division of two unsigned integers, with a division by zero flag.      *      * _Available since v3.4._      */ [1915,2053]"
    },
    {
      "src": "return: return [2233,2239]",
      "dest": "return: return [2233,2239]"
    },
    {
      "src": "parameter [4533,4542]",
      "dest": "parameter [4533,4542]"
    },
    {
      "src": "pragma: pragma [107,113]",
      "dest": "pragma: pragma [107,113]"
    },
    {
      "src": "}: } [5304,5305]",
      "dest": "}: } [5304,5305]"
    },
    {
      "src": ",: , [1780,1781]",
      "dest": ",: , [1780,1781]"
    },
    {
      "src": "boolean_literal [2241,2245]",
      "dest": "boolean_literal [2241,2245]"
    },
    {
      "src": "): ) [5203,5204]",
      "dest": "): ) [5203,5204]"
    },
    {
      "src": "call_argument [5247,5253]",
      "dest": "call_argument [5247,5253]"
    },
    {
      "src": ",: , [2616,2617]",
      "dest": ",: , [2616,2617]"
    },
    {
      "src": "parameter [4578,4585]",
      "dest": "parameter [4578,4585]"
    },
    {
      "src": "call_argument [5962,5967]",
      "dest": "call_argument [5962,5967]"
    },
    {
      "src": "parameter [2473,2482]",
      "dest": "parameter [2473,2482]"
    },
    {
      "src": "identifier: a [1068,1069]",
      "dest": "identifier: a [1068,1069]"
    },
    {
      "src": "visibility [2911,2919]",
      "dest": "visibility [2911,2919]"
    },
    {
      "src": "parameter [1118,1122]",
      "dest": "parameter [1118,1122]"
    },
    {
      "src": "memory: memory [6738,6744]",
      "dest": "memory: memory [6738,6744]"
    },
    {
      "src": "boolean_literal [1217,1221]",
      "dest": "boolean_literal [1217,1221]"
    },
    {
      "src": "): ) [1891,1892]",
      "dest": "): ) [1891,1892]"
    },
    {
      "src": "function_body [2943,2972]",
      "dest": "function_body [2943,2972]"
    },
    {
      "src": "}: } [6024,6025]",
      "dest": "}: } [6024,6025]"
    },
    {
      "src": "return_type_definition [4020,4037]",
      "dest": "return_type_definition [4020,4037]"
    },
    {
      "src": "return: return [3663,3669]",
      "dest": "return: return [3663,3669]"
    },
    {
      "src": "}: } [1908,1909]",
      "dest": "}: } [1908,1909]"
    },
    {
      "src": "uint256: uint256 [5196,5203]",
      "dest": "uint256: uint256 [5196,5203]"
    },
    {
      "src": "type_name [4533,4540]",
      "dest": "type_name [4533,4540]"
    },
    {
      "src": "identifier: a [4604,4605]",
      "dest": "identifier: a [4604,4605]"
    },
    {
      "src": "primitive_type [1483,1490]",
      "dest": "primitive_type [1483,1490]"
    },
    {
      "src": "identifier: a [3992,3993]",
      "dest": "identifier: a [3992,3993]"
    },
    {
      "src": "visibility [4555,4563]",
      "dest": "visibility [4555,4563]"
    },
    {
      "src": "+: + [798,799]",
      "dest": "+: + [798,799]"
    },
    {
      "src": "type_name [735,739]",
      "dest": "type_name [735,739]"
    },
    {
      "src": "type_name [3301,3308]",
      "dest": "type_name [3301,3308]"
    },
    {
      "src": "true [1217,1221]",
      "dest": "true [1217,1221]"
    },
    {
      "src": "identifier: a [2960,2961]",
      "dest": "identifier: a [2960,2961]"
    },
    {
      "src": "visibility [2118,2126]",
      "dest": "visibility [2118,2126]"
    },
    {
      "src": ",: , [5845,5846]",
      "dest": ",: , [5845,5846]"
    },
    {
      "src": "identifier: a [6701,6702]",
      "dest": "identifier: a [6701,6702]"
    },
    {
      "src": "identifier: b [6720,6721]",
      "dest": "identifier: b [6720,6721]"
    },
    {
      "src": "%: % [2620,2621]",
      "dest": "%: % [2620,2621]"
    },
    {
      "src": "uint256: uint256 [4544,4551]",
      "dest": "uint256: uint256 [4544,4551]"
    },
    {
      "src": "boolean_literal [834,839]",
      "dest": "boolean_literal [834,839]"
    },
    {
      "src": "(: ( [1409,1410]",
      "dest": "(: ( [1409,1410]"
    },
    {
      "src": "type_name [2512,2516]",
      "dest": "type_name [2512,2516]"
    },
    {
      "src": "parameter [696,705]",
      "dest": "parameter [696,705]"
    },
    {
      "src": "identifier: errorMessage [6845,6857]",
      "dest": "identifier: errorMessage [6845,6857]"
    },
    {
      "src": "returns: returns [4569,4576]",
      "dest": "returns: returns [4569,4576]"
    },
    {
      "src": "if_statement [1167,1196]",
      "dest": "if_statement [1167,1196]"
    },
    {
      "src": "): ) [2623,2624]",
      "dest": "): ) [2623,2624]"
    },
    {
      "src": "if: if [1829,1831]",
      "dest": "if: if [1829,1831]"
    },
    {
      "src": "identifier: a [1837,1838]",
      "dest": "identifier: a [1837,1838]"
    },
    {
      "src": "return_statement [3320,3333]",
      "dest": "return_statement [3320,3333]"
    },
    {
      "src": "/: / [1835,1836]",
      "dest": "/: / [1835,1836]"
    },
    {
      "src": "primitive_type [3995,4002]",
      "dest": "primitive_type [3995,4002]"
    },
    {
      "src": "): ) [4553,4554]",
      "dest": "): ) [4553,4554]"
    },
    {
      "src": "function: function [3971,3979]",
      "dest": "function: function [3971,3979]"
    },
    {
      "src": "): ) [1131,1132]",
      "dest": "): ) [1131,1132]"
    },
    {
      "src": "binary_expression [3327,3332]",
      "dest": "binary_expression [3327,3332]"
    },
    {
      "src": "tuple_expression [1216,1229]",
      "dest": "tuple_expression [1216,1229]"
    },
    {
      "src": "-: - [5291,5292]",
      "dest": "-: - [5291,5292]"
    },
    {
      "src": "): ) [2200,2201]",
      "dest": "): ) [2200,2201]"
    },
    {
      "src": "(: ( [4028,4029]",
      "dest": "(: ( [4028,4029]"
    },
    {
      "src": "parameter [3984,3993]",
      "dest": "parameter [3984,3993]"
    },
    {
      "src": "type_name [2102,2109]",
      "dest": "type_name [2102,2109]"
    },
    {
      "src": "type_name [1419,1426]",
      "dest": "type_name [1419,1426]"
    },
    {
      "src": "identifier: require [5239,5246]",
      "dest": "identifier: require [5239,5246]"
    },
    {
      "src": "number_literal: 0 [6842,6843]",
      "dest": "number_literal: 0 [6842,6843]"
    },
    {
      "src": "bool: bool [1118,1122]",
      "dest": "bool: bool [1118,1122]"
    },
    {
      "src": "function: function [1035,1043]",
      "dest": "function: function [1035,1043]"
    },
    {
      "src": "identifier: div [3980,3983]",
      "dest": "identifier: div [3980,3983]"
    },
    {
      "src": "parameter [3301,3308]",
      "dest": "parameter [3301,3308]"
    },
    {
      "src": "function: function [6671,6679]",
      "dest": "function: function [6671,6679]"
    },
    {
      "src": "binary_expression [2960,2965]",
      "dest": "binary_expression [2960,2965]"
    },
    {
      "src": "return: return [5282,5288]",
      "dest": "return: return [5282,5288]"
    },
    {
      "src": "type_name [3644,3651]",
      "dest": "type_name [3644,3651]"
    },
    {
      "src": "identifier: a [3607,3608]",
      "dest": "identifier: a [3607,3608]"
    },
    {
      "src": "%: % [4606,4607]",
      "dest": "%: % [4606,4607]"
    },
    {
      "src": ",: , [5826,5827]",
      "dest": ",: , [5826,5827]"
    },
    {
      "src": "uint256: uint256 [3256,3263]",
      "dest": "uint256: uint256 [3256,3263]"
    },
    {
      "src": "identifier: a [4055,4056]",
      "dest": "identifier: a [4055,4056]"
    },
    {
      "src": "return_type_definition [3635,3652]",
      "dest": "return_type_definition [3635,3652]"
    },
    {
      "src": "bool: bool [2141,2145]",
      "dest": "bool: bool [2141,2145]"
    },
    {
      "src": ",: , [1428,1429]",
      "dest": ",: , [1428,1429]"
    },
    {
      "src": "visibility [5173,5181]",
      "dest": "visibility [5173,5181]"
    },
    {
      "src": "bool: bool [735,739]",
      "dest": "bool: bool [735,739]"
    },
    {
      "src": "call_expression [5239,5268]",
      "dest": "call_expression [5239,5268]"
    },
    {
      "src": "type_name [5102,5109]",
      "dest": "type_name [5102,5109]"
    },
    {
      "src": "uint256: uint256 [1079,1086]",
      "dest": "uint256: uint256 [1079,1086]"
    },
    {
      "src": "identifier: b [4059,4060]",
      "dest": "identifier: b [4059,4060]"
    },
    {
      "src": "function_definition [652,890]",
      "dest": "function_definition [652,890]"
    },
    {
      "src": ",: , [686,687]",
      "dest": ",: , [686,687]"
    },
    {
      "src": "{: { [5225,5226]",
      "dest": "{: { [5225,5226]"
    },
    {
      "src": "pure: pure [2127,2131]",
      "dest": "pure: pure [2127,2131]"
    },
    {
      "src": "{: { [6796,6797]",
      "dest": "{: { [6796,6797]"
    },
    {
      "src": "bool: bool [2512,2516]",
      "dest": "bool: bool [2512,2516]"
    },
    {
      "src": "}: } [2971,2972]",
      "dest": "}: } [2971,2972]"
    },
    {
      "src": "uint256: uint256 [741,748]",
      "dest": "uint256: uint256 [741,748]"
    },
    {
      "src": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [1672,1743]",
      "dest": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [1672,1743]"
    },
    {
      "src": "true: true [2612,2616]",
      "dest": "true: true [2612,2616]"
    },
    {
      "src": "identifier: errorMessage [5154,5166]",
      "dest": "identifier: errorMessage [5154,5166]"
    },
    {
      "src": "boolean_literal [2612,2616]",
      "dest": "boolean_literal [2612,2616]"
    },
    {
      "src": "function: function [3243,3251]",
      "dest": "function: function [3243,3251]"
    },
    {
      "src": "primitive_type [741,748]",
      "dest": "primitive_type [741,748]"
    },
    {
      "src": "identifier: b [5962,5963]",
      "dest": "identifier: b [5962,5963]"
    },
    {
      "src": "/: / [4057,4058]",
      "dest": "/: / [4057,4058]"
    },
    {
      "src": "function_definition [6671,6901]",
      "dest": "function_definition [6671,6901]"
    },
    {
      "src": "uint256: uint256 [1060,1067]",
      "dest": "uint256: uint256 [1060,1067]"
    },
    {
      "src": "identifier: a [2897,2898]",
      "dest": "identifier: a [2897,2898]"
    },
    {
      "src": "boolean_literal [1186,1191]",
      "dest": "boolean_literal [1186,1191]"
    },
    {
      "src": "): ) [1783,1784]",
      "dest": "): ) [1783,1784]"
    },
    {
      "src": "internal: internal [5173,5181]",
      "dest": "internal: internal [5173,5181]"
    },
    {
      "src": "parameter [1477,1481]",
      "dest": "parameter [1477,1481]"
    },
    {
      "src": "}: } [6900,6901]",
      "dest": "}: } [6900,6901]"
    },
    {
      "src": "pragma_directive [107,130]",
      "dest": "pragma_directive [107,130]"
    },
    {
      "src": "return: return [1845,1851]",
      "dest": "return: return [1845,1851]"
    },
    {
      "src": "type_name [2889,2896]",
      "dest": "type_name [2889,2896]"
    },
    {
      "src": "primitive_type [5196,5203]",
      "dest": "primitive_type [5196,5203]"
    },
    {
      "src": "type_name [5836,5843]",
      "dest": "type_name [5836,5843]"
    },
    {
      "src": "internal: internal [5888,5896]",
      "dest": "internal: internal [5888,5896]"
    },
    {
      "src": "^:  ^ [122,124]",
      "dest": "^:  ^ [122,124]"
    },
    {
      "src": "return_statement [2202,2220]",
      "dest": "return_statement [2202,2220]"
    },
    {
      "src": ">: > [1173,1174]",
      "dest": ">: > [1173,1174]"
    },
    {
      "src": "uint256: uint256 [5102,5109]",
      "dest": "uint256: uint256 [5102,5109]"
    },
    {
      "src": "uint256: uint256 [5911,5918]",
      "dest": "uint256: uint256 [5911,5918]"
    },
    {
      "src": "return_statement [2233,2254]",
      "dest": "return_statement [2233,2254]"
    },
    {
      "src": "uint256: uint256 [2518,2525]",
      "dest": "uint256: uint256 [2518,2525]"
    },
    {
      "src": "uint256: uint256 [3301,3308]",
      "dest": "uint256: uint256 [3301,3308]"
    },
    {
      "src": "false: false [1186,1191]",
      "dest": "false: false [1186,1191]"
    },
    {
      "src": "uint256: uint256 [6712,6719]",
      "dest": "uint256: uint256 [6712,6719]"
    },
    {
      "src": "if: if [1167,1169]",
      "dest": "if: if [1167,1169]"
    },
    {
      "src": "): ) [2571,2572]",
      "dest": "): ) [2571,2572]"
    },
    {
      "src": "identifier: a [3670,3671]",
      "dest": "identifier: a [3670,3671]"
    },
    {
      "src": "function_body [6796,6901]",
      "dest": "function_body [6796,6901]"
    },
    {
      "src": "function_definition [2058,2270]",
      "dest": "function_definition [2058,2270]"
    },
    {
      "src": "primitive_type [5102,5109]",
      "dest": "primitive_type [5102,5109]"
    },
    {
      "src": "parameter [6712,6721]",
      "dest": "parameter [6712,6721]"
    },
    {
      "src": "primitive_type [3984,3991]",
      "dest": "primitive_type [3984,3991]"
    },
    {
      "src": "identifier: b [1814,1815]",
      "dest": "identifier: b [1814,1815]"
    },
    {
      "src": "(: ( [4532,4533]",
      "dest": "(: ( [4532,4533]"
    },
    {
      "src": "uint256: uint256 [677,684]",
      "dest": "uint256: uint256 [677,684]"
    },
    {
      "src": "primitive_type [3256,3263]",
      "dest": "primitive_type [3256,3263]"
    },
    {
      "src": "(: ( [1883,1884]",
      "dest": "(: ( [1883,1884]"
    },
    {
      "src": "number_literal: 0 [5966,5967]",
      "dest": "number_literal: 0 [5966,5967]"
    },
    {
      "src": "function_definition [1394,1909]",
      "dest": "function_definition [1394,1909]"
    },
    {
      "src": "parameter [2900,2909]",
      "dest": "parameter [2900,2909]"
    },
    {
      "src": "parameter [5140,5166]",
      "dest": "parameter [5140,5166]"
    },
    {
      "src": "pure: pure [2920,2924]",
      "dest": "pure: pure [2920,2924]"
    },
    {
      "src": "identifier: errorMessage [5255,5267]",
      "dest": "identifier: errorMessage [5255,5267]"
    },
    {
      "src": "): ) [2252,2253]",
      "dest": "): ) [2252,2253]"
    },
    {
      "src": "uint256: uint256 [4533,4540]",
      "dest": "uint256: uint256 [4533,4540]"
    },
    {
      "src": "identifier: mod [6680,6683]",
      "dest": "identifier: mod [6680,6683]"
    },
    {
      "src": "state_mutability [5897,5901]",
      "dest": "state_mutability [5897,5901]"
    },
    {
      "src": "(: ( [5961,5962]",
      "dest": "(: ( [5961,5962]"
    },
    {
      "src": "identifier: mul [3595,3598]",
      "dest": "identifier: mul [3595,3598]"
    },
    {
      "src": "{: { [1512,1513]",
      "dest": "{: { [1512,1513]"
    },
    {
      "src": "return: return [1209,1215]",
      "dest": "return: return [1209,1215]"
    },
    {
      "src": "uint256: uint256 [4029,4036]",
      "dest": "uint256: uint256 [4029,4036]"
    },
    {
      "src": "primitive_type [3610,3617]",
      "dest": "primitive_type [3610,3617]"
    },
    {
      "src": "primitive_type [4544,4551]",
      "dest": "primitive_type [4544,4551]"
    },
    {
      "src": "return: return [1178,1184]",
      "dest": "return: return [1178,1184]"
    },
    {
      "src": "variable_declaration_statement [784,802]",
      "dest": "variable_declaration_statement [784,802]"
    },
    {
      "src": "!=: != [1839,1841]",
      "dest": "!=: != [1839,1841]"
    },
    {
      "src": "return_type_definition [4569,4586]",
      "dest": "return_type_definition [4569,4586]"
    },
    {
      "src": "return_type_definition [1109,1132]",
      "dest": "return_type_definition [1109,1132]"
    },
    {
      "src": "function: function [2876,2884]",
      "dest": "function: function [2876,2884]"
    },
    {
      "src": "(: ( [6683,6684]",
      "dest": "(: ( [6683,6684]"
    },
    {
      "src": "call_argument [6845,6857]",
      "dest": "call_argument [6845,6857]"
    },
    {
      "src": "parameter [3644,3651]",
      "dest": "parameter [3644,3651]"
    },
    {
      "src": "binary_expression [2565,2571]",
      "dest": "binary_expression [2565,2571]"
    },
    {
      "src": "(: ( [1476,1477]",
      "dest": "(: ( [1476,1477]"
    },
    {
      "src": "state_mutability [4564,4568]",
      "dest": "state_mutability [4564,4568]"
    },
    {
      "src": "parameter [4029,4036]",
      "dest": "parameter [4029,4036]"
    },
    {
      "src": "{: { [510,511]",
      "dest": "{: { [510,511]"
    },
    {
      "src": "<: < [821,822]",
      "dest": "<: < [821,822]"
    },
    {
      "src": "uint256: uint256 [1419,1426]",
      "dest": "uint256: uint256 [1419,1426]"
    },
    {
      "src": "parameter [2934,2941]",
      "dest": "parameter [2934,2941]"
    },
    {
      "src": "if: if [2190,2192]",
      "dest": "if: if [2190,2192]"
    },
    {
      "src": "identifier: b [2565,2566]",
      "dest": "identifier: b [2565,2566]"
    },
    {
      "src": "visibility [4006,4014]",
      "dest": "visibility [4006,4014]"
    },
    {
      "src": "primitive_type [3599,3606]",
      "dest": "primitive_type [3599,3606]"
    },
    {
      "src": "pure: pure [5897,5901]",
      "dest": "pure: pure [5897,5901]"
    },
    {
      "src": "parameter [2889,2898]",
      "dest": "parameter [2889,2898]"
    },
    {
      "src": "): ) [1861,1862]",
      "dest": "): ) [1861,1862]"
    },
    {
      "src": "identifier: a [1810,1811]",
      "dest": "identifier: a [1810,1811]"
    },
    {
      "src": "variable_declaration [784,793]",
      "dest": "variable_declaration [784,793]"
    },
    {
      "src": "{: { [1153,1154]",
      "dest": "{: { [1153,1154]"
    },
    {
      "src": "binary_expression [1833,1843]",
      "dest": "binary_expression [1833,1843]"
    },
    {
      "src": "parameter [2454,2463]",
      "dest": "parameter [2454,2463]"
    },
    {
      "src": "uint256: uint256 [3267,3274]",
      "dest": "uint256: uint256 [3267,3274]"
    },
    {
      "src": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */ [2647,2871]",
      "dest": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */ [2647,2871]"
    },
    {
      "src": "{: { [5940,5941]",
      "dest": "{: { [5940,5941]"
    },
    {
      "src": "identifier: b [1087,1088]",
      "dest": "identifier: b [1087,1088]"
    },
    {
      "src": "identifier: tryMod [2438,2444]",
      "dest": "identifier: tryMod [2438,2444]"
    },
    {
      "src": "pure: pure [721,725]",
      "dest": "pure: pure [721,725]"
    },
    {
      "src": "parameter [677,686]",
      "dest": "parameter [677,686]"
    },
    {
      "src": "identifier: b [6883,6884]",
      "dest": "identifier: b [6883,6884]"
    },
    {
      "src": "boolean_literal [865,869]",
      "dest": "boolean_literal [865,869]"
    },
    {
      "src": "binary_expression [796,801]",
      "dest": "binary_expression [796,801]"
    },
    {
      "src": "binary_expression [1810,1815]",
      "dest": "binary_expression [1810,1815]"
    },
    {
      "src": "==: == [1762,1764]",
      "dest": "==: == [1762,1764]"
    },
    {
      "src": "block_statement [2537,2635]",
      "dest": "block_statement [2537,2635]"
    },
    {
      "src": "}: } [2263,2264]",
      "dest": "}: } [2263,2264]"
    },
    {
      "src": "binary_expression [6838,6843]",
      "dest": "binary_expression [6838,6843]"
    },
    {
      "src": "block_statement [760,884]",
      "dest": "block_statement [760,884]"
    },
    {
      "src": "binary_expression [4604,4609]",
      "dest": "binary_expression [4604,4609]"
    },
    {
      "src": "identifier: require [5954,5961]",
      "dest": "identifier: require [5954,5961]"
    },
    {
      "src": "uint256: uint256 [2900,2907]",
      "dest": "uint256: uint256 [2900,2907]"
    },
    {
      "src": "bool: bool [1477,1481]",
      "dest": "bool: bool [1477,1481]"
    },
    {
      "src": "uint256: uint256 [3995,4002]",
      "dest": "uint256: uint256 [3995,4002]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.      *      * _Available since v3.4._      */ [2276,2424]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.      *      * _Available since v3.4._      */ [2276,2424]"
    },
    {
      "src": "}: } [3338,3339]",
      "dest": "}: } [3338,3339]"
    },
    {
      "src": "binary_expression [819,824]",
      "dest": "binary_expression [819,824]"
    },
    {
      "src": "comment: // benefit is lost if 'b' is also tested. [1618,1659]",
      "dest": "comment: // benefit is lost if 'b' is also tested. [1618,1659]"
    },
    {
      "src": "visibility [1095,1103]",
      "dest": "visibility [1095,1103]"
    },
    {
      "src": "comment: // OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol) [32,105]",
      "dest": "comment: // OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol) [32,105]"
    },
    {
      "src": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * reverting with custom message when dividing by zero.      *      * CAUTION: This function is deprecated because it requires allocating memory for the error      * message unnecessarily. For custom revert reasons use {tryMod}.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [6031,6666]",
      "dest": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * reverting with custom message when dividing by zero.      *      * CAUTION: This function is deprecated because it requires allocating memory for the error      * message unnecessarily. For custom revert reasons use {tryMod}.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [6031,6666]"
    },
    {
      "src": "(: ( [2209,2210]",
      "dest": "(: ( [2209,2210]"
    },
    {
      "src": "returns: returns [1468,1475]",
      "dest": "returns: returns [1468,1475]"
    },
    {
      "src": "(: ( [2933,2934]",
      "dest": "(: ( [2933,2934]"
    },
    {
      "src": "comment: /**      * @dev Returns the integer division of two unsigned integers, reverting on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator.      *      * Requirements:      *      * - The divisor cannot be zero.      */ [3688,3966]",
      "dest": "comment: /**      * @dev Returns the integer division of two unsigned integers, reverting on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator.      *      * Requirements:      *      * - The divisor cannot be zero.      */ [3688,3966]"
    },
    {
      "src": "): ) [3276,3277]",
      "dest": "): ) [3276,3277]"
    },
    {
      "src": "type_name [1060,1067]",
      "dest": "type_name [1060,1067]"
    },
    {
      "src": "(: ( [2240,2241]",
      "dest": "(: ( [2240,2241]"
    },
    {
      "src": "binary_expression [4055,4060]",
      "dest": "binary_expression [4055,4060]"
    },
    {
      "src": "returns: returns [3292,3299]",
      "dest": "returns: returns [3292,3299]"
    },
    {
      "src": ",: , [2245,2246]",
      "dest": ",: , [2245,2246]"
    },
    {
      "src": "(: ( [3255,3256]",
      "dest": "(: ( [3255,3256]"
    },
    {
      "src": "type_name [2473,2480]",
      "dest": "type_name [2473,2480]"
    },
    {
      "src": "parameter [3599,3608]",
      "dest": "parameter [3599,3608]"
    },
    {
      "src": "return_statement [1876,1893]",
      "dest": "return_statement [1876,1893]"
    },
    {
      "src": "identifier: a [2091,2092]",
      "dest": "identifier: a [2091,2092]"
    },
    {
      "src": "identifier: a [685,686]",
      "dest": "identifier: a [685,686]"
    },
    {
      "src": "uint256: uint256 [1438,1445]",
      "dest": "uint256: uint256 [1438,1445]"
    },
    {
      "src": "uint256: uint256 [2147,2154]",
      "dest": "uint256: uint256 [2147,2154]"
    },
    {
      "src": ">: > [5964,5965]",
      "dest": ">: > [5964,5965]"
    },
    {
      "src": "uint256: uint256 [784,791]",
      "dest": "uint256: uint256 [784,791]"
    },
    {
      "src": "true: true [1217,1221]",
      "dest": "true: true [1217,1221]"
    },
    {
      "src": "primitive_type [735,739]",
      "dest": "primitive_type [735,739]"
    },
    {
      "src": "type_name [6731,6737]",
      "dest": "type_name [6731,6737]"
    },
    {
      "src": "parameter [6693,6702]",
      "dest": "parameter [6693,6702]"
    },
    {
      "src": "number_literal: 0 [2570,2571]",
      "dest": "number_literal: 0 [2570,2571]"
    },
    {
      "src": "solidity_version: 0.8.0 [124,129]",
      "dest": "solidity_version: 0.8.0 [124,129]"
    },
    {
      "src": "uint256: uint256 [3599,3606]",
      "dest": "uint256: uint256 [3599,3606]"
    },
    {
      "src": "*: * [3672,3673]",
      "dest": "*: * [3672,3673]"
    },
    {
      "src": "internal: internal [4555,4563]",
      "dest": "internal: internal [4555,4563]"
    },
    {
      "src": "state_mutability [1104,1108]",
      "dest": "state_mutability [1104,1108]"
    },
    {
      "src": "primitive_type [4578,4585]",
      "dest": "primitive_type [4578,4585]"
    },
    {
      "src": "uint256: uint256 [5817,5824]",
      "dest": "uint256: uint256 [5817,5824]"
    },
    {
      "src": "if_statement [1829,1863]",
      "dest": "if_statement [1829,1863]"
    },
    {
      "src": "number_literal: 0 [2199,2200]",
      "dest": "number_literal: 0 [2199,2200]"
    },
    {
      "src": ",: , [6843,6844]",
      "dest": ",: , [6843,6844]"
    },
    {
      "src": "if: if [1756,1758]",
      "dest": "if: if [1756,1758]"
    },
    {
      "src": "primitive_type [1079,1086]",
      "dest": "primitive_type [1079,1086]"
    },
    {
      "src": "}: } [2269,2270]",
      "dest": "}: } [2269,2270]"
    },
    {
      "src": "true [2612,2616]",
      "dest": "true [2612,2616]"
    },
    {
      "src": "parameter [1079,1088]",
      "dest": "parameter [1079,1088]"
    },
    {
      "src": ",: , [2215,2216]",
      "dest": ",: , [2215,2216]"
    },
    {
      "src": "identifier: a [823,824]",
      "dest": "identifier: a [823,824]"
    },
    {
      "src": "/: / [6005,6006]",
      "dest": "/: / [6005,6006]"
    },
    {
      "src": "(: ( [2193,2194]",
      "dest": "(: ( [2193,2194]"
    },
    {
      "src": "parameter [3995,4004]",
      "dest": "parameter [3995,4004]"
    },
    {
      "src": ",: , [3265,3266]",
      "dest": ",: , [3265,3266]"
    },
    {
      "src": "return_type_definition [726,749]",
      "dest": "return_type_definition [726,749]"
    },
    {
      "src": "primitive_type [1477,1481]",
      "dest": "primitive_type [1477,1481]"
    },
    {
      "src": "): ) [3308,3309]",
      "dest": "): ) [3308,3309]"
    },
    {
      "src": "primitive_type [2473,2480]",
      "dest": "primitive_type [2473,2480]"
    },
    {
      "src": "identifier: a [2247,2248]",
      "dest": "identifier: a [2247,2248]"
    },
    {
      "src": "pure: pure [3630,3634]",
      "dest": "pure: pure [3630,3634]"
    },
    {
      "src": "type_name [1079,1086]",
      "dest": "type_name [1079,1086]"
    },
    {
      "src": "(: ( [2140,2141]",
      "dest": "(: ( [2140,2141]"
    },
    {
      "src": "*: * [1812,1813]",
      "dest": "*: * [1812,1813]"
    },
    {
      "src": "): ) [5886,5887]",
      "dest": "): ) [5886,5887]"
    },
    {
      "src": "if_statement [2561,2591]",
      "dest": "if_statement [2561,2591]"
    },
    {
      "src": "): ) [1176,1177]",
      "dest": "): ) [1176,1177]"
    },
    {
      "src": "primitive_type [5911,5918]",
      "dest": "primitive_type [5911,5918]"
    },
    {
      "src": "boolean_literal [2581,2586]",
      "dest": "boolean_literal [2581,2586]"
    },
    {
      "src": "returns: returns [6778,6785]",
      "dest": "returns: returns [6778,6785]"
    },
    {
      "src": "{: { [2156,2157]",
      "dest": "{: { [2156,2157]"
    },
    {
      "src": "(: ( [1216,1217]",
      "dest": "(: ( [1216,1217]"
    },
    {
      "src": "): ) [1843,1844]",
      "dest": "): ) [1843,1844]"
    },
    {
      "src": "block_statement [1143,1240]",
      "dest": "block_statement [1143,1240]"
    },
    {
      "src": "primitive_type [784,791]",
      "dest": "primitive_type [784,791]"
    },
    {
      "src": "block_statement [2166,2264]",
      "dest": "block_statement [2166,2264]"
    },
    {
      "src": "expression_statement [5954,5983]",
      "dest": "expression_statement [5954,5983]"
    },
    {
      "src": "pure: pure [2498,2502]",
      "dest": "pure: pure [2498,2502]"
    },
    {
      "src": "visibility [6764,6772]",
      "dest": "visibility [6764,6772]"
    },
    {
      "src": "(: ( [833,834]",
      "dest": "(: ( [833,834]"
    },
    {
      "src": "(: ( [5246,5247]",
      "dest": "(: ( [5246,5247]"
    },
    {
      "src": "return: return [2202,2208]",
      "dest": "return: return [2202,2208]"
    },
    {
      "src": "{: { [2527,2528]",
      "dest": "{: { [2527,2528]"
    },
    {
      "src": "visibility [5888,5896]",
      "dest": "visibility [5888,5896]"
    },
    {
      "src": "function_body [1492,1909]",
      "dest": "function_body [1492,1909]"
    },
    {
      "src": "parameter [741,748]",
      "dest": "parameter [741,748]"
    },
    {
      "src": "return: return [2953,2959]",
      "dest": "return: return [2953,2959]"
    },
    {
      "src": "type_name [2141,2145]",
      "dest": "type_name [2141,2145]"
    },
    {
      "src": "parameter [2083,2092]",
      "dest": "parameter [2083,2092]"
    },
    {
      "src": "): ) [4004,4005]",
      "dest": "): ) [4004,4005]"
    },
    {
      "src": "+: + [2962,2963]",
      "dest": "+: + [2962,2963]"
    },
    {
      "src": "false [2581,2586]",
      "dest": "false [2581,2586]"
    },
    {
      "src": "true [865,869]",
      "dest": "true [865,869]"
    },
    {
      "src": "function_body [3310,3339]",
      "dest": "function_body [3310,3339]"
    },
    {
      "src": "type_name [6787,6794]",
      "dest": "type_name [6787,6794]"
    },
    {
      "src": "type_name [4578,4585]",
      "dest": "type_name [4578,4585]"
    },
    {
      "src": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [2978,3238]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [2978,3238]"
    },
    {
      "src": ",: , [1191,1192]",
      "dest": ",: , [1191,1192]"
    },
    {
      "src": "primitive_type [6787,6794]",
      "dest": "primitive_type [6787,6794]"
    },
    {
      "src": "parameter [735,739]",
      "dest": "parameter [735,739]"
    },
    {
      "src": "type_name [1118,1122]",
      "dest": "type_name [1118,1122]"
    },
    {
      "src": "identifier: a [3264,3265]",
      "dest": "identifier: a [3264,3265]"
    },
    {
      "src": "solidity_version_comparison_operator [122,124]",
      "dest": "solidity_version_comparison_operator [122,124]"
    },
    {
      "src": "expression_statement [6830,6859]",
      "dest": "expression_statement [6830,6859]"
    },
    {
      "src": "identifier: mod [4529,4532]",
      "dest": "identifier: mod [4529,4532]"
    },
    {
      "src": "state_mutability [2127,2131]",
      "dest": "state_mutability [2127,2131]"
    },
    {
      "src": "identifier: a [3327,3328]",
      "dest": "identifier: a [3327,3328]"
    },
    {
      "src": ",: , [2586,2587]",
      "dest": ",: , [2586,2587]"
    },
    {
      "src": "block_statement [1502,1903]",
      "dest": "block_statement [1502,1903]"
    },
    {
      "src": "return_statement [1845,1863]",
      "dest": "return_statement [1845,1863]"
    },
    {
      "src": "tuple_expression [1775,1784]",
      "dest": "tuple_expression [1775,1784]"
    },
    {
      "src": "uint256: uint256 [4578,4585]",
      "dest": "uint256: uint256 [4578,4585]"
    },
    {
      "src": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */ [3345,3581]",
      "dest": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */ [3345,3581]"
    },
    {
      "src": "pure: pure [6773,6777]",
      "dest": "pure: pure [6773,6777]"
    },
    {
      "src": "identifier: b [4003,4004]",
      "dest": "identifier: b [4003,4004]"
    }
  ],
  "actions": []
}