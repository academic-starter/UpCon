{
  "matches": [
    {
      "src": "expression_statement [3855,3931]",
      "dest": "expression_statement [3855,3931]"
    },
    {
      "src": "visibility [1039,1047]",
      "dest": "visibility [1039,1047]"
    },
    {
      "src": "identifier: nonces [3832,3838]",
      "dest": "identifier: nonces [3832,3838]"
    },
    {
      "src": "member_expression [1551,1569]",
      "dest": "member_expression [1551,1569]"
    },
    {
      "src": "call_argument [1580,1584]",
      "dest": "call_argument [1580,1584]"
    },
    {
      "src": "call_argument [1078,1083]",
      "dest": "call_argument [1078,1083]"
    },
    {
      "src": "string_literal [4921,4965]",
      "dest": "string_literal [4921,4965]"
    },
    {
      "src": ".: . [1113,1114]",
      "dest": ".: . [1113,1114]"
    },
    {
      "src": "identifier: spender [2936,2943]",
      "dest": "identifier: spender [2936,2943]"
    },
    {
      "src": "identifier: IERC20Upgradeable [987,1004]",
      "dest": "identifier: IERC20Upgradeable [987,1004]"
    },
    {
      "src": "bytes: bytes [4750,4755]",
      "dest": "bytes: bytes [4750,4755]"
    },
    {
      "src": ".: . [1122,1123]",
      "dest": ".: . [1122,1123]"
    },
    {
      "src": "parameter [1416,1439]",
      "dest": "parameter [1416,1439]"
    },
    {
      "src": "identifier: oldAllowance [2003,2015]",
      "dest": "identifier: oldAllowance [2003,2015]"
    },
    {
      "src": "}: } [6062,6063]",
      "dest": "}: } [6062,6063]"
    },
    {
      "src": "identifier: from [1580,1584]",
      "dest": "identifier: from [1580,1584]"
    },
    {
      "src": "primitive_type [5532,5537]",
      "dest": "primitive_type [5532,5537]"
    },
    {
      "src": "type_name [2945,2952]",
      "dest": "type_name [2945,2952]"
    },
    {
      "src": "parenthesized_expression [6014,6020]",
      "dest": "parenthesized_expression [6014,6020]"
    },
    {
      "src": "string [4921,4965]",
      "dest": "string [4921,4965]"
    },
    {
      "src": "): ) [1595,1596]",
      "dest": "): ) [1595,1596]"
    },
    {
      "src": "variable_declaration [2979,3004]",
      "dest": "variable_declaration [2979,3004]"
    },
    {
      "src": "identifier: this [1949,1953]",
      "dest": "identifier: this [1949,1953]"
    },
    {
      "src": "function: function [965,973]",
      "dest": "function: function [965,973]"
    },
    {
      "src": "primitive_type [1012,1019]",
      "dest": "primitive_type [1012,1019]"
    },
    {
      "src": "primitive_type [1455,1462]",
      "dest": "primitive_type [1455,1462]"
    },
    {
      "src": "parameter [1024,1037]",
      "dest": "parameter [1024,1037]"
    },
    {
      "src": "identifier: transfer [1114,1122]",
      "dest": "identifier: transfer [1114,1122]"
    },
    {
      "src": "memory: memory [2985,2991]",
      "dest": "memory: memory [2985,2991]"
    },
    {
      "src": "using: using [738,743]",
      "dest": "using: using [738,743]"
    },
    {
      "src": "call_expression [3145,3231]",
      "dest": "call_expression [3145,3231]"
    },
    {
      "src": "): ) [1596,1597]",
      "dest": "): ) [1596,1597]"
    },
    {
      "src": "): ) [4918,4919]",
      "dest": "): ) [4918,4919]"
    },
    {
      "src": "): ) [3068,3069]",
      "dest": "): ) [3068,3069]"
    },
    {
      "src": "+: + [2016,2017]",
      "dest": "+: + [2016,2017]"
    },
    {
      "src": ",: , [2536,2537]",
      "dest": ",: , [2536,2537]"
    },
    {
      "src": "type_cast_expression [5911,5925]",
      "dest": "type_cast_expression [5911,5925]"
    },
    {
      "src": "=: = [5909,5910]",
      "dest": "=: = [5909,5910]"
    },
    {
      "src": "}: } [2030,2031]",
      "dest": "}: } [2030,2031]"
    },
    {
      "src": "primitive_type [3593,3600]",
      "dest": "primitive_type [3593,3600]"
    },
    {
      "src": "identifier: data [4387,4391]",
      "dest": "identifier: data [4387,4391]"
    },
    {
      "src": "identifier: token [1108,1113]",
      "dest": "identifier: token [1108,1113]"
    },
    {
      "src": "identifier: spender [2407,2414]",
      "dest": "identifier: spender [2407,2414]"
    },
    {
      "src": "primitive_type [3545,3552]",
      "dest": "primitive_type [3545,3552]"
    },
    {
      "src": "identifier: token [3741,3746]",
      "dest": "identifier: token [3741,3746]"
    },
    {
      "src": "parenthesized_expression [5964,6022]",
      "dest": "parenthesized_expression [5964,6022]"
    },
    {
      "src": "member_expression [1528,1550]",
      "dest": "member_expression [1528,1550]"
    },
    {
      "src": "type_name [3619,3624]",
      "dest": "type_name [3619,3624]"
    },
    {
      "src": "identifier: oldAllowance [2361,2373]",
      "dest": "identifier: oldAllowance [2361,2373]"
    },
    {
      "src": "identifier: token [3165,3170]",
      "dest": "identifier: token [3165,3170]"
    },
    {
      "src": "identifier: value [3770,3775]",
      "dest": "identifier: value [3770,3775]"
    },
    {
      "src": "identifier: allowance [1931,1940]",
      "dest": "identifier: allowance [1931,1940]"
    },
    {
      "src": "string_literal [3894,3929]",
      "dest": "string_literal [3894,3929]"
    },
    {
      "src": "primitive_type [3690,3697]",
      "dest": "primitive_type [3690,3697]"
    },
    {
      "src": "identifier: s [3663,3664]",
      "dest": "identifier: s [3663,3664]"
    },
    {
      "src": "member_expression [5965,5982]",
      "dest": "member_expression [5965,5982]"
    },
    {
      "src": "identifier: spender [3054,3061]",
      "dest": "identifier: spender [3054,3061]"
    },
    {
      "src": "comment: // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that [4528,4635]",
      "dest": "comment: // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that [4528,4635]"
    },
    {
      "src": "expression_statement [1974,2025]",
      "dest": "expression_statement [1974,2025]"
    },
    {
      "src": "identifier: token [1987,1992]",
      "dest": "identifier: token [1987,1992]"
    },
    {
      "src": "parenthesized_expression [4912,4918]",
      "dest": "parenthesized_expression [4912,4918]"
    },
    {
      "src": "identifier: selector [3209,3217]",
      "dest": "identifier: selector [3209,3217]"
    },
    {
      "src": ",: , [2405,2406]",
      "dest": ",: , [2405,2406]"
    },
    {
      "src": "primitive_type [2979,2984]",
      "dest": "primitive_type [2979,2984]"
    },
    {
      "src": "parameter [4349,4372]",
      "dest": "parameter [4349,4372]"
    },
    {
      "src": "memory: memory [4756,4762]",
      "dest": "memory: memory [4756,4762]"
    },
    {
      "src": "call_expression [1925,1964]",
      "dest": "call_expression [1925,1964]"
    },
    {
      "src": "call_argument [6002,6012]",
      "dest": "call_argument [6002,6012]"
    },
    {
      "src": "}: } [6064,6065]",
      "dest": "}: } [6064,6065]"
    },
    {
      "src": "identifier: safePermit [3463,3473]",
      "dest": "identifier: safePermit [3463,3473]"
    },
    {
      "src": "identifier: selector [1123,1131]",
      "dest": "identifier: selector [1123,1131]"
    },
    {
      "src": "identifier: _callOptionalReturn [1501,1520]",
      "dest": "identifier: _callOptionalReturn [1501,1520]"
    },
    {
      "src": "number_literal: 0 [3228,3229]",
      "dest": "number_literal: 0 [3228,3229]"
    },
    {
      "src": "string [4810,4844]",
      "dest": "string [4810,4844]"
    },
    {
      "src": "member_expression [4863,4880]",
      "dest": "member_expression [4863,4880]"
    },
    {
      "src": ".: . [4873,4874]",
      "dest": ".: . [4873,4874]"
    },
    {
      "src": "member_expression [1108,1122]",
      "dest": "member_expression [1108,1122]"
    },
    {
      "src": ",: , [1131,1132]",
      "dest": ",: , [1131,1132]"
    },
    {
      "src": "): ) [2414,2415]",
      "dest": "): ) [2414,2415]"
    },
    {
      "src": "=: = [4774,4775]",
      "dest": "=: = [4774,4775]"
    },
    {
      "src": "(: ( [3164,3165]",
      "dest": "(: ( [3164,3165]"
    },
    {
      "src": "identifier: v [3625,3626]",
      "dest": "identifier: v [3625,3626]"
    },
    {
      "src": "binary_expression [2547,2567]",
      "dest": "binary_expression [2547,2567]"
    },
    {
      "src": "(: ( [3724,3725]",
      "dest": "(: ( [3724,3725]"
    },
    {
      "src": "function_body [1892,2031]",
      "dest": "function_body [1892,2031]"
    },
    {
      "src": "identifier: token [3507,3512]",
      "dest": "identifier: token [3507,3512]"
    },
    {
      "src": "): ) [3730,3731]",
      "dest": "): ) [3730,3731]"
    },
    {
      "src": "identifier: abi [1085,1088]",
      "dest": "identifier: abi [1085,1088]"
    },
    {
      "src": "call_expression [1058,1144]",
      "dest": "call_expression [1058,1144]"
    },
    {
      "src": "call_argument [1137,1142]",
      "dest": "call_argument [1137,1142]"
    },
    {
      "src": "comment: /**  * @title SafeERC20  * @dev Wrappers around ERC20 operations that throw on failure (when the token  * contract returns false). Tokens that return no value (and instead revert or  * throw on failure) are also supported, non-reverting calls are assumed to be  * successful.  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  */ [245,702]",
      "dest": "comment: /**  * @title SafeERC20  * @dev Wrappers around ERC20 operations that throw on failure (when the token  * contract returns false). Tokens that return no value (and instead revert or  * throw on failure) are also supported, non-reverting calls are assumed to be  * successful.  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.  */ [245,702]"
    },
    {
      "src": "block_statement [3131,3296]",
      "dest": "block_statement [3131,3296]"
    },
    {
      "src": "type_name [767,774]",
      "dest": "type_name [767,774]"
    },
    {
      "src": "identifier: to [1020,1022]",
      "dest": "identifier: to [1020,1022]"
    },
    {
      "src": ",: , [1992,1993]",
      "dest": ",: , [1992,1993]"
    },
    {
      "src": "identifier: token [3826,3831]",
      "dest": "identifier: token [3826,3831]"
    },
    {
      "src": "uint256: uint256 [2295,2302]",
      "dest": "uint256: uint256 [2295,2302]"
    },
    {
      "src": "user_defined_type [5507,5524]",
      "dest": "user_defined_type [5507,5524]"
    },
    {
      "src": "primitive_type [1902,1909]",
      "dest": "primitive_type [1902,1909]"
    },
    {
      "src": ",: , [3892,3893]",
      "dest": ",: , [3892,3893]"
    },
    {
      "src": "unary_expression [3084,3129]",
      "dest": "unary_expression [3084,3129]"
    },
    {
      "src": "call_argument [3219,3226]",
      "dest": "call_argument [3219,3226]"
    },
    {
      "src": "(: ( [2530,2531]",
      "dest": "(: ( [2530,2531]"
    },
    {
      "src": "identifier: _callOptionalReturnBool [5483,5506]",
      "dest": "identifier: _callOptionalReturnBool [5483,5506]"
    },
    {
      "src": "identifier: oldAllowance [2547,2559]",
      "dest": "identifier: oldAllowance [2547,2559]"
    },
    {
      "src": "identifier: approvalCall [3272,3284]",
      "dest": "identifier: approvalCall [3272,3284]"
    },
    {
      "src": "call_argument [3030,3052]",
      "dest": "call_argument [3030,3052]"
    },
    {
      "src": "identifier: IERC20Upgradeable [4349,4366]",
      "dest": "identifier: IERC20Upgradeable [4349,4366]"
    },
    {
      "src": "primitive_type [5911,5918]",
      "dest": "primitive_type [5911,5918]"
    },
    {
      "src": "(: ( [1077,1078]",
      "dest": "(: ( [1077,1078]"
    },
    {
      "src": "call_argument [3195,3217]",
      "dest": "call_argument [3195,3217]"
    },
    {
      "src": "primitive_type [4776,4783]",
      "dest": "primitive_type [4776,4783]"
    },
    {
      "src": "identifier: _callOptionalReturn [3245,3264]",
      "dest": "identifier: _callOptionalReturn [3245,3264]"
    },
    {
      "src": "\": \" [4843,4844]",
      "dest": "\": \" [4843,4844]"
    },
    {
      "src": ",: , [4919,4920]",
      "dest": ",: , [4919,4920]"
    },
    {
      "src": ",: , [3061,3062]",
      "dest": ",: , [3061,3062]"
    },
    {
      "src": "internal: internal [2960,2968]",
      "dest": "internal: internal [2960,2968]"
    },
    {
      "src": "identifier: length [6046,6052]",
      "dest": "identifier: length [6046,6052]"
    },
    {
      "src": "address: address [1851,1858]",
      "dest": "address: address [1851,1858]"
    },
    {
      "src": "call_expression [1528,1596]",
      "dest": "call_expression [1528,1596]"
    },
    {
      "src": "identifier: token [3712,3717]",
      "dest": "identifier: token [3712,3717]"
    },
    {
      "src": "comment: // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since [4411,4519]",
      "dest": "comment: // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since [4411,4519]"
    },
    {
      "src": "string [148,171]",
      "dest": "string [148,171]"
    },
    {
      "src": "import: import [141,147]",
      "dest": "import: import [141,147]"
    },
    {
      "src": "identifier: oldAllowance [2437,2449]",
      "dest": "identifier: oldAllowance [2437,2449]"
    },
    {
      "src": "=: = [1923,1924]",
      "dest": "=: = [1923,1924]"
    },
    {
      "src": "call_argument [3725,3730]",
      "dest": "call_argument [3725,3730]"
    },
    {
      "src": "): ) [2023,2024]",
      "dest": "): ) [2023,2024]"
    },
    {
      "src": "number_literal: 0 [5986,5987]",
      "dest": "number_literal: 0 [5986,5987]"
    },
    {
      "src": "call_argument [3863,3892]",
      "dest": "call_argument [3863,3892]"
    },
    {
      "src": "type_name [2928,2935]",
      "dest": "type_name [2928,2935]"
    },
    {
      "src": "}: } [2584,2585]",
      "dest": "}: } [2584,2585]"
    },
    {
      "src": "address: address [2392,2399]",
      "dest": "address: address [2392,2399]"
    },
    {
      "src": "{: { [5574,5575]",
      "dest": "{: { [5574,5575]"
    },
    {
      "src": "type_cast_expression [2392,2405]",
      "dest": "type_cast_expression [2392,2405]"
    },
    {
      "src": "string [3894,3929]",
      "dest": "string [3894,3929]"
    },
    {
      "src": "identifier: _callOptionalReturn [4329,4348]",
      "dest": "identifier: _callOptionalReturn [4329,4348]"
    },
    {
      "src": "comment: /**      * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.      * Revert on invalid signature.      */ [3308,3449]",
      "dest": "comment: /**      * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.      * Revert on invalid signature.      */ [3308,3449]"
    },
    {
      "src": ",: , [1010,1011]",
      "dest": ",: , [1010,1011]"
    },
    {
      "src": "(: ( [2391,2392]",
      "dest": "(: ( [2391,2392]"
    },
    {
      "src": "identifier: abi [1528,1531]",
      "dest": "identifier: abi [1528,1531]"
    },
    {
      "src": "): ) [3129,3130]",
      "dest": "): ) [3129,3130]"
    },
    {
      "src": ",: , [1866,1867]",
      "dest": ",: , [1866,1867]"
    },
    {
      "src": "&&: && [6023,6025]",
      "dest": "&&: && [6023,6025]"
    },
    {
      "src": "=: = [2374,2375]",
      "dest": "=: = [2374,2375]"
    },
    {
      "src": "identifier: nonceAfter [3863,3873]",
      "dest": "identifier: nonceAfter [3863,3873]"
    },
    {
      "src": "identifier: spender [3219,3226]",
      "dest": "identifier: spender [3219,3226]"
    },
    {
      "src": "identifier: value [1475,1480]",
      "dest": "identifier: value [1475,1480]"
    },
    {
      "src": "internal: internal [2310,2318]",
      "dest": "internal: internal [2310,2318]"
    },
    {
      "src": "function_body [3680,3937]",
      "dest": "function_body [3680,3937]"
    },
    {
      "src": "call_expression [4889,4919]",
      "dest": "call_expression [4889,4919]"
    },
    {
      "src": "solidity: solidity [122,130]",
      "dest": "solidity: solidity [122,130]"
    },
    {
      "src": "string [180,209]",
      "dest": "string [180,209]"
    },
    {
      "src": "address: address [767,774]",
      "dest": "address: address [767,774]"
    },
    {
      "src": "member_expression [1085,1107]",
      "dest": "member_expression [1085,1107]"
    },
    {
      "src": "identifier: forceApprove [2890,2902]",
      "dest": "identifier: forceApprove [2890,2902]"
    },
    {
      "src": "identifier: forceApprove [2518,2530]",
      "dest": "identifier: forceApprove [2518,2530]"
    },
    {
      "src": "identifier: abi [5991,5994]",
      "dest": "identifier: abi [5991,5994]"
    },
    {
      "src": "identifier: spender [1994,2001]",
      "dest": "identifier: spender [1994,2001]"
    },
    {
      "src": "): ) [2308,2309]",
      "dest": "): ) [2308,2309]"
    },
    {
      "src": "||: || [4886,4888]",
      "dest": "||: || [4886,4888]"
    },
    {
      "src": "uint256: uint256 [1868,1875]",
      "dest": "uint256: uint256 [1868,1875]"
    },
    {
      "src": "(: ( [3194,3195]",
      "dest": "(: ( [3194,3195]"
    },
    {
      "src": "uint256: uint256 [2353,2360]",
      "dest": "uint256: uint256 [2353,2360]"
    },
    {
      "src": "parameter [5532,5549]",
      "dest": "parameter [5532,5549]"
    },
    {
      "src": "identifier: value [1876,1881]",
      "dest": "identifier: value [1876,1881]"
    },
    {
      "src": "): ) [4789,4790]",
      "dest": "): ) [4789,4790]"
    },
    {
      "src": "identifier: forceApprove [1974,1986]",
      "dest": "identifier: forceApprove [1974,1986]"
    },
    {
      "src": "(: ( [4912,4913]",
      "dest": "(: ( [4912,4913]"
    },
    {
      "src": "type_name [1851,1858]",
      "dest": "type_name [1851,1858]"
    },
    {
      "src": "binary_expression [4863,4919]",
      "dest": "binary_expression [4863,4919]"
    },
    {
      "src": "if_statement [3080,3296]",
      "dest": "if_statement [3080,3296]"
    },
    {
      "src": "}: } [3301,3302]",
      "dest": "}: } [3301,3302]"
    },
    {
      "src": "{: { [1892,1893]",
      "dest": "{: { [1892,1893]"
    },
    {
      "src": "variable_declaration_statement [4750,4846]",
      "dest": "variable_declaration_statement [4750,4846]"
    },
    {
      "src": ",: , [3645,3646]",
      "dest": ",: , [3645,3646]"
    },
    {
      "src": "parameter [2945,2958]",
      "dest": "parameter [2945,2958]"
    },
    {
      "src": "(: ( [4348,4349]",
      "dest": "(: ( [4348,4349]"
    },
    {
      "src": "memory: memory [5538,5544]",
      "dest": "memory: memory [5538,5544]"
    },
    {
      "src": "(: ( [6014,6015]",
      "dest": "(: ( [6014,6015]"
    },
    {
      "src": "(: ( [1825,1826]",
      "dest": "(: ( [1825,1826]"
    },
    {
      "src": "identifier: decode [5995,6001]",
      "dest": "identifier: decode [5995,6001]"
    },
    {
      "src": "call_argument [1994,2001]",
      "dest": "call_argument [1994,2001]"
    },
    {
      "src": "string_literal [2460,2503]",
      "dest": "string_literal [2460,2503]"
    },
    {
      "src": "expression_statement [2429,2505]",
      "dest": "expression_statement [2429,2505]"
    },
    {
      "src": ".: . [4892,4893]",
      "dest": ".: . [4892,4893]"
    },
    {
      "src": "call_argument [1551,1578]",
      "dest": "call_argument [1551,1578]"
    },
    {
      "src": "(: ( [1986,1987]",
      "dest": "(: ( [1986,1987]"
    },
    {
      "src": "(: ( [3862,3863]",
      "dest": "(: ( [3862,3863]"
    },
    {
      "src": "bytes: bytes [5884,5889]",
      "dest": "bytes: bytes [5884,5889]"
    },
    {
      "src": "\": \" [4964,4965]",
      "dest": "\": \" [4964,4965]"
    },
    {
      "src": ".: . [5925,5926]",
      "dest": ".: . [5925,5926]"
    },
    {
      "src": "function_body [2319,2585]",
      "dest": "function_body [2319,2585]"
    },
    {
      "src": "{: { [2339,2340]",
      "dest": "{: { [2339,2340]"
    },
    {
      "src": "): ) [1143,1144]",
      "dest": "): ) [1143,1144]"
    },
    {
      "src": "member_expression [1925,1940]",
      "dest": "member_expression [1925,1940]"
    },
    {
      "src": "type_name [5870,5874]",
      "dest": "type_name [5870,5874]"
    },
    {
      "src": "call_argument [1941,1954]",
      "dest": "call_argument [1941,1954]"
    },
    {
      "src": "identifier: selector [3044,3052]",
      "dest": "identifier: selector [3044,3052]"
    },
    {
      "src": "binary_expression [5953,6056]",
      "dest": "binary_expression [5953,6056]"
    },
    {
      "src": "): ) [3794,3795]",
      "dest": "): ) [3794,3795]"
    },
    {
      "src": "primitive_type [4374,4379]",
      "dest": "primitive_type [4374,4379]"
    },
    {
      "src": "import: import [173,179]",
      "dest": "import: import [173,179]"
    },
    {
      "src": "call_expression [1974,2024]",
      "dest": "call_expression [1974,2024]"
    },
    {
      "src": "identifier: owner [3754,3759]",
      "dest": "identifier: owner [3754,3759]"
    },
    {
      "src": "number_literal: 0 [6055,6056]",
      "dest": "number_literal: 0 [6055,6056]"
    },
    {
      "src": "identifier: token [6034,6039]",
      "dest": "identifier: token [6034,6039]"
    },
    {
      "src": "identifier: approve [3201,3208]",
      "dest": "identifier: approve [3201,3208]"
    },
    {
      "src": ",: , [3560,3561]",
      "dest": ",: , [3560,3561]"
    },
    {
      "src": ",: , [1954,1955]",
      "dest": ",: , [1954,1955]"
    },
    {
      "src": "member_expression [2376,2391]",
      "dest": "member_expression [2376,2391]"
    },
    {
      "src": "identifier: token [5525,5530]",
      "dest": "identifier: token [5525,5530]"
    },
    {
      "src": ",: , [2276,2277]",
      "dest": ",: , [2276,2277]"
    },
    {
      "src": "type_name [2979,2984]",
      "dest": "type_name [2979,2984]"
    },
    {
      "src": "identifier: r [3790,3791]",
      "dest": "identifier: r [3790,3791]"
    },
    {
      "src": "visibility [1883,1891]",
      "dest": "visibility [1883,1891]"
    },
    {
      "src": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param token The token targeted by the call.      * @param data The call data (encoded using abi.encode or one of its variants).      *      * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.      */ [4979,5469]",
      "dest": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param token The token targeted by the call.      * @param data The call data (encoded using abi.encode or one of its variants).      *      * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.      */ [4979,5469]"
    },
    {
      "src": "identifier: IERC20Upgradeable [1416,1433]",
      "dest": "identifier: IERC20Upgradeable [1416,1433]"
    },
    {
      "src": "primitive_type [4913,4917]",
      "dest": "primitive_type [4913,4917]"
    },
    {
      "src": "call_argument [4912,4918]",
      "dest": "call_argument [4912,4918]"
    },
    {
      "src": "identifier: value [1137,1142]",
      "dest": "identifier: value [1137,1142]"
    },
    {
      "src": "function: function [4320,4328]",
      "dest": "function: function [4320,4328]"
    },
    {
      "src": "function_definition [1390,1604]",
      "dest": "function_definition [1390,1604]"
    },
    {
      "src": "identifier: IERC20Upgradeable [1826,1843]",
      "dest": "identifier: IERC20Upgradeable [1826,1843]"
    },
    {
      "src": "parameter [1868,1881]",
      "dest": "parameter [1868,1881]"
    },
    {
      "src": ",: , [3759,3760]",
      "dest": ",: , [3759,3760]"
    },
    {
      "src": ",: , [3609,3610]",
      "dest": ",: , [3609,3610]"
    },
    {
      "src": "call_argument [3894,3929]",
      "dest": "call_argument [3894,3929]"
    },
    {
      "src": "binary_expression [5953,6022]",
      "dest": "binary_expression [5953,6022]"
    },
    {
      "src": "identifier: spender [3761,3768]",
      "dest": "identifier: spender [3761,3768]"
    },
    {
      "src": "type_name [2903,2920]",
      "dest": "type_name [2903,2920]"
    },
    {
      "src": "identifier: token [3265,3270]",
      "dest": "identifier: token [3265,3270]"
    },
    {
      "src": "): ) [5924,5925]",
      "dest": "): ) [5924,5925]"
    },
    {
      "src": "call_argument [3063,3068]",
      "dest": "call_argument [3063,3068]"
    },
    {
      "src": "address: address [6026,6033]",
      "dest": "address: address [6026,6033]"
    },
    {
      "src": "primitive_type [2928,2935]",
      "dest": "primitive_type [2928,2935]"
    },
    {
      "src": "call_argument [1956,1963]",
      "dest": "call_argument [1956,1963]"
    },
    {
      "src": "visibility [1482,1490]",
      "dest": "visibility [1482,1490]"
    },
    {
      "src": "visibility [5551,5558]",
      "dest": "visibility [5551,5558]"
    },
    {
      "src": "bytes: bytes [5532,5537]",
      "dest": "bytes: bytes [5532,5537]"
    },
    {
      "src": "identifier: abi [3007,3010]",
      "dest": "identifier: abi [3007,3010]"
    },
    {
      "src": ".: . [3035,3036]",
      "dest": ".: . [3035,3036]"
    },
    {
      "src": "&&: && [5961,5963]",
      "dest": "&&: && [5961,5963]"
    },
    {
      "src": ">=: >= [2450,2452]",
      "dest": ">=: >= [2450,2452]"
    },
    {
      "src": "variable_declaration [3690,3709]",
      "dest": "variable_declaration [3690,3709]"
    },
    {
      "src": "identifier: _callOptionalReturn [1058,1077]",
      "dest": "identifier: _callOptionalReturn [1058,1077]"
    },
    {
      "src": ".: . [1088,1089]",
      "dest": ".: . [1088,1089]"
    },
    {
      "src": "function: function [2881,2889]",
      "dest": "function: function [2881,2889]"
    },
    {
      "src": "expression_statement [3245,3286]",
      "dest": "expression_statement [3245,3286]"
    },
    {
      "src": "identifier: spender [3553,3560]",
      "dest": "identifier: spender [3553,3560]"
    },
    {
      "src": "identifier: nonces [3718,3724]",
      "dest": "identifier: nonces [3718,3724]"
    },
    {
      "src": "address: address [3522,3529]",
      "dest": "address: address [3522,3529]"
    },
    {
      "src": "identifier: data [4804,4808]",
      "dest": "identifier: data [4804,4808]"
    },
    {
      "src": "call_argument [3165,3170]",
      "dest": "call_argument [3165,3170]"
    },
    {
      "src": ",: , [4910,4911]",
      "dest": ",: , [4910,4911]"
    },
    {
      "src": "type_name [5507,5524]",
      "dest": "type_name [5507,5524]"
    },
    {
      "src": "parameter [2903,2926]",
      "dest": "parameter [2903,2926]"
    },
    {
      "src": "(: ( [5567,5568]",
      "dest": "(: ( [5567,5568]"
    },
    {
      "src": "call_expression [2429,2504]",
      "dest": "call_expression [2429,2504]"
    },
    {
      "src": "parameter [1826,1849]",
      "dest": "parameter [1826,1849]"
    },
    {
      "src": "call_argument [2538,2545]",
      "dest": "call_argument [2538,2545]"
    },
    {
      "src": "expression_statement [3741,3796]",
      "dest": "expression_statement [3741,3796]"
    },
    {
      "src": "function_definition [2222,2585]",
      "dest": "function_definition [2222,2585]"
    },
    {
      "src": ",: , [5882,5883]",
      "dest": ",: , [5882,5883]"
    },
    {
      "src": "call_expression [3855,3930]",
      "dest": "call_expression [3855,3930]"
    },
    {
      "src": "}: } [4972,4973]",
      "dest": "}: } [4972,4973]"
    },
    {
      "src": "comment: /**      * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,      * non-reverting calls are assumed to be successful.      */ [1610,1790]",
      "dest": "comment: /**      * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,      * non-reverting calls are assumed to be successful.      */ [1610,1790]"
    },
    {
      "src": "bytes: bytes [2979,2984]",
      "dest": "bytes: bytes [2979,2984]"
    },
    {
      "src": "): ) [5549,5550]",
      "dest": "): ) [5549,5550]"
    },
    {
      "src": "(: ( [3264,3265]",
      "dest": "(: ( [3264,3265]"
    },
    {
      "src": "{: { [3680,3681]",
      "dest": "{: { [3680,3681]"
    },
    {
      "src": "identifier: IERC20Upgradeable [2253,2270]",
      "dest": "identifier: IERC20Upgradeable [2253,2270]"
    },
    {
      "src": "identifier: safeIncreaseAllowance [1804,1825]",
      "dest": "identifier: safeIncreaseAllowance [1804,1825]"
    },
    {
      "src": "variable_declaration [5870,5882]",
      "dest": "variable_declaration [5870,5882]"
    },
    {
      "src": "): ) [3128,3129]",
      "dest": "): ) [3128,3129]"
    },
    {
      "src": "comment: /**      * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,      * non-reverting calls are assumed to be successful.      */ [2037,2217]",
      "dest": "comment: /**      * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,      * non-reverting calls are assumed to be successful.      */ [2037,2217]"
    },
    {
      "src": "call_expression [4776,4845]",
      "dest": "call_expression [4776,4845]"
    },
    {
      "src": "internal: internal [1482,1490]",
      "dest": "internal: internal [1482,1490]"
    },
    {
      "src": "): ) [1881,1882]",
      "dest": "): ) [1881,1882]"
    },
    {
      "src": "identifier: token [2921,2926]",
      "dest": "identifier: token [2921,2926]"
    },
    {
      "src": "call_argument [2392,2405]",
      "dest": "call_argument [2392,2405]"
    },
    {
      "src": "expression_statement [2518,2569]",
      "dest": "expression_statement [2518,2569]"
    },
    {
      "src": "identifier: approve [3036,3043]",
      "dest": "identifier: approve [3036,3043]"
    },
    {
      "src": "solidity_pragma_token [122,138]",
      "dest": "solidity_pragma_token [122,138]"
    },
    {
      "src": "identifier: returndata [4763,4773]",
      "dest": "identifier: returndata [4763,4773]"
    },
    {
      "src": "): ) [3669,3670]",
      "dest": "): ) [3669,3670]"
    },
    {
      "src": ",: , [3270,3271]",
      "dest": ",: , [3270,3271]"
    },
    {
      "src": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param token The token targeted by the call.      * @param data The call data (encoded using abi.encode or one of its variants).      */ [3943,4315]",
      "dest": "comment: /**      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement      * on the return value: the return value is optional (but if data is returned, it must not be false).      * @param token The token targeted by the call.      * @param data The call data (encoded using abi.encode or one of its variants).      */ [3943,4315]"
    },
    {
      "src": "parameter [5507,5530]",
      "dest": "parameter [5507,5530]"
    },
    {
      "src": "member_expression [4889,4899]",
      "dest": "member_expression [4889,4899]"
    },
    {
      "src": "identifier: token [3109,3114]",
      "dest": "identifier: token [3109,3114]"
    },
    {
      "src": "primitive_type [767,774]",
      "dest": "primitive_type [767,774]"
    },
    {
      "src": ".: . [1930,1931]",
      "dest": ".: . [1930,1931]"
    },
    {
      "src": "function: function [1795,1803]",
      "dest": "function: function [1795,1803]"
    },
    {
      "src": "expression_statement [1501,1598]",
      "dest": "expression_statement [1501,1598]"
    },
    {
      "src": "parameter [1441,1453]",
      "dest": "parameter [1441,1453]"
    },
    {
      "src": "call_argument [6034,6039]",
      "dest": "call_argument [6034,6039]"
    },
    {
      "src": "identifier: spender [1956,1963]",
      "dest": "identifier: spender [1956,1963]"
    },
    {
      "src": "library_declaration [703,6065]",
      "dest": "library_declaration [703,6065]"
    },
    {
      "src": "\": \" [218,219]",
      "dest": "\": \" [218,219]"
    },
    {
      "src": "identifier: IERC20PermitUpgradeable [3483,3506]",
      "dest": "identifier: IERC20PermitUpgradeable [3483,3506]"
    },
    {
      "src": "}: } [1150,1151]",
      "dest": "}: } [1150,1151]"
    },
    {
      "src": "binary_expression [4863,4885]",
      "dest": "binary_expression [4863,4885]"
    },
    {
      "src": "parameter [3593,3609]",
      "dest": "parameter [3593,3609]"
    },
    {
      "src": "\": \" [4810,4811]",
      "dest": "\": \" [4810,4811]"
    },
    {
      "src": "member_expression [3007,3029]",
      "dest": "member_expression [3007,3029]"
    },
    {
      "src": "comment: /**      * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the      * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.      */ [1157,1385]",
      "dest": "comment: /**      * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the      * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.      */ [1157,1385]"
    },
    {
      "src": ",: , [3170,3171]",
      "dest": ",: , [3170,3171]"
    },
    {
      "src": "comment: // the target address contains contract code and also asserts for success in the low-level call. [4644,4740]",
      "dest": "comment: // the target address contains contract code and also asserts for success in the low-level call. [4644,4740]"
    },
    {
      "src": ".: . [3746,3747]",
      "dest": ".: . [3746,3747]"
    },
    {
      "src": "type_name [1416,1433]",
      "dest": "type_name [1416,1433]"
    },
    {
      "src": "primitive_type [2295,2302]",
      "dest": "primitive_type [2295,2302]"
    },
    {
      "src": "parameter [3619,3626]",
      "dest": "parameter [3619,3626]"
    },
    {
      "src": ",: , [1083,1084]",
      "dest": ",: , [1083,1084]"
    },
    {
      "src": "call_argument [3172,3230]",
      "dest": "call_argument [3172,3230]"
    },
    {
      "src": "identifier: encodeWithSelector [1089,1107]",
      "dest": "identifier: encodeWithSelector [1089,1107]"
    },
    {
      "src": ",: , [1578,1579]",
      "dest": ",: , [1578,1579]"
    },
    {
      "src": "): ) [6020,6021]",
      "dest": "): ) [6020,6021]"
    },
    {
      "src": "expression_statement [4855,4967]",
      "dest": "expression_statement [4855,4967]"
    },
    {
      "src": "function: function [5474,5482]",
      "dest": "function: function [5474,5482]"
    },
    {
      "src": "member_expression [3712,3724]",
      "dest": "member_expression [3712,3724]"
    },
    {
      "src": "type_name [3483,3506]",
      "dest": "type_name [3483,3506]"
    },
    {
      "src": "member_expression [5953,6052]",
      "dest": "member_expression [5953,6052]"
    },
    {
      "src": "type_name [3655,3662]",
      "dest": "type_name [3655,3662]"
    },
    {
      "src": "primitive_type [6026,6033]",
      "dest": "primitive_type [6026,6033]"
    },
    {
      "src": "using_directive [738,775]",
      "dest": "using_directive [738,775]"
    },
    {
      "src": "member_expression [4776,4803]",
      "dest": "member_expression [4776,4803]"
    },
    {
      "src": ".: . [5975,5976]",
      "dest": ".: . [5975,5976]"
    },
    {
      "src": ",: , [3583,3584]",
      "dest": ",: , [3583,3584]"
    },
    {
      "src": "\": \" [170,171]",
      "dest": "\": \" [170,171]"
    },
    {
      "src": "identifier: length [5976,5982]",
      "dest": "identifier: length [5976,5982]"
    },
    {
      "src": "function_body [1491,1604]",
      "dest": "function_body [1491,1604]"
    },
    {
      "src": ".: . [3831,3832]",
      "dest": ".: . [3831,3832]"
    },
    {
      "src": "\": \" [148,149]",
      "dest": "\": \" [148,149]"
    },
    {
      "src": "call_argument [1133,1135]",
      "dest": "call_argument [1133,1135]"
    },
    {
      "src": "uint256: uint256 [1024,1031]",
      "dest": "uint256: uint256 [1024,1031]"
    },
    {
      "src": "type_name [1868,1875]",
      "dest": "type_name [1868,1875]"
    },
    {
      "src": ",: , [3768,3769]",
      "dest": ",: , [3768,3769]"
    },
    {
      "src": "member_expression [5911,5930]",
      "dest": "member_expression [5911,5930]"
    },
    {
      "src": "call_argument [2547,2567]",
      "dest": "call_argument [2547,2567]"
    },
    {
      "src": "identifier: deadline [3601,3609]",
      "dest": "identifier: deadline [3601,3609]"
    },
    {
      "src": "(: ( [5918,5919]",
      "dest": "(: ( [5918,5919]"
    },
    {
      "src": "\": \" [208,209]",
      "dest": "\": \" [208,209]"
    },
    {
      "src": "(: ( [5506,5507]",
      "dest": "(: ( [5506,5507]"
    },
    {
      "src": "primitive_type [2353,2360]",
      "dest": "primitive_type [2353,2360]"
    },
    {
      "src": "bool: bool [4913,4917]",
      "dest": "bool: bool [4913,4917]"
    },
    {
      "src": "(: ( [2399,2400]",
      "dest": "(: ( [2399,2400]"
    },
    {
      "src": "{: { [1048,1049]",
      "dest": "{: { [1048,1049]"
    },
    {
      "src": "variable_declaration_statement [2353,2416]",
      "dest": "variable_declaration_statement [2353,2416]"
    },
    {
      "src": "(: ( [4803,4804]",
      "dest": "(: ( [4803,4804]"
    },
    {
      "src": "comment: // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false [5701,5809]",
      "dest": "comment: // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false [5701,5809]"
    },
    {
      "src": "(: ( [3029,3030]",
      "dest": "(: ( [3029,3030]"
    },
    {
      "src": "address: address [5911,5918]",
      "dest": "address: address [5911,5918]"
    },
    {
      "src": "call_argument [2400,2404]",
      "dest": "call_argument [2400,2404]"
    },
    {
      "src": "identifier: v [3787,3788]",
      "dest": "identifier: v [3787,3788]"
    },
    {
      "src": "user_defined_type [1826,1843]",
      "dest": "user_defined_type [1826,1843]"
    },
    {
      "src": "{: { [1491,1492]",
      "dest": "{: { [1491,1492]"
    },
    {
      "src": "identifier: functionCall [4791,4803]",
      "dest": "identifier: functionCall [4791,4803]"
    },
    {
      "src": "binary_expression [3863,3892]",
      "dest": "binary_expression [3863,3892]"
    },
    {
      "src": "function_definition [2881,3302]",
      "dest": "function_definition [2881,3302]"
    },
    {
      "src": "call_argument [3054,3061]",
      "dest": "call_argument [3054,3061]"
    },
    {
      "src": "private: private [5551,5558]",
      "dest": "private: private [5551,5558]"
    },
    {
      "src": "call_argument [3793,3794]",
      "dest": "call_argument [3793,3794]"
    },
    {
      "src": "call_expression [3172,3230]",
      "dest": "call_expression [3172,3230]"
    },
    {
      "src": "(: ( [2436,2437]",
      "dest": "(: ( [2436,2437]"
    },
    {
      "src": "type_cast_expression [4776,4790]",
      "dest": "type_cast_expression [4776,4790]"
    },
    {
      "src": "): ) [3284,3285]",
      "dest": "): ) [3284,3285]"
    },
    {
      "src": "import_directive [141,172]",
      "dest": "import_directive [141,172]"
    },
    {
      "src": ".: . [3010,3011]",
      "dest": ".: . [3010,3011]"
    },
    {
      "src": "call_argument [4804,4808]",
      "dest": "call_argument [4804,4808]"
    },
    {
      "src": "}: } [1603,1604]",
      "dest": "}: } [1603,1604]"
    },
    {
      "src": "call_argument [2003,2023]",
      "dest": "call_argument [2003,2023]"
    },
    {
      "src": "identifier: token [4784,4789]",
      "dest": "identifier: token [4784,4789]"
    },
    {
      "src": "identifier: approvalCall [3116,3128]",
      "dest": "identifier: approvalCall [3116,3128]"
    },
    {
      "src": "address: address [1941,1948]",
      "dest": "address: address [1941,1948]"
    },
    {
      "src": "internal: internal [1883,1891]",
      "dest": "internal: internal [1883,1891]"
    },
    {
      "src": "identifier: AddressUpgradeable [744,762]",
      "dest": "identifier: AddressUpgradeable [744,762]"
    },
    {
      "src": "comment: // and not revert is the subcall reverts. [5818,5859]",
      "dest": "comment: // and not revert is the subcall reverts. [5818,5859]"
    },
    {
      "src": "identifier: safeTransfer [974,986]",
      "dest": "identifier: safeTransfer [974,986]"
    },
    {
      "src": "variable_declaration [3805,3823]",
      "dest": "variable_declaration [3805,3823]"
    },
    {
      "src": "(: ( [3473,3474]",
      "dest": "(: ( [3473,3474]"
    },
    {
      "src": "primitive_type [5870,5874]",
      "dest": "primitive_type [5870,5874]"
    },
    {
      "src": "type_name [1467,1474]",
      "dest": "type_name [1467,1474]"
    },
    {
      "src": ",: , [4808,4809]",
      "dest": ",: , [4808,4809]"
    },
    {
      "src": "source_file [0,6066]",
      "dest": "source_file [0,6066]"
    },
    {
      "src": "(: ( [1520,1521]",
      "dest": "(: ( [1520,1521]"
    },
    {
      "src": ".: . [3200,3201]",
      "dest": ".: . [3200,3201]"
    },
    {
      "src": "type_name [2353,2360]",
      "dest": "type_name [2353,2360]"
    },
    {
      "src": "call_argument [3754,3759]",
      "dest": "call_argument [3754,3759]"
    },
    {
      "src": "function: function [1390,1398]",
      "dest": "function: function [1390,1398]"
    },
    {
      "src": "parameter [2278,2293]",
      "dest": "parameter [2278,2293]"
    },
    {
      "src": "): ) [6019,6020]",
      "dest": "): ) [6019,6020]"
    },
    {
      "src": "string [218,242]",
      "dest": "string [218,242]"
    },
    {
      "src": "call_expression [5911,5936]",
      "dest": "call_expression [5911,5936]"
    },
    {
      "src": "function_definition [1795,2031]",
      "dest": "function_definition [1795,2031]"
    },
    {
      "src": "function_definition [5474,6063]",
      "dest": "function_definition [5474,6063]"
    },
    {
      "src": "identifier: token [1551,1556]",
      "dest": "identifier: token [1551,1556]"
    },
    {
      "src": "identifier: value [2303,2308]",
      "dest": "identifier: value [2303,2308]"
    },
    {
      "src": "member_expression [3030,3043]",
      "dest": "member_expression [3030,3043]"
    },
    {
      "src": "type_cast_expression [6026,6040]",
      "dest": "type_cast_expression [6026,6040]"
    },
    {
      "src": "identifier: transferFrom [1557,1569]",
      "dest": "identifier: transferFrom [1557,1569]"
    },
    {
      "src": "primitive_type [3805,3812]",
      "dest": "primitive_type [3805,3812]"
    },
    {
      "src": "identifier: value [2018,2023]",
      "dest": "identifier: value [2018,2023]"
    },
    {
      "src": "type_name [3636,3643]",
      "dest": "type_name [3636,3643]"
    },
    {
      "src": ">: > [6053,6054]",
      "dest": ">: > [6053,6054]"
    },
    {
      "src": "member_expression [5953,6045]",
      "dest": "member_expression [5953,6045]"
    },
    {
      "src": "import: import [211,217]",
      "dest": "import: import [211,217]"
    },
    {
      "src": "return_type_definition [5559,5573]",
      "dest": "return_type_definition [5559,5573]"
    },
    {
      "src": "import_directive [173,210]",
      "dest": "import_directive [173,210]"
    },
    {
      "src": "identifier: _callOptionalReturnBool [3085,3108]",
      "dest": "identifier: _callOptionalReturnBool [3085,3108]"
    },
    {
      "src": "identifier: returndata [4863,4873]",
      "dest": "identifier: returndata [4863,4873]"
    },
    {
      "src": ",: , [3785,3786]",
      "dest": ",: , [3785,3786]"
    },
    {
      "src": "binary_expression [5965,5987]",
      "dest": "binary_expression [5965,5987]"
    },
    {
      "src": "identifier: encodeWithSelector [3011,3029]",
      "dest": "identifier: encodeWithSelector [3011,3029]"
    },
    {
      "src": "member_expression [1108,1131]",
      "dest": "member_expression [1108,1131]"
    },
    {
      "src": ",: , [1849,1850]",
      "dest": ",: , [1849,1850]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [0,31]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "(: ( [5869,5870]",
      "dest": "(: ( [5869,5870]"
    },
    {
      "src": "\": \" [2502,2503]",
      "dest": "\": \" [2502,2503]"
    },
    {
      "src": "parameter [1455,1465]",
      "dest": "parameter [1455,1465]"
    },
    {
      "src": "call_expression [3712,3731]",
      "dest": "call_expression [3712,3731]"
    },
    {
      "src": "identifier: deadline [3777,3785]",
      "dest": "identifier: deadline [3777,3785]"
    },
    {
      "src": "): ) [1142,1143]",
      "dest": "): ) [1142,1143]"
    },
    {
      "src": "visibility [2310,2318]",
      "dest": "visibility [2310,2318]"
    },
    {
      "src": "comment: // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since [5584,5692]",
      "dest": "comment: // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since [5584,5692]"
    },
    {
      "src": "): ) [2404,2405]",
      "dest": "): ) [2404,2405]"
    },
    {
      "src": "member_expression [5991,6001]",
      "dest": "member_expression [5991,6001]"
    },
    {
      "src": "primitive_type [3619,3624]",
      "dest": "primitive_type [3619,3624]"
    },
    {
      "src": "string_literal [4810,4844]",
      "dest": "string_literal [4810,4844]"
    },
    {
      "src": "call_argument [4863,4919]",
      "dest": "call_argument [4863,4919]"
    },
    {
      "src": "||: || [5988,5990]",
      "dest": "||: || [5988,5990]"
    },
    {
      "src": "identifier: to [1463,1465]",
      "dest": "identifier: to [1463,1465]"
    },
    {
      "src": "type_alias [744,762]",
      "dest": "type_alias [744,762]"
    },
    {
      "src": "call_argument [3761,3768]",
      "dest": "call_argument [3761,3768]"
    },
    {
      "src": "(: ( [4862,4863]",
      "dest": "(: ( [4862,4863]"
    },
    {
      "src": "identifier: returndata [6002,6012]",
      "dest": "identifier: returndata [6002,6012]"
    },
    {
      "src": "): ) [3229,3230]",
      "dest": "): ) [3229,3230]"
    },
    {
      "src": "internal: internal [1039,1047]",
      "dest": "internal: internal [1039,1047]"
    },
    {
      "src": "\": \" [2460,2461]",
      "dest": "\": \" [2460,2461]"
    },
    {
      "src": "call_argument [3839,3844]",
      "dest": "call_argument [3839,3844]"
    },
    {
      "src": "identifier: value [3578,3583]",
      "dest": "identifier: value [3578,3583]"
    },
    {
      "src": "for: for [763,766]",
      "dest": "for: for [763,766]"
    },
    {
      "src": "address: address [1012,1019]",
      "dest": "address: address [1012,1019]"
    },
    {
      "src": "function_body [5574,6063]",
      "dest": "function_body [5574,6063]"
    },
    {
      "src": "parameter [3545,3560]",
      "dest": "parameter [3545,3560]"
    },
    {
      "src": "(: ( [1415,1416]",
      "dest": "(: ( [1415,1416]"
    },
    {
      "src": "identifier: token [3030,3035]",
      "dest": "identifier: token [3030,3035]"
    },
    {
      "src": "member_expression [3195,3208]",
      "dest": "member_expression [3195,3208]"
    },
    {
      "src": "{: { [4401,4402]",
      "dest": "{: { [4401,4402]"
    },
    {
      "src": ",: , [2458,2459]",
      "dest": ",: , [2458,2459]"
    },
    {
      "src": "parameter [3483,3512]",
      "dest": "parameter [3483,3512]"
    },
    {
      "src": "returns: returns [5559,5566]",
      "dest": "returns: returns [5559,5566]"
    },
    {
      "src": "identifier: owner [3725,3730]",
      "dest": "identifier: owner [3725,3730]"
    },
    {
      "src": "parameter [1467,1480]",
      "dest": "parameter [1467,1480]"
    },
    {
      "src": "): ) [2503,2504]",
      "dest": "): ) [2503,2504]"
    },
    {
      "src": "identifier: encodeWithSelector [1532,1550]",
      "dest": "identifier: encodeWithSelector [1532,1550]"
    },
    {
      "src": "{: { [2969,2970]",
      "dest": "{: { [2969,2970]"
    },
    {
      "src": "call_expression [3085,3129]",
      "dest": "call_expression [3085,3129]"
    },
    {
      "src": ".: . [4790,4791]",
      "dest": ".: . [4790,4791]"
    },
    {
      "src": "call_argument [5919,5924]",
      "dest": "call_argument [5919,5924]"
    },
    {
      "src": "==: == [3874,3876]",
      "dest": "==: == [3874,3876]"
    },
    {
      "src": "identifier: spender [2286,2293]",
      "dest": "identifier: spender [2286,2293]"
    },
    {
      "src": "visibility [2960,2968]",
      "dest": "visibility [2960,2968]"
    },
    {
      "src": ".: . [2381,2382]",
      "dest": ".: . [2381,2382]"
    },
    {
      "src": "identifier: IERC20Upgradeable [2903,2920]",
      "dest": "identifier: IERC20Upgradeable [2903,2920]"
    },
    {
      "src": "): ) [3929,3930]",
      "dest": "): ) [3929,3930]"
    },
    {
      "src": "pragma: pragma [115,121]",
      "dest": "pragma: pragma [115,121]"
    },
    {
      "src": "): ) [4965,4966]",
      "dest": "): ) [4965,4966]"
    },
    {
      "src": ",: , [2001,2002]",
      "dest": ",: , [2001,2002]"
    },
    {
      "src": "parameter [2928,2943]",
      "dest": "parameter [2928,2943]"
    },
    {
      "src": "number_literal: 0 [4884,4885]",
      "dest": "number_literal: 0 [4884,4885]"
    },
    {
      "src": "identifier: returndata [4900,4910]",
      "dest": "identifier: returndata [4900,4910]"
    },
    {
      "src": "identifier: encodeWithSelector [3176,3194]",
      "dest": "identifier: encodeWithSelector [3176,3194]"
    },
    {
      "src": "): ) [4391,4392]",
      "dest": "): ) [4391,4392]"
    },
    {
      "src": "primitive_type [5884,5889]",
      "dest": "primitive_type [5884,5889]"
    },
    {
      "src": "identifier: approvalCall [2992,3004]",
      "dest": "identifier: approvalCall [2992,3004]"
    },
    {
      "src": ",: , [1439,1440]",
      "dest": ",: , [1439,1440]"
    },
    {
      "src": "call_argument [3272,3284]",
      "dest": "call_argument [3272,3284]"
    },
    {
      "src": "primitive_type [1467,1474]",
      "dest": "primitive_type [1467,1474]"
    },
    {
      "src": "==: == [5983,5985]",
      "dest": "==: == [5983,5985]"
    },
    {
      "src": ",: , [1588,1589]",
      "dest": ",: , [1588,1589]"
    },
    {
      "src": "call_expression [2376,2415]",
      "dest": "call_expression [2376,2415]"
    },
    {
      "src": "user_defined_type [3483,3506]",
      "dest": "user_defined_type [3483,3506]"
    },
    {
      "src": "identifier: call [5926,5930]",
      "dest": "identifier: call [5926,5930]"
    },
    {
      "src": "(: ( [3838,3839]",
      "dest": "(: ( [3838,3839]"
    },
    {
      "src": "call_argument [3770,3775]",
      "dest": "call_argument [3770,3775]"
    },
    {
      "src": "identifier: token [2376,2381]",
      "dest": "identifier: token [2376,2381]"
    },
    {
      "src": "==: == [4881,4883]",
      "dest": "==: == [4881,4883]"
    },
    {
      "src": "}: } [3936,3937]",
      "dest": "}: } [3936,3937]"
    },
    {
      "src": "type_name [4750,4755]",
      "dest": "type_name [4750,4755]"
    },
    {
      "src": "identifier: token [1925,1930]",
      "dest": "identifier: token [1925,1930]"
    },
    {
      "src": "variable_declaration_statement [3805,3846]",
      "dest": "variable_declaration_statement [3805,3846]"
    },
    {
      "src": ",: , [4372,4373]",
      "dest": ",: , [4372,4373]"
    },
    {
      "src": "expression_statement [1058,1145]",
      "dest": "expression_statement [1058,1145]"
    },
    {
      "src": "parameter [987,1010]",
      "dest": "parameter [987,1010]"
    },
    {
      "src": "parameter [3636,3645]",
      "dest": "parameter [3636,3645]"
    },
    {
      "src": "call_argument [1590,1595]",
      "dest": "call_argument [1590,1595]"
    },
    {
      "src": "type_name [3522,3529]",
      "dest": "type_name [3522,3529]"
    },
    {
      "src": "identifier: require [2429,2436]",
      "dest": "identifier: require [2429,2436]"
    },
    {
      "src": "identifier: data [5545,5549]",
      "dest": "identifier: data [5545,5549]"
    },
    {
      "src": "binary_expression [5953,6040]",
      "dest": "binary_expression [5953,6040]"
    },
    {
      "src": "binary_expression [5965,6021]",
      "dest": "binary_expression [5965,6021]"
    },
    {
      "src": "member_expression [3195,3217]",
      "dest": "member_expression [3195,3217]"
    },
    {
      "src": "user_defined_type [4349,4366]",
      "dest": "user_defined_type [4349,4366]"
    },
    {
      "src": "call_argument [1108,1131]",
      "dest": "call_argument [1108,1131]"
    },
    {
      "src": "identifier: token [1844,1849]",
      "dest": "identifier: token [1844,1849]"
    },
    {
      "src": ".: . [3043,3044]",
      "dest": ".: . [3043,3044]"
    },
    {
      "src": "{: { [732,733]",
      "dest": "{: { [732,733]"
    },
    {
      "src": ".: . [6045,6046]",
      "dest": ".: . [6045,6046]"
    },
    {
      "src": "memory: memory [4380,4386]",
      "dest": "memory: memory [4380,4386]"
    },
    {
      "src": ",: , [1526,1527]",
      "dest": ",: , [1526,1527]"
    },
    {
      "src": "identifier: token [3195,3200]",
      "dest": "identifier: token [3195,3200]"
    },
    {
      "src": "user_defined_type [2253,2270]",
      "dest": "user_defined_type [2253,2270]"
    },
    {
      "src": "primitive_type [2278,2285]",
      "dest": "primitive_type [2278,2285]"
    },
    {
      "src": "parameter [3655,3664]",
      "dest": "parameter [3655,3664]"
    },
    {
      "src": "type_name [2278,2285]",
      "dest": "type_name [2278,2285]"
    },
    {
      "src": "uint256: uint256 [3805,3812]",
      "dest": "uint256: uint256 [3805,3812]"
    },
    {
      "src": "identifier: token [4367,4372]",
      "dest": "identifier: token [4367,4372]"
    },
    {
      "src": ",: , [3788,3789]",
      "dest": ",: , [3788,3789]"
    },
    {
      "src": "call_expression [1501,1597]",
      "dest": "call_expression [1501,1597]"
    },
    {
      "src": "primitive_type [3655,3662]",
      "dest": "primitive_type [3655,3662]"
    },
    {
      "src": "call_argument [1586,1588]",
      "dest": "call_argument [1586,1588]"
    },
    {
      "src": "\": \" [4921,4922]",
      "dest": "\": \" [4921,4922]"
    },
    {
      "src": "identifier: value [2562,2567]",
      "dest": "identifier: value [2562,2567]"
    },
    {
      "src": "identifier: owner [3839,3844]",
      "dest": "identifier: owner [3839,3844]"
    },
    {
      "src": ",: , [3791,3792]",
      "dest": ",: , [3791,3792]"
    },
    {
      "src": "call_argument [2407,2414]",
      "dest": "call_argument [2407,2414]"
    },
    {
      "src": "parameter [1851,1866]",
      "dest": "parameter [1851,1866]"
    },
    {
      "src": "(: ( [4899,4900]",
      "dest": "(: ( [4899,4900]"
    },
    {
      "src": "): ) [6039,6040]",
      "dest": "): ) [6039,6040]"
    },
    {
      "src": "): ) [1480,1481]",
      "dest": "): ) [1480,1481]"
    },
    {
      "src": "identifier: safeTransferFrom [1399,1415]",
      "dest": "identifier: safeTransferFrom [1399,1415]"
    },
    {
      "src": "call_argument [3790,3791]",
      "dest": "call_argument [3790,3791]"
    },
    {
      "src": ",: , [3626,3627]",
      "dest": ",: , [3626,3627]"
    },
    {
      "src": "identifier: data [5931,5935]",
      "dest": "identifier: data [5931,5935]"
    },
    {
      "src": "parameter [3522,3535]",
      "dest": "parameter [3522,3535]"
    },
    {
      "src": "call_argument [4921,4965]",
      "dest": "call_argument [4921,4965]"
    },
    {
      "src": "(: ( [3753,3754]",
      "dest": "(: ( [3753,3754]"
    },
    {
      "src": "=: = [3710,3711]",
      "dest": "=: = [3710,3711]"
    },
    {
      "src": "primitive_type [4750,4755]",
      "dest": "primitive_type [4750,4755]"
    },
    {
      "src": ",: , [5530,5531]",
      "dest": ",: , [5530,5531]"
    },
    {
      "src": "type_name [3570,3577]",
      "dest": "type_name [3570,3577]"
    },
    {
      "src": "identifier: nonceBefore [3877,3888]",
      "dest": "identifier: nonceBefore [3877,3888]"
    },
    {
      "src": "member_expression [3741,3753]",
      "dest": "member_expression [3741,3753]"
    },
    {
      "src": "string [2460,2503]",
      "dest": "string [2460,2503]"
    },
    {
      "src": "identifier: spender [1859,1866]",
      "dest": "identifier: spender [1859,1866]"
    },
    {
      "src": "call_expression [4855,4966]",
      "dest": "call_expression [4855,4966]"
    },
    {
      "src": "user_defined_type [987,1004]",
      "dest": "user_defined_type [987,1004]"
    },
    {
      "src": "identifier: decode [4893,4899]",
      "dest": "identifier: decode [4893,4899]"
    },
    {
      "src": "address: address [4776,4783]",
      "dest": "address: address [4776,4783]"
    },
    {
      "src": "identifier: from [1449,1453]",
      "dest": "identifier: from [1449,1453]"
    },
    {
      "src": "number_literal: 1 [3891,3892]",
      "dest": "number_literal: 1 [3891,3892]"
    },
    {
      "src": "import_directive [211,243]",
      "dest": "import_directive [211,243]"
    },
    {
      "src": "contract_body [732,6065]",
      "dest": "contract_body [732,6065]"
    },
    {
      "src": "identifier: abi [4889,4892]",
      "dest": "identifier: abi [4889,4892]"
    },
    {
      "src": "binary_expression [2437,2458]",
      "dest": "binary_expression [2437,2458]"
    },
    {
      "src": "bool: bool [6015,6019]",
      "dest": "bool: bool [6015,6019]"
    },
    {
      "src": ",: , [3052,3053]",
      "dest": ",: , [3052,3053]"
    },
    {
      "src": "identifier: owner [3530,3535]",
      "dest": "identifier: owner [3530,3535]"
    },
    {
      "src": "type_name [1012,1019]",
      "dest": "type_name [1012,1019]"
    },
    {
      "src": "call_argument [1949,1953]",
      "dest": "call_argument [1949,1953]"
    },
    {
      "src": ".: . [3175,3176]",
      "dest": ".: . [3175,3176]"
    },
    {
      "src": "): ) [4844,4845]",
      "dest": "): ) [4844,4845]"
    },
    {
      "src": "member_expression [3172,3194]",
      "dest": "member_expression [3172,3194]"
    },
    {
      "src": "type_name [3545,3552]",
      "dest": "type_name [3545,3552]"
    },
    {
      "src": "parameter [1012,1022]",
      "dest": "parameter [1012,1022]"
    },
    {
      "src": "memory: memory [5890,5896]",
      "dest": "memory: memory [5890,5896]"
    },
    {
      "src": "+: + [3889,3890]",
      "dest": "+: + [3889,3890]"
    },
    {
      "src": "call_argument [5931,5935]",
      "dest": "call_argument [5931,5935]"
    },
    {
      "src": "identifier: token [1434,1439]",
      "dest": "identifier: token [1434,1439]"
    },
    {
      "src": "): ) [3230,3231]",
      "dest": "): ) [3230,3231]"
    },
    {
      "src": ".: . [1556,1557]",
      "dest": ".: . [1556,1557]"
    },
    {
      "src": "binary_expression [2003,2023]",
      "dest": "binary_expression [2003,2023]"
    },
    {
      "src": "identifier: require [4855,4862]",
      "dest": "identifier: require [4855,4862]"
    },
    {
      "src": "type_name [1902,1909]",
      "dest": "type_name [1902,1909]"
    },
    {
      "src": "pragma_directive [115,139]",
      "dest": "pragma_directive [115,139]"
    },
    {
      "src": "type_name [2295,2302]",
      "dest": "type_name [2295,2302]"
    },
    {
      "src": "call_argument [3228,3229]",
      "dest": "call_argument [3228,3229]"
    },
    {
      "src": "identifier: length [4874,4880]",
      "dest": "identifier: length [4874,4880]"
    },
    {
      "src": "type_name [5532,5537]",
      "dest": "type_name [5532,5537]"
    },
    {
      "src": "primitive_type [5568,5572]",
      "dest": "primitive_type [5568,5572]"
    },
    {
      "src": "^:  ^ [130,132]",
      "dest": "^:  ^ [130,132]"
    },
    {
      "src": "): ) [2567,2568]",
      "dest": "): ) [2567,2568]"
    },
    {
      "src": ".: . [1531,1532]",
      "dest": ".: . [1531,1532]"
    },
    {
      "src": "call_argument [4784,4789]",
      "dest": "call_argument [4784,4789]"
    },
    {
      "src": "variable_declaration_tuple [5869,5908]",
      "dest": "variable_declaration_tuple [5869,5908]"
    },
    {
      "src": "user_defined_type [2903,2920]",
      "dest": "user_defined_type [2903,2920]"
    },
    {
      "src": "identifier: value [3063,3068]",
      "dest": "identifier: value [3063,3068]"
    },
    {
      "src": "primitive_type [3636,3643]",
      "dest": "primitive_type [3636,3643]"
    },
    {
      "src": ".: . [1569,1570]",
      "dest": ".: . [1569,1570]"
    },
    {
      "src": "(: ( [5964,5965]",
      "dest": "(: ( [5964,5965]"
    },
    {
      "src": "call_argument [1528,1596]",
      "dest": "call_argument [1528,1596]"
    },
    {
      "src": "call_argument [3116,3128]",
      "dest": "call_argument [3116,3128]"
    },
    {
      "src": ",: , [3775,3776]",
      "dest": ",: , [3775,3776]"
    },
    {
      "src": "primitive_type [6015,6019]",
      "dest": "primitive_type [6015,6019]"
    },
    {
      "src": "identifier: allowance [2382,2391]",
      "dest": "identifier: allowance [2382,2391]"
    },
    {
      "src": "(: ( [4783,4784]",
      "dest": "(: ( [4783,4784]"
    },
    {
      "src": "identifier: success [5953,5960]",
      "dest": "identifier: success [5953,5960]"
    },
    {
      "src": "identifier: s [3793,3794]",
      "dest": "identifier: s [3793,3794]"
    },
    {
      "src": "parameter [2253,2276]",
      "dest": "parameter [2253,2276]"
    },
    {
      "src": "\": \" [3928,3929]",
      "dest": "\": \" [3928,3929]"
    },
    {
      "src": "library: library [703,710]",
      "dest": "library: library [703,710]"
    },
    {
      "src": "parameter [3570,3583]",
      "dest": "parameter [3570,3583]"
    },
    {
      "src": "variable_declaration [2353,2373]",
      "dest": "variable_declaration [2353,2373]"
    },
    {
      "src": "): ) [5907,5908]",
      "dest": "): ) [5907,5908]"
    },
    {
      "src": "type_name [1826,1843]",
      "dest": "type_name [1826,1843]"
    },
    {
      "src": "call_expression [3245,3285]",
      "dest": "call_expression [3245,3285]"
    },
    {
      "src": "call_argument [4810,4844]",
      "dest": "call_argument [4810,4844]"
    },
    {
      "src": "}: } [3295,3296]",
      "dest": "}: } [3295,3296]"
    },
    {
      "src": "): ) [4917,4918]",
      "dest": "): ) [4917,4918]"
    },
    {
      "src": "primitive_type [2945,2952]",
      "dest": "primitive_type [2945,2952]"
    },
    {
      "src": "function_definition [4320,4973]",
      "dest": "function_definition [4320,4973]"
    },
    {
      "src": "): ) [5935,5936]",
      "dest": "): ) [5935,5936]"
    },
    {
      "src": "bool: bool [5568,5572]",
      "dest": "bool: bool [5568,5572]"
    },
    {
      "src": "type_name [5884,5889]",
      "dest": "type_name [5884,5889]"
    },
    {
      "src": "variable_declaration_statement [3690,3732]",
      "dest": "variable_declaration_statement [3690,3732]"
    },
    {
      "src": "primitive_type [1941,1948]",
      "dest": "primitive_type [1941,1948]"
    },
    {
      "src": ",: , [1584,1585]",
      "dest": ",: , [1584,1585]"
    },
    {
      "src": "identifier: require [3855,3862]",
      "dest": "identifier: require [3855,3862]"
    },
    {
      "src": ".: . [3717,3718]",
      "dest": ".: . [3717,3718]"
    },
    {
      "src": "type_name [4349,4366]",
      "dest": "type_name [4349,4366]"
    },
    {
      "src": "member_expression [1551,1578]",
      "dest": "member_expression [1551,1578]"
    },
    {
      "src": "type_name [1024,1031]",
      "dest": "type_name [1024,1031]"
    },
    {
      "src": "address: address [2278,2285]",
      "dest": "address: address [2278,2285]"
    },
    {
      "src": "bytes: bytes [4374,4379]",
      "dest": "bytes: bytes [4374,4379]"
    },
    {
      "src": ",: , [1465,1466]",
      "dest": ",: , [1465,1466]"
    },
    {
      "src": ",: , [3217,3218]",
      "dest": ",: , [3217,3218]"
    },
    {
      "src": "return_statement [5946,6057]",
      "dest": "return_statement [5946,6057]"
    },
    {
      "src": "identifier: code [6041,6045]",
      "dest": "identifier: code [6041,6045]"
    },
    {
      "src": "identifier: permit [3747,3753]",
      "dest": "identifier: permit [3747,3753]"
    },
    {
      "src": "(: ( [3108,3109]",
      "dest": "(: ( [3108,3109]"
    },
    {
      "src": "variable_declaration [1902,1922]",
      "dest": "variable_declaration [1902,1922]"
    },
    {
      "src": "type_name [4374,4379]",
      "dest": "type_name [4374,4379]"
    },
    {
      "src": "): ) [3844,3845]",
      "dest": "): ) [3844,3845]"
    },
    {
      "src": "\": \" [180,181]",
      "dest": "\": \" [180,181]"
    },
    {
      "src": "call_argument [1085,1143]",
      "dest": "call_argument [1085,1143]"
    },
    {
      "src": "primitive_type [1851,1858]",
      "dest": "primitive_type [1851,1858]"
    },
    {
      "src": "function: function [3454,3462]",
      "dest": "function: function [3454,3462]"
    },
    {
      "src": "identifier: spender [2538,2545]",
      "dest": "identifier: spender [2538,2545]"
    },
    {
      "src": "call_argument [3109,3114]",
      "dest": "call_argument [3109,3114]"
    },
    {
      "src": "member_expression [3826,3838]",
      "dest": "member_expression [3826,3838]"
    },
    {
      "src": "uint256: uint256 [3690,3697]",
      "dest": "uint256: uint256 [3690,3697]"
    },
    {
      "src": "): ) [5572,5573]",
      "dest": "): ) [5572,5573]"
    },
    {
      "src": ",: , [3226,3227]",
      "dest": ",: , [3226,3227]"
    },
    {
      "src": "{: { [2319,2320]",
      "dest": "{: { [2319,2320]"
    },
    {
      "src": "identifier: safeDecreaseAllowance [2231,2252]",
      "dest": "identifier: safeDecreaseAllowance [2231,2252]"
    },
    {
      "src": "primitive_type [1024,1031]",
      "dest": "primitive_type [1024,1031]"
    },
    {
      "src": "identifier: token [1521,1526]",
      "dest": "identifier: token [1521,1526]"
    },
    {
      "src": "identifier: token [2271,2276]",
      "dest": "identifier: token [2271,2276]"
    },
    {
      "src": "variable_declaration_statement [2979,3070]",
      "dest": "variable_declaration_statement [2979,3070]"
    },
    {
      "src": "type_name [3593,3600]",
      "dest": "type_name [3593,3600]"
    },
    {
      "src": ".: . [3208,3209]",
      "dest": ".: . [3208,3209]"
    },
    {
      "src": "bool: bool [5870,5874]",
      "dest": "bool: bool [5870,5874]"
    },
    {
      "src": ",: , [1453,1454]",
      "dest": ",: , [1453,1454]"
    },
    {
      "src": "function_body [2969,3302]",
      "dest": "function_body [2969,3302]"
    },
    {
      "src": "comment: /**      * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,      * non-reverting calls are assumed to be successful.      */ [781,960]",
      "dest": "comment: /**      * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,      * non-reverting calls are assumed to be successful.      */ [781,960]"
    },
    {
      "src": "\": \" [241,242]",
      "dest": "\": \" [241,242]"
    },
    {
      "src": "identifier: to [1133,1135]",
      "dest": "identifier: to [1133,1135]"
    },
    {
      "src": "function_body [1048,1151]",
      "dest": "function_body [1048,1151]"
    },
    {
      "src": "function: function [2222,2230]",
      "dest": "function: function [2222,2230]"
    },
    {
      "src": "): ) [1963,1964]",
      "dest": "): ) [1963,1964]"
    },
    {
      "src": "(: ( [3083,3084]",
      "dest": "(: ( [3083,3084]"
    },
    {
      "src": "uint256: uint256 [2945,2952]",
      "dest": "uint256: uint256 [2945,2952]"
    },
    {
      "src": "(: ( [6033,6034]",
      "dest": "(: ( [6033,6034]"
    },
    {
      "src": ",: , [1022,1023]",
      "dest": ",: , [1022,1023]"
    },
    {
      "src": "variable_declaration [4750,4773]",
      "dest": "variable_declaration [4750,4773]"
    },
    {
      "src": "variable_declaration [5884,5907]",
      "dest": "variable_declaration [5884,5907]"
    },
    {
      "src": "call_argument [3265,3270]",
      "dest": "call_argument [3265,3270]"
    },
    {
      "src": "identifier: oldAllowance [1910,1922]",
      "dest": "identifier: oldAllowance [1910,1922]"
    },
    {
      "src": "identifier: nonceAfter [3813,3823]",
      "dest": "identifier: nonceAfter [3813,3823]"
    },
    {
      "src": "): ) [2958,2959]",
      "dest": "): ) [2958,2959]"
    },
    {
      "src": "visibility [3671,3679]",
      "dest": "visibility [3671,3679]"
    },
    {
      "src": "identifier: token [1078,1083]",
      "dest": "identifier: token [1078,1083]"
    },
    {
      "src": "(: ( [1948,1949]",
      "dest": "(: ( [1948,1949]"
    },
    {
      "src": "type_name [1455,1462]",
      "dest": "type_name [1455,1462]"
    },
    {
      "src": "comment: // OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol) [32,113]",
      "dest": "comment: // OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol) [32,113]"
    },
    {
      "src": "(: ( [5930,5931]",
      "dest": "(: ( [5930,5931]"
    },
    {
      "src": "comment: /**      * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,      * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to      * 0 before setting it to a non-zero value.      */ [2591,2876]",
      "dest": "comment: /**      * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,      * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to      * 0 before setting it to a non-zero value.      */ [2591,2876]"
    },
    {
      "src": "variable_declaration_statement [1902,1965]",
      "dest": "variable_declaration_statement [1902,1965]"
    },
    {
      "src": "function_definition [3454,3937]",
      "dest": "function_definition [3454,3937]"
    },
    {
      "src": "call_argument [3787,3788]",
      "dest": "call_argument [3787,3788]"
    },
    {
      "src": "uint256: uint256 [3593,3600]",
      "dest": "uint256: uint256 [3593,3600]"
    },
    {
      "src": "user_defined_type [1416,1433]",
      "dest": "user_defined_type [1416,1433]"
    },
    {
      "src": ",: , [2926,2927]",
      "dest": ",: , [2926,2927]"
    },
    {
      "src": "binary_expression [3877,3892]",
      "dest": "binary_expression [3877,3892]"
    },
    {
      "src": "uint8: uint8 [3619,3624]",
      "dest": "uint8: uint8 [3619,3624]"
    },
    {
      "src": "address: address [2928,2935]",
      "dest": "address: address [2928,2935]"
    },
    {
      "src": "address: address [3545,3552]",
      "dest": "address: address [3545,3552]"
    },
    {
      "src": "=: = [3005,3006]",
      "dest": "=: = [3005,3006]"
    },
    {
      "src": "type_name [3690,3697]",
      "dest": "type_name [3690,3697]"
    },
    {
      "src": "block_statement [2329,2579]",
      "dest": "block_statement [2329,2579]"
    },
    {
      "src": "identifier: this [2400,2404]",
      "dest": "identifier: this [2400,2404]"
    },
    {
      "src": "identifier: SafeERC20Upgradeable [711,731]",
      "dest": "identifier: SafeERC20Upgradeable [711,731]"
    },
    {
      "src": "primitive_type [1868,1875]",
      "dest": "primitive_type [1868,1875]"
    },
    {
      "src": "call_expression [2518,2568]",
      "dest": "call_expression [2518,2568]"
    },
    {
      "src": "identifier: returndata [5897,5907]",
      "dest": "identifier: returndata [5897,5907]"
    },
    {
      "src": "): ) [1037,1038]",
      "dest": "): ) [1037,1038]"
    },
    {
      "src": "identifier: value [1590,1595]",
      "dest": "identifier: value [1590,1595]"
    },
    {
      "src": "type_name [987,1004]",
      "dest": "type_name [987,1004]"
    },
    {
      "src": "identifier: returndata [5965,5975]",
      "dest": "identifier: returndata [5965,5975]"
    },
    {
      "src": "return: return [5946,5952]",
      "dest": "return: return [5946,5952]"
    },
    {
      "src": ",: , [3114,3115]",
      "dest": ",: , [3114,3115]"
    },
    {
      "src": "solidity_version: 0.8.19 [132,138]",
      "dest": "solidity_version: 0.8.19 [132,138]"
    },
    {
      "src": "identifier: nonceBefore [3698,3709]",
      "dest": "identifier: nonceBefore [3698,3709]"
    },
    {
      "src": "call_argument [3777,3785]",
      "dest": "call_argument [3777,3785]"
    },
    {
      "src": "parameter [4374,4391]",
      "dest": "parameter [4374,4391]"
    },
    {
      "src": "address: address [1455,1462]",
      "dest": "address: address [1455,1462]"
    },
    {
      "src": "private: private [4393,4400]",
      "dest": "private: private [4393,4400]"
    },
    {
      "src": "identifier: IERC20Upgradeable [5507,5524]",
      "dest": "identifier: IERC20Upgradeable [5507,5524]"
    },
    {
      "src": "type_name [2253,2270]",
      "dest": "type_name [2253,2270]"
    },
    {
      "src": "-: - [2560,2561]",
      "dest": "-: - [2560,2561]"
    },
    {
      "src": ".: . [6040,6041]",
      "dest": ".: . [6040,6041]"
    },
    {
      "src": "): ) [1953,1954]",
      "dest": "): ) [1953,1954]"
    },
    {
      "src": "address: address [1441,1448]",
      "dest": "address: address [1441,1448]"
    },
    {
      "src": "identifier: value [2953,2958]",
      "dest": "identifier: value [2953,2958]"
    },
    {
      "src": "identifier: abi [3172,3175]",
      "dest": "identifier: abi [3172,3175]"
    },
    {
      "src": "type_name [1441,1448]",
      "dest": "type_name [1441,1448]"
    },
    {
      "src": "(: ( [2902,2903]",
      "dest": "(: ( [2902,2903]"
    },
    {
      "src": "call_expression [1085,1143]",
      "dest": "call_expression [1085,1143]"
    },
    {
      "src": "identifier: token [5919,5924]",
      "dest": "identifier: token [5919,5924]"
    },
    {
      "src": ",: , [2545,2546]",
      "dest": ",: , [2545,2546]"
    },
    {
      "src": "type_name [3805,3812]",
      "dest": "type_name [3805,3812]"
    },
    {
      "src": "uint256: uint256 [3570,3577]",
      "dest": "uint256: uint256 [3570,3577]"
    },
    {
      "src": "function_definition [965,1151]",
      "dest": "function_definition [965,1151]"
    },
    {
      "src": "uint256: uint256 [1902,1909]",
      "dest": "uint256: uint256 [1902,1909]"
    },
    {
      "src": "bytes32: bytes32 [3636,3643]",
      "dest": "bytes32: bytes32 [3636,3643]"
    },
    {
      "src": "call_expression [3007,3069]",
      "dest": "call_expression [3007,3069]"
    },
    {
      "src": ",: , [2943,2944]",
      "dest": ",: , [2943,2944]"
    },
    {
      "src": "call_expression [3741,3795]",
      "dest": "call_expression [3741,3795]"
    },
    {
      "src": "primitive_type [1441,1448]",
      "dest": "primitive_type [1441,1448]"
    },
    {
      "src": "identifier: value [2453,2458]",
      "dest": "identifier: value [2453,2458]"
    },
    {
      "src": "(: ( [2252,2253]",
      "dest": "(: ( [2252,2253]"
    },
    {
      "src": "parameter [5568,5572]",
      "dest": "parameter [5568,5572]"
    },
    {
      "src": "!: ! [3084,3085]",
      "dest": "!: ! [3084,3085]"
    },
    {
      "src": "(: ( [1550,1551]",
      "dest": "(: ( [1550,1551]"
    },
    {
      "src": "variable_declaration_statement [5869,5937]",
      "dest": "variable_declaration_statement [5869,5937]"
    },
    {
      "src": "{: { [3131,3132]",
      "dest": "{: { [3131,3132]"
    },
    {
      "src": "(: ( [6001,6002]",
      "dest": "(: ( [6001,6002]"
    },
    {
      "src": "call_argument [2531,2536]",
      "dest": "call_argument [2531,2536]"
    },
    {
      "src": "identifier: to [1586,1588]",
      "dest": "identifier: to [1586,1588]"
    },
    {
      "src": ",: , [2293,2294]",
      "dest": ",: , [2293,2294]"
    },
    {
      "src": "call_argument [1521,1526]",
      "dest": "call_argument [1521,1526]"
    },
    {
      "src": "identifier: value [1032,1037]",
      "dest": "identifier: value [1032,1037]"
    },
    {
      "src": "identifier: token [2531,2536]",
      "dest": "identifier: token [2531,2536]"
    },
    {
      "src": "identifier: success [5875,5882]",
      "dest": "identifier: success [5875,5882]"
    },
    {
      "src": "member_expression [3030,3052]",
      "dest": "member_expression [3030,3052]"
    },
    {
      "src": "call_expression [5991,6021]",
      "dest": "call_expression [5991,6021]"
    },
    {
      "src": "(: ( [1107,1108]",
      "dest": "(: ( [1107,1108]"
    },
    {
      "src": "call_argument [4900,4910]",
      "dest": "call_argument [4900,4910]"
    },
    {
      "src": "}: } [2578,2579]",
      "dest": "}: } [2578,2579]"
    },
    {
      "src": "if: if [3080,3082]",
      "dest": "if: if [3080,3082]"
    },
    {
      "src": "type_name [5568,5572]",
      "dest": "type_name [5568,5572]"
    },
    {
      "src": "(: ( [1940,1941]",
      "dest": "(: ( [1940,1941]"
    },
    {
      "src": "identifier: token [1005,1010]",
      "dest": "identifier: token [1005,1010]"
    },
    {
      "src": ",: , [3512,3513]",
      "dest": ",: , [3512,3513]"
    },
    {
      "src": "call_argument [2460,2503]",
      "dest": "call_argument [2460,2503]"
    },
    {
      "src": "primitive_type [2392,2399]",
      "dest": "primitive_type [2392,2399]"
    },
    {
      "src": "call_expression [3826,3845]",
      "dest": "call_expression [3826,3845]"
    },
    {
      "src": "primitive_type [3522,3529]",
      "dest": "primitive_type [3522,3529]"
    },
    {
      "src": "expression_statement [3145,3232]",
      "dest": "expression_statement [3145,3232]"
    },
    {
      "src": ",: , [1135,1136]",
      "dest": ",: , [1135,1136]"
    },
    {
      "src": "identifier: r [3644,3645]",
      "dest": "identifier: r [3644,3645]"
    },
    {
      "src": ",: , [6012,6013]",
      "dest": ",: , [6012,6013]"
    },
    {
      "src": "visibility [4393,4400]",
      "dest": "visibility [4393,4400]"
    },
    {
      "src": ",: , [3535,3536]",
      "dest": ",: , [3535,3536]"
    },
    {
      "src": "identifier: selector [1570,1578]",
      "dest": "identifier: selector [1570,1578]"
    },
    {
      "src": "call_argument [6014,6020]",
      "dest": "call_argument [6014,6020]"
    },
    {
      "src": "(: ( [986,987]",
      "dest": "(: ( [986,987]"
    },
    {
      "src": "uint256: uint256 [1467,1474]",
      "dest": "uint256: uint256 [1467,1474]"
    },
    {
      "src": "primitive_type [3570,3577]",
      "dest": "primitive_type [3570,3577]"
    },
    {
      "src": "solidity_version_comparison_operator [130,132]",
      "dest": "solidity_version_comparison_operator [130,132]"
    },
    {
      "src": "): ) [6021,6022]",
      "dest": "): ) [6021,6022]"
    },
    {
      "src": "\": \" [3894,3895]",
      "dest": "\": \" [3894,3895]"
    },
    {
      "src": "call_argument [2437,2458]",
      "dest": "call_argument [2437,2458]"
    },
    {
      "src": "bytes32: bytes32 [3655,3662]",
      "dest": "bytes32: bytes32 [3655,3662]"
    },
    {
      "src": "identifier: _callOptionalReturn [3145,3164]",
      "dest": "identifier: _callOptionalReturn [3145,3164]"
    },
    {
      "src": "type_cast_expression [1941,1954]",
      "dest": "type_cast_expression [1941,1954]"
    },
    {
      "src": "parameter [2295,2308]",
      "dest": "parameter [2295,2308]"
    },
    {
      "src": "call_argument [1987,1992]",
      "dest": "call_argument [1987,1992]"
    },
    {
      "src": "function_body [4401,4973]",
      "dest": "function_body [4401,4973]"
    },
    {
      "src": "internal: internal [3671,3679]",
      "dest": "internal: internal [3671,3679]"
    },
    {
      "src": ".: . [5994,5995]",
      "dest": ".: . [5994,5995]"
    },
    {
      "src": "=: = [3824,3825]",
      "dest": "=: = [3824,3825]"
    }
  ],
  "actions": []
}