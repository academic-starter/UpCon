{
  "matches": [
    {
      "src": ",: , [30689,30690]",
      "dest": ",: , [36281,36282]"
    },
    {
      "src": "expression_statement [10640,10659]",
      "dest": "expression_statement [11687,11744]"
    },
    {
      "src": "return_type_definition [42789,42804]",
      "dest": "return_type_definition [46042,46057]"
    },
    {
      "src": "primitive_type [13516,13523]",
      "dest": "primitive_type [737,744]"
    },
    {
      "src": "visibility [4124,4132]",
      "dest": "visibility [45435,45443]"
    },
    {
      "src": "identifier: _min [25542,25546]",
      "dest": "identifier: _min [34196,34200]"
    },
    {
      "src": "\": \" [25556,25557]",
      "dest": "\": \" [34210,34211]"
    },
    {
      "src": "identifier: require [35108,35115]",
      "dest": "identifier: require [43058,43065]"
    },
    {
      "src": "binary_expression [23784,23792]",
      "dest": "binary_expression [40345,40351]"
    },
    {
      "src": "call_argument [16683,16688]",
      "dest": "call_argument [5149,5154]"
    },
    {
      "src": "modifier_definition [9663,9747]",
      "dest": "modifier_definition [4586,4702]"
    },
    {
      "src": "identifier: msg [39321,39324]",
      "dest": "identifier: balance [19511,19518]"
    },
    {
      "src": "identifier: _value [23960,23966]",
      "dest": "identifier: amount [41277,41283]"
    },
    {
      "src": "binary_expression [33711,33750]",
      "dest": "binary_expression [45094,45137]"
    },
    {
      "src": "primitive_type [23687,23694]",
      "dest": "primitive_type [32729,32736]"
    },
    {
      "src": "identifier: globalPause_Deprecated [13485,13507]",
      "dest": "identifier: globalPause_Deprecated [706,728]"
    },
    {
      "src": "uint256: uint256 [2684,2691]",
      "dest": "uint256: uint256 [903,910]"
    },
    {
      "src": "identifier: c [10571,10572]",
      "dest": "identifier: amount [16777,16783]"
    },
    {
      "src": "identifier: account [38904,38911]",
      "dest": "identifier: account [40530,40537]"
    },
    {
      "src": "type_name [13215,13222]",
      "dest": "type_name [456,463]"
    },
    {
      "src": "): ) [24829,24830]",
      "dest": "): ) [41283,41284]"
    },
    {
      "src": "returns: returns [3300,3307]",
      "dest": "returns: returns [26994,27001]"
    },
    {
      "src": "expression_statement [25604,25619]",
      "dest": "expression_statement [34283,34298]"
    },
    {
      "src": "): ) [5031,5032]",
      "dest": "): ) [29505,29506]"
    },
    {
      "src": "contract_body [25999,32293]",
      "dest": "contract_body [35919,38777]"
    },
    {
      "src": "identifier: _ [9740,9741]",
      "dest": "identifier: _ [4693,4694]"
    },
    {
      "src": "identifier: initialized [13283,13294]",
      "dest": "identifier: initialized [524,535]"
    },
    {
      "src": "=: = [3914,3915]",
      "dest": "=: = [13031,13032]"
    },
    {
      "src": "identifier: owner [896,901]",
      "dest": "identifier: owner [24545,24550]"
    },
    {
      "src": "identifier: b [10656,10657]",
      "dest": "identifier: b [11704,11705]"
    },
    {
      "src": "uint256: uint256 [12020,12027]",
      "dest": "uint256: uint256 [26233,26240]"
    },
    {
      "src": "): ) [16769,16770]",
      "dest": "): ) [5235,5236]"
    },
    {
      "src": "identifier: _to [40505,40508]",
      "dest": "identifier: account [41936,41943]"
    },
    {
      "src": "pure: pure [11384,11388]",
      "dest": "pure: pure [9991,9995]"
    },
    {
      "src": "identifier: _value [11886,11892]",
      "dest": "identifier: amount [7104,7110]"
    },
    {
      "src": "uint256: uint256 [13717,13724]",
      "dest": "uint256: uint256 [944,951]"
    },
    {
      "src": "identifier: onlyOwner [16449,16458]",
      "dest": "identifier: onlyOwner [4913,4922]"
    },
    {
      "src": "assignment_expression [25604,25618]",
      "dest": "assignment_expression [34283,34297]"
    },
    {
      "src": "): ) [10591,10592]",
      "dest": "): ) [11610,11611]"
    },
    {
      "src": "type_name [17269,17276]",
      "dest": "type_name [31980,31987]"
    },
    {
      "src": "): ) [6014,6015]",
      "dest": "): ) [13684,13685]"
    },
    {
      "src": "call_argument [40127,40137]",
      "dest": "call_argument [28831,28841]"
    },
    {
      "src": "type_name [4857,4864]",
      "dest": "type_name [30107,30114]"
    },
    {
      "src": "call_argument [34203,34225]",
      "dest": "call_argument [41974,42039]"
    },
    {
      "src": "type_name [11173,11180]",
      "dest": "type_name [10863,10870]"
    },
    {
      "src": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [16509,16590]",
      "dest": "comment: /**      * @dev Allows the current owner to set the pendingOwner address.      * @param newOwner The address to transfer ownership to.      */ [4710,4855]"
    },
    {
      "src": "identifier: name_Deprecated [13624,13639]",
      "dest": "identifier: name_Deprecated [848,863]"
    },
    {
      "src": "identifier: value [1189,1194]",
      "dest": "identifier: value [8036,8041]"
    },
    {
      "src": "(: ( [35054,35055]",
      "dest": "(: ( [43146,43147]"
    },
    {
      "src": "binary_expression [40638,40674]",
      "dest": "binary_expression [34833,34850]"
    },
    {
      "src": "function_body [17009,17063]",
      "dest": "function_body [31626,31680]"
    },
    {
      "src": "identifier: _spender [23047,23055]",
      "dest": "identifier: recipient [25505,25514]"
    },
    {
      "src": "primitive_type [513,520]",
      "dest": "primitive_type [5711,5718]"
    },
    {
      "src": "identifier: require [40629,40636]",
      "dest": "identifier: require [34825,34832]"
    },
    {
      "src": ",: , [1000,1001]",
      "dest": ",: , [31110,31111]"
    },
    {
      "src": "return_type_definition [18620,18644]",
      "dest": "return_type_definition [38613,38637]"
    },
    {
      "src": "identifier: to [650,652]",
      "dest": "identifier: to [7781,7783]"
    },
    {
      "src": "{: { [25523,25524]",
      "dest": "{: { [34177,34178]"
    },
    {
      "src": "\": \" [38172,38173]",
      "dest": "\": \" [43917,43918]"
    },
    {
      "src": "identifier: _value [12844,12850]",
      "dest": "identifier: amount [24325,24331]"
    },
    {
      "src": "public: public [13524,13530]",
      "dest": "public: public [745,751]"
    },
    {
      "src": "type_name [18298,18305]",
      "dest": "type_name [23838,23845]"
    },
    {
      "src": "primitive_type [20252,20259]",
      "dest": "primitive_type [805,812]"
    },
    {
      "src": "variable_declaration [22164,22180]",
      "dest": "variable_declaration [10996,11005]"
    },
    {
      "src": "address: address [38888,38895]",
      "dest": "address: address [40514,40521]"
    },
    {
      "src": "{: { [13208,13209]",
      "dest": "{: { [449,450]"
    },
    {
      "src": "sload: sload [31708,31713]",
      "dest": "sload: sload [38461,38466]"
    },
    {
      "src": "call_argument [33719,33722]",
      "dest": "call_argument [45102,45109]"
    },
    {
      "src": "): ) [23700,23701]",
      "dest": "): ) [32742,32743]"
    },
    {
      "src": ".: . [9709,9710]",
      "dest": ".: . [4636,4637]"
    },
    {
      "src": "type_name [40229,40233]",
      "dest": "type_name [41869,41873]"
    },
    {
      "src": "call_expression [4978,5032]",
      "dest": "call_expression [29438,29506]"
    },
    {
      "src": "parameter [976,988]",
      "dest": "parameter [31086,31098]"
    },
    {
      "src": "call_argument [21037,21047]",
      "dest": "call_argument [33492,33502]"
    },
    {
      "src": "yul_function_call [29001,29016]",
      "dest": "yul_function_call [37926,37941]"
    },
    {
      "src": "emit: emit [15803,15807]",
      "dest": "emit: emit [4238,4242]"
    },
    {
      "src": "type_name [22096,22103]",
      "dest": "type_name [25516,25523]"
    },
    {
      "src": ",: , [35133,35134]",
      "dest": ",: , [43088,43089]"
    },
    {
      "src": "identifier: value [662,667]",
      "dest": "identifier: value [7793,7798]"
    },
    {
      "src": "parameter [11173,11182]",
      "dest": "parameter [10863,10872]"
    },
    {
      "src": "function: function [403,411]",
      "dest": "function: function [6310,6318]"
    },
    {
      "src": "primitive_type [22851,22858]",
      "dest": "primitive_type [42946,42953]"
    },
    {
      "src": "variable_declaration [3900,3913]",
      "dest": "variable_declaration [13021,13030]"
    },
    {
      "src": "identifier: _spender [20126,20134]",
      "dest": "identifier: spender [24939,24946]"
    },
    {
      "src": "(: ( [12311,12312]",
      "dest": "(: ( [1354,1355]"
    },
    {
      "src": "(: ( [42887,42888]",
      "dest": "(: ( [46140,46141]"
    },
    {
      "src": "identifier: HasOwner [15454,15462]",
      "dest": "identifier: ClaimableOwnable [3725,3741]"
    },
    {
      "src": "emit: emit [16657,16661]",
      "dest": "emit: emit [5123,5127]"
    },
    {
      "src": "sub: sub [30875,30878]",
      "dest": "sub: sub [36676,36679]"
    },
    {
      "src": "string [42276,42307]",
      "dest": "string [30261,30297]"
    },
    {
      "src": "uint256: uint256 [23739,23746]",
      "dest": "uint256: uint256 [40773,40780]"
    },
    {
      "src": "comment: /**       *@dev send all token balance of an arbitary erc20 token     in the contract to another address     */ [17071,17185]",
      "dest": "comment: /**      * @dev send all token balance of an arbitrary erc20 token      * in the contract to another address      * @param token token to reclaim      * @param _to address to send eth balance to      */ [31688,31895]"
    },
    {
      "src": "pure: pure [10810,10814]",
      "dest": "pure: pure [12948,12952]"
    },
    {
      "src": "primitive_type [10790,10797]",
      "dest": "primitive_type [12900,12907]"
    },
    {
      "src": "primitive_type [10529,10536]",
      "dest": "primitive_type [11325,11332]"
    },
    {
      "src": "type_name [23317,23324]",
      "dest": "type_name [44333,44340]"
    },
    {
      "src": "function_body [42895,42929]",
      "dest": "function_body [46148,46182]"
    },
    {
      "src": "emit_statement [16657,16704]",
      "dest": "emit_statement [5123,5170]"
    },
    {
      "src": "identifier: b [10537,10538]",
      "dest": "identifier: b [11333,11334]"
    },
    {
      "src": "state_mutability [11204,11208]",
      "dest": "state_mutability [10922,10926]"
    },
    {
      "src": "function_definition [10505,10679]",
      "dest": "function_definition [11301,11772]"
    },
    {
      "src": "address: address [23719,23726]",
      "dest": "address: address [40753,40760]"
    },
    {
      "src": "indexed: indexed [620,627]",
      "dest": "indexed: indexed [7751,7758]"
    },
    {
      "src": "primitive_type [15829,15836]",
      "dest": "primitive_type [4264,4271]"
    },
    {
      "src": "identifier: _to [38153,38156]",
      "dest": "identifier: recipient [27856,27865]"
    },
    {
      "src": "state_mutability [43050,43054]",
      "dest": "state_mutability [46328,46332]"
    },
    {
      "src": "parameter [1340,1354]",
      "dest": "parameter [5986,6000]"
    },
    {
      "src": "primitive_type [16424,16431]",
      "dest": "primitive_type [4888,4895]"
    },
    {
      "src": "indexed: indexed [15533,15540]",
      "dest": "indexed: indexed [3981,3988]"
    },
    {
      "src": "uint256: uint256 [32609,32616]",
      "dest": "uint256: uint256 [40358,40365]"
    },
    {
      "src": "yul_function_call [31708,31722]",
      "dest": "yul_function_call [38461,38475]"
    },
    {
      "src": "modifier_invocation [39811,39820]",
      "dest": "modifier_invocation [45444,45453]"
    },
    {
      "src": "external: external [1356,1364]",
      "dest": "external: external [5688,5696]"
    },
    {
      "src": "<: < [33724,33725]",
      "dest": "<: < [45111,45112]"
    },
    {
      "src": "view: view [927,931]",
      "dest": "view: view [5541,5545]"
    },
    {
      "src": "function_definition [16955,17063]",
      "dest": "function_definition [31564,31680]"
    },
    {
      "src": "event_paramater [1133,1154]",
      "dest": "event_paramater [7980,8001]"
    },
    {
      "src": "identifier: require [34237,34244]",
      "dest": "identifier: require [43972,43979]"
    },
    {
      "src": "(: ( [17032,17033]",
      "dest": "(: ( [31649,31650]"
    },
    {
      "src": "): ) [490,491]",
      "dest": "): ) [5686,5687]"
    },
    {
      "src": "call_argument [10647,10657]",
      "dest": "call_argument [11695,11705]"
    },
    {
      "src": "(: ( [887,888]",
      "dest": "(: ( [5529,5530]"
    },
    {
      "src": "return_type_definition [33681,33695]",
      "dest": "return_type_definition [25556,25570]"
    },
    {
      "src": "event_paramater [23687,23700]",
      "dest": "event_paramater [32729,32742]"
    },
    {
      "src": "(: ( [34183,34184]",
      "dest": "(: ( [41927,41928]"
    },
    {
      "src": "visibility [28593,28601]",
      "dest": "visibility [37132,37140]"
    },
    {
      "src": "returns: returns [578,585]",
      "dest": "returns: returns [7536,7543]"
    },
    {
      "src": "type_name [10779,10786]",
      "dest": "type_name [12889,12896]"
    },
    {
      "src": "): ) [28723,28724]",
      "dest": "): ) [37302,37303]"
    },
    {
      "src": "}: } [20184,20185]",
      "dest": "}: } [24984,24985]"
    },
    {
      "src": "type_name [16977,16984]",
      "dest": "type_name [31586,31601]"
    },
    {
      "src": "internal: internal [10540,10548]",
      "dest": "internal: internal [11336,11344]"
    },
    {
      "src": "(: ( [42797,42798]",
      "dest": "(: ( [46050,46051]"
    },
    {
      "src": "type_name [10790,10797]",
      "dest": "type_name [12900,12907]"
    },
    {
      "src": "assembly_statement [27677,28464]",
      "dest": "assembly_statement [36111,36962]"
    },
    {
      "src": "primitive_type [2684,2691]",
      "dest": "primitive_type [903,910]"
    },
    {
      "src": "string [40750,40763]",
      "dest": "string [34766,34813]"
    },
    {
      "src": "yul_evm_builtin [28438,28441]",
      "dest": "yul_evm_builtin [20490,20493]"
    },
    {
      "src": "primitive_type [40960,40964]",
      "dest": "primitive_type [1814,1818]"
    },
    {
      "src": "yul_identifier [30733,30739]",
      "dest": "yul_identifier [36446,36452]"
    },
    {
      "src": "internal: internal [3286,3294]",
      "dest": "internal: internal [15206,15214]"
    },
    {
      "src": "identifier: token [17319,17324]",
      "dest": "identifier: token [32039,32044]"
    },
    {
      "src": "expression_statement [35108,35161]",
      "dest": "expression_statement [43058,43129]"
    },
    {
      "src": "\": \" [41399,41400]",
      "dest": "\": \" [28042,28043]"
    },
    {
      "src": "type_name [654,661]",
      "dest": "type_name [7785,7792]"
    },
    {
      "src": "(: ( [26167,26168]",
      "dest": "(: ( [36051,36052]"
    },
    {
      "src": "address: address [22865,22872]",
      "dest": "address: address [42971,42978]"
    },
    {
      "src": "parameter [1060,1075]",
      "dest": "parameter [24833,24848]"
    },
    {
      "src": "uint256: uint256 [13391,13398]",
      "dest": "uint256: uint256 [616,623]"
    },
    {
      "src": "identifier: sender [15786,15792]",
      "dest": "identifier: sender [4221,4227]"
    },
    {
      "src": "(: ( [11172,11173]",
      "dest": "(: ( [10862,10863]"
    },
    {
      "src": "): ) [38169,38170]",
      "dest": "): ) [27878,27879]"
    },
    {
      "src": "identifier: b [11192,11193]",
      "dest": "identifier: b [10882,10883]"
    },
    {
      "src": "string [2433,2446]",
      "dest": "string [4661,4681]"
    },
    {
      "src": "public: public [13223,13229]",
      "dest": "public: public [464,470]"
    },
    {
      "src": "identifier: increaseApproval [20903,20919]",
      "dest": "identifier: burn [33445,33449]"
    },
    {
      "src": "}: } [42928,42929]",
      "dest": "}: } [46181,46182]"
    },
    {
      "src": "yul_function_call [29041,29044]",
      "dest": "yul_function_call [38015,38020]"
    },
    {
      "src": "identifier: newMax [24760,24766]",
      "dest": "identifier: newMax [33020,33026]"
    },
    {
      "src": "state_variable_declaration [13215,13236]",
      "dest": "state_variable_declaration [456,477]"
    },
    {
      "src": "parameter [23039,23055]",
      "dest": "parameter [25497,25514]"
    },
    {
      "src": "{: { [42805,42806]",
      "dest": "{: { [46058,46059]"
    },
    {
      "src": "): ) [38430,38431]",
      "dest": "): ) [29599,29600]"
    },
    {
      "src": "call_argument [39343,39351]",
      "dest": "call_argument [19505,19509]"
    },
    {
      "src": "\": \" [24939,24940]",
      "dest": "\": \" [41437,41438]"
    },
    {
      "src": "address: address [903,910]",
      "dest": "address: address [24552,24559]"
    },
    {
      "src": "assignment_expression [16745,16770]",
      "dest": "assignment_expression [5211,5236]"
    },
    {
      "src": "event_definition [38859,38930]",
      "dest": "event_definition [40496,40559]"
    },
    {
      "src": "parameter [18595,18609]",
      "dest": "parameter [24850,24864]"
    },
    {
      "src": "primitive_type [33630,33637]",
      "dest": "primitive_type [22679,22686]"
    },
    {
      "src": "call_expression [10640,10658]",
      "dest": "call_expression [11687,11743]"
    },
    {
      "src": "identifier: _value [12028,12034]",
      "dest": "identifier: addedValue [26241,26251]"
    },
    {
      "src": "identifier: ProxyStorage [13195,13207]",
      "dest": "identifier: ProxyStorage [436,448]"
    },
    {
      "src": "address: address [33630,33637]",
      "dest": "address: address [22679,22686]"
    },
    {
      "src": "identifier: _to [33079,33082]",
      "dest": "identifier: account [45149,45156]"
    },
    {
      "src": "type_cast_expression [39335,39352]",
      "dest": "type_cast_expression [19497,19510]"
    },
    {
      "src": "(: ( [39342,39343]",
      "dest": "(: ( [19504,19505]"
    },
    {
      "src": "member_expression [17287,17302]",
      "dest": "member_expression [31998,32013]"
    },
    {
      "src": "event: event [38859,38864]",
      "dest": "event: event [40496,40501]"
    },
    {
      "src": "type_name [3516,3523]",
      "dest": "type_name [28504,28511]"
    },
    {
      "src": "primitive_type [612,619]",
      "dest": "primitive_type [7743,7750]"
    },
    {
      "src": "function_body [17258,17355]",
      "dest": "function_body [31969,32075]"
    },
    {
      "src": "identifier: _addr [12013,12018]",
      "dest": "identifier: target [17911,17917]"
    },
    {
      "src": "uint256: uint256 [17269,17276]",
      "dest": "uint256: uint256 [31980,31987]"
    },
    {
      "src": "(: ( [586,587]",
      "dest": "(: ( [7544,7545]"
    },
    {
      "src": "uint256: uint256 [22883,22890]",
      "dest": "uint256: uint256 [42999,43006]"
    },
    {
      "src": "identifier: require [42158,42165]",
      "dest": "identifier: require [29275,29282]"
    },
    {
      "src": "type_name [9100,9107]",
      "dest": "type_name [5967,5974]"
    },
    {
      "src": "state_variable_declaration [13646,13671]",
      "dest": "state_variable_declaration [870,895]"
    },
    {
      "src": "visibility [23831,23839]",
      "dest": "visibility [41890,41898]"
    },
    {
      "src": "): ) [11247,11248]",
      "dest": "): ) [10984,10985]"
    },
    {
      "src": "identifier: location [30863,30871]",
      "dest": "identifier: location [36664,36672]"
    },
    {
      "src": "string [41052,41065]",
      "dest": "string [27881,27918]"
    },
    {
      "src": "internal: internal [22144,22152]",
      "dest": "internal: internal [18936,18944]"
    },
    {
      "src": "call_argument [35055,35072]",
      "dest": "call_argument [43147,43172]"
    },
    {
      "src": "expression_statement [25534,25569]",
      "dest": "expression_statement [34188,34248]"
    },
    {
      "src": "{: { [31683,31684]",
      "dest": "{: { [38436,38437]"
    },
    {
      "src": "): ) [28451,28452]",
      "dest": "): ) [36949,36950]"
    },
    {
      "src": "type_name [18180,18187]",
      "dest": "type_name [24014,24021]"
    },
    {
      "src": "primitive_type [42888,42893]",
      "dest": "primitive_type [46141,46146]"
    },
    {
      "src": "call_argument [24312,24322]",
      "dest": "call_argument [29385,29395]"
    },
    {
      "src": "identifier: require [24851,24858]",
      "dest": "identifier: require [41315,41322]"
    },
    {
      "src": "assignment_expression [16470,16493]",
      "dest": "assignment_expression [4934,4957]"
    },
    {
      "src": "(: ( [23718,23719]",
      "dest": "(: ( [40752,40753]"
    },
    {
      "src": "number_literal: 0 [39980,39981]",
      "dest": "number_literal: 0 [18456,18457]"
    },
    {
      "src": "visibility [5479,5485]",
      "dest": "visibility [26253,26259]"
    },
    {
      "src": "identifier: _burnFromAllArgs [34889,34905]",
      "dest": "identifier: _transfer [42926,42935]"
    },
    {
      "src": "return: return [42816,42822]",
      "dest": "return: return [46069,46075]"
    },
    {
      "src": "): ) [28254,28255]",
      "dest": "): ) [37734,37735]"
    },
    {
      "src": "primitive_type [33071,33078]",
      "dest": "primitive_type [45141,45148]"
    },
    {
      "src": "call_expression [34237,34289]",
      "dest": "call_expression [43972,44066]"
    },
    {
      "src": "type_name [1477,1484]",
      "dest": "type_name [1593,1600]"
    },
    {
      "src": "function_body [22612,22667]",
      "dest": "function_body [24616,24669]"
    },
    {
      "src": "(: ( [42864,42865]",
      "dest": "(: ( [46117,46118]"
    },
    {
      "src": ",: , [24750,24751]",
      "dest": ",: , [33010,33011]"
    },
    {
      "src": "\": \" [5000,5001]",
      "dest": "\": \" [29469,29470]"
    },
    {
      "src": "{: { [12869,12870]",
      "dest": "{: { [24372,24373]"
    },
    {
      "src": "function_definition [17191,17355]",
      "dest": "function_definition [31901,32075]"
    },
    {
      "src": "call_argument [40025,40033]",
      "dest": "call_argument [28737,28743]"
    },
    {
      "src": "return: return [20166,20172]",
      "dest": "return: return [25761,25767]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/ownership/Claimable.sol [9260,9324]",
      "dest": "comment: /*  * @dev Provides information about the current execution context, including the  * sender of the transaction and its data. While these are generally available  * via msg.sender and msg.data, they should not be accessed in such a direct  * manner, since when dealing with GSN meta-transactions the account sending and  * paying for execution may not be the actual sender (as far as an application  * is concerned).  *  * This contract is only required for intermediate, library-like contracts.  */ [8129,8637]"
    },
    {
      "src": "{: { [1418,1419]",
      "dest": "{: { [1553,1554]"
    },
    {
      "src": "variable_declaration [38211,38223]",
      "dest": "variable_declaration [19950,19962]"
    },
    {
      "src": "primitive_type [13950,13957]",
      "dest": "primitive_type [1177,1184]"
    },
    {
      "src": "primitive_type [16977,16984]",
      "dest": "primitive_type [31586,31601]"
    },
    {
      "src": "parameter [11721,11734]",
      "dest": "parameter [15189,15204]"
    },
    {
      "src": "): ) [31366,31367]",
      "dest": "): ) [37790,37791]"
    },
    {
      "src": "(: ( [38797,38798]",
      "dest": "(: ( [28663,28664]"
    },
    {
      "src": "yul_identifier [30639,30645]",
      "dest": "yul_identifier [36180,36186]"
    },
    {
      "src": "=>: => [13845,13847]",
      "dest": "=>: => [1423,1425]"
    },
    {
      "src": "comment: // File: contracts/modularERC20/BalanceSheet.sol [11474,11522]",
      "dest": "comment: /**  * @dev Collection of functions related to the address type  */ [14488,14557]"
    },
    {
      "src": "uint256: uint256 [11667,11674]",
      "dest": "uint256: uint256 [1078,1085]"
    },
    {
      "src": "(: ( [42774,42775]",
      "dest": "(: ( [46018,46019]"
    },
    {
      "src": ",: , [31407,31408]",
      "dest": ",: , [36835,36836]"
    },
    {
      "src": "modifier_invocation [16999,17008]",
      "dest": "modifier_invocation [31616,31625]"
    },
    {
      "src": "type_name [13894,13922]",
      "dest": "type_name [1122,1149]"
    },
    {
      "src": "(: ( [28590,28591]",
      "dest": "(: ( [37115,37116]"
    },
    {
      "src": "public: public [15756,15762]",
      "dest": "public: public [4191,4197]"
    },
    {
      "src": "return_statement [18200,18225]",
      "dest": "return_statement [24034,24060]"
    },
    {
      "src": "identifier: this [17041,17045]",
      "dest": "identifier: this [31658,31662]"
    },
    {
      "src": "identifier: sender [9710,9716]",
      "dest": "identifier: sender [4637,4643]"
    },
    {
      "src": "function: function [869,877]",
      "dest": "function: function [5509,5517]"
    },
    {
      "src": "\": \" [39866,39867]",
      "dest": "\": \" [44421,44422]"
    },
    {
      "src": "parameter [22550,22562]",
      "dest": "parameter [42421,42436]"
    },
    {
      "src": "identifier: WipeBlacklistedAccount [38865,38887]",
      "dest": "identifier: Blacklisted [40502,40513]"
    },
    {
      "src": "identifier: SetBurnBounds [25634,25647]",
      "dest": "identifier: SetBurnBounds [34313,34326]"
    },
    {
      "src": "yul_variable_declaration [28637,28724]",
      "dest": "yul_variable_declaration [37216,37303]"
    },
    {
      "src": "identifier: transfer [535,543]",
      "dest": "identifier: transferFrom [7463,7475]"
    },
    {
      "src": "identifier: CompliantDepositTokenWithHook [42647,42676]",
      "dest": "identifier: TrueCurrency [45910,45922]"
    },
    {
      "src": "address: address [13242,13249]",
      "dest": "address: address [483,490]"
    },
    {
      "src": "function_definition [10766,11043]",
      "dest": "function_definition [12876,13154]"
    },
    {
      "src": "type_name [13941,13990]",
      "dest": "type_name [1169,1216]"
    },
    {
      "src": "primitive_type [3516,3523]",
      "dest": "primitive_type [28504,28511]"
    },
    {
      "src": "type_name [23739,23746]",
      "dest": "type_name [40773,40780]"
    },
    {
      "src": "): ) [16620,16621]",
      "dest": "): ) [5086,5087]"
    },
    {
      "src": "): ) [29015,29016]",
      "dest": "): ) [37940,37941]"
    },
    {
      "src": "identifier: _allowance [13924,13934]",
      "dest": "identifier: _allowances [1151,1162]"
    },
    {
      "src": "variable_declaration [23121,23141]",
      "dest": "variable_declaration [10025,10034]"
    },
    {
      "src": "type_name [15565,15572]",
      "dest": "type_name [4004,4011]"
    },
    {
      "src": "identifier: _value [3558,3564]",
      "dest": "identifier: amount [27731,27737]"
    },
    {
      "src": "inheritance_specifier [32426,32449]",
      "dest": "inheritance_specifier [40279,40302]"
    },
    {
      "src": "contract_declaration [15445,16781]",
      "dest": "contract_declaration [3716,5247]"
    },
    {
      "src": "(: ( [10778,10779]",
      "dest": "(: ( [12888,12889]"
    },
    {
      "src": "parameter [12005,12018]",
      "dest": "parameter [17903,17917]"
    },
    {
      "src": "string [34264,34288]",
      "dest": "string [44020,44065]"
    },
    {
      "src": "{: { [15763,15764]",
      "dest": "{: { [4198,4199]"
    },
    {
      "src": "{: { [40417,40418]",
      "dest": "{: { [34728,34729]"
    },
    {
      "src": "identifier: balanceOf [11683,11692]",
      "dest": "identifier: _balances [1087,1096]"
    },
    {
      "src": "returns: returns [20084,20091]",
      "dest": "returns: returns [24890,24897]"
    },
    {
      "src": "true [21066,21070]",
      "dest": "true [24973,24977]"
    },
    {
      "src": "): ) [918,919]",
      "dest": "): ) [5530,5531]"
    },
    {
      "src": "internal: internal [11375,11383]",
      "dest": "internal: internal [9982,9990]"
    },
    {
      "src": "bool: bool [41568,41572]",
      "dest": "bool: bool [40539,40543]"
    },
    {
      "src": "(: ( [39320,39321]",
      "dest": "(: ( [19496,19497]"
    },
    {
      "src": "): ) [15838,15839]",
      "dest": "): ) [4273,4274]"
    },
    {
      "src": "uint256: uint256 [1429,1436]",
      "dest": "uint256: uint256 [1564,1571]"
    },
    {
      "src": "type_name [12404,12411]",
      "dest": "type_name [578,585]"
    },
    {
      "src": "}: } [16780,16781]",
      "dest": "}: } [5246,5247]"
    },
    {
      "src": "primitive_type [1477,1484]",
      "dest": "primitive_type [1593,1600]"
    },
    {
      "src": "primitive_type [12818,12825]",
      "dest": "primitive_type [24298,24305]"
    },
    {
      "src": "identifier: priorBalance [18434,18446]",
      "dest": "identifier: length [38408,38414]"
    },
    {
      "src": "/: / [11034,11035]",
      "dest": "/: / [13035,13036]"
    },
    {
      "src": "(: ( [2432,2433]",
      "dest": "(: ( [4632,4633]"
    },
    {
      "src": "identifier: location [28161,28169]",
      "dest": "identifier: location [36491,36499]"
    },
    {
      "src": "event_definition [597,669]",
      "dest": "event_definition [7728,7800]"
    },
    {
      "src": "comment: // File: contracts/ProxyStorage.sol [12939,12974]",
      "dest": "comment: // File: contracts/true-currencies-new/ReclaimerToken.sol [31155,31212]"
    },
    {
      "src": "comment: /**  * @title Standard ERC20 token  *  * @dev Implementation of the basic standard token.  * @dev https://github.com/ethereum/EIPs/issues/20  * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol  */ [18916,19188]",
      "dest": "comment: /**  * @title TrueGBP  * @dev This is the top-level ERC20 contract, but most of the interesting functionality is  * inherited - see the documentation on the corresponding contracts.  */ [45699,45888]"
    },
    {
      "src": "identifier: _value [34184,34190]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [41948,41972]"
    },
    {
      "src": ":=: := [28998,29000]",
      "dest": ":=: := [37923,37925]"
    },
    {
      "src": "true: true [33964,33968]",
      "dest": "true: true [26395,26399]"
    },
    {
      "src": "uint256: uint256 [3550,3557]",
      "dest": "uint256: uint256 [27723,27730]"
    },
    {
      "src": "type_name [18071,18078]",
      "dest": "type_name [10469,10476]"
    },
    {
      "src": "(: ( [31357,31358]",
      "dest": "(: ( [37776,37777]"
    },
    {
      "src": "state_mutability [3295,3299]",
      "dest": "state_mutability [15215,15219]"
    },
    {
      "src": "internal: internal [34950,34958]",
      "dest": "internal: internal [13654,13662]"
    },
    {
      "src": "returns: returns [42965,42972]",
      "dest": "returns: returns [46227,46234]"
    },
    {
      "src": "identifier: from [628,632]",
      "dest": "identifier: from [7759,7763]"
    },
    {
      "src": "sload: sload [30649,30654]",
      "dest": "sload: sload [36190,36195]"
    },
    {
      "src": "uint256: uint256 [39441,39448]",
      "dest": "uint256: uint256 [29231,29238]"
    },
    {
      "src": "address: address [18766,18773]",
      "dest": "address: address [34669,34676]"
    },
    {
      "src": "identifier: owner [16000,16005]",
      "dest": "identifier: owner [4437,4442]"
    },
    {
      "src": "): ) [39895,39896]",
      "dest": "): ) [44466,44467]"
    },
    {
      "src": "parameter [1108,1112]",
      "dest": "parameter [6020,6024]"
    },
    {
      "src": "primitive_type [42686,42691]",
      "dest": "primitive_type [45930,45935]"
    },
    {
      "src": "primitive_type [13914,13921]",
      "dest": "primitive_type [1141,1148]"
    },
    {
      "src": ",: , [25652,25653]",
      "dest": ",: , [34331,34332]"
    },
    {
      "src": "parameter [20972,20976]",
      "dest": "parameter [24366,24370]"
    },
    {
      "src": "): ) [33722,33723]",
      "dest": "): ) [45109,45110]"
    },
    {
      "src": "emit: emit [38407,38411]",
      "dest": "emit: emit [29567,29571]"
    },
    {
      "src": "return_statement [11453,11462]",
      "dest": "return_statement [10112,10121]"
    },
    {
      "src": "indexed: indexed [38896,38903]",
      "dest": "indexed: indexed [40522,40529]"
    },
    {
      "src": "}: } [40840,40841]",
      "dest": "}: } [34987,34988]"
    },
    {
      "src": ",: , [1075,1076]",
      "dest": ",: , [5984,5985]"
    },
    {
      "src": ":=: := [30872,30874]",
      "dest": ":=: := [36673,36675]"
    },
    {
      "src": "(: ( [512,513]",
      "dest": "(: ( [5710,5711]"
    },
    {
      "src": "primitive_type [41228,41235]",
      "dest": "primitive_type [1803,1810]"
    },
    {
      "src": "call_argument [39980,39981]",
      "dest": "call_argument [18456,18457]"
    },
    {
      "src": "identifier: _attribute [4964,4974]",
      "dest": "identifier: _balances [29417,29426]"
    },
    {
      "src": "number_literal: 0 [38806,38807]",
      "dest": "number_literal: 0 [28672,28673]"
    },
    {
      "src": "\": \" [41325,41326]",
      "dest": "\": \" [30180,30181]"
    },
    {
      "src": "yul_block [31369,31483]",
      "dest": "yul_block [36708,36854]"
    },
    {
      "src": "yul_path [28171,28176]",
      "dest": "yul_path [36501,36507]"
    },
    {
      "src": "function_body [9691,9747]",
      "dest": "function_body [4614,4702]"
    },
    {
      "src": "(: ( [28369,28370]",
      "dest": "(: ( [36921,36922]"
    },
    {
      "src": "yul_function_call [31352,31367]",
      "dest": "yul_function_call [37774,37791]"
    },
    {
      "src": "=: = [42710,42711]",
      "dest": "=: = [45954,45955]"
    },
    {
      "src": "+: + [11422,11423]",
      "dest": "+: + [10039,10040]"
    },
    {
      "src": "call_argument [20144,20154]",
      "dest": "call_argument [24925,24937]"
    },
    {
      "src": "false [13457,13462]",
      "dest": "false [678,683]"
    },
    {
      "src": "uint256: uint256 [12422,12429]",
      "dest": "uint256: uint256 [1696,1703]"
    },
    {
      "src": "internal: internal [28593,28601]",
      "dest": "internal: internal [37132,37140]"
    },
    {
      "src": "return_type_definition [1099,1113]",
      "dest": "return_type_definition [6011,6025]"
    },
    {
      "src": "primitive_type [1156,1163]",
      "dest": "primitive_type [8003,8010]"
    },
    {
      "src": "visibility [35577,35585]",
      "dest": "visibility [14297,14305]"
    },
    {
      "src": "address: address [22550,22557]",
      "dest": "address: address [42421,42428]"
    },
    {
      "src": "(: ( [18628,18629]",
      "dest": "(: ( [38621,38622]"
    },
    {
      "src": "function_definition [34880,35477]",
      "dest": "function_definition [42917,43498]"
    },
    {
      "src": "type_cast_expression [38160,38170]",
      "dest": "type_cast_expression [27869,27879]"
    },
    {
      "src": "identifier: SafeMath [10422,10430]",
      "dest": "identifier: SafeMath [9692,9700]"
    },
    {
      "src": "return: return [42906,42912]",
      "dest": "return: return [46159,46165]"
    },
    {
      "src": "call_argument [11241,11247]",
      "dest": "call_argument [10964,10970]"
    },
    {
      "src": "(: ( [35115,35116]",
      "dest": "(: ( [43065,43066]"
    },
    {
      "src": "(: ( [611,612]",
      "dest": "(: ( [7742,7743]"
    },
    {
      "src": "(: ( [42973,42974]",
      "dest": "(: ( [46235,46236]"
    },
    {
      "src": "yul_variable_declaration [28988,29016]",
      "dest": "yul_variable_declaration [37913,37941]"
    },
    {
      "src": "yul_evm_builtin [31708,31713]",
      "dest": "yul_evm_builtin [38461,38466]"
    },
    {
      "src": "yul_evm_builtin [30875,30878]",
      "dest": "yul_evm_builtin [36676,36679]"
    },
    {
      "src": "): ) [21929,21930]",
      "dest": "): ) [45074,45075]"
    },
    {
      "src": "type_name [22231,22238]",
      "dest": "type_name [11659,11666]"
    },
    {
      "src": "(: ( [21013,21014]",
      "dest": "(: ( [33491,33492]"
    },
    {
      "src": "=: = [32651,32652]",
      "dest": "=: = [40400,40401]"
    },
    {
      "src": "(: ( [20971,20972]",
      "dest": "(: ( [24365,24366]"
    },
    {
      "src": "parameter [12836,12850]",
      "dest": "parameter [24317,24331]"
    },
    {
      "src": "(: ( [25647,25648]",
      "dest": "(: ( [34326,34327]"
    },
    {
      "src": "=: = [16720,16721]",
      "dest": "=: = [5186,5187]"
    },
    {
      "src": "primitive_type [39441,39448]",
      "dest": "primitive_type [29231,29238]"
    },
    {
      "src": "call_argument [17334,17337]",
      "dest": "call_argument [32054,32057]"
    },
    {
      "src": "): ) [10657,10658]",
      "dest": "): ) [11742,11743]"
    },
    {
      "src": "): ) [1090,1091]",
      "dest": "): ) [6000,6001]"
    },
    {
      "src": "user_defined_type [15466,15478]",
      "dest": "user_defined_type [3745,3757]"
    },
    {
      "src": ":=: := [30646,30648]",
      "dest": ":=: := [36187,36189]"
    },
    {
      "src": ",: , [34262,34263]",
      "dest": ",: , [44018,44019]"
    },
    {
      "src": "=: = [25612,25613]",
      "dest": "=: = [34291,34292]"
    },
    {
      "src": "primitive_type [38421,38428]",
      "dest": "primitive_type [29590,29597]"
    },
    {
      "src": "parameter [12589,12609]",
      "dest": "parameter [18886,18900]"
    },
    {
      "src": "uint256: uint256 [18426,18433]",
      "dest": "uint256: uint256 [38400,38407]"
    },
    {
      "src": "type_name [13424,13428]",
      "dest": "type_name [645,649]"
    },
    {
      "src": "identifier: newOwner [15581,15589]",
      "dest": "identifier: newOwner [4020,4028]"
    },
    {
      "src": "address: address [6482,6489]",
      "dest": "address: address [1295,1302]"
    },
    {
      "src": "): ) [9171,9172]",
      "dest": "): ) [27794,27795]"
    },
    {
      "src": "internal: internal [20274,20282]",
      "dest": "internal: internal [17938,17946]"
    },
    {
      "src": "string [35074,35096]",
      "dest": "string [43174,43214]"
    },
    {
      "src": "\": \" [2433,2434]",
      "dest": "\": \" [4661,4662]"
    },
    {
      "src": "primitive_type [17269,17276]",
      "dest": "primitive_type [31980,31987]"
    },
    {
      "src": ",: , [20134,20135]",
      "dest": ",: , [24937,24938]"
    },
    {
      "src": ",: , [15554,15555]",
      "dest": ",: , [4002,4003]"
    },
    {
      "src": "assembly: assembly [31674,31682]",
      "dest": "assembly: assembly [38427,38435]"
    },
    {
      "src": "function_body [10833,11043]",
      "dest": "function_body [12971,13154]"
    },
    {
      "src": "function: function [12774,12782]",
      "dest": "function: function [24280,24288]"
    },
    {
      "src": "binary_expression [10585,10591]",
      "dest": "binary_expression [11604,11610]"
    },
    {
      "src": "visibility [16622,16628]",
      "dest": "visibility [5088,5094]"
    },
    {
      "src": "function_definition [20894,21078]",
      "dest": "function_definition [33436,33519]"
    },
    {
      "src": "parameter [22851,22863]",
      "dest": "parameter [42946,42960]"
    },
    {
      "src": "identifier: spender [1068,1075]",
      "dest": "identifier: spender [24841,24848]"
    },
    {
      "src": "): ) [11225,11226]",
      "dest": "): ) [10943,10944]"
    },
    {
      "src": "parameter [447,454]",
      "dest": "parameter [6384,6391]"
    },
    {
      "src": "yul_hex_number: 0xfffff [30741,30748]",
      "dest": "yul_hex_number: 0xfffff [36454,36461]"
    },
    {
      "src": "visibility [42777,42783]",
      "dest": "visibility [46021,46027]"
    },
    {
      "src": "uint256: uint256 [23760,23767]",
      "dest": "uint256: uint256 [40321,40328]"
    },
    {
      "src": "primitive_type [941,948]",
      "dest": "primitive_type [5555,5562]"
    },
    {
      "src": "number_literal: 2 [42747,42748]",
      "dest": "number_literal: 2 [45991,45992]"
    },
    {
      "src": "parameter [42798,42803]",
      "dest": "parameter [46051,46056]"
    },
    {
      "src": "): ) [424,425]",
      "dest": "): ) [6359,6360]"
    },
    {
      "src": "function: function [11340,11348]",
      "dest": "function: function [9947,9955]"
    },
    {
      "src": "number_literal: 0 [16768,16769]",
      "dest": "number_literal: 0 [5234,5235]"
    },
    {
      "src": "visibility [13781,13787]",
      "dest": "visibility [1820,1826]"
    },
    {
      "src": "returns: returns [5491,5498]",
      "dest": "returns: returns [26268,26275]"
    },
    {
      "src": "state_variable_declaration [13717,13767]",
      "dest": "state_variable_declaration [944,994]"
    },
    {
      "src": "string_literal [42276,42307]",
      "dest": "string_literal [30261,30297]"
    },
    {
      "src": "uint256: uint256 [654,661]",
      "dest": "uint256: uint256 [7785,7792]"
    },
    {
      "src": "bool: bool [5500,5504]",
      "dest": "bool: bool [26277,26281]"
    },
    {
      "src": "add: add [29446,29449]",
      "dest": "add: add [37714,37717]"
    },
    {
      "src": ",: , [24876,24877]",
      "dest": ",: , [41346,41347]"
    },
    {
      "src": "{: { [28755,28756]",
      "dest": "{: { [37855,37856]"
    },
    {
      "src": "identifier: newOwner [16485,16493]",
      "dest": "identifier: newOwner [4949,4957]"
    },
    {
      "src": "(: ( [446,447]",
      "dest": "(: ( [6383,6384]"
    },
    {
      "src": "address: address [9162,9169]",
      "dest": "address: address [27785,27792]"
    },
    {
      "src": "identifier: newOwner [9108,9116]",
      "dest": "identifier: recipient [5975,5984]"
    },
    {
      "src": "returns: returns [10815,10822]",
      "dest": "returns: returns [12953,12960]"
    },
    {
      "src": "type_name [23039,23046]",
      "dest": "type_name [25497,25504]"
    },
    {
      "src": "function_body [34959,35477]",
      "dest": "function_body [43047,43498]"
    },
    {
      "src": "(: ( [20092,20093]",
      "dest": "(: ( [24898,24899]"
    },
    {
      "src": "): ) [28753,28754]",
      "dest": "): ) [37386,37387]"
    },
    {
      "src": "parameter [18392,18406]",
      "dest": "parameter [33450,33464]"
    },
    {
      "src": "state_variable_declaration [13874,13935]",
      "dest": "state_variable_declaration [1103,1163]"
    },
    {
      "src": "call_argument [16690,16702]",
      "dest": "call_argument [5156,5168]"
    },
    {
      "src": "parameter [23057,23071]",
      "dest": "parameter [44350,44364]"
    },
    {
      "src": "primitive_type [4723,4730]",
      "dest": "primitive_type [14320,14327]"
    },
    {
      "src": "}: } [15854,15855]",
      "dest": "}: } [4289,4290]"
    },
    {
      "src": "call_argument [40117,40125]",
      "dest": "call_argument [28843,28850]"
    },
    {
      "src": "primitive_type [23739,23746]",
      "dest": "primitive_type [40773,40780]"
    },
    {
      "src": "primitive_type [23663,23670]",
      "dest": "primitive_type [32705,32712]"
    },
    {
      "src": "type_name [15525,15532]",
      "dest": "type_name [3973,3980]"
    },
    {
      "src": "string_literal [35135,35159]",
      "dest": "string_literal [43090,43127]"
    },
    {
      "src": "primitive_type [12020,12027]",
      "dest": "primitive_type [26233,26240]"
    },
    {
      "src": "return_type_definition [20963,20977]",
      "dest": "return_type_definition [24357,24371]"
    },
    {
      "src": "): ) [25009,25010]",
      "dest": "): ) [41517,41518]"
    },
    {
      "src": "parameter [1077,1090]",
      "dest": "parameter [18921,18934]"
    },
    {
      "src": ",: , [28858,28859]",
      "dest": ",: , [37645,37646]"
    },
    {
      "src": "type_name [39578,39585]",
      "dest": "type_name [45419,45426]"
    },
    {
      "src": "identifier: balance [17339,17346]",
      "dest": "identifier: balance [32059,32066]"
    },
    {
      "src": "yul_path [31453,31459]",
      "dest": "yul_path [37417,37423]"
    },
    {
      "src": "identifier: b [11266,11267]",
      "dest": "identifier: b [11012,11013]"
    },
    {
      "src": "state_mutability [11384,11388]",
      "dest": "state_mutability [9991,9995]"
    },
    {
      "src": "false: false [13457,13462]",
      "dest": "false: false [678,683]"
    },
    {
      "src": "uint8: uint8 [42686,42691]",
      "dest": "uint8: uint8 [45930,45935]"
    },
    {
      "src": "primitive_type [20972,20976]",
      "dest": "primitive_type [24366,24370]"
    },
    {
      "src": "number_literal: 0 [15837,15838]",
      "dest": "number_literal: 0 [4272,4273]"
    },
    {
      "src": "identifier: b [11424,11425]",
      "dest": "identifier: b [10041,10042]"
    },
    {
      "src": "external: external [29166,29174]",
      "dest": "external: external [42453,42461]"
    },
    {
      "src": "call_expression [35108,35160]",
      "dest": "call_expression [43058,43128]"
    },
    {
      "src": "returns: returns [21916,21923]",
      "dest": "returns: returns [45061,45068]"
    },
    {
      "src": "primitive_type [1108,1112]",
      "dest": "primitive_type [6020,6024]"
    },
    {
      "src": "identifier: originalTo [38433,38443]",
      "dest": "identifier: account [29581,29588]"
    },
    {
      "src": "primitive_type [42974,42980]",
      "dest": "primitive_type [46236,46242]"
    },
    {
      "src": "identifier: setAllowance [12783,12795]",
      "dest": "identifier: transfer [24289,24297]"
    },
    {
      "src": "yul_identifier [30717,30725]",
      "dest": "yul_identifier [36430,36438]"
    },
    {
      "src": "): ) [18643,18644]",
      "dest": "): ) [38636,38637]"
    },
    {
      "src": "identifier: assert [11432,11438]",
      "dest": "identifier: require [10053,10060]"
    },
    {
      "src": "pragma: pragma [0,6]",
      "dest": "pragma: pragma [5310,5316]"
    },
    {
      "src": "member_expression [17319,17333]",
      "dest": "member_expression [32039,32053]"
    },
    {
      "src": "return_statement [33292,33304]",
      "dest": "return_statement [27160,27172]"
    },
    {
      "src": "==: == [10587,10589]",
      "dest": "==: == [11606,11608]"
    },
    {
      "src": "parameter [5500,5504]",
      "dest": "parameter [26277,26281]"
    },
    {
      "src": "=: = [16758,16759]",
      "dest": "=: = [5224,5225]"
    },
    {
      "src": "(: ( [38152,38153]",
      "dest": "(: ( [27855,27856]"
    },
    {
      "src": "member_expression [39321,39331]",
      "dest": "member_expression [19497,19518]"
    },
    {
      "src": "string_literal [24939,24963]",
      "dest": "string_literal [41437,41484]"
    },
    {
      "src": "uint256: uint256 [22164,22171]",
      "dest": "uint256: uint256 [10996,11003]"
    },
    {
      "src": "(: ( [16767,16768]",
      "dest": "(: ( [5233,5234]"
    },
    {
      "src": "): ) [1194,1195]",
      "dest": "): ) [8041,8042]"
    },
    {
      "src": "\": \" [35074,35075]",
      "dest": "\": \" [43174,43175]"
    },
    {
      "src": "return: return [11453,11459]",
      "dest": "return: return [10112,10118]"
    },
    {
      "src": "(: ( [16976,16977]",
      "dest": "(: ( [31585,31586]"
    },
    {
      "src": "(: ( [31398,31399]",
      "dest": "(: ( [36826,36827]"
    },
    {
      "src": "^:  ^ [15,17]",
      "dest": "^:  ^ [5325,5327]"
    },
    {
      "src": "bool: bool [587,591]",
      "dest": "bool: bool [7545,7549]"
    },
    {
      "src": "primitive_type [13469,13476]",
      "dest": "primitive_type [690,697]"
    },
    {
      "src": "identifier: location [29007,29015]",
      "dest": "identifier: location [37932,37940]"
    },
    {
      "src": "primitive_type [42798,42803]",
      "dest": "primitive_type [46051,46056]"
    },
    {
      "src": "identifier: ReclaimerToken [32395,32409]",
      "dest": "identifier: ReclaimerToken [32480,32494]"
    },
    {
      "src": "function_definition [11340,11467]",
      "dest": "function_definition [9947,10128]"
    },
    {
      "src": "identifier: _balanceOf [13857,13867]",
      "dest": "identifier: finOpSupply_Deprecated [1435,1457]"
    },
    {
      "src": "true: true [33299,33303]",
      "dest": "true: true [27167,27171]"
    },
    {
      "src": "identifier: _tokenHolder [12804,12816]",
      "dest": "identifier: account [23975,23982]"
    },
    {
      "src": "identifier: _value [25003,25009]",
      "dest": "identifier: amount [41511,41517]"
    },
    {
      "src": "uint256: uint256 [11353,11360]",
      "dest": "uint256: uint256 [9960,9967]"
    },
    {
      "src": "string [42207,42220]",
      "dest": "string [29306,29341]"
    },
    {
      "src": "address: address [12312,12319]",
      "dest": "address: address [1355,1362]"
    },
    {
      "src": "primitive_type [4823,4830]",
      "dest": "primitive_type [29214,29221]"
    },
    {
      "src": "): ) [29067,29068]",
      "dest": "): ) [38043,38044]"
    },
    {
      "src": "type_name [23760,23767]",
      "dest": "type_name [40321,40328]"
    },
    {
      "src": "uint256: uint256 [6337,6344]",
      "dest": "uint256: uint256 [12306,12313]"
    },
    {
      "src": "function_definition [31595,31740]",
      "dest": "function_definition [38345,38493]"
    },
    {
      "src": "primitive_type [18426,18433]",
      "dest": "primitive_type [38400,38407]"
    },
    {
      "src": "identifier: index [3908,3913]",
      "dest": "identifier: c [13029,13030]"
    },
    {
      "src": "member_expression [17020,17032]",
      "dest": "member_expression [31637,31649]"
    },
    {
      "src": ".: . [17023,17024]",
      "dest": ".: . [31640,31641]"
    },
    {
      "src": "visibility [18159,18165]",
      "dest": "visibility [23984,23990]"
    },
    {
      "src": "\": \" [41052,41053]",
      "dest": "\": \" [27881,27882]"
    },
    {
      "src": "(: ( [15828,15829]",
      "dest": "(: ( [4263,4264]"
    },
    {
      "src": "expression_statement [9740,9742]",
      "dest": "expression_statement [4693,4695]"
    },
    {
      "src": "identifier: owner [1149,1154]",
      "dest": "identifier: owner [7996,8001]"
    },
    {
      "src": "state_mutability [927,931]",
      "dest": "state_mutability [5541,5545]"
    },
    {
      "src": "gas: gas [29041,29044]",
      "dest": "gas: gas [38015,38018]"
    },
    {
      "src": "(: ( [12291,12292]",
      "dest": "(: ( [1335,1336]"
    },
    {
      "src": "if_statement [10581,10618]",
      "dest": "if_statement [11600,11647]"
    },
    {
      "src": "): ) [41338,41339]",
      "dest": "): ) [30218,30219]"
    },
    {
      "src": "mapping: mapping [12283,12290]",
      "dest": "mapping: mapping [1328,1335]"
    },
    {
      "src": "visibility [31629,31635]",
      "dest": "visibility [38379,38385]"
    },
    {
      "src": "yul_identifier [31453,31459]",
      "dest": "yul_identifier [37417,37423]"
    },
    {
      "src": "string [5000,5002]",
      "dest": "string [29469,29505]"
    },
    {
      "src": "=: = [13539,13540]",
      "dest": "=: = [760,761]"
    },
    {
      "src": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [16249,16391]",
      "dest": "comment: /**      * @dev Modifier throws if called by any account other than the pendingOwner.      */ [4485,4580]"
    },
    {
      "src": "(: ( [42950,42951]",
      "dest": "(: ( [46203,46204]"
    },
    {
      "src": "): ) [33017,33018]",
      "dest": "): ) [15233,15234]"
    },
    {
      "src": "primitive_type [22550,22557]",
      "dest": "primitive_type [42421,42428]"
    },
    {
      "src": "state_mutability [499,503]",
      "dest": "state_mutability [5697,5701]"
    },
    {
      "src": "): ) [16702,16703]",
      "dest": "): ) [5168,5169]"
    },
    {
      "src": "): ) [13921,13922]",
      "dest": "): ) [1148,1149]"
    },
    {
      "src": "binary_expression [40710,40748]",
      "dest": "binary_expression [34747,34764]"
    },
    {
      "src": "identifier: _min [25648,25652]",
      "dest": "identifier: _min [34327,34331]"
    },
    {
      "src": "state_mutability [18284,18288]",
      "dest": "state_mutability [23815,23819]"
    },
    {
      "src": "binary_expression [11262,11267]",
      "dest": "binary_expression [11008,11013]"
    },
    {
      "src": "string_literal [34264,34288]",
      "dest": "string_literal [44020,44065]"
    },
    {
      "src": "identifier: _spender [23339,23347]",
      "dest": "identifier: account [45038,45045]"
    },
    {
      "src": "binary_expression [10647,10657]",
      "dest": "binary_expression [11695,11705]"
    },
    {
      "src": "identifier: this [17303,17307]",
      "dest": "identifier: this [32022,32026]"
    },
    {
      "src": "view: view [18284,18288]",
      "dest": "view: view [23815,23819]"
    },
    {
      "src": "call_argument [24939,24963]",
      "dest": "call_argument [41437,41484]"
    },
    {
      "src": "identifier: b [10632,10633]",
      "dest": "identifier: b [11675,11676]"
    },
    {
      "src": "): ) [1015,1016]",
      "dest": "): ) [31126,31127]"
    },
    {
      "src": "{: { [28622,28623]",
      "dest": "{: { [37161,37162]"
    },
    {
      "src": "expression_statement [15978,16021]",
      "dest": "expression_statement [4415,4458]"
    },
    {
      "src": "): ) [31721,31722]",
      "dest": "): ) [38474,38475]"
    },
    {
      "src": "function_definition [18240,18349]",
      "dest": "function_definition [23785,23885]"
    },
    {
      "src": ",: , [38170,38171]",
      "dest": ",: , [27879,27880]"
    },
    {
      "src": "binary_expression [9706,9732]",
      "dest": "binary_expression [4633,4659]"
    },
    {
      "src": "{: { [18307,18308]",
      "dest": "{: { [23847,23848]"
    },
    {
      "src": "parameter [39578,39592]",
      "dest": "parameter [45419,45433]"
    },
    {
      "src": "call_expression [17020,17055]",
      "dest": "call_expression [31637,31672]"
    },
    {
      "src": "function: function [22531,22539]",
      "dest": "function: function [24518,24526]"
    },
    {
      "src": "primitive_type [23317,23324]",
      "dest": "primitive_type [44333,44340]"
    },
    {
      "src": ",: , [40674,40675]",
      "dest": ",: , [34850,34851]"
    },
    {
      "src": "yul_evm_builtin [29446,29449]",
      "dest": "yul_evm_builtin [37714,37717]"
    },
    {
      "src": "comment: /**  * @title ERC20Basic  * @dev Simpler version of ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/179  */ [245,376]",
      "dest": "comment: /**  * Defines the storage layout of the token implementation contract. Any  * newly declared state variables in future upgrades should be appended  * to the bottom. Never remove state variables from this list, however variables  * can be renamed. Please add _Deprecated to deprecated variables.  */ [121,425]"
    },
    {
      "src": "type_name [3250,3257]",
      "dest": "type_name [15518,15525]"
    },
    {
      "src": "(: ( [40709,40710]",
      "dest": "(: ( [34746,34747]"
    },
    {
      "src": "comment: /**       *@dev send all eth balance in the contract to another address     */ [16869,16949]",
      "dest": "comment: /**      * @dev send all eth balance in the contract to another address      * @param _to address to send eth balance to      */ [31427,31558]"
    },
    {
      "src": "}: } [15200,15201]",
      "dest": "}: } [3400,3401]"
    },
    {
      "src": "type_name [11218,11225]",
      "dest": "type_name [10936,10943]"
    },
    {
      "src": "identifier: burnMax [25604,25611]",
      "dest": "identifier: burnMax [34283,34290]"
    },
    {
      "src": ",: , [28436,28437]",
      "dest": ",: , [36929,36930]"
    },
    {
      "src": "member_expression [15782,15792]",
      "dest": "member_expression [4217,4227]"
    },
    {
      "src": "primitive_type [18392,18399]",
      "dest": "primitive_type [33450,33457]"
    },
    {
      "src": "\": \" [41337,41338]",
      "dest": "\": \" [30217,30218]"
    },
    {
      "src": "primitive_type [1077,1084]",
      "dest": "primitive_type [18921,18928]"
    },
    {
      "src": "assembly_statement [31674,31733]",
      "dest": "assembly_statement [38427,38486]"
    },
    {
      "src": "type_name [13516,13523]",
      "dest": "type_name [737,744]"
    },
    {
      "src": "type_name [634,641]",
      "dest": "type_name [7765,7772]"
    },
    {
      "src": "is: is [15463,15465]",
      "dest": "is: is [3742,3744]"
    },
    {
      "src": "visibility [11894,11900]",
      "dest": "visibility [23808,23814]"
    },
    {
      "src": "type_name [18392,18399]",
      "dest": "type_name [33450,33457]"
    },
    {
      "src": "): ) [11407,11408]",
      "dest": "): ) [10012,10013]"
    },
    {
      "src": "identifier: pendingOwner [16690,16702]",
      "dest": "identifier: pendingOwner [5156,5168]"
    },
    {
      "src": "primitive_type [40411,40415]",
      "dest": "primitive_type [42438,42442]"
    },
    {
      "src": "assembly_statement [28613,29129]",
      "dest": "assembly_statement [37152,38258]"
    },
    {
      "src": "=>: => [12300,12302]",
      "dest": "=>: => [1344,1346]"
    },
    {
      "src": "identifier: offset [31453,31459]",
      "dest": "identifier: offset [37417,37423]"
    },
    {
      "src": ",: , [1154,1155]",
      "dest": ",: , [8001,8002]"
    },
    {
      "src": "): ) [30444,30445]",
      "dest": "): ) [37838,37839]"
    },
    {
      "src": "type_name [23349,23356]",
      "dest": "type_name [43835,43842]"
    },
    {
      "src": "(: ( [40350,40351]",
      "dest": "(: ( [34668,34669]"
    },
    {
      "src": "comment: /**  * @title Ownable  * @dev The Ownable contract has an owner address, and provides basic authorization control  * functions, this simplifies the implementation of \"user permissions\".  */ [8236,8429]",
      "dest": "comment: // File: @openzeppelin/contracts/GSN/Context.sol [8050,8098]"
    },
    {
      "src": "\": \" [40676,40677]",
      "dest": "\": \" [34852,34853]"
    },
    {
      "src": "): ) [13855,13856]",
      "dest": "): ) [1433,1434]"
    },
    {
      "src": "primitive_type [13646,13652]",
      "dest": "primitive_type [870,876]"
    },
    {
      "src": "yul_evm_builtin [31873,31878]",
      "dest": "yul_evm_builtin [38683,38688]"
    },
    {
      "src": "uint256: uint256 [24736,24743]",
      "dest": "uint256: uint256 [32996,33003]"
    },
    {
      "src": "identifier: newMin [24744,24750]",
      "dest": "identifier: newMin [33004,33010]"
    },
    {
      "src": "pure: pure [42874,42878]",
      "dest": "pure: pure [46127,46131]"
    },
    {
      "src": "=>: => [13911,13913]",
      "dest": "=>: => [1138,1140]"
    },
    {
      "src": "event_paramater [1156,1179]",
      "dest": "event_paramater [8003,8026]"
    },
    {
      "src": "yul_function_call [30729,30749]",
      "dest": "yul_function_call [36442,36462]"
    },
    {
      "src": "public: public [42777,42783]",
      "dest": "public: public [46021,46027]"
    },
    {
      "src": "identifier: offset [28641,28647]",
      "dest": "identifier: offset [37220,37226]"
    },
    {
      "src": "identifier: _addedValue [21146,21157]",
      "dest": "identifier: subtractedValue [26962,26977]"
    },
    {
      "src": "type_name [12422,12429]",
      "dest": "type_name [1696,1703]"
    },
    {
      "src": "comment: /**   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).   */ [11049,11156]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [10555,10844]"
    },
    {
      "src": "yul_identifier [30863,30871]",
      "dest": "yul_identifier [36664,36672]"
    },
    {
      "src": "): ) [33082,33083]",
      "dest": "): ) [45156,45157]"
    },
    {
      "src": "parameter [23952,23966]",
      "dest": "parameter [41269,41283]"
    },
    {
      "src": "\": \" [2445,2446]",
      "dest": "\": \" [4680,4681]"
    },
    {
      "src": "primitive_type [23719,23726]",
      "dest": "primitive_type [40753,40760]"
    },
    {
      "src": "number_literal: 0 [13574,13575]",
      "dest": "number_literal: 0 [795,796]"
    },
    {
      "src": "event_paramater [24736,24750]",
      "dest": "event_paramater [32996,33010]"
    },
    {
      "src": "uint256: uint256 [23349,23356]",
      "dest": "uint256: uint256 [43835,43842]"
    },
    {
      "src": "internal: internal [18275,18283]",
      "dest": "internal: internal [8806,8814]"
    },
    {
      "src": "identifier: _value [18603,18609]",
      "dest": "identifier: amount [24858,24864]"
    },
    {
      "src": "identifier: _max [25614,25618]",
      "dest": "identifier: _max [34293,34297]"
    },
    {
      "src": "=>: => [13958,13960]",
      "dest": "=>: => [1185,1187]"
    },
    {
      "src": "): ) [569,570]",
      "dest": "): ) [7525,7526]"
    },
    {
      "src": "<=: <= [25547,25549]",
      "dest": "<=: <= [34201,34203]"
    },
    {
      "src": "}: } [11272,11273]",
      "dest": "}: } [11041,11042]"
    },
    {
      "src": "): ) [12331,12332]",
      "dest": "): ) [1374,1375]"
    },
    {
      "src": "address: address [12818,12825]",
      "dest": "address: address [24298,24305]"
    },
    {
      "src": "identifier: sub [11169,11172]",
      "dest": "identifier: sub [10859,10862]"
    },
    {
      "src": "primitive_type [11364,11371]",
      "dest": "primitive_type [9971,9978]"
    },
    {
      "src": "function: function [17191,17199]",
      "dest": "function: function [31901,31909]"
    },
    {
      "src": "binary_expression [41287,41323]",
      "dest": "binary_expression [30159,30178]"
    },
    {
      "src": "return_type_definition [578,592]",
      "dest": "return_type_definition [7536,7550]"
    },
    {
      "src": "member_expression [21037,21047]",
      "dest": "member_expression [33492,33502]"
    },
    {
      "src": "external: external [6504,6512]",
      "dest": "external: external [7112,7120]"
    },
    {
      "src": "): ) [22580,22581]",
      "dest": "): ) [24567,24568]"
    },
    {
      "src": "identifier: decimals [42766,42774]",
      "dest": "identifier: decimals [46010,46018]"
    },
    {
      "src": ",: , [29051,29052]",
      "dest": ",: , [38027,38028]"
    },
    {
      "src": "event: event [597,602]",
      "dest": "event: event [7728,7733]"
    },
    {
      "src": "call_argument [9170,9171]",
      "dest": "call_argument [27793,27794]"
    },
    {
      "src": "visibility [41976,41984]",
      "dest": "visibility [28537,28545]"
    },
    {
      "src": "type_name [12303,12331]",
      "dest": "type_name [1347,1374]"
    },
    {
      "src": "uint256: uint256 [13914,13921]",
      "dest": "uint256: uint256 [1141,1148]"
    },
    {
      "src": "(: ( [543,544]",
      "dest": "(: ( [7475,7476]"
    },
    {
      "src": "identifier: _spender [12826,12834]",
      "dest": "identifier: recipient [24306,24315]"
    },
    {
      "src": "comment: //flexibility since burning could also be as good as disabled [25268,25329]",
      "dest": "comment: /**      * @dev Change the minimum and maximum amount that can be burned at once.      * Burning may be disabled by setting both to 0 (this will not be done      * under normal operation, but we can't add checks to disallow it without      * losing a lot of flexibility since burning could also be as good as disabled      * by setting the minimum extremely high, and we don't want to lock      * in any particular cap for the minimum)      * @param _min minimum amount that can be burned at once      * @param _max maximum amount that can be burned at once      */ [33527,34101]"
    },
    {
      "src": "type_name [23663,23670]",
      "dest": "type_name [32705,32712]"
    },
    {
      "src": "event_paramater [612,632]",
      "dest": "event_paramater [7743,7763]"
    },
    {
      "src": "visibility [10540,10548]",
      "dest": "visibility [11336,11344]"
    },
    {
      "src": "identifier: offset [31253,31259]",
      "dest": "identifier: offset [36320,36326]"
    },
    {
      "src": "returns: returns [18062,18069]",
      "dest": "returns: returns [10460,10467]"
    },
    {
      "src": "parameter [39441,39455]",
      "dest": "parameter [29231,29245]"
    },
    {
      "src": "identifier: blacklisted [40234,40245]",
      "dest": "identifier: _isBlacklisted [41874,41888]"
    },
    {
      "src": "): ) [28865,28866]",
      "dest": "): ) [37653,37654]"
    },
    {
      "src": "primitive_type [6482,6489]",
      "dest": "primitive_type [1295,1302]"
    },
    {
      "src": "call_expression [40008,40034]",
      "dest": "call_expression [28720,28744]"
    },
    {
      "src": "identifier: offset [28442,28448]",
      "dest": "identifier: offset [36935,36941]"
    },
    {
      "src": "uint256: uint256 [33711,33718]",
      "dest": "uint256: uint256 [45094,45101]"
    },
    {
      "src": "primitive_type [13883,13890]",
      "dest": "primitive_type [1111,1118]"
    },
    {
      "src": "parameter [42974,42980]",
      "dest": "parameter [46236,46249]"
    },
    {
      "src": "yul_identifier [28961,28967]",
      "dest": "yul_identifier [38231,38237]"
    },
    {
      "src": "bool: bool [21925,21929]",
      "dest": "bool: bool [45070,45074]"
    },
    {
      "src": "comment: //Change the minimum and maximum amount that can be burned at once. Burning [25026,25101]",
      "dest": "comment: /**      * @dev Emitted when `value` tokens are burnt from one account (`burner`)      * @param burner address which burned tokens      * @param value amount of tokens burned      */ [32502,32688]"
    },
    {
      "src": "identifier: _max [25654,25658]",
      "dest": "identifier: _max [34333,34337]"
    },
    {
      "src": "primitive_type [40489,40496]",
      "dest": "primitive_type [32014,32021]"
    },
    {
      "src": "{: { [9691,9692]",
      "dest": "{: { [4614,4615]"
    },
    {
      "src": "variable_declaration [17269,17284]",
      "dest": "variable_declaration [31980,31995]"
    },
    {
      "src": "primitive_type [17226,17233]",
      "dest": "primitive_type [31937,31944]"
    },
    {
      "src": "function: function [20026,20034]",
      "dest": "function: function [24816,24824]"
    },
    {
      "src": "function_body [42982,43017]",
      "dest": "function_body [46251,46286]"
    },
    {
      "src": "view: view [22739,22743]",
      "dest": "view: view [8703,8707]"
    },
    {
      "src": "(: ( [20042,20043]",
      "dest": "(: ( [24832,24833]"
    },
    {
      "src": "comment: // File: contracts/ReclaimerToken.sol [16785,16822]",
      "dest": "comment: // File: contracts/true-currencies-new/GasRefund.sol [34995,35047]"
    },
    {
      "src": "uint256: uint256 [10824,10831]",
      "dest": "uint256: uint256 [12962,12969]"
    },
    {
      "src": "call_expression [39313,39353]",
      "dest": "call_expression [19489,19570]"
    },
    {
      "src": "address: address [15525,15532]",
      "dest": "address: address [3973,3980]"
    },
    {
      "src": "visibility [18408,18416]",
      "dest": "visibility [8694,8702]"
    },
    {
      "src": "(: ( [12795,12796]",
      "dest": "(: ( [24297,24298]"
    },
    {
      "src": ",: , [10527,10528]",
      "dest": ",: , [11323,11324]"
    },
    {
      "src": "(: ( [24797,24798]",
      "dest": "(: ( [41251,41252]"
    },
    {
      "src": "identifier: div [10775,10778]",
      "dest": "identifier: div [12885,12888]"
    },
    {
      "src": "gt: gt [28741,28743]",
      "dest": "gt: gt [36627,36629]"
    },
    {
      "src": "type_name [11184,11191]",
      "dest": "type_name [10874,10881]"
    },
    {
      "src": "): ) [26168,26169]",
      "dest": "): ) [36066,36067]"
    },
    {
      "src": "}: } [28463,28464]",
      "dest": "}: } [36961,36962]"
    },
    {
      "src": ".: . [15989,15990]",
      "dest": ".: . [4426,4427]"
    },
    {
      "src": "parameter [6337,6344]",
      "dest": "parameter [12306,12313]"
    },
    {
      "src": "returns: returns [10554,10561]",
      "dest": "returns: returns [11350,11357]"
    },
    {
      "src": "type_name [11353,11360]",
      "dest": "type_name [9960,9967]"
    },
    {
      "src": "primitive_type [9100,9107]",
      "dest": "primitive_type [5967,5974]"
    },
    {
      "src": "type_cast_expression [24312,24322]",
      "dest": "type_cast_expression [29385,29395]"
    },
    {
      "src": "expression_statement [39958,39983]",
      "dest": "expression_statement [28755,28807]"
    },
    {
      "src": "visibility [17239,17247]",
      "dest": "visibility [31950,31958]"
    },
    {
      "src": "primitive_type [23937,23944]",
      "dest": "primitive_type [41252,41259]"
    },
    {
      "src": "(: ( [11240,11241]",
      "dest": "(: ( [10963,10964]"
    },
    {
      "src": "identifier: token [17219,17224]",
      "dest": "identifier: token [31930,31935]"
    },
    {
      "src": "address: address [11656,11663]",
      "dest": "address: address [1067,1074]"
    },
    {
      "src": "identifier: Burn [23658,23662]",
      "dest": "identifier: Burn [32700,32704]"
    },
    {
      "src": "identifier: _tokenHolder [12597,12609]",
      "dest": "identifier: target [18894,18900]"
    },
    {
      "src": "function_definition [43025,43104]",
      "dest": "function_definition [46294,46389]"
    },
    {
      "src": "return_type_definition [11389,11408]",
      "dest": "return_type_definition [9996,10013]"
    },
    {
      "src": "returns: returns [20963,20970]",
      "dest": "returns: returns [24357,24364]"
    },
    {
      "src": "}: } [28470,28471]",
      "dest": "}: } [36968,36969]"
    },
    {
      "src": "): ) [9172,9173]",
      "dest": "): ) [27836,27837]"
    },
    {
      "src": "yul_path [28859,28865]",
      "dest": "yul_path [37647,37653]"
    },
    {
      "src": "yul_function_call [30875,30891]",
      "dest": "yul_function_call [36676,36692]"
    },
    {
      "src": "visibility [10801,10809]",
      "dest": "visibility [12939,12947]"
    },
    {
      "src": "{: { [10574,10575]",
      "dest": "{: { [11368,11369]"
    },
    {
      "src": "identifier: b [10798,10799]",
      "dest": "identifier: b [12908,12909]"
    },
    {
      "src": "identifier: a [11444,11445]",
      "dest": "identifier: a [10066,10067]"
    },
    {
      "src": "primitive_type [42721,42726]",
      "dest": "primitive_type [45965,45970]"
    },
    {
      "src": "(: ( [975,976]",
      "dest": "(: ( [31085,31086]"
    },
    {
      "src": "state_variable_declaration [12283,12352]",
      "dest": "state_variable_declaration [1328,1401]"
    },
    {
      "src": "primitive_type [13549,13556]",
      "dest": "primitive_type [770,777]"
    },
    {
      "src": "call_argument [41399,41412]",
      "dest": "call_argument [28042,28082]"
    },
    {
      "src": "else: else [35249,35253]",
      "dest": "else: else [43417,43421]"
    },
    {
      "src": "returns: returns [18620,18627]",
      "dest": "returns: returns [38613,38620]"
    },
    {
      "src": "identifier: c [10647,10648]",
      "dest": "identifier: c [11695,11696]"
    },
    {
      "src": "string_literal [40676,40689]",
      "dest": "string_literal [34852,34901]"
    },
    {
      "src": "state_variable_declaration [13828,13868]",
      "dest": "state_variable_declaration [1407,1458]"
    },
    {
      "src": "(: ( [23662,23663]",
      "dest": "(: ( [32704,32705]"
    },
    {
      "src": "(: ( [43040,43041]",
      "dest": "(: ( [46309,46310]"
    },
    {
      "src": "string [40676,40689]",
      "dest": "string [34852,34901]"
    },
    {
      "src": "public: public [42867,42873]",
      "dest": "public: public [46120,46126]"
    },
    {
      "src": "identifier: onlyOwner [17541,17550]",
      "dest": "identifier: onlyOwner [41294,41303]"
    },
    {
      "src": "user_defined_type [32395,32409]",
      "dest": "user_defined_type [32480,32494]"
    },
    {
      "src": "{: { [16646,16647]",
      "dest": "{: { [5112,5113]"
    },
    {
      "src": "\": \" [35135,35136]",
      "dest": "\": \" [43090,43091]"
    },
    {
      "src": "return_type_definition [42965,42981]",
      "dest": "return_type_definition [46227,46250]"
    },
    {
      "src": "returns: returns [438,445]",
      "dest": "returns: returns [6375,6382]"
    },
    {
      "src": "identifier: mul [10514,10517]",
      "dest": "identifier: mul [11310,11313]"
    },
    {
      "src": "{: { [16459,16460]",
      "dest": "{: { [4923,4924]"
    },
    {
      "src": "identifier: require [25534,25541]",
      "dest": "identifier: require [34188,34195]"
    },
    {
      "src": "add: add [30729,30732]",
      "dest": "add: add [36442,36445]"
    },
    {
      "src": "primitive_type [23349,23356]",
      "dest": "primitive_type [43835,43842]"
    },
    {
      "src": "primitive_type [23760,23767]",
      "dest": "primitive_type [40321,40328]"
    },
    {
      "src": "bool: bool [33690,33694]",
      "dest": "bool: bool [25565,25569]"
    },
    {
      "src": "primitive_type [12589,12596]",
      "dest": "primitive_type [18886,18893]"
    },
    {
      "src": "return: return [18318,18324]",
      "dest": "return: return [23858,23864]"
    },
    {
      "src": "}: } [1529,1530]",
      "dest": "}: } [1613,1614]"
    },
    {
      "src": "address: address [41138,41145]",
      "dest": "address: address [1758,1765]"
    },
    {
      "src": "identifier: _value [4865,4871]",
      "dest": "identifier: amount [30115,30121]"
    },
    {
      "src": "{: { [16862,16863]",
      "dest": "{: { [31420,31421]"
    },
    {
      "src": "primitive_type [6461,6468]",
      "dest": "primitive_type [31112,31119]"
    },
    {
      "src": "): ) [6344,6345]",
      "dest": "): ) [12313,12314]"
    },
    {
      "src": "expression_statement [40701,40765]",
      "dest": "expression_statement [34739,34815]"
    },
    {
      "src": "return_statement [11255,11268]",
      "dest": "return_statement [11026,11035]"
    },
    {
      "src": "=: = [17285,17286]",
      "dest": "=: = [31996,31997]"
    },
    {
      "src": "visibility [33674,33680]",
      "dest": "visibility [25532,25538]"
    },
    {
      "src": "state_variable_declaration [13773,13820]",
      "dest": "state_variable_declaration [1000,1051]"
    },
    {
      "src": "(: ( [18260,18261]",
      "dest": "(: ( [23805,23806]"
    },
    {
      "src": "{: { [34959,34960]",
      "dest": "{: { [43047,43048]"
    },
    {
      "src": "identifier: burnMin [25579,25586]",
      "dest": "identifier: burnMin [34258,34265]"
    },
    {
      "src": "(: ( [28328,28329]",
      "dest": "(: ( [36629,36630]"
    },
    {
      "src": "state_variable_declaration [11647,11693]",
      "dest": "state_variable_declaration [1059,1097]"
    },
    {
      "src": "yul_path [30436,30444]",
      "dest": "yul_path [37827,37835]"
    },
    {
      "src": "type_name [11398,11405]",
      "dest": "type_name [19728,19735]"
    },
    {
      "src": "yul_path [28442,28448]",
      "dest": "yul_path [36935,36941]"
    },
    {
      "src": "mapping: mapping [13941,13948]",
      "dest": "mapping: mapping [1169,1176]"
    },
    {
      "src": "type_name [6461,6468]",
      "dest": "type_name [31112,31119]"
    },
    {
      "src": "(: ( [38167,38168]",
      "dest": "(: ( [27876,27877]"
    },
    {
      "src": "yul_function_call [28957,28971]",
      "dest": "yul_function_call [38227,38246]"
    },
    {
      "src": "\": \" [42075,42076]",
      "dest": "\": \" [28628,28629]"
    },
    {
      "src": "yul_path [31358,31366]",
      "dest": "yul_path [37777,37785]"
    },
    {
      "src": "): ) [28452,28453]",
      "dest": "): ) [36950,36951]"
    },
    {
      "src": "identifier: paused_Deprecated [13437,13454]",
      "dest": "identifier: paused_Deprecated [658,675]"
    },
    {
      "src": "): ) [3313,3314]",
      "dest": "): ) [27007,27008]"
    },
    {
      "src": "uint256: uint256 [10518,10525]",
      "dest": "uint256: uint256 [11314,11321]"
    },
    {
      "src": "yul_function_call [28363,28453]",
      "dest": "yul_function_call [36915,36951]"
    },
    {
      "src": "call_expression [42158,42221]",
      "dest": "call_expression [29275,29342]"
    },
    {
      "src": "public: public [18159,18165]",
      "dest": "public: public [23984,23990]"
    },
    {
      "src": "call_expression [35047,35097]",
      "dest": "call_expression [43139,43215]"
    },
    {
      "src": "state_mutability [18166,18170]",
      "dest": "state_mutability [23991,23995]"
    },
    {
      "src": "uint256: uint256 [11218,11225]",
      "dest": "uint256: uint256 [10936,10943]"
    },
    {
      "src": "(: ( [38805,38806]",
      "dest": "(: ( [28671,28672]"
    },
    {
      "src": "primitive_type [12836,12843]",
      "dest": "primitive_type [24317,24324]"
    },
    {
      "src": "): ) [28591,28592]",
      "dest": "): ) [37130,37131]"
    },
    {
      "src": "identifier: ROUNDING [42736,42744]",
      "dest": "identifier: ROUNDING [45980,45988]"
    },
    {
      "src": "(: ( [16619,16620]",
      "dest": "(: ( [5085,5086]"
    },
    {
      "src": "yul_decimal_number: 0 [29056,29057]",
      "dest": "yul_decimal_number: 0 [38032,38033]"
    },
    {
      "src": ",: , [34932,34933]",
      "dest": ",: , [42988,42989]"
    },
    {
      "src": "address: address [38798,38805]",
      "dest": "address: address [28664,28671]"
    },
    {
      "src": "uint256: uint256 [11398,11405]",
      "dest": "uint256: uint256 [19728,19735]"
    },
    {
      "src": "comment: /**  * @title Basic token  * @dev Basic version of StandardToken, with no allowances.  */ [17707,17799]",
      "dest": "comment: /**  * @title TrueCurrency  * @dev TrueCurrency is an ERC20 with blacklist & redemption addresses  *  * TrueCurrency is a compliant stablecoin with blacklist and redemption  * addresses. Only the owner can blacklist accounts. Redemption addresses  * are assigned automatically to the first 0x100000 addresses. Sending  * tokens to the redemption address will trigger a burn operation. Only  * the owner can mint or blacklist accounts.  *  * This contract is owned by the TokenController, which manages token  * minting & admin functionality. See TokenController.sol  *  * See also: BurnableTokenWithBounds.sol  *  * ~~~~ Features ~~~~  *  * Redemption Addresses  * - The first 0x100000 addresses are redemption addresses  * - Tokens sent to redemption addresses are burned  * - Redemptions are tracked off-chain  * - Cannot mint tokens to redemption addresses  *  * Blacklist  * - Owner can blacklist accounts in accordance with local regulatory bodies  * - Only a court order will merit a blacklist; blacklisting is extremely rare  *  * Burn Bounds & CanBurn  * - Owner can set min & max burn amounts  * - Only accounts flagged in canBurn are allowed to burn tokens  * - canBurn prevents tokens from being sent to the incorrect address  *  * Reclaimer Token  * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner  */ [38867,40243]"
    },
    {
      "src": "uint256: uint256 [23815,23822]",
      "dest": "uint256: uint256 [36052,36059]"
    },
    {
      "src": "visibility [31787,31793]",
      "dest": "visibility [38601,38607]"
    },
    {
      "src": "identifier: assert [11234,11240]",
      "dest": "identifier: require [10956,10963]"
    },
    {
      "src": "yul_function_call [28438,28452]",
      "dest": "yul_function_call [36931,36950]"
    },
    {
      "src": "=: = [25587,25588]",
      "dest": "=: = [34266,34267]"
    },
    {
      "src": "call_expression [38145,38200]",
      "dest": "call_expression [27848,27919]"
    },
    {
      "src": "type_name [13828,13856]",
      "dest": "type_name [1407,1434]"
    },
    {
      "src": "primitive_type [23121,23128]",
      "dest": "primitive_type [10025,10032]"
    },
    {
      "src": "): ) [35206,35207]",
      "dest": "): ) [43262,43263]"
    },
    {
      "src": "{: { [42677,42678]",
      "dest": "{: { [45923,45924]"
    },
    {
      "src": "library: library [10414,10421]",
      "dest": "library: library [9684,9691]"
    },
    {
      "src": "boolean_literal [22024,22028]",
      "dest": "boolean_literal [24443,24447]"
    },
    {
      "src": "function_definition [18126,18232]",
      "dest": "function_definition [23948,24067]"
    },
    {
      "src": "yul_decimal_number: 0 [29101,29102]",
      "dest": "yul_decimal_number: 0 [38119,38120]"
    },
    {
      "src": "struct_member [1477,1495]",
      "dest": "struct_member [1593,1607]"
    },
    {
      "src": "(: ( [34905,34906]",
      "dest": "(: ( [42935,42936]"
    },
    {
      "src": "type_name [19267,19274]",
      "dest": "type_name [22647,22654]"
    },
    {
      "src": "function_definition [25453,25667]",
      "dest": "function_definition [34107,34346]"
    },
    {
      "src": "call_argument [25654,25658]",
      "dest": "call_argument [34333,34337]"
    },
    {
      "src": "}: } [42838,42839]",
      "dest": "}: } [46091,46092]"
    },
    {
      "src": "type_name [4723,4730]",
      "dest": "type_name [14320,14327]"
    },
    {
      "src": "parameter [11736,11750]",
      "dest": "parameter [7511,7525]"
    },
    {
      "src": "function: function [954,962]",
      "dest": "function: function [31056,31064]"
    },
    {
      "src": "primitive_type [32609,32616]",
      "dest": "primitive_type [40358,40365]"
    },
    {
      "src": "external: external [7125,7133]",
      "dest": "external: external [6002,6010]"
    },
    {
      "src": "true [20173,20177]",
      "dest": "true [25768,25772]"
    },
    {
      "src": "identifier: msg [9706,9709]",
      "dest": "identifier: msg [4633,4636]"
    },
    {
      "src": "yul_path [29046,29051]",
      "dest": "yul_path [38022,38027]"
    },
    {
      "src": "}: } [22666,22667]",
      "dest": "}: } [24668,24669]"
    },
    {
      "src": "<=: <= [11243,11245]",
      "dest": "<=: <= [10966,10968]"
    },
    {
      "src": "): ) [667,668]",
      "dest": "): ) [7798,7799]"
    },
    {
      "src": "(: ( [30435,30436]",
      "dest": "(: ( [37826,37827]"
    },
    {
      "src": ",: , [23685,23686]",
      "dest": ",: , [32727,32728]"
    },
    {
      "src": "uint256: uint256 [11184,11191]",
      "dest": "uint256: uint256 [10874,10881]"
    },
    {
      "src": "identifier: _value [18788,18794]",
      "dest": "identifier: amount [34694,34700]"
    },
    {
      "src": "identifier: transfer [17024,17032]",
      "dest": "identifier: transfer [31641,31649]"
    },
    {
      "src": "address: address [12611,12618]",
      "dest": "address: address [19368,19375]"
    },
    {
      "src": ",: , [42205,42206]",
      "dest": ",: , [29304,29305]"
    },
    {
      "src": "address: address [41228,41235]",
      "dest": "address: address [1803,1810]"
    },
    {
      "src": "}: } [10678,10679]",
      "dest": "}: } [11771,11772]"
    },
    {
      "src": "state_mutability [42874,42878]",
      "dest": "state_mutability [46127,46131]"
    },
    {
      "src": "{: { [20099,20100]",
      "dest": "{: { [24905,24906]"
    },
    {
      "src": "modifier_invocation [39188,39197]",
      "dest": "modifier_invocation [41899,41908]"
    },
    {
      "src": "identifier: Mint [23714,23718]",
      "dest": "identifier: Mint [40748,40752]"
    },
    {
      "src": "(: ( [18144,18145]",
      "dest": "(: ( [23966,23967]"
    },
    {
      "src": "): ) [40147,40148]",
      "dest": "): ) [28858,28859]"
    },
    {
      "src": ",: , [17337,17338]",
      "dest": ",: , [32057,32058]"
    },
    {
      "src": "bool: bool [20093,20097]",
      "dest": "bool: bool [24899,24903]"
    },
    {
      "src": "(: ( [13969,13970]",
      "dest": "(: ( [1195,1196]"
    },
    {
      "src": "expression_statement [39993,40035]",
      "dest": "expression_statement [28705,28745]"
    },
    {
      "src": "): ) [30748,30749]",
      "dest": "): ) [36461,36462]"
    },
    {
      "src": "if: if [35171,35173]",
      "dest": "if: if [43228,43230]"
    },
    {
      "src": "identifier: c [10672,10673]",
      "dest": "identifier: c [11763,11764]"
    },
    {
      "src": "type_name [32609,32616]",
      "dest": "type_name [40358,40365]"
    },
    {
      "src": "identifier: GasRefundToken [25968,25982]",
      "dest": "identifier: GasRefund [35909,35918]"
    },
    {
      "src": "type_name [20972,20976]",
      "dest": "type_name [24366,24370]"
    },
    {
      "src": "internal: internal [41976,41984]",
      "dest": "internal: internal [28537,28545]"
    },
    {
      "src": ",: , [29060,29061]",
      "dest": ",: , [38036,38037]"
    },
    {
      "src": "identifier: _value [4992,4998]",
      "dest": "identifier: amount [29461,29467]"
    },
    {
      "src": "address: address [23025,23032]",
      "dest": "address: address [25481,25488]"
    },
    {
      "src": "indexed: indexed [23671,23678]",
      "dest": "indexed: indexed [32713,32720]"
    },
    {
      "src": "string [39866,39895]",
      "dest": "string [44421,44466]"
    },
    {
      "src": "identifier: _value [39449,39455]",
      "dest": "identifier: amount [29239,29245]"
    },
    {
      "src": "visibility [13524,13530]",
      "dest": "visibility [745,751]"
    },
    {
      "src": "comment: /**       A buffer of \"Sheep\" runs from 0xffff...fffe down       They suicide when you call them, if you are their parent     */ [26008,26139]",
      "dest": "comment: /**      * @dev Refund 15,000 gas per slot.      * @param amount number of slots to free      */ [35926,36025]"
    },
    {
      "src": "modifier_definition [15946,16040]",
      "dest": "modifier_definition [4383,4477]"
    },
    {
      "src": "uint256: uint256 [1340,1347]",
      "dest": "uint256: uint256 [5986,5993]"
    },
    {
      "src": "call_argument [40638,40674]",
      "dest": "call_argument [34833,34850]"
    },
    {
      "src": ",: , [29063,29064]",
      "dest": ",: , [38039,38040]"
    },
    {
      "src": "type_name [17226,17233]",
      "dest": "type_name [31937,31944]"
    },
    {
      "src": "parameter [10529,10538]",
      "dest": "parameter [11325,11334]"
    },
    {
      "src": "visibility [34950,34958]",
      "dest": "visibility [13654,13662]"
    },
    {
      "src": "): ) [28176,28177]",
      "dest": "): ) [36507,36508]"
    },
    {
      "src": "primitive_type [479,486]",
      "dest": "primitive_type [7492,7499]"
    },
    {
      "src": "primitive_type [24736,24743]",
      "dest": "primitive_type [32996,33003]"
    },
    {
      "src": "identifier: b [11036,11037]",
      "dest": "identifier: b [13037,13038]"
    },
    {
      "src": "type_name [24752,24759]",
      "dest": "type_name [33012,33019]"
    },
    {
      "src": "state_mutability [10810,10814]",
      "dest": "state_mutability [12948,12952]"
    },
    {
      "src": "): ) [25658,25659]",
      "dest": "): ) [34337,34338]"
    },
    {
      "src": "call_argument [9706,9732]",
      "dest": "call_argument [4633,4659]"
    },
    {
      "src": "primitive_type [40229,40233]",
      "dest": "primitive_type [41869,41873]"
    },
    {
      "src": "internal: internal [18408,18416]",
      "dest": "internal: internal [8694,8702]"
    },
    {
      "src": "identifier: SafeMath [19254,19262]",
      "dest": "identifier: SafeMath [22634,22642]"
    },
    {
      "src": "identifier: msg [15986,15989]",
      "dest": "identifier: msg [4423,4426]"
    },
    {
      "src": "expression_statement [11234,11249]",
      "dest": "expression_statement [10956,10986]"
    },
    {
      "src": "type_name [23952,23959]",
      "dest": "type_name [41269,41276]"
    },
    {
      "src": "(: ( [15836,15837]",
      "dest": "(: ( [4271,4272]"
    },
    {
      "src": "identifier: require [39313,39320]",
      "dest": "identifier: require [19489,19496]"
    },
    {
      "src": "uint8: uint8 [42798,42803]",
      "dest": "uint8: uint8 [46051,46056]"
    },
    {
      "src": "primitive_type [13424,13428]",
      "dest": "primitive_type [645,649]"
    },
    {
      "src": "): ) [520,521]",
      "dest": "): ) [5718,5719]"
    },
    {
      "src": "yul_function_call [30430,30445]",
      "dest": "yul_function_call [37823,37839]"
    },
    {
      "src": "call_argument [38168,38169]",
      "dest": "call_argument [27877,27878]"
    },
    {
      "src": "identifier: location [28329,28337]",
      "dest": "identifier: location [36630,36638]"
    },
    {
      "src": "primitive_type [21925,21929]",
      "dest": "primitive_type [45070,45074]"
    },
    {
      "src": "primitive_type [38888,38895]",
      "dest": "primitive_type [40514,40521]"
    },
    {
      "src": "yul_decimal_number: 0 [29062,29063]",
      "dest": "yul_decimal_number: 0 [38038,38039]"
    },
    {
      "src": "identifier: balanceOf [17293,17302]",
      "dest": "identifier: balanceOf [32004,32013]"
    },
    {
      "src": "{: { [10431,10432]",
      "dest": "{: { [9701,9702]"
    },
    {
      "src": "block_statement [10593,10618]",
      "dest": "block_statement [11612,11647]"
    },
    {
      "src": "): ) [18273,18274]",
      "dest": "): ) [23806,23807]"
    },
    {
      "src": "type_name [12283,12332]",
      "dest": "type_name [1328,1375]"
    },
    {
      "src": "type_name [40411,40415]",
      "dest": "type_name [42438,42442]"
    },
    {
      "src": "type_cast_expression [10235,10245]",
      "dest": "type_cast_expression [28584,28594]"
    },
    {
      "src": "type_name [18426,18433]",
      "dest": "type_name [38400,38407]"
    },
    {
      "src": "{: { [28602,28603]",
      "dest": "{: { [37141,37142]"
    },
    {
      "src": ":=: := [30726,30728]",
      "dest": ":=: := [36439,36441]"
    },
    {
      "src": "function: function [26147,26155]",
      "dest": "function: function [36031,36039]"
    },
    {
      "src": "identifier: balance [17277,17284]",
      "dest": "identifier: balance [31988,31995]"
    },
    {
      "src": "**: ** [23787,23789]",
      "dest": "**: ** [40347,40349]"
    },
    {
      "src": "call_expression [39832,39896]",
      "dest": "call_expression [44395,44467]"
    },
    {
      "src": ",: , [24813,24814]",
      "dest": ",: , [41267,41268]"
    },
    {
      "src": "): ) [11193,11194]",
      "dest": "): ) [10911,10912]"
    },
    {
      "src": "call_expression [38762,38817]",
      "dest": "call_expression [28643,28692]"
    },
    {
      "src": "): ) [38199,38200]",
      "dest": "): ) [27918,27919]"
    },
    {
      "src": "call_argument [39321,39352]",
      "dest": "call_argument [19497,19527]"
    },
    {
      "src": "function_definition [42847,42929]",
      "dest": "function_definition [46100,46182]"
    },
    {
      "src": "uint256: uint256 [1181,1188]",
      "dest": "uint256: uint256 [8028,8035]"
    },
    {
      "src": "modifier_invocation [17541,17550]",
      "dest": "modifier_invocation [41294,41303]"
    },
    {
      "src": "internal: internal [42133,42141]",
      "dest": "internal: internal [30123,30131]"
    },
    {
      "src": "(: ( [13949,13950]",
      "dest": "(: ( [1176,1177]"
    },
    {
      "src": "(: ( [30732,30733]",
      "dest": "(: ( [36445,36446]"
    },
    {
      "src": "visibility [11195,11203]",
      "dest": "visibility [10913,10921]"
    },
    {
      "src": "uint256: uint256 [12323,12330]",
      "dest": "uint256: uint256 [1366,1373]"
    },
    {
      "src": "primitive_type [23039,23046]",
      "dest": "primitive_type [25497,25504]"
    },
    {
      "src": "function_definition [869,950]",
      "dest": "function_definition [5509,5564]"
    },
    {
      "src": "pop: pop [29032,29035]",
      "dest": "pop: pop [38006,38009]"
    },
    {
      "src": "primitive_type [18180,18187]",
      "dest": "primitive_type [24014,24021]"
    },
    {
      "src": "variable_declaration_statement [22231,22248]",
      "dest": "variable_declaration_statement [11659,11677]"
    },
    {
      "src": "primitive_type [20093,20097]",
      "dest": "primitive_type [24899,24903]"
    },
    {
      "src": "public: public [32997,33003]",
      "dest": "public: public [26979,26985]"
    },
    {
      "src": "returns: returns [504,511]",
      "dest": "returns: returns [5702,5709]"
    },
    {
      "src": "identifier: owner [13230,13235]",
      "dest": "identifier: owner [471,476]"
    },
    {
      "src": "type_name [11721,11728]",
      "dest": "type_name [15189,15196]"
    },
    {
      "src": "): ) [20154,20155]",
      "dest": "): ) [24954,24955]"
    },
    {
      "src": "parameter [16977,16988]",
      "dest": "parameter [31586,31605]"
    },
    {
      "src": "parameter [22865,22881]",
      "dest": "parameter [42971,42988]"
    },
    {
      "src": "primitive_type [3309,3313]",
      "dest": "primitive_type [27003,27007]"
    },
    {
      "src": "identifier: _who [22558,22562]",
      "dest": "identifier: account [42429,42436]"
    },
    {
      "src": "sstore: sstore [28363,28369]",
      "dest": "sstore: sstore [36915,36921]"
    },
    {
      "src": "(: ( [11655,11656]",
      "dest": "(: ( [1066,1067]"
    },
    {
      "src": "identifier: newOwner [9150,9158]",
      "dest": "identifier: sender [27775,27781]"
    },
    {
      "src": "parameter [18180,18187]",
      "dest": "parameter [24014,24021]"
    },
    {
      "src": "identifier: require [9142,9149]",
      "dest": "identifier: require [27767,27774]"
    },
    {
      "src": "function: function [42937,42945]",
      "dest": "function: function [46190,46198]"
    },
    {
      "src": "expression_statement [4947,5033]",
      "dest": "expression_statement [29417,29507]"
    },
    {
      "src": "type_name [13242,13249]",
      "dest": "type_name [483,490]"
    },
    {
      "src": "return_statement [11025,11038]",
      "dest": "return_statement [13138,13147]"
    },
    {
      "src": "parameter [10563,10572]",
      "dest": "parameter [16769,16783]"
    },
    {
      "src": "function_body [16646,16778]",
      "dest": "function_body [5112,5244]"
    },
    {
      "src": "address: address [40489,40496]",
      "dest": "address: address [32014,32021]"
    },
    {
      "src": "identifier: oldValue [40025,40033]",
      "dest": "identifier: amount [28737,28743]"
    },
    {
      "src": "type_name [12323,12330]",
      "dest": "type_name [1366,1373]"
    },
    {
      "src": "parameter [23937,23950]",
      "dest": "parameter [41252,41267]"
    },
    {
      "src": "external: external [6996,7004]",
      "dest": "external: external [6361,6369]"
    },
    {
      "src": "identifier: spender [1172,1179]",
      "dest": "identifier: spender [8019,8026]"
    },
    {
      "src": "yul_identifier [30879,30887]",
      "dest": "yul_identifier [36680,36688]"
    },
    {
      "src": "identifier: Transfer [38412,38420]",
      "dest": "identifier: Transfer [29572,29580]"
    },
    {
      "src": "call_argument [21014,21022]",
      "dest": "call_argument [33504,33510]"
    },
    {
      "src": "\": \" [5088,5089]",
      "dest": "\": \" [27146,27147]"
    },
    {
      "src": "(: ( [423,424]",
      "dest": "(: ( [6328,6329]"
    },
    {
      "src": "return_statement [42906,42922]",
      "dest": "return_statement [46159,46175]"
    },
    {
      "src": "): ) [29102,29103]",
      "dest": "): ) [38120,38121]"
    },
    {
      "src": "identifier: value [23747,23752]",
      "dest": "identifier: value [40781,40786]"
    },
    {
      "src": "internal: internal [21181,21189]",
      "dest": "internal: internal [19446,19454]"
    },
    {
      "src": "call_argument [10166,10171]",
      "dest": "call_argument [30372,30377]"
    },
    {
      "src": "public: public [31629,31635]",
      "dest": "public: public [38379,38385]"
    },
    {
      "src": "pure: pure [43050,43054]",
      "dest": "pure: pure [46328,46332]"
    },
    {
      "src": "type_name [6337,6344]",
      "dest": "type_name [12306,12313]"
    },
    {
      "src": "expression_statement [40629,40691]",
      "dest": "expression_statement [34825,34903]"
    },
    {
      "src": "yul_path [30683,30689]",
      "dest": "yul_path [36275,36281]"
    },
    {
      "src": "string_literal [41399,41412]",
      "dest": "string_literal [28042,28082]"
    },
    {
      "src": "yul_hex_number: 0xfffff [30655,30662]",
      "dest": "yul_hex_number: 0xfffff [36196,36203]"
    },
    {
      "src": "external: external [16990,16998]",
      "dest": "external: external [31607,31615]"
    },
    {
      "src": "identifier: Approval [1124,1132]",
      "dest": "identifier: Approval [7971,7979]"
    },
    {
      "src": "primitive_type [11667,11674]",
      "dest": "primitive_type [1078,1085]"
    },
    {
      "src": "identifier: OwnershipTransferred [16662,16682]",
      "dest": "identifier: OwnershipTransferred [5128,5148]"
    },
    {
      "src": "parameter [18780,18794]",
      "dest": "parameter [34686,34700]"
    },
    {
      "src": "identifier: _from [23945,23950]",
      "dest": "identifier: account [41260,41267]"
    },
    {
      "src": "parameter [18298,18305]",
      "dest": "parameter [23838,23845]"
    },
    {
      "src": "sload: sload [28651,28656]",
      "dest": "sload: sload [37230,37235]"
    },
    {
      "src": "): ) [11445,11446]",
      "dest": "): ) [10098,10099]"
    },
    {
      "src": "==: == [9717,9719]",
      "dest": "==: == [4644,4646]"
    },
    {
      "src": "identifier: offset [28744,28750]",
      "dest": "identifier: offset [37372,37378]"
    },
    {
      "src": "modifier_invocation [17248,17257]",
      "dest": "modifier_invocation [31959,31968]"
    },
    {
      "src": "yul_identifier [29046,29051]",
      "dest": "yul_identifier [38022,38027]"
    },
    {
      "src": "identifier: sender [21041,21047]",
      "dest": "identifier: sender [33496,33502]"
    },
    {
      "src": "call_expression [25534,25568]",
      "dest": "call_expression [34188,34247]"
    },
    {
      "src": "call_argument [2433,2446]",
      "dest": "call_argument [4661,4681]"
    },
    {
      "src": "uint256: uint256 [18392,18399]",
      "dest": "uint256: uint256 [33450,33457]"
    },
    {
      "src": "comment: /**   * @dev Multiplies two numbers, throws on overflow.   */ [10438,10501]",
      "dest": "comment: /**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */ [9708,9941]"
    },
    {
      "src": "address: address [12382,12389]",
      "dest": "address: address [19693,19700]"
    },
    {
      "src": "pure: pure [11204,11208]",
      "dest": "pure: pure [10922,10926]"
    },
    {
      "src": "variable_declaration_statement [17269,17309]",
      "dest": "variable_declaration_statement [31980,32029]"
    },
    {
      "src": "visibility [20274,20282]",
      "dest": "visibility [17938,17946]"
    },
    {
      "src": "call_argument [24859,24876]",
      "dest": "call_argument [41323,41346]"
    },
    {
      "src": "primitive_type [13981,13988]",
      "dest": "primitive_type [1207,1214]"
    },
    {
      "src": "expression_statement [38762,38818]",
      "dest": "expression_statement [28643,28693]"
    },
    {
      "src": "type_name [21925,21929]",
      "dest": "type_name [45070,45074]"
    },
    {
      "src": "yul_function_call [30649,30663]",
      "dest": "yul_function_call [36190,36204]"
    },
    {
      "src": "(: ( [29035,29036]",
      "dest": "(: ( [38009,38010]"
    },
    {
      "src": ",: , [38911,38912]",
      "dest": ",: , [40537,40538]"
    },
    {
      "src": "identifier: onlyOwner [25513,25522]",
      "dest": "identifier: onlyOwner [34167,34176]"
    },
    {
      "src": "uint256: uint256 [39578,39585]",
      "dest": "uint256: uint256 [45419,45426]"
    },
    {
      "src": "{: { [11409,11410]",
      "dest": "{: { [10014,10015]"
    },
    {
      "src": "visibility [20956,20962]",
      "dest": "visibility [24333,24339]"
    },
    {
      "src": "uint256: uint256 [1077,1084]",
      "dest": "uint256: uint256 [18921,18928]"
    },
    {
      "src": "identifier: owner [15774,15779]",
      "dest": "identifier: owner [4209,4214]"
    },
    {
      "src": "(: ( [18179,18180]",
      "dest": "(: ( [24013,24014]"
    },
    {
      "src": "{: { [24840,24841]",
      "dest": "{: { [41304,41305]"
    },
    {
      "src": "contract_declaration [24650,25670]",
      "dest": "contract_declaration [32435,34991]"
    },
    {
      "src": "string_literal [39866,39895]",
      "dest": "string_literal [44421,44466]"
    },
    {
      "src": "): ) [38807,38808]",
      "dest": "): ) [28673,28674]"
    },
    {
      "src": "type_name [976,983]",
      "dest": "type_name [31086,31093]"
    },
    {
      "src": "visibility [37164,37172]",
      "dest": "visibility [16785,16793]"
    },
    {
      "src": "type_name [12005,12012]",
      "dest": "type_name [17903,17910]"
    },
    {
      "src": "expression_statement [35047,35098]",
      "dest": "expression_statement [43139,43216]"
    },
    {
      "src": "primitive_type [11736,11743]",
      "dest": "primitive_type [7511,7518]"
    },
    {
      "src": "type_name [4823,4830]",
      "dest": "type_name [29214,29221]"
    },
    {
      "src": "identifier: ROUNDING [42913,42921]",
      "dest": "identifier: ROUNDING [46166,46174]"
    },
    {
      "src": "yul_evm_builtin [30649,30654]",
      "dest": "yul_evm_builtin [36190,36195]"
    },
    {
      "src": "\": \" [5001,5002]",
      "dest": "\": \" [29504,29505]"
    },
    {
      "src": "primitive_type [11863,11870]",
      "dest": "primitive_type [18306,18313]"
    },
    {
      "src": "address: address [2163,2170]",
      "dest": "address: address [1284,1291]"
    },
    {
      "src": "): ) [11674,11675]",
      "dest": "): ) [1085,1086]"
    },
    {
      "src": "interface: interface [1247,1256]",
      "dest": "interface: interface [5411,5420]"
    },
    {
      "src": "yul_identifier [28329,28337]",
      "dest": "yul_identifier [36630,36638]"
    },
    {
      "src": "primitive_type [1340,1347]",
      "dest": "primitive_type [5986,5993]"
    },
    {
      "src": "yul_decimal_number: 0 [29065,29066]",
      "dest": "yul_decimal_number: 0 [38041,38042]"
    },
    {
      "src": "emit_statement [15803,15848]",
      "dest": "emit_statement [4238,4283]"
    },
    {
      "src": "return: return [33292,33298]",
      "dest": "return: return [27160,27166]"
    },
    {
      "src": "comment: /**       @dev refund 30,000 gas     @dev costs slightly more than 15,400 gas     */ [30475,30562]",
      "dest": "comment: /**      * @dev Return the remaining sponsored gas slots      */ [38273,38339]"
    },
    {
      "src": "type_name [12382,12389]",
      "dest": "type_name [19693,19700]"
    },
    {
      "src": "visibility [22899,22907]",
      "dest": "visibility [43021,43029]"
    },
    {
      "src": "\": \" [24878,24879]",
      "dest": "\": \" [41348,41349]"
    },
    {
      "src": "public: public [33674,33680]",
      "dest": "public: public [25532,25538]"
    },
    {
      "src": "yul_function_call [29032,29068]",
      "dest": "yul_function_call [38006,38044]"
    },
    {
      "src": "true: true [21066,21070]",
      "dest": "true: true [24973,24977]"
    },
    {
      "src": "string [41399,41412]",
      "dest": "string [28042,28082]"
    },
    {
      "src": "string_literal [16007,16019]",
      "dest": "string_literal [4444,4456]"
    },
    {
      "src": "type_name [37184,37188]",
      "dest": "type_name [16970,16974]"
    },
    {
      "src": "address: address [1156,1163]",
      "dest": "address: address [8003,8010]"
    },
    {
      "src": "binary_expression [25542,25554]",
      "dest": "binary_expression [34196,34208]"
    },
    {
      "src": "expression_statement [15774,15793]",
      "dest": "expression_statement [4209,4228]"
    },
    {
      "src": "event_paramater [38888,38911]",
      "dest": "event_paramater [40514,40537]"
    },
    {
      "src": "type_name [6007,6014]",
      "dest": "type_name [13677,13684]"
    },
    {
      "src": "type_name [23815,23822]",
      "dest": "type_name [36052,36059]"
    },
    {
      "src": "): ) [1037,1038]",
      "dest": "): ) [7134,7135]"
    },
    {
      "src": "primitive_type [43064,43070]",
      "dest": "primitive_type [46342,46348]"
    },
    {
      "src": "=: = [4976,4977]",
      "dest": "=: = [29436,29437]"
    },
    {
      "src": "number_literal: 0 [13541,13542]",
      "dest": "number_literal: 0 [762,763]"
    },
    {
      "src": "identifier: _startIndex [6469,6480]",
      "dest": "identifier: amount [31120,31126]"
    },
    {
      "src": "event_paramater [24752,24766]",
      "dest": "event_paramater [33012,33026]"
    },
    {
      "src": "type_name [22164,22171]",
      "dest": "type_name [10996,11003]"
    },
    {
      "src": "public: public [20077,20083]",
      "dest": "public: public [24866,24872]"
    },
    {
      "src": "parameter [42888,42893]",
      "dest": "parameter [46141,46146]"
    },
    {
      "src": "(: ( [16423,16424]",
      "dest": "(: ( [4887,4888]"
    },
    {
      "src": "(: ( [17212,17213]",
      "dest": "(: ( [31922,31923]"
    },
    {
      "src": "{: { [42982,42983]",
      "dest": "{: { [46251,46252]"
    },
    {
      "src": "return_statement [33957,33969]",
      "dest": "return_statement [26388,26400]"
    },
    {
      "src": "type_name [18780,18787]",
      "dest": "type_name [34686,34693]"
    },
    {
      "src": ":=: := [30423,30425]",
      "dest": ":=: := [37820,37822]"
    },
    {
      "src": "public: public [16442,16448]",
      "dest": "public: public [4906,4912]"
    },
    {
      "src": "address: address [3516,3523]",
      "dest": "address: address [28504,28511]"
    },
    {
      "src": "}: } [11469,11470]",
      "dest": "}: } [14402,14403]"
    },
    {
      "src": "type_cast_expression [40127,40137]",
      "dest": "type_cast_expression [28831,28841]"
    },
    {
      "src": "(: ( [40586,40587]",
      "dest": "(: ( [16820,16821]"
    },
    {
      "src": "\": \" [42207,42208]",
      "dest": "\": \" [29306,29307]"
    },
    {
      "src": "return_type_definition [6328,6345]",
      "dest": "return_type_definition [12297,12314]"
    },
    {
      "src": "yul_function_call [28239,28255]",
      "dest": "yul_function_call [37714,37735]"
    },
    {
      "src": "user_defined_type [32426,32449]",
      "dest": "user_defined_type [40279,40302]"
    },
    {
      "src": "sload: sload [31873,31878]",
      "dest": "sload: sload [38683,38688]"
    },
    {
      "src": "contract_declaration [13186,15201]",
      "dest": "contract_declaration [427,3401]"
    },
    {
      "src": "{: { [39304,39305]",
      "dest": "{: { [19478,19479]"
    },
    {
      "src": "parameter [11184,11193]",
      "dest": "parameter [10874,10883]"
    },
    {
      "src": "address: address [15565,15572]",
      "dest": "address: address [4004,4011]"
    },
    {
      "src": "identifier: offset [30733,30739]",
      "dest": "identifier: offset [36446,36452]"
    },
    {
      "src": ",: , [988,989]",
      "dest": ",: , [31098,31099]"
    },
    {
      "src": "primitive_type [21868,21875]",
      "dest": "primitive_type [41852,41859]"
    },
    {
      "src": "sload: sload [29001,29006]",
      "dest": "sload: sload [37926,37931]"
    },
    {
      "src": "identifier: a [11181,11182]",
      "dest": "identifier: a [10871,10872]"
    },
    {
      "src": "identifier: b [11372,11373]",
      "dest": "identifier: b [9979,9980]"
    },
    {
      "src": "expression_statement [24975,25011]",
      "dest": "expression_statement [41496,41519]"
    },
    {
      "src": "yul_path [30879,30887]",
      "dest": "yul_path [36680,36688]"
    },
    {
      "src": "type_name [11364,11371]",
      "dest": "type_name [9971,9978]"
    },
    {
      "src": "primitive_type [18780,18787]",
      "dest": "primitive_type [34686,34693]"
    },
    {
      "src": "expression_statement [16031,16033]",
      "dest": "expression_statement [4468,4470]"
    },
    {
      "src": ",: , [29054,29055]",
      "dest": ",: , [38030,38031]"
    },
    {
      "src": "return_statement [21059,21071]",
      "dest": "return_statement [24966,24978]"
    },
    {
      "src": "}: } [10617,10618]",
      "dest": "}: } [11646,11647]"
    },
    {
      "src": "uint256: uint256 [1002,1009]",
      "dest": "uint256: uint256 [19403,19410]"
    },
    {
      "src": "uint256: uint256 [11736,11743]",
      "dest": "uint256: uint256 [7511,7518]"
    },
    {
      "src": "parameter [18071,18078]",
      "dest": "parameter [10469,10476]"
    },
    {
      "src": "function_body [16459,16501]",
      "dest": "function_body [4923,4965]"
    },
    {
      "src": "call_argument [34264,34288]",
      "dest": "call_argument [44020,44065]"
    },
    {
      "src": "): ) [41412,41413]",
      "dest": "): ) [28082,28083]"
    },
    {
      "src": "bytes32: bytes32 [3250,3257]",
      "dest": "bytes32: bytes32 [15518,15525]"
    },
    {
      "src": "): ) [13988,13989]",
      "dest": "): ) [1214,1215]"
    },
    {
      "src": "identifier: _value [1348,1354]",
      "dest": "identifier: amount [5994,6000]"
    },
    {
      "src": "returns: returns [42879,42886]",
      "dest": "returns: returns [46132,46139]"
    },
    {
      "src": "): ) [18305,18306]",
      "dest": "): ) [23845,23846]"
    },
    {
      "src": "call_expression [20110,20155]",
      "dest": "call_expression [24916,24955]"
    },
    {
      "src": "visibility [41536,41544]",
      "dest": "visibility [31128,31136]"
    },
    {
      "src": "bool: bool [40960,40964]",
      "dest": "bool: bool [1814,1818]"
    },
    {
      "src": "call_argument [42207,42220]",
      "dest": "call_argument [29306,29341]"
    },
    {
      "src": "type_name [3309,3313]",
      "dest": "type_name [27003,27007]"
    },
    {
      "src": "{: { [43072,43073]",
      "dest": "{: { [46357,46358]"
    },
    {
      "src": "identifier: assert [10640,10646]",
      "dest": "identifier: require [11687,11694]"
    },
    {
      "src": "return: return [42993,42999]",
      "dest": "return: return [46262,46268]"
    },
    {
      "src": "call_argument [15837,15838]",
      "dest": "call_argument [4272,4273]"
    },
    {
      "src": "bool: bool [37184,37188]",
      "dest": "bool: bool [16970,16974]"
    },
    {
      "src": ",: , [39864,39865]",
      "dest": ",: , [44419,44420]"
    },
    {
      "src": "binary_expression [11241,11247]",
      "dest": "binary_expression [10964,10970]"
    },
    {
      "src": "yul_variable_declaration [30713,30749]",
      "dest": "yul_variable_declaration [36426,36462]"
    },
    {
      "src": "parameter [888,901]",
      "dest": "parameter [24537,24550]"
    },
    {
      "src": "type_name [22550,22557]",
      "dest": "type_name [42421,42428]"
    },
    {
      "src": "parameter [12796,12816]",
      "dest": "parameter [23967,23982]"
    },
    {
      "src": "(: ( [33012,33013]",
      "dest": "(: ( [15228,15229]"
    },
    {
      "src": "yul_function_call [28651,28724]",
      "dest": "yul_function_call [37230,37303]"
    },
    {
      "src": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [16048,16141]",
      "dest": "comment: /**      * @dev Throws if called by any account other than the owner.      */ [4298,4377]"
    },
    {
      "src": "(: ( [6006,6007]",
      "dest": "(: ( [13676,13677]"
    },
    {
      "src": "): ) [10538,10539]",
      "dest": "): ) [11334,11335]"
    },
    {
      "src": "primitive_type [23331,23338]",
      "dest": "primitive_type [45030,45037]"
    },
    {
      "src": "): ) [17045,17046]",
      "dest": "): ) [31662,31663]"
    },
    {
      "src": "constant: constant [23768,23776]",
      "dest": "constant: constant [40329,40337]"
    },
    {
      "src": "parameter [1033,1037]",
      "dest": "parameter [7130,7134]"
    },
    {
      "src": "primitive_type [903,910]",
      "dest": "primitive_type [24552,24559]"
    },
    {
      "src": "state_variable_declaration [42686,42715]",
      "dest": "state_variable_declaration [45930,45959]"
    },
    {
      "src": "parameter [12020,12034]",
      "dest": "parameter [26233,26251]"
    },
    {
      "src": "yul_function_call [28882,28972]",
      "dest": "yul_function_call [38152,38247]"
    },
    {
      "src": "public: public [13557,13563]",
      "dest": "public: public [778,784]"
    },
    {
      "src": "function: function [16596,16604]",
      "dest": "function: function [5062,5070]"
    },
    {
      "src": "string_literal [43090,43096]",
      "dest": "string_literal [46375,46381]"
    },
    {
      "src": "function: function [16397,16405]",
      "dest": "function: function [4861,4869]"
    },
    {
      "src": "identifier: minimumGasPriceForFutureRefunds [13788,13819]",
      "dest": "identifier: minimumGasPriceForFutureRefunds_Deprecated [1008,1050]"
    },
    {
      "src": "yul_decimal_number: 0 [29059,29060]",
      "dest": "yul_decimal_number: 0 [38035,38036]"
    },
    {
      "src": "internal: internal [23968,23976]",
      "dest": "internal: internal [29247,29255]"
    },
    {
      "src": "parameter [12818,12834]",
      "dest": "parameter [24298,24315]"
    },
    {
      "src": "{: { [17258,17259]",
      "dest": "{: { [31969,31970]"
    },
    {
      "src": "expression_statement [20110,20156]",
      "dest": "expression_statement [24916,24956]"
    },
    {
      "src": "string_literal [38172,38199]",
      "dest": "string_literal [43917,43960]"
    },
    {
      "src": "primitive_type [1320,1327]",
      "dest": "primitive_type [15491,15498]"
    },
    {
      "src": "returns: returns [11389,11396]",
      "dest": "returns: returns [9996,10003]"
    },
    {
      "src": "comment: /**       @dev refund 15,000 gas     @dev costs slightly more than 10,200 gas     */ [31045,31132]",
      "dest": "comment: /**      * @dev Return the remaining sheep slots      */ [38501,38559]"
    },
    {
      "src": "function: function [526,534]",
      "dest": "function: function [7454,7462]"
    },
    {
      "src": "address: address [24312,24319]",
      "dest": "address: address [29385,29392]"
    },
    {
      "src": "yul_assignment [30416,30449]",
      "dest": "yul_assignment [37811,37839]"
    },
    {
      "src": "user_defined_type [42647,42676]",
      "dest": "user_defined_type [45910,45922]"
    },
    {
      "src": "type_cast_expression [38421,38431]",
      "dest": "type_cast_expression [29590,29600]"
    },
    {
      "src": "identifier: pendingOwner [16722,16734]",
      "dest": "identifier: pendingOwner [5188,5200]"
    },
    {
      "src": "): ) [30662,30663]",
      "dest": "): ) [36203,36204]"
    },
    {
      "src": "string_literal [41833,41846]",
      "dest": "string_literal [27797,27836]"
    },
    {
      "src": "): ) [20954,20955]",
      "dest": "): ) [33464,33465]"
    },
    {
      "src": "return_statement [42816,42832]",
      "dest": "return_statement [46069,46085]"
    },
    {
      "src": ",: , [11362,11363]",
      "dest": ",: , [9969,9970]"
    },
    {
      "src": "member_expression [33046,33056]",
      "dest": "member_expression [8760,8770]"
    },
    {
      "src": "identifier: _value [20069,20075]",
      "dest": "identifier: amount [37124,37130]"
    },
    {
      "src": "parameter [17226,17237]",
      "dest": "parameter [31937,31948]"
    },
    {
      "src": "type_name [23687,23694]",
      "dest": "type_name [32729,32736]"
    },
    {
      "src": "identifier: previousOwner [15541,15554]",
      "dest": "identifier: previousOwner [3989,4002]"
    },
    {
      "src": "(: ( [38887,38888]",
      "dest": "(: ( [40513,40514]"
    },
    {
      "src": "uint256: uint256 [6007,6014]",
      "dest": "uint256: uint256 [13677,13684]"
    },
    {
      "src": "boolean_literal [20173,20177]",
      "dest": "boolean_literal [25768,25772]"
    },
    {
      "src": "uint256: uint256 [33071,33078]",
      "dest": "uint256: uint256 [45141,45148]"
    },
    {
      "src": "(: ( [28791,28792]",
      "dest": "(: ( [37578,37579]"
    },
    {
      "src": "internal: internal [37164,37172]",
      "dest": "internal: internal [16785,16793]"
    },
    {
      "src": "function_definition [526,593]",
      "dest": "function_definition [7454,7551]"
    },
    {
      "src": "type_name [1429,1436]",
      "dest": "type_name [1564,1571]"
    },
    {
      "src": "{: { [39821,39822]",
      "dest": "{: { [28554,28555]"
    },
    {
      "src": "identifier: sheep [28992,28997]",
      "dest": "identifier: sheep [37917,37922]"
    },
    {
      "src": "}: } [16777,16778]",
      "dest": "}: } [5243,5244]"
    },
    {
      "src": "mapping: mapping [13894,13901]",
      "dest": "mapping: mapping [1122,1129]"
    },
    {
      "src": "identifier: _min [25589,25593]",
      "dest": "identifier: _min [34268,34272]"
    },
    {
      "src": "return_statement [10665,10674]",
      "dest": "return_statement [11756,11765]"
    },
    {
      "src": "\": \" [16018,16019]",
      "dest": "\": \" [4455,4456]"
    },
    {
      "src": "primitive_type [22231,22238]",
      "dest": "primitive_type [11659,11666]"
    },
    {
      "src": "identifier: pendingOwner [9720,9732]",
      "dest": "identifier: pendingOwner [4647,4659]"
    },
    {
      "src": "true [33299,33303]",
      "dest": "true [27167,27171]"
    },
    {
      "src": "}: } [25669,25670]",
      "dest": "}: } [34990,34991]"
    },
    {
      "src": ">=: >= [34191,34193]",
      "dest": ">=: >= [41945,41947]"
    },
    {
      "src": "identifier: a [11262,11263]",
      "dest": "identifier: a [11008,11009]"
    },
    {
      "src": "{: { [22612,22613]",
      "dest": "{: { [24616,24617]"
    },
    {
      "src": "primitive_type [12382,12389]",
      "dest": "primitive_type [19693,19700]"
    },
    {
      "src": "identifier: token [17287,17292]",
      "dest": "identifier: token [31998,32003]"
    },
    {
      "src": "type_name [13469,13476]",
      "dest": "type_name [690,697]"
    },
    {
      "src": "primitive_type [18298,18305]",
      "dest": "primitive_type [23838,23845]"
    },
    {
      "src": ",: , [40748,40749]",
      "dest": ",: , [34764,34765]"
    },
    {
      "src": "function: function [34880,34888]",
      "dest": "function: function [42917,42925]"
    },
    {
      "src": "identifier: result [18637,18643]",
      "dest": "identifier: length [38630,38636]"
    },
    {
      "src": "modifier_invocation [16449,16458]",
      "dest": "modifier_invocation [4913,4922]"
    },
    {
      "src": "primitive_type [11353,11360]",
      "dest": "primitive_type [9960,9967]"
    },
    {
      "src": "type_name [21868,21875]",
      "dest": "type_name [41852,41859]"
    },
    {
      "src": "source_file [0,43204]",
      "dest": "source_file [0,46392]"
    },
    {
      "src": "primitive_type [41646,41653]",
      "dest": "primitive_type [1628,1635]"
    },
    {
      "src": "type_name [42974,42980]",
      "dest": "type_name [46236,46242]"
    },
    {
      "src": "identifier: require [40701,40708]",
      "dest": "identifier: require [34739,34746]"
    },
    {
      "src": "state_variable_declaration [13242,13270]",
      "dest": "state_variable_declaration [483,511]"
    },
    {
      "src": "(: ( [5499,5500]",
      "dest": "(: ( [26276,26277]"
    },
    {
      "src": "yul_identifier [28992,28997]",
      "dest": "yul_identifier [37917,37922]"
    },
    {
      "src": "address: address [11863,11870]",
      "dest": "address: address [18306,18313]"
    },
    {
      "src": "primitive_type [9923,9930]",
      "dest": "primitive_type [7476,7483]"
    },
    {
      "src": "(: ( [22549,22550]",
      "dest": "(: ( [24536,24537]"
    },
    {
      "src": "returns: returns [18171,18178]",
      "dest": "returns: returns [24005,24012]"
    },
    {
      "src": "): ) [15595,15596]",
      "dest": "): ) [4028,4029]"
    },
    {
      "src": "call_argument [38433,38443]",
      "dest": "call_argument [29581,29588]"
    },
    {
      "src": "): ) [21047,21048]",
      "dest": "): ) [33510,33511]"
    },
    {
      "src": "primitive_type [4857,4864]",
      "dest": "primitive_type [30107,30114]"
    },
    {
      "src": "function_body [11409,11467]",
      "dest": "function_body [10014,10128]"
    },
    {
      "src": "uint256: uint256 [18298,18305]",
      "dest": "uint256: uint256 [23838,23845]"
    },
    {
      "src": "(: ( [1032,1033]",
      "dest": "(: ( [7129,7130]"
    },
    {
      "src": "returns: returns [18289,18296]",
      "dest": "returns: returns [23829,23836]"
    },
    {
      "src": "type_name [11647,11675]",
      "dest": "type_name [1059,1086]"
    },
    {
      "src": "visibility [6996,7004]",
      "dest": "visibility [6361,6369]"
    },
    {
      "src": "function: function [42757,42765]",
      "dest": "function: function [46001,46009]"
    },
    {
      "src": "type_name [43064,43070]",
      "dest": "type_name [46342,46348]"
    },
    {
      "src": "type_name [41568,41572]",
      "dest": "type_name [40539,40543]"
    },
    {
      "src": "identifier: msg [21037,21040]",
      "dest": "identifier: msg [33492,33495]"
    },
    {
      "src": "uint256: uint256 [10790,10797]",
      "dest": "uint256: uint256 [12900,12907]"
    },
    {
      "src": "primitive_type [3900,3907]",
      "dest": "primitive_type [13021,13028]"
    },
    {
      "src": "visibility [22144,22152]",
      "dest": "visibility [18936,18944]"
    },
    {
      "src": "member_expression [15986,15996]",
      "dest": "member_expression [4423,4433]"
    },
    {
      "src": ",: , [10788,10789]",
      "dest": ",: , [12898,12899]"
    },
    {
      "src": "call_argument [7189,7193]",
      "dest": "call_argument [16821,16825]"
    },
    {
      "src": "): ) [11373,11374]",
      "dest": "): ) [9980,9981]"
    },
    {
      "src": "return_type_definition [18171,18188]",
      "dest": "return_type_definition [24005,24022]"
    },
    {
      "src": "uint256: uint256 [18780,18787]",
      "dest": "uint256: uint256 [34686,34693]"
    },
    {
      "src": "): ) [43041,43042]",
      "dest": "): ) [46310,46311]"
    },
    {
      "src": "bool: bool [40229,40233]",
      "dest": "bool: bool [41869,41873]"
    },
    {
      "src": "identifier: location [30879,30887]",
      "dest": "identifier: location [36680,36688]"
    },
    {
      "src": "identifier: ProxyStorage [15466,15478]",
      "dest": "identifier: ProxyStorage [3745,3757]"
    },
    {
      "src": "call_argument [38153,38170]",
      "dest": "call_argument [27856,27879]"
    },
    {
      "src": "primitive_type [40579,40586]",
      "dest": "primitive_type [16813,16820]"
    },
    {
      "src": "yul_variable_declaration [30635,30663]",
      "dest": "yul_variable_declaration [36176,36204]"
    },
    {
      "src": "): ) [40377,40378]",
      "dest": "): ) [34700,34701]"
    },
    {
      "src": "primitive_type [33711,33718]",
      "dest": "primitive_type [45094,45101]"
    },
    {
      "src": "(: ( [43063,43064]",
      "dest": "(: ( [46341,46342]"
    },
    {
      "src": "identifier: redemptionAddressCount_Deprecated [13733,13766]",
      "dest": "identifier: redemptionAddressCount_Deprecated [960,993]"
    },
    {
      "src": "return_type_definition [1024,1038]",
      "dest": "return_type_definition [7121,7135]"
    },
    {
      "src": ",: , [16005,16006]",
      "dest": ",: , [4442,4443]"
    },
    {
      "src": "): ) [16019,16020]",
      "dest": "): ) [4456,4457]"
    },
    {
      "src": "type_cast_expression [17033,17046]",
      "dest": "type_cast_expression [31650,31663]"
    },
    {
      "src": "yul_path [29091,29099]",
      "dest": "yul_path [38109,38117]"
    },
    {
      "src": "parameter [18629,18643]",
      "dest": "parameter [38622,38636]"
    },
    {
      "src": ",: , [40137,40138]",
      "dest": ",: , [28850,28851]"
    },
    {
      "src": "(: ( [11397,11398]",
      "dest": "(: ( [10004,10005]"
    },
    {
      "src": "public: public [13250,13256]",
      "dest": "public: public [491,497]"
    },
    {
      "src": "yul_path [31698,31704]",
      "dest": "yul_path [38451,38457]"
    },
    {
      "src": "expression_statement [16470,16494]",
      "dest": "expression_statement [4934,4958]"
    },
    {
      "src": "uint256: uint256 [23687,23694]",
      "dest": "uint256: uint256 [32729,32736]"
    },
    {
      "src": "assignment_expression [4947,5032]",
      "dest": "assignment_expression [29417,29506]"
    },
    {
      "src": "): ) [15965,15966]",
      "dest": "): ) [4402,4403]"
    },
    {
      "src": "primitive_type [1060,1067]",
      "dest": "primitive_type [24833,24840]"
    },
    {
      "src": "identifier: a [11420,11421]",
      "dest": "identifier: a [10037,10038]"
    },
    {
      "src": "): ) [18078,18079]",
      "dest": "): ) [10476,10477]"
    },
    {
      "src": "assignment_expression [25579,25593]",
      "dest": "assignment_expression [34258,34272]"
    },
    {
      "src": "mapping: mapping [13828,13835]",
      "dest": "mapping: mapping [1407,1414]"
    },
    {
      "src": "view: view [31794,31798]",
      "dest": "view: view [38608,38612]"
    },
    {
      "src": "call_argument [17041,17045]",
      "dest": "call_argument [31658,31662]"
    },
    {
      "src": "state_variable_declaration [23760,23793]",
      "dest": "state_variable_declaration [40321,40352]"
    },
    {
      "src": "event_paramater [15565,15589]",
      "dest": "event_paramater [4004,4028]"
    },
    {
      "src": "(: ( [13836,13837]",
      "dest": "(: ( [1414,1415]"
    },
    {
      "src": "identifier: approve [20035,20042]",
      "dest": "identifier: approve [24825,24832]"
    },
    {
      "src": "expression_statement [39832,39897]",
      "dest": "expression_statement [44395,44468]"
    },
    {
      "src": "{: { [15479,15480]",
      "dest": "{: { [3758,3759]"
    },
    {
      "src": "comment: // File: registry/contracts/Registry.sol [1203,1243]",
      "dest": "comment: // File: @openzeppelin/contracts/token/ERC20/IERC20.sol [5251,5306]"
    },
    {
      "src": "contract_body [10431,11470]",
      "dest": "contract_body [9701,14403]"
    },
    {
      "src": "solidity: solidity [7,15]",
      "dest": "solidity: solidity [5317,5325]"
    },
    {
      "src": "function: function [20894,20902]",
      "dest": "function: function [33436,33444]"
    },
    {
      "src": "number_literal: 16 [23790,23792]",
      "dest": "number_literal: 16 [40349,40351]"
    },
    {
      "src": "sub: sub [28325,28328]",
      "dest": "sub: sub [36931,36934]"
    },
    {
      "src": "visibility [13223,13229]",
      "dest": "visibility [464,470]"
    },
    {
      "src": "yul_path [28744,28750]",
      "dest": "yul_path [37372,37378]"
    },
    {
      "src": "identifier: _value [22891,22897]",
      "dest": "identifier: amount [43007,43013]"
    },
    {
      "src": "(: ( [28160,28161]",
      "dest": "(: ( [36490,36491]"
    },
    {
      "src": "string [42045,42076]",
      "dest": "string [28596,28629]"
    },
    {
      "src": "call_argument [10243,10244]",
      "dest": "call_argument [28592,28593]"
    },
    {
      "src": "visibility [13557,13563]",
      "dest": "visibility [778,784]"
    },
    {
      "src": "{: { [30799,30800]",
      "dest": "{: { [36645,36646]"
    },
    {
      "src": "parameter [23331,23347]",
      "dest": "parameter [45030,45045]"
    },
    {
      "src": "comment: // File: contracts/TrueCoinReceiver.sol [28,67]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "event_definition [15488,15597]",
      "dest": "event_definition [3946,4030]"
    },
    {
      "src": "identifier: _burnAllArgs [24785,24797]",
      "dest": "identifier: mint [41247,41251]"
    },
    {
      "src": "primitive_type [18629,18636]",
      "dest": "primitive_type [38622,38629]"
    },
    {
      "src": "identifier: burner [23679,23685]",
      "dest": "identifier: burner [32721,32727]"
    },
    {
      "src": "true [33964,33968]",
      "dest": "true [26395,26399]"
    },
    {
      "src": "): ) [10799,10800]",
      "dest": "): ) [12937,12938]"
    },
    {
      "src": ",: , [1179,1180]",
      "dest": ",: , [8026,8027]"
    },
    {
      "src": "pragma_directive [0,24]",
      "dest": "pragma_directive [5310,5333]"
    },
    {
      "src": "parameter [21868,21884]",
      "dest": "parameter [41852,41867]"
    },
    {
      "src": "identifier: owner [16683,16688]",
      "dest": "identifier: owner [5149,5154]"
    },
    {
      "src": "binary_expression [15986,16005]",
      "dest": "binary_expression [4423,4442]"
    },
    {
      "src": "call_argument [5000,5002]",
      "dest": "call_argument [29469,29505]"
    },
    {
      "src": "function_body [10574,10679]",
      "dest": "function_body [11368,11772]"
    },
    {
      "src": ",: , [38808,38809]",
      "dest": ",: , [28674,28675]"
    },
    {
      "src": "identifier: balanceOf [18135,18144]",
      "dest": "identifier: balanceOf [23957,23966]"
    },
    {
      "src": "type_name [25476,25483]",
      "dest": "type_name [34130,34137]"
    },
    {
      "src": "primitive_type [447,454]",
      "dest": "primitive_type [6384,6391]"
    },
    {
      "src": "comment: /**     @dev refund 39,000 gas     @dev costs slightly more than 16,100 gas     */ [28479,28564]",
      "dest": "comment: /**      * @dev use smart contract self-destruct to refund gas      * will refund 39,000 * amount gas      */ [36977,37089]"
    },
    {
      "src": "identifier: name [42946,42950]",
      "dest": "identifier: name [46199,46203]"
    },
    {
      "src": "identifier: transferFrom [963,975]",
      "dest": "identifier: _beforeTokenTransfer [31065,31085]"
    },
    {
      "src": "contract: contract [25959,25967]",
      "dest": "contract: contract [35900,35908]"
    },
    {
      "src": "(: ( [15964,15965]",
      "dest": "(: ( [4401,4402]"
    },
    {
      "src": "parameter [11863,11876]",
      "dest": "parameter [18306,18320]"
    },
    {
      "src": "type_name [1060,1067]",
      "dest": "type_name [24833,24840]"
    },
    {
      "src": "yul_path [31399,31407]",
      "dest": "yul_path [36827,36835]"
    },
    {
      "src": "call_argument [5087,5089]",
      "dest": "call_argument [27108,27147]"
    },
    {
      "src": "return_statement [22623,22660]",
      "dest": "return_statement [24627,24662]"
    },
    {
      "src": "uint8: uint8 [42721,42726]",
      "dest": "uint8: uint8 [45965,45970]"
    },
    {
      "src": "type_name [1002,1009]",
      "dest": "type_name [19403,19410]"
    },
    {
      "src": "view: view [433,437]",
      "dest": "view: view [6370,6374]"
    },
    {
      "src": "type_name [23719,23726]",
      "dest": "type_name [40753,40760]"
    },
    {
      "src": "return_type_definition [20084,20098]",
      "dest": "return_type_definition [24890,24904]"
    },
    {
      "src": "string: string [13617,13623]",
      "dest": "string: string [841,847]"
    },
    {
      "src": "(: ( [10584,10585]",
      "dest": "(: ( [11603,11604]"
    },
    {
      "src": ",: , [16688,16689]",
      "dest": ",: , [5154,5155]"
    },
    {
      "src": "string_literal [2433,2446]",
      "dest": "string_literal [4661,4681]"
    },
    {
      "src": "): ) [28970,28971]",
      "dest": "): ) [38245,38246]"
    },
    {
      "src": "binary_expression [38153,38170]",
      "dest": "binary_expression [27856,27879]"
    },
    {
      "src": "identifier: wipeBlacklistedAccount [39763,39785]",
      "dest": "identifier: _mint [28498,28503]"
    },
    {
      "src": "type_name [1077,1084]",
      "dest": "type_name [18921,18928]"
    },
    {
      "src": ",: , [17224,17225]",
      "dest": ",: , [31935,31936]"
    },
    {
      "src": "): ) [42951,42952]",
      "dest": "): ) [46204,46205]"
    },
    {
      "src": "pure: pure [42960,42964]",
      "dest": "pure: pure [46222,46226]"
    },
    {
      "src": "type_name [479,486]",
      "dest": "type_name [7492,7499]"
    },
    {
      "src": "primitive_type [2163,2170]",
      "dest": "primitive_type [1284,1291]"
    },
    {
      "src": "}: } [43016,43017]",
      "dest": "}: } [46285,46286]"
    },
    {
      "src": "\": \" [42276,42277]",
      "dest": "\": \" [30261,30262]"
    },
    {
      "src": "): ) [42803,42804]",
      "dest": "): ) [46056,46057]"
    },
    {
      "src": "function_body [43072,43104]",
      "dest": "function_body [46357,46389]"
    },
    {
      "src": "call_argument [9150,9172]",
      "dest": "call_argument [27775,27795]"
    },
    {
      "src": "string [41325,41338]",
      "dest": "string [30180,30218]"
    },
    {
      "src": "identifier: _spender [12619,12627]",
      "dest": "identifier: target [19376,19382]"
    },
    {
      "src": "(: ( [16682,16683]",
      "dest": "(: ( [5148,5149]"
    },
    {
      "src": "parameter [17213,17224]",
      "dest": "parameter [31923,31935]"
    },
    {
      "src": "returns: returns [6328,6335]",
      "dest": "returns: returns [12297,12304]"
    },
    {
      "src": "primitive_type [6337,6344]",
      "dest": "primitive_type [12306,12313]"
    },
    {
      "src": "primitive_type [1033,1037]",
      "dest": "primitive_type [7130,7134]"
    },
    {
      "src": "primitive_type [888,895]",
      "dest": "primitive_type [24537,24544]"
    },
    {
      "src": "function_body [24840,25018]",
      "dest": "function_body [41304,41563]"
    },
    {
      "src": "(: ( [13902,13903]",
      "dest": "(: ( [1129,1130]"
    },
    {
      "src": "number_literal: 0 [38429,38430]",
      "dest": "number_literal: 0 [29598,29599]"
    },
    {
      "src": "call_argument [40676,40689]",
      "dest": "call_argument [34852,34901]"
    },
    {
      "src": "identifier: owner [15841,15846]",
      "dest": "identifier: owner [4276,4281]"
    },
    {
      "src": "primitive_type [15525,15532]",
      "dest": "primitive_type [3973,3980]"
    },
    {
      "src": "yul_identifier [28161,28169]",
      "dest": "yul_identifier [36491,36499]"
    },
    {
      "src": "visibility [26170,26178]",
      "dest": "visibility [33466,33474]"
    },
    {
      "src": "return: return [10665,10671]",
      "dest": "return: return [11756,11762]"
    },
    {
      "src": "identifier: _addr [11729,11734]",
      "dest": "identifier: account [15197,15204]"
    },
    {
      "src": "primitive_type [15565,15572]",
      "dest": "primitive_type [4004,4011]"
    },
    {
      "src": "add: add [30426,30429]",
      "dest": "add: add [37823,37826]"
    },
    {
      "src": "user_defined_type [17213,17218]",
      "dest": "user_defined_type [31414,31419]"
    },
    {
      "src": "\": \" [25566,25567]",
      "dest": "\": \" [34245,34246]"
    },
    {
      "src": "identifier: onlyOwner [15955,15964]",
      "dest": "identifier: onlyOwner [4392,4401]"
    },
    {
      "src": "visibility [1356,1364]",
      "dest": "visibility [5688,5696]"
    },
    {
      "src": ",: , [28169,28170]",
      "dest": ",: , [36499,36500]"
    },
    {
      "src": "public: public [12036,12042]",
      "dest": "public: public [23656,23662]"
    },
    {
      "src": "parameter [12611,12627]",
      "dest": "parameter [19368,19382]"
    },
    {
      "src": "identifier: require [38145,38152]",
      "dest": "identifier: require [27848,27855]"
    },
    {
      "src": "identifier: _who [22706,22710]",
      "dest": "identifier: sender [27696,27702]"
    },
    {
      "src": "pure: pure [10549,10553]",
      "dest": "pure: pure [11345,11349]"
    },
    {
      "src": "primitive_type [13970,13977]",
      "dest": "primitive_type [1196,1203]"
    },
    {
      "src": "): ) [35096,35097]",
      "dest": "): ) [43214,43215]"
    },
    {
      "src": "contract_body [24707,25670]",
      "dest": "contract_body [32495,34991]"
    },
    {
      "src": "comment: // File: contracts/HasOwner.sol [15205,15236]",
      "dest": "comment: // File: contracts/true-currencies-new/BurnableTokenWithBounds.sol [32082,32148]"
    },
    {
      "src": "for: for [19263,19266]",
      "dest": "for: for [22643,22646]"
    },
    {
      "src": "binary_expression [39321,39352]",
      "dest": "binary_expression [19497,19527]"
    },
    {
      "src": "): ) [10572,10573]",
      "dest": "): ) [11366,11367]"
    },
    {
      "src": "identifier: totalSupply_ [40008,40020]",
      "dest": "identifier: _totalSupply [28720,28732]"
    },
    {
      "src": "expression_statement [34237,34290]",
      "dest": "expression_statement [43972,44067]"
    },
    {
      "src": "identifier: totalSupply_ [39993,40005]",
      "dest": "identifier: _totalSupply [28705,28717]"
    },
    {
      "src": "visibility [13429,13436]",
      "dest": "visibility [650,657]"
    },
    {
      "src": "solidity_pragma_token [7,23]",
      "dest": "solidity_pragma_token [5317,5332]"
    },
    {
      "src": "==: == [10653,10655]",
      "dest": "==: == [11701,11703]"
    },
    {
      "src": "call_argument [35135,35159]",
      "dest": "call_argument [43090,43127]"
    },
    {
      "src": "true: true [22024,22028]",
      "dest": "true: true [24443,24447]"
    },
    {
      "src": "type_name [24736,24743]",
      "dest": "type_name [32996,33003]"
    },
    {
      "src": "identifier: length [31698,31704]",
      "dest": "identifier: length [38451,38457]"
    },
    {
      "src": "primitive_type [24798,24805]",
      "dest": "primitive_type [544,551]"
    },
    {
      "src": "(: ( [28743,28744]",
      "dest": "(: ( [37371,37372]"
    },
    {
      "src": "contract: contract [42625,42633]",
      "dest": "contract: contract [45890,45898]"
    },
    {
      "src": "yul_evm_builtin [28788,28791]",
      "dest": "yul_evm_builtin [37575,37578]"
    },
    {
      "src": "-: - [11264,11265]",
      "dest": "-: - [11010,11011]"
    },
    {
      "src": "identifier: REDEMPTION_ADDRESS_COUNT [32626,32650]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [40375,40399]"
    },
    {
      "src": "): ) [38928,38929]",
      "dest": "): ) [40557,40558]"
    },
    {
      "src": "type_name [4302,4309]",
      "dest": "type_name [28521,28528]"
    },
    {
      "src": "type_name [23121,23128]",
      "dest": "type_name [10025,10032]"
    },
    {
      "src": "visibility [23968,23976]",
      "dest": "visibility [29247,29255]"
    },
    {
      "src": "returns: returns [43055,43062]",
      "dest": "returns: returns [46333,46340]"
    },
    {
      "src": "uint256: uint256 [22603,22610]",
      "dest": "uint256: uint256 [24607,24614]"
    },
    {
      "src": "state_mutability [18057,18061]",
      "dest": "state_mutability [8815,8819]"
    },
    {
      "src": "parameter [16424,16440]",
      "dest": "parameter [4888,4904]"
    },
    {
      "src": "internal: internal [23073,23081]",
      "dest": "internal: internal [44366,44374]"
    },
    {
      "src": "address: address [12404,12411]",
      "dest": "address: address [578,585]"
    },
    {
      "src": "(: ( [17302,17303]",
      "dest": "(: ( [32013,32014]"
    },
    {
      "src": "return_statement [42993,43010]",
      "dest": "return_statement [46262,46279]"
    },
    {
      "src": "identifier: newOwner [16432,16440]",
      "dest": "identifier: newOwner [4896,4904]"
    },
    {
      "src": "function_definition [22531,22667]",
      "dest": "function_definition [24518,24669]"
    },
    {
      "src": "call_expression [24912,24964]",
      "dest": "call_expression [41398,41485]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol [174,241]",
      "dest": "comment: // File: contracts/true-currencies-new/ProxyStorage.sol [35,90]"
    },
    {
      "src": "identifier: _value [38445,38451]",
      "dest": "identifier: amount [29602,29608]"
    },
    {
      "src": "type_name [447,454]",
      "dest": "type_name [6384,6391]"
    },
    {
      "src": "uint256: uint256 [3900,3907]",
      "dest": "uint256: uint256 [13021,13028]"
    },
    {
      "src": "event_definition [24716,24768]",
      "dest": "event_definition [32976,33028]"
    },
    {
      "src": "identifier: _value [38810,38816]",
      "dest": "identifier: account [28676,28683]"
    },
    {
      "src": "type_name [587,591]",
      "dest": "type_name [7545,7549]"
    },
    {
      "src": "modifier: modifier [9663,9671]",
      "dest": "modifier: modifier [4586,4594]"
    },
    {
      "src": "identifier: registry [39343,39351]",
      "dest": "identifier: this [19505,19509]"
    },
    {
      "src": "modifier_invocation [16629,16645]",
      "dest": "modifier_invocation [5095,5111]"
    },
    {
      "src": "call_argument [41287,41323]",
      "dest": "call_argument [30159,30178]"
    },
    {
      "src": "\": \" [38198,38199]",
      "dest": "\": \" [43959,43960]"
    },
    {
      "src": "event_definition [1118,1196]",
      "dest": "event_definition [7965,8043]"
    },
    {
      "src": "identifier: _to [17234,17237]",
      "dest": "identifier: _to [31945,31948]"
    },
    {
      "src": "address: address [23937,23944]",
      "dest": "address: address [41252,41259]"
    },
    {
      "src": "type_name [23025,23032]",
      "dest": "type_name [25481,25488]"
    },
    {
      "src": "(: ( [24319,24320]",
      "dest": "(: ( [29392,29393]"
    },
    {
      "src": "public: public [16622,16628]",
      "dest": "public: public [5088,5094]"
    },
    {
      "src": "string_literal [24878,24900]",
      "dest": "string_literal [41348,41386]"
    },
    {
      "src": "identifier: TrueGBP [42634,42641]",
      "dest": "identifier: TrueGBP [45899,45906]"
    },
    {
      "src": "identifier: a [10526,10527]",
      "dest": "identifier: a [11322,11323]"
    },
    {
      "src": "identifier: sheep [28171,28176]",
      "dest": "identifier: amount [36501,36507]"
    },
    {
      "src": "(: ( [29090,29091]",
      "dest": "(: ( [38108,38109]"
    },
    {
      "src": "state_variable_declaration [13617,13640]",
      "dest": "state_variable_declaration [841,864]"
    },
    {
      "src": "comment: /**  * @title SafeMath  * @dev Math operations with safety checks that throw on error  */ [10320,10412]",
      "dest": "comment: // File: @openzeppelin/contracts/utils/Address.sol [14407,14457]"
    },
    {
      "src": "\": \" [40762,40763]",
      "dest": "\": \" [34812,34813]"
    },
    {
      "src": "call_argument [15829,15839]",
      "dest": "call_argument [4264,4274]"
    },
    {
      "src": "=: = [23782,23783]",
      "dest": "=: = [40343,40344]"
    },
    {
      "src": "state_mutability [43140,43144]",
      "dest": "state_mutability [23671,23675]"
    },
    {
      "src": "pure: pure [43140,43144]",
      "dest": "pure: pure [23671,23675]"
    },
    {
      "src": "): ) [17237,17238]",
      "dest": "): ) [31948,31949]"
    },
    {
      "src": "call_argument [41325,41338]",
      "dest": "call_argument [30180,30218]"
    },
    {
      "src": "identifier: claimOwnership [16605,16619]",
      "dest": "identifier: claimOwnership [5071,5085]"
    },
    {
      "src": "identifier: _subtractedValue [22104,22120]",
      "dest": "identifier: amount [25524,25530]"
    },
    {
      "src": ",: , [28251,28252]",
      "dest": ",: , [37726,37727]"
    },
    {
      "src": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [28792,28858]",
      "dest": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [37579,37645]"
    },
    {
      "src": "returns: returns [1024,1031]",
      "dest": "returns: returns [7121,7128]"
    },
    {
      "src": "}: } [11042,11043]",
      "dest": "}: } [13153,13154]"
    },
    {
      "src": "function_body [39304,39371]",
      "dest": "function_body [19478,19653]"
    },
    {
      "src": "identifier: _max [25498,25502]",
      "dest": "identifier: _max [34152,34156]"
    },
    {
      "src": "primitive_type [19267,19274]",
      "dest": "primitive_type [22647,22654]"
    },
    {
      "src": "type_cast_expression [33711,33723]",
      "dest": "type_cast_expression [45094,45110]"
    },
    {
      "src": "call_argument [17033,17054]",
      "dest": "call_argument [31650,31671]"
    },
    {
      "src": "identifier: _index [4310,4316]",
      "dest": "identifier: amount [28529,28535]"
    },
    {
      "src": "function_body [18189,18232]",
      "dest": "function_body [24023,24067]"
    },
    {
      "src": "is: is [42642,42644]",
      "dest": "is: is [45907,45909]"
    },
    {
      "src": "visibility [920,926]",
      "dest": "visibility [24569,24575]"
    },
    {
      "src": "call_argument [42167,42205]",
      "dest": "call_argument [29283,29304]"
    },
    {
      "src": "primitive_type [22096,22103]",
      "dest": "primitive_type [25516,25523]"
    },
    {
      "src": "type_name [38888,38895]",
      "dest": "type_name [40514,40521]"
    },
    {
      "src": "return_type_definition [18062,18079]",
      "dest": "return_type_definition [10460,10477]"
    },
    {
      "src": "function_definition [42757,42839]",
      "dest": "function_definition [46001,46092]"
    },
    {
      "src": "primitive_type [10235,10242]",
      "dest": "primitive_type [28584,28591]"
    },
    {
      "src": "function_definition [11160,11273]",
      "dest": "function_definition [10850,11042]"
    },
    {
      "src": "type_name [1108,1112]",
      "dest": "type_name [6020,6024]"
    },
    {
      "src": "identifier: _spender [22873,22881]",
      "dest": "identifier: recipient [42979,42988]"
    },
    {
      "src": "using: using [19248,19253]",
      "dest": "using: using [22628,22633]"
    },
    {
      "src": "return: return [11255,11261]",
      "dest": "return: return [11026,11032]"
    },
    {
      "src": "external: external [17239,17247]",
      "dest": "external: external [31950,31958]"
    },
    {
      "src": "identifier: who [487,490]",
      "dest": "identifier: recipient [7500,7509]"
    },
    {
      "src": "identifier: sheep [29046,29051]",
      "dest": "identifier: sheep [38022,38027]"
    },
    {
      "src": "address: address [612,619]",
      "dest": "address: address [7743,7750]"
    },
    {
      "src": "type_name [1320,1327]",
      "dest": "type_name [15491,15498]"
    },
    {
      "src": "identifier: attributes [13991,14001]",
      "dest": "identifier: attributes_Deprecated [1217,1238]"
    },
    {
      "src": "(: ( [15985,15986]",
      "dest": "(: ( [4422,4423]"
    },
    {
      "src": "(: ( [9169,9170]",
      "dest": "(: ( [27792,27793]"
    },
    {
      "src": "type_name [990,997]",
      "dest": "type_name [31100,31107]"
    },
    {
      "src": "primitive_type [11878,11885]",
      "dest": "primitive_type [7096,7103]"
    },
    {
      "src": "): ) [10831,10832]",
      "dest": "): ) [12969,12970]"
    },
    {
      "src": "yul_assignment [31698,31722]",
      "dest": "yul_assignment [38451,38475]"
    },
    {
      "src": "): ) [40033,40034]",
      "dest": "): ) [28743,28744]"
    },
    {
      "src": ".: . [33049,33050]",
      "dest": ".: . [8763,8764]"
    },
    {
      "src": "boolean_literal [21066,21070]",
      "dest": "boolean_literal [24973,24977]"
    },
    {
      "src": "expression_statement [20989,21049]",
      "dest": "expression_statement [33486,33512]"
    },
    {
      "src": "type_name [22712,22719]",
      "dest": "type_name [27704,27711]"
    },
    {
      "src": "parameter [10790,10799]",
      "dest": "parameter [12900,12909]"
    },
    {
      "src": "type_name [11863,11870]",
      "dest": "type_name [18306,18313]"
    },
    {
      "src": "yul_identifier [28744,28750]",
      "dest": "yul_identifier [37372,37378]"
    },
    {
      "src": "type_name [42888,42893]",
      "dest": "type_name [46141,46146]"
    },
    {
      "src": "\": \" [41411,41412]",
      "dest": "\": \" [28081,28082]"
    },
    {
      "src": "comment: //operation, but we can't add checks to disallow it without losing a lot of [25187,25262]",
      "dest": "comment: /**      * @dev Destroys `amount` tokens from `msg.sender`, reducing the      * total supply.      * @param amount amount of tokens to burn      *      * Emits a {Transfer} event with `to` set to the zero address.      * Emits a {Burn} event with `burner` set to `msg.sender`      *      * Requirements      *      * - `msg.sender` must have at least `amount` tokens.      *      */ [33036,33430]"
    },
    {
      "src": "call_expression [34176,34226]",
      "dest": "call_expression [41920,42040]"
    },
    {
      "src": "uint256: uint256 [40497,40504]",
      "dest": "uint256: uint256 [41928,41935]"
    },
    {
      "src": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [28657,28723]",
      "dest": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [37236,37302]"
    },
    {
      "src": ",: , [40364,40365]",
      "dest": ",: , [34684,34685]"
    },
    {
      "src": "uint256: uint256 [19267,19274]",
      "dest": "uint256: uint256 [22647,22654]"
    },
    {
      "src": "identifier: sender [33050,33056]",
      "dest": "identifier: sender [8764,8770]"
    },
    {
      "src": "(: ( [28441,28442]",
      "dest": "(: ( [36934,36935]"
    },
    {
      "src": "(: ( [24735,24736]",
      "dest": "(: ( [32995,32996]"
    },
    {
      "src": "parameter [3309,3313]",
      "dest": "parameter [27003,27007]"
    },
    {
      "src": "call_argument [25003,25009]",
      "dest": "call_argument [41511,41517]"
    },
    {
      "src": "{: { [25999,26000]",
      "dest": "{: { [35919,35920]"
    },
    {
      "src": "sstore: sstore [28882,28888]",
      "dest": "sstore: sstore [38152,38158]"
    },
    {
      "src": "(: ( [31626,31627]",
      "dest": "(: ( [38376,38377]"
    },
    {
      "src": "identifier: balanceOf [469,478]",
      "dest": "identifier: balanceOf [5661,5670]"
    },
    {
      "src": "address: address [12005,12012]",
      "dest": "address: address [17903,17910]"
    },
    {
      "src": "modifier_invocation [38124,38133]",
      "dest": "modifier_invocation [42462,42471]"
    },
    {
      "src": "yul_identifier [28442,28448]",
      "dest": "yul_identifier [36935,36941]"
    },
    {
      "src": "primitive_type [4302,4309]",
      "dest": "primitive_type [28521,28528]"
    },
    {
      "src": "): ) [13989,13990]",
      "dest": "): ) [1215,1216]"
    },
    {
      "src": "): ) [42865,42866]",
      "dest": "): ) [46118,46119]"
    },
    {
      "src": "number_literal: 18 [42712,42714]",
      "dest": "number_literal: 18 [45956,45958]"
    },
    {
      "src": "primitive_type [1002,1009]",
      "dest": "primitive_type [19403,19410]"
    },
    {
      "src": "comment: /**  * @title ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/20  */ [742,833]",
      "dest": "comment: /**  * @title ClamableOwnable  * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.  * and provides basic authorization control functions. Inherits storage layout of  * ProxyStorage.  */ [3495,3714]"
    },
    {
      "src": "parameter [40411,40415]",
      "dest": "parameter [42438,42451]"
    },
    {
      "src": "(: ( [40116,40117]",
      "dest": "(: ( [28830,28831]"
    },
    {
      "src": "constant: constant [42727,42735]",
      "dest": "constant: constant [45971,45979]"
    },
    {
      "src": "{: { [10833,10834]",
      "dest": "{: { [12971,12972]"
    },
    {
      "src": "): ) [42980,42981]",
      "dest": "): ) [46249,46250]"
    },
    {
      "src": "type_name [13914,13921]",
      "dest": "type_name [1141,1148]"
    },
    {
      "src": "address: address [16977,16984]",
      "dest": "address: address [31586,31593]"
    },
    {
      "src": "call_argument [41833,41846]",
      "dest": "call_argument [27797,27836]"
    },
    {
      "src": "function_body [25523,25667]",
      "dest": "function_body [34177,34346]"
    },
    {
      "src": "identifier: location [28776,28784]",
      "dest": "identifier: location [37563,37571]"
    },
    {
      "src": "string [43090,43096]",
      "dest": "string [46375,46381]"
    },
    {
      "src": ".: . [21040,21041]",
      "dest": ".: . [33495,33496]"
    },
    {
      "src": "): ) [2446,2447]",
      "dest": "): ) [4681,4682]"
    },
    {
      "src": "}: } [17354,17355]",
      "dest": "}: } [32074,32075]"
    },
    {
      "src": "): ) [20097,20098]",
      "dest": "): ) [24903,24904]"
    },
    {
      "src": "public: public [31787,31793]",
      "dest": "public: public [38601,38607]"
    },
    {
      "src": "constructor_definition [15742,15855]",
      "dest": "constructor_definition [4177,4290]"
    },
    {
      "src": "modifier: modifier [15946,15954]",
      "dest": "modifier: modifier [4383,4391]"
    },
    {
      "src": "): ) [20075,20076]",
      "dest": "): ) [24864,24865]"
    },
    {
      "src": ",: , [28448,28449]",
      "dest": ",: , [36941,36942]"
    },
    {
      "src": "{: { [24707,24708]",
      "dest": "{: { [32495,32496]"
    },
    {
      "src": "identifier: location [28243,28251]",
      "dest": "identifier: location [37718,37726]"
    },
    {
      "src": "function_body [31663,31740]",
      "dest": "function_body [38416,38493]"
    },
    {
      "src": ".: . [17324,17325]",
      "dest": ".: . [32044,32045]"
    },
    {
      "src": "call_argument [20136,20142]",
      "dest": "call_argument [24948,24954]"
    },
    {
      "src": "identifier: DECIMALS [42823,42831]",
      "dest": "identifier: DECIMALS [46076,46084]"
    },
    {
      "src": "return_type_definition [3300,3314]",
      "dest": "return_type_definition [26994,27008]"
    },
    {
      "src": "external: external [26170,26178]",
      "dest": "external: external [33466,33474]"
    },
    {
      "src": "identifier: _account [40117,40125]",
      "dest": "identifier: account [28843,28850]"
    },
    {
      "src": "returns: returns [42789,42796]",
      "dest": "returns: returns [46042,46049]"
    },
    {
      "src": ",: , [30887,30888]",
      "dest": ",: , [36688,36689]"
    },
    {
      "src": "type_name [13717,13724]",
      "dest": "type_name [944,951]"
    },
    {
      "src": "identifier: _addr [11871,11876]",
      "dest": "identifier: target [18314,18320]"
    },
    {
      "src": "function_definition [12774,12932]",
      "dest": "function_definition [24280,24455]"
    },
    {
      "src": "uint256: uint256 [13981,13988]",
      "dest": "uint256: uint256 [1207,1214]"
    },
    {
      "src": "{: { [20978,20979]",
      "dest": "{: { [33475,33476]"
    },
    {
      "src": "comment: /**  * @title Claimable  * @dev Extension for the Ownable contract, where the ownership needs to be claimed.  * This allows the new owner to accept the transfer.  */ [9328,9497]",
      "dest": "comment: // File: @openzeppelin/contracts/math/SafeMath.sol [9026,9076]"
    },
    {
      "src": "primitive_type [25476,25483]",
      "dest": "primitive_type [34130,34137]"
    },
    {
      "src": "primitive_type [3550,3557]",
      "dest": "primitive_type [27723,27730]"
    },
    {
      "src": "identifier: transfer [17325,17333]",
      "dest": "identifier: transfer [32045,32053]"
    },
    {
      "src": "state_mutability [42349,42353]",
      "dest": "state_mutability [45056,45060]"
    },
    {
      "src": "call_argument [4992,4998]",
      "dest": "call_argument [29461,29467]"
    },
    {
      "src": "binary_expression [11420,11425]",
      "dest": "binary_expression [10037,10042]"
    },
    {
      "src": "primitive_type [3250,3257]",
      "dest": "primitive_type [15518,15525]"
    },
    {
      "src": "function_definition [460,522]",
      "dest": "function_definition [5652,5720]"
    },
    {
      "src": "identifier: a [11361,11362]",
      "dest": "identifier: a [9968,9969]"
    },
    {
      "src": "function_body [20099,20185]",
      "dest": "function_body [24905,24985]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol [676,738]",
      "dest": "comment: // File: contracts/true-currencies-new/ClaimableOwnable.sol [3405,3464]"
    },
    {
      "src": "primitive_type [13848,13855]",
      "dest": "primitive_type [1426,1433]"
    },
    {
      "src": "yul_path [28961,28967]",
      "dest": "yul_path [38231,38237]"
    },
    {
      "src": "(: ( [10517,10518]",
      "dest": "(: ( [11313,11314]"
    },
    {
      "src": "identifier: balance [17047,17054]",
      "dest": "identifier: balance [31664,31671]"
    },
    {
      "src": "return_type_definition [21916,21930]",
      "dest": "return_type_definition [45061,45075]"
    },
    {
      "src": "identifier: transferOwnership [16406,16423]",
      "dest": "identifier: transferOwnership [4870,4887]"
    },
    {
      "src": "identifier: location [31358,31366]",
      "dest": "identifier: location [37777,37785]"
    },
    {
      "src": "contract_body [42677,43204]",
      "dest": "contract_body [45923,46392]"
    },
    {
      "src": "identifier: _who [1314,1318]",
      "dest": "identifier: account [5679,5686]"
    },
    {
      "src": "state_mutability [433,437]",
      "dest": "state_mutability [6370,6374]"
    },
    {
      "src": "sstore: sstore [29084,29090]",
      "dest": "sstore: sstore [38102,38108]"
    },
    {
      "src": "}: } [25666,25667]",
      "dest": "}: } [34345,34346]"
    },
    {
      "src": "type_name [18629,18636]",
      "dest": "type_name [38622,38629]"
    },
    {
      "src": "if: if [10581,10583]",
      "dest": "if: if [11600,11602]"
    },
    {
      "src": "identifier: pendingOwner [16745,16757]",
      "dest": "identifier: pendingOwner [5211,5223]"
    },
    {
      "src": "type_name [6482,6489]",
      "dest": "type_name [1295,1302]"
    },
    {
      "src": ",: , [11182,11183]",
      "dest": ",: , [10872,10873]"
    },
    {
      "src": "identifier: oldValue [22172,22180]",
      "dest": "identifier: c [11004,11005]"
    },
    {
      "src": "emit_statement [38407,38453]",
      "dest": "emit_statement [29567,29610]"
    },
    {
      "src": "identifier: _who [22859,22863]",
      "dest": "identifier: sender [42954,42960]"
    },
    {
      "src": "): ) [591,592]",
      "dest": "): ) [7549,7550]"
    },
    {
      "src": "visibility [21181,21189]",
      "dest": "visibility [19446,19454]"
    },
    {
      "src": "(: ( [24858,24859]",
      "dest": "(: ( [41322,41323]"
    },
    {
      "src": "call_argument [24994,25001]",
      "dest": "call_argument [41502,41509]"
    },
    {
      "src": "sub: sub [28788,28791]",
      "dest": "sub: sub [37575,37578]"
    },
    {
      "src": "call_expression [9142,9173]",
      "dest": "call_expression [27767,27837]"
    },
    {
      "src": ",: , [28750,28751]",
      "dest": ",: , [37378,37379]"
    },
    {
      "src": "(: ( [18297,18298]",
      "dest": "(: ( [23837,23838]"
    },
    {
      "src": "primitive_type [22712,22719]",
      "dest": "primitive_type [27704,27711]"
    },
    {
      "src": "address: address [9923,9930]",
      "dest": "address: address [7476,7483]"
    },
    {
      "src": "string: string [43064,43070]",
      "dest": "string: string [46342,46348]"
    },
    {
      "src": "visibility [23073,23081]",
      "dest": "visibility [44366,44374]"
    },
    {
      "src": "string [5087,5089]",
      "dest": "string [27108,27147]"
    },
    {
      "src": "address: address [23317,23324]",
      "dest": "address: address [44333,44340]"
    },
    {
      "src": "event: event [1118,1123]",
      "dest": "event: event [7965,7970]"
    },
    {
      "src": "identifier: require [34176,34183]",
      "dest": "identifier: require [41920,41927]"
    },
    {
      "src": "visibility [16990,16998]",
      "dest": "visibility [31607,31615]"
    },
    {
      "src": "): ) [18157,18158]",
      "dest": "): ) [23982,23983]"
    },
    {
      "src": "identifier: remainingGasRefundPool [31604,31626]",
      "dest": "identifier: remainingGasRefundPool [38354,38376]"
    },
    {
      "src": "view: view [22589,22593]",
      "dest": "view: view [24576,24580]"
    },
    {
      "src": "identifier: _spender [21014,21022]",
      "dest": "identifier: amount [33504,33510]"
    },
    {
      "src": "(: ( [38428,38429]",
      "dest": "(: ( [29597,29598]"
    },
    {
      "src": "parameter [12382,12402]",
      "dest": "parameter [19693,19707]"
    },
    {
      "src": "member_expression [9706,9716]",
      "dest": "member_expression [4633,4643]"
    },
    {
      "src": "state_variable_declaration [42721,42749]",
      "dest": "state_variable_declaration [45965,45993]"
    },
    {
      "src": "yul_function_call [31392,31411]",
      "dest": "yul_function_call [36820,36839]"
    },
    {
      "src": "type_name [42686,42691]",
      "dest": "type_name [45930,45935]"
    },
    {
      "src": "call_expression [40701,40764]",
      "dest": "call_expression [34739,34814]"
    },
    {
      "src": "solidity_version_comparison_operator [15,17]",
      "dest": "solidity_version_comparison_operator [5325,5327]"
    },
    {
      "src": ",: , [24937,24938]",
      "dest": ",: , [41435,41436]"
    },
    {
      "src": "call_argument [25542,25554]",
      "dest": "call_argument [34196,34208]"
    },
    {
      "src": "yul_assignment [30863,30891]",
      "dest": "yul_assignment [36664,36692]"
    },
    {
      "src": "private: private [13725,13732]",
      "dest": "private: private [952,959]"
    },
    {
      "src": "identifier: a [10585,10586]",
      "dest": "identifier: a [11604,11605]"
    },
    {
      "src": "return_type_definition [4714,4731]",
      "dest": "return_type_definition [14311,14328]"
    },
    {
      "src": "}: } [25017,25018]",
      "dest": "}: } [41562,41563]"
    },
    {
      "src": "expression_statement [42158,42222]",
      "dest": "expression_statement [29275,29343]"
    },
    {
      "src": "inheritance_specifier [15466,15478]",
      "dest": "inheritance_specifier [3745,3757]"
    },
    {
      "src": "uint256: uint256 [18595,18602]",
      "dest": "uint256: uint256 [24850,24857]"
    },
    {
      "src": ",: , [25001,25002]",
      "dest": ",: , [41509,41510]"
    },
    {
      "src": "identifier: _approveAllArgs [20110,20125]",
      "dest": "identifier: _approve [24916,24924]"
    },
    {
      "src": "parameter [3516,3528]",
      "dest": "parameter [28504,28519]"
    },
    {
      "src": "(: ( [20125,20126]",
      "dest": "(: ( [24924,24925]"
    },
    {
      "src": "(: ( [41358,41359]",
      "dest": "(: ( [28033,28034]"
    },
    {
      "src": "visibility [29166,29174]",
      "dest": "visibility [42453,42461]"
    },
    {
      "src": "{: { [26179,26180]",
      "dest": "{: { [36077,36078]"
    },
    {
      "src": "yul_path [30733,30739]",
      "dest": "yul_path [36446,36452]"
    },
    {
      "src": "state_mutability [42784,42788]",
      "dest": "state_mutability [46037,46041]"
    },
    {
      "src": "primitive_type [22698,22705]",
      "dest": "primitive_type [27688,27695]"
    },
    {
      "src": "struct: struct [1397,1403]",
      "dest": "struct: struct [1529,1535]"
    },
    {
      "src": "yul_decimal_number: 0 [31409,31410]",
      "dest": "yul_decimal_number: 0 [36837,36838]"
    },
    {
      "src": "visibility [24831,24839]",
      "dest": "visibility [10446,10454]"
    },
    {
      "src": ":=: := [28648,28650]",
      "dest": ":=: := [37227,37229]"
    },
    {
      "src": "identifier: onlyOwner [17248,17257]",
      "dest": "identifier: onlyOwner [31959,31968]"
    },
    {
      "src": "uint256: uint256 [24752,24759]",
      "dest": "uint256: uint256 [33012,33019]"
    },
    {
      "src": "parameter [22712,22728]",
      "dest": "parameter [27704,27721]"
    },
    {
      "src": "type_cast_expression [15829,15839]",
      "dest": "type_cast_expression [4264,4274]"
    },
    {
      "src": "call_expression [24851,24901]",
      "dest": "call_expression [41315,41387]"
    },
    {
      "src": "): ) [18187,18188]",
      "dest": "): ) [24021,24022]"
    },
    {
      "src": "address: address [15829,15836]",
      "dest": "address: address [4264,4271]"
    },
    {
      "src": "variable_declaration [22231,22247]",
      "dest": "variable_declaration [11659,11668]"
    },
    {
      "src": ",: , [38431,38432]",
      "dest": ",: , [29588,29589]"
    },
    {
      "src": "): ) [10244,10245]",
      "dest": "): ) [28593,28594]"
    },
    {
      "src": "primitive_type [10518,10525]",
      "dest": "primitive_type [11314,11321]"
    },
    {
      "src": "identifier: _value [11744,11750]",
      "dest": "identifier: amount [7519,7525]"
    },
    {
      "src": "comment: // File: contracts/modularERC20/ModularBasicToken.sol [17612,17665]",
      "dest": "comment: /**  * @title Gas Reclaim Legacy  *  * Note: this contract does not affect any of the token logic. It merely  * exists so the TokenController (owner) can reclaim the sponsored gas  *  * Previously TrueCurrency has a feature called \"gas boost\" which allowed  * us to sponsor gas by setting non-empty storage slots to 1.  * We are depricating this feature, but there is a bunch of gas saved  * from years of sponsoring gas. This contract is meant to allow the owner  * to take advantage of this leftover gas. Once all the slots are used,  * this contract can be removed from TrueCurrency.  *  * Utilitzes the gas refund mechanism in EVM. Each time an non-empty  * storage slot is set to 0, evm will refund 15,000 to the sender.  * Also utilized the refund for selfdestruct, see gasRefund39  *  */ [35078,35889]"
    },
    {
      "src": "function_body [28602,29136]",
      "dest": "function_body [37141,38265]"
    },
    {
      "src": "yul_path [30788,30796]",
      "dest": "yul_path [37811,37819]"
    },
    {
      "src": "comment: // A wrapper around the allowanceOf mapping. [12158,12202]",
      "dest": "comment: /**  * @dev Implementation of the {IERC20} interface.  *  * This implementation is agnostic to the way tokens are created. This means  * that a supply mechanism has to be added in a derived contract using {_mint}.  * For a generic mechanism see {ERC20PresetMinterPauser}.  *  * TIP: For a detailed writeup see our guide  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How  * to implement supply mechanisms].  *  * We have followed general OpenZeppelin guidelines: functions revert instead  * of returning `false` on failure. This behavior is nonetheless conventional  * and does not conflict with the expectations of ERC20 applications.  *  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.  * This allows applications to reconstruct the allowance for all accounts just  * by listening to said events. Other implementations of the EIP may not emit  * these events, as it isn't required by the specification.  *  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}  * functions have been added to mitigate the well-known issues around setting  * allowances. See {IERC20-approve}.  */ [21373,22558]"
    },
    {
      "src": "parameter [10518,10527]",
      "dest": "parameter [11314,11323]"
    },
    {
      "src": "type_cast_expression [33071,33083]",
      "dest": "type_cast_expression [45141,45157]"
    },
    {
      "src": "boolean_literal [13457,13462]",
      "dest": "boolean_literal [678,683]"
    },
    {
      "src": "return_type_definition [42879,42894]",
      "dest": "return_type_definition [46132,46147]"
    },
    {
      "src": "function: function [16955,16963]",
      "dest": "function: function [31564,31572]"
    },
    {
      "src": "type_name [12020,12027]",
      "dest": "type_name [26233,26240]"
    },
    {
      "src": "yul_evm_builtin [29032,29035]",
      "dest": "yul_evm_builtin [38006,38009]"
    },
    {
      "src": "): ) [23752,23753]",
      "dest": "): ) [40786,40787]"
    },
    {
      "src": "type_cast_expression [38798,38808]",
      "dest": "type_cast_expression [28664,28674]"
    },
    {
      "src": "primitive_type [40497,40504]",
      "dest": "primitive_type [41928,41935]"
    },
    {
      "src": "(: ( [10646,10647]",
      "dest": "(: ( [11694,11695]"
    },
    {
      "src": "assignment_expression [15774,15792]",
      "dest": "assignment_expression [4209,4227]"
    },
    {
      "src": "(: ( [35174,35175]",
      "dest": "(: ( [43231,43232]"
    },
    {
      "src": "function: function [10505,10513]",
      "dest": "function: function [11301,11309]"
    },
    {
      "src": "contract_body [398,672]",
      "dest": "contract_body [5428,8046]"
    },
    {
      "src": "(: ( [24993,24994]",
      "dest": "(: ( [41501,41502]"
    },
    {
      "src": "parameter [43064,43070]",
      "dest": "parameter [46342,46355]"
    },
    {
      "src": "indexed: indexed [642,649]",
      "dest": "indexed: indexed [7773,7780]"
    },
    {
      "src": "address: address [38160,38167]",
      "dest": "address: address [27869,27876]"
    },
    {
      "src": "yul_path [28161,28169]",
      "dest": "yul_path [36491,36499]"
    },
    {
      "src": "event_paramater [634,652]",
      "dest": "event_paramater [7765,7783]"
    },
    {
      "src": "primitive_type [40127,40134]",
      "dest": "primitive_type [28831,28838]"
    },
    {
      "src": "type_name [38211,38215]",
      "dest": "type_name [19950,19954]"
    },
    {
      "src": "{: { [31369,31370]",
      "dest": "{: { [36708,36709]"
    },
    {
      "src": "uint256: uint256 [10529,10536]",
      "dest": "uint256: uint256 [11325,11332]"
    },
    {
      "src": "string [41833,41846]",
      "dest": "string [27797,27836]"
    },
    {
      "src": "primitive_type [12404,12411]",
      "dest": "primitive_type [578,585]"
    },
    {
      "src": "type_name [33630,33637]",
      "dest": "type_name [22679,22686]"
    },
    {
      "src": "yul_identifier [28776,28784]",
      "dest": "yul_identifier [37563,37571]"
    },
    {
      "src": "identifier: location [31399,31407]",
      "dest": "identifier: location [36827,36835]"
    },
    {
      "src": "\": \" [34264,34265]",
      "dest": "\": \" [44020,44021]"
    },
    {
      "src": "type_name [1181,1188]",
      "dest": "type_name [8028,8035]"
    },
    {
      "src": "primitive_type [6007,6014]",
      "dest": "primitive_type [13677,13684]"
    },
    {
      "src": "uint256: uint256 [6461,6468]",
      "dest": "uint256: uint256 [31112,31119]"
    },
    {
      "src": "}: } [43203,43204]",
      "dest": "}: } [46391,46392]"
    },
    {
      "src": "\": \" [34224,34225]",
      "dest": "\": \" [42038,42039]"
    },
    {
      "src": "primitive_type [16760,16767]",
      "dest": "primitive_type [5226,5233]"
    },
    {
      "src": "external: external [158,166]",
      "dest": "external: external [5532,5540]"
    },
    {
      "src": "primitive_type [22603,22610]",
      "dest": "primitive_type [24607,24614]"
    },
    {
      "src": "function_body [39821,40156]",
      "dest": "function_body [28554,28867]"
    },
    {
      "src": "call_expression [41278,41339]",
      "dest": "call_expression [30151,30219]"
    },
    {
      "src": "identifier: _min [25484,25488]",
      "dest": "identifier: _min [34138,34142]"
    },
    {
      "src": "type_name [10824,10831]",
      "dest": "type_name [12962,12969]"
    },
    {
      "src": "number_literal: 0 [40135,40136]",
      "dest": "number_literal: 0 [28839,28840]"
    },
    {
      "src": "contract: contract [15445,15453]",
      "dest": "contract: contract [3716,3724]"
    },
    {
      "src": "visibility [42133,42141]",
      "dest": "visibility [30123,30131]"
    },
    {
      "src": "function_definition [20026,20185]",
      "dest": "function_definition [24816,24985]"
    },
    {
      "src": "type_name [11667,11674]",
      "dest": "type_name [1078,1085]"
    },
    {
      "src": "address: address [4823,4830]",
      "dest": "address: address [29214,29221]"
    },
    {
      "src": "}: } [18348,18349]",
      "dest": "}: } [23884,23885]"
    },
    {
      "src": "primitive_type [23815,23822]",
      "dest": "primitive_type [36052,36059]"
    },
    {
      "src": "visibility [34063,34071]",
      "dest": "visibility [43857,43865]"
    },
    {
      "src": "type_name [6482,6491]",
      "dest": "type_name [1276,1303]"
    },
    {
      "src": "identifier: value [23695,23700]",
      "dest": "identifier: value [32737,32742]"
    },
    {
      "src": "): ) [39351,39352]",
      "dest": "): ) [19509,19510]"
    },
    {
      "src": "parameter [587,591]",
      "dest": "parameter [7545,7549]"
    },
    {
      "src": "\": \" [42045,42046]",
      "dest": "\": \" [28596,28597]"
    },
    {
      "src": "identifier: totalSupply [412,423]",
      "dest": "identifier: allowance [6319,6328]"
    },
    {
      "src": "internal: internal [41536,41544]",
      "dest": "internal: internal [31128,31136]"
    },
    {
      "src": "function_body [18307,18349]",
      "dest": "function_body [23847,23885]"
    },
    {
      "src": "parameter [18426,18446]",
      "dest": "parameter [38400,38414]"
    },
    {
      "src": "): ) [28340,28341]",
      "dest": "): ) [36643,36644]"
    },
    {
      "src": "}: } [9746,9747]",
      "dest": "}: } [4701,4702]"
    },
    {
      "src": "yul_evm_builtin [28651,28656]",
      "dest": "yul_evm_builtin [37230,37235]"
    },
    {
      "src": "=>: => [11664,11666]",
      "dest": "=>: => [1075,1077]"
    },
    {
      "src": "yul_evm_builtin [28957,28960]",
      "dest": "yul_evm_builtin [38227,38230]"
    },
    {
      "src": "bytes32: bytes32 [1320,1327]",
      "dest": "bytes32: bytes32 [15491,15498]"
    },
    {
      "src": "identifier: burnMax [13564,13571]",
      "dest": "identifier: burnMax [785,792]"
    },
    {
      "src": "=: = [15780,15781]",
      "dest": "=: = [4215,4216]"
    },
    {
      "src": "type_name [3550,3557]",
      "dest": "type_name [27723,27730]"
    },
    {
      "src": "comment: /**         Deploy (9 bytes)           PC Assembly       Opcodes                                       Stack           00 PUSH1(31)      60 1f                                         1f           02 DUP1           80                                            1f 1f           03 PUSH1(9)       60 09                                         1f 1f 09           05 RETURNDATASIZE 3d                                            1f 1f 09 00           06 CODECOPY       39                                            1f           07 RETURNDATASIZE 3d                                            1f 00           08 RETURN         f3         Sheep (31 bytes = 3 + 20 + 8)           PC Assembly       Opcodes                                       Stack           00 RETURNDATASIZE 3d                                            0           01 CALLER         33                                            0 caller           02 PUSH20(me)     73 memememememememememememememememememememe   0 caller me           17 EQ             14                                            0 valid           18 PUSH1(1d)      60 1d                                         0 valid 1d           1a JUMPI          57                                            0           1b DUP1           80                                            0 0           1c REVERT         fd           1d JUMPDEST       5b                                            0           1e SELFDESTRUCT   ff         */ [26190,27667]",
      "dest": "comment: // refund gas [36088,36101]"
    },
    {
      "src": ",: , [29057,29058]",
      "dest": ",: , [38033,38034]"
    },
    {
      "src": "parameter [990,1000]",
      "dest": "parameter [31100,31110]"
    },
    {
      "src": "visibility [31161,31169]",
      "dest": "visibility [12283,12291]"
    },
    {
      "src": "yul_path [30863,30871]",
      "dest": "yul_path [36664,36672]"
    },
    {
      "src": "return_type_definition [43055,43071]",
      "dest": "return_type_definition [46333,46356]"
    },
    {
      "src": "binary_expression [10647,10652]",
      "dest": "binary_expression [11695,11700]"
    },
    {
      "src": "identifier: c [11439,11440]",
      "dest": "identifier: c [10061,10062]"
    },
    {
      "src": "primitive_type [13617,13623]",
      "dest": "primitive_type [841,847]"
    },
    {
      "src": "function: function [43025,43033]",
      "dest": "function: function [46294,46302]"
    },
    {
      "src": "(: ( [15514,15515]",
      "dest": "(: ( [3972,3973]"
    },
    {
      "src": "call_argument [38421,38431]",
      "dest": "call_argument [29590,29600]"
    },
    {
      "src": "type_name [13646,13652]",
      "dest": "type_name [870,876]"
    },
    {
      "src": ".: . [17046,17047]",
      "dest": ".: . [31663,31664]"
    },
    {
      "src": "}: } [17062,17063]",
      "dest": "}: } [31679,31680]"
    },
    {
      "src": "identifier: symbol [43034,43040]",
      "dest": "identifier: symbol [46303,46309]"
    },
    {
      "src": "uint256: uint256 [11173,11180]",
      "dest": "uint256: uint256 [10863,10870]"
    },
    {
      "src": "identifier: _spender [22720,22728]",
      "dest": "identifier: recipient [27712,27721]"
    },
    {
      "src": "): ) [40689,40690]",
      "dest": "): ) [34901,34902]"
    },
    {
      "src": "struct_declaration [1397,1530]",
      "dest": "struct_declaration [1529,1614]"
    },
    {
      "src": "): ) [4730,4731]",
      "dest": "): ) [14327,14328]"
    },
    {
      "src": "function_body [20978,21078]",
      "dest": "function_body [33475,33519]"
    },
    {
      "src": "expression_statement [12880,12925]",
      "dest": "expression_statement [24383,24426]"
    },
    {
      "src": "emit: emit [25629,25633]",
      "dest": "emit: emit [34308,34312]"
    },
    {
      "src": "visibility [18611,18619]",
      "dest": "visibility [18369,18377]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/ownership/Ownable.sol [8170,8232]",
      "dest": "comment: /**  * @dev Interface of the ERC20 standard as defined in the EIP.  */ [5337,5409]"
    },
    {
      "src": "yul_evm_builtin [28363,28369]",
      "dest": "yul_evm_builtin [36915,36921]"
    },
    {
      "src": "visibility [22730,22738]",
      "dest": "visibility [27739,27747]"
    },
    {
      "src": ",: , [25488,25489]",
      "dest": ",: , [34142,34143]"
    },
    {
      "src": "type_name [23091,23095]",
      "dest": "type_name [1769,1773]"
    },
    {
      "src": "address: address [23331,23338]",
      "dest": "address: address [45030,45037]"
    },
    {
      "src": "function: function [11160,11168]",
      "dest": "function: function [10850,10858]"
    },
    {
      "src": "function_definition [403,456]",
      "dest": "function_definition [6310,6393]"
    },
    {
      "src": "contract_declaration [25959,32293]",
      "dest": "contract_declaration [35891,38777]"
    },
    {
      "src": "): ) [24321,24322]",
      "dest": "): ) [29394,29395]"
    },
    {
      "src": "identifier: add [11349,11352]",
      "dest": "identifier: add [9956,9959]"
    },
    {
      "src": "mapping: mapping [12303,12310]",
      "dest": "mapping: mapping [1347,1354]"
    },
    {
      "src": "variable_declaration [37184,37196]",
      "dest": "variable_declaration [16970,16982]"
    },
    {
      "src": "yul_identifier [31399,31407]",
      "dest": "yul_identifier [36827,36835]"
    },
    {
      "src": "identifier: value [1085,1090]",
      "dest": "identifier: value [18929,18934]"
    },
    {
      "src": "state_mutability [31794,31798]",
      "dest": "state_mutability [38608,38612]"
    },
    {
      "src": "address: address [990,997]",
      "dest": "address: address [31100,31107]"
    },
    {
      "src": "\": \" [42219,42220]",
      "dest": "\": \" [29340,29341]"
    },
    {
      "src": "identifier: RegistryClone [1257,1270]",
      "dest": "identifier: IERC20 [5421,5427]"
    },
    {
      "src": "mapping: mapping [13874,13881]",
      "dest": "mapping: mapping [1103,1110]"
    },
    {
      "src": "function_definition [39754,40156]",
      "dest": "function_definition [28489,28867]"
    },
    {
      "src": "binary_expression [42167,42205]",
      "dest": "binary_expression [29283,29304]"
    },
    {
      "src": "string_literal [42207,42220]",
      "dest": "string_literal [29306,29341]"
    },
    {
      "src": "uint256: uint256 [13516,13523]",
      "dest": "uint256: uint256 [737,744]"
    },
    {
      "src": "primitive_type [37184,37188]",
      "dest": "primitive_type [16970,16974]"
    },
    {
      "src": "call_expression [17287,17308]",
      "dest": "call_expression [31998,32028]"
    },
    {
      "src": "identifier: a [11246,11247]",
      "dest": "identifier: a [10969,10970]"
    },
    {
      "src": "binary_expression [11439,11445]",
      "dest": "binary_expression [10061,10067]"
    },
    {
      "src": "return: return [10602,10608]",
      "dest": "return: return [11627,11633]"
    },
    {
      "src": "call_argument [17589,17594]",
      "dest": "call_argument [44094,44099]"
    },
    {
      "src": "): ) [16988,16989]",
      "dest": "): ) [31605,31606]"
    },
    {
      "src": "emit_statement [25629,25660]",
      "dest": "emit_statement [34308,34339]"
    },
    {
      "src": "(: ( [28242,28243]",
      "dest": "(: ( [37717,37718]"
    },
    {
      "src": "primitive_type [25490,25497]",
      "dest": "primitive_type [34144,34151]"
    },
    {
      "src": "interface_declaration [1247,1368]",
      "dest": "interface_declaration [5411,8046]"
    },
    {
      "src": "return_statement [18318,18342]",
      "dest": "return_statement [23858,23878]"
    },
    {
      "src": "call_argument [38445,38451]",
      "dest": "call_argument [29602,29608]"
    },
    {
      "src": "binary_expression [34245,34262]",
      "dest": "binary_expression [43980,44018]"
    },
    {
      "src": "view: view [31636,31640]",
      "dest": "view: view [38386,38390]"
    },
    {
      "src": "call_expression [11234,11248]",
      "dest": "call_expression [10956,10985]"
    },
    {
      "src": "inheritance_specifier [42647,42676]",
      "dest": "inheritance_specifier [45910,45922]"
    },
    {
      "src": "parameter [11878,11892]",
      "dest": "parameter [7096,7110]"
    },
    {
      "src": "true: true [20173,20177]",
      "dest": "true: true [25768,25772]"
    },
    {
      "src": "expression_statement [17319,17348]",
      "dest": "expression_statement [32039,32068]"
    },
    {
      "src": "using_directive [19248,19275]",
      "dest": "using_directive [22628,22655]"
    },
    {
      "src": "type_name [2684,2691]",
      "dest": "type_name [903,910]"
    },
    {
      "src": "identifier: newValue [22239,22247]",
      "dest": "identifier: c [11667,11668]"
    },
    {
      "src": "constructor: constructor [15742,15753]",
      "dest": "constructor: constructor [4177,4188]"
    },
    {
      "src": "is: is [24683,24685]",
      "dest": "is: is [32477,32479]"
    },
    {
      "src": "(: ( [3308,3309]",
      "dest": "(: ( [27002,27003]"
    },
    {
      "src": "call_argument [38806,38807]",
      "dest": "call_argument [28672,28673]"
    },
    {
      "src": "(: ( [31713,31714]",
      "dest": "(: ( [38466,38467]"
    },
    {
      "src": "event_paramater [1181,1194]",
      "dest": "event_paramater [8028,8041]"
    },
    {
      "src": "bool: bool [33013,33017]",
      "dest": "bool: bool [15229,15233]"
    },
    {
      "src": "string_literal [41325,41338]",
      "dest": "string_literal [30180,30218]"
    },
    {
      "src": "(: ( [4722,4723]",
      "dest": "(: ( [14319,14320]"
    },
    {
      "src": "expression_statement [17020,17056]",
      "dest": "expression_statement [31637,31673]"
    },
    {
      "src": "primitive_type [654,661]",
      "dest": "primitive_type [7785,7792]"
    },
    {
      "src": "call_argument [17339,17346]",
      "dest": "call_argument [32059,32066]"
    },
    {
      "src": "}: } [35476,35477]",
      "dest": "}: } [43497,43498]"
    },
    {
      "src": "type_cast_expression [16760,16770]",
      "dest": "type_cast_expression [5226,5236]"
    },
    {
      "src": "identifier: _value [39586,39592]",
      "dest": "identifier: amount [45427,45433]"
    },
    {
      "src": "(: ( [1107,1108]",
      "dest": "(: ( [6019,6020]"
    },
    {
      "src": "yul_hex_number: 0xfffff [31714,31721]",
      "dest": "yul_hex_number: 0xfffff [38467,38474]"
    },
    {
      "src": "state_variable_declaration [13278,13295]",
      "dest": "state_variable_declaration [519,536]"
    },
    {
      "src": "call_expression [11432,11446]",
      "dest": "call_expression [10053,10099]"
    },
    {
      "src": "string [25556,25567]",
      "dest": "string [34210,34246]"
    },
    {
      "src": "=: = [42745,42746]",
      "dest": "=: = [45989,45990]"
    },
    {
      "src": "returns: returns [1099,1106]",
      "dest": "returns: returns [6011,6018]"
    },
    {
      "src": "identifier: location [30788,30796]",
      "dest": "identifier: location [37811,37819]"
    },
    {
      "src": "(: ( [40024,40025]",
      "dest": "(: ( [28736,28737]"
    },
    {
      "src": "call_argument [40135,40136]",
      "dest": "call_argument [28839,28840]"
    },
    {
      "src": "identifier: gasRefund39 [28579,28590]",
      "dest": "identifier: gasRefund39 [37104,37115]"
    },
    {
      "src": "number_literal: 0 [10243,10244]",
      "dest": "number_literal: 0 [28592,28593]"
    },
    {
      "src": "type_name [10529,10536]",
      "dest": "type_name [11325,11332]"
    },
    {
      "src": "): ) [28971,28972]",
      "dest": "): ) [38246,38247]"
    },
    {
      "src": "uint256: uint256 [18629,18636]",
      "dest": "uint256: uint256 [38622,38629]"
    },
    {
      "src": "yul_function_call [28741,28754]",
      "dest": "yul_function_call [37369,37387]"
    },
    {
      "src": "address: address [976,983]",
      "dest": "address: address [31086,31093]"
    },
    {
      "src": "true [22024,22028]",
      "dest": "true [24443,24447]"
    },
    {
      "src": "[: [ [4963,4964]",
      "dest": "[: [ [29426,29427]"
    },
    {
      "src": "function_body [12869,12932]",
      "dest": "function_body [24372,24455]"
    },
    {
      "src": "visibility [18275,18283]",
      "dest": "visibility [8806,8814]"
    },
    {
      "src": "visibility [30591,30599]",
      "dest": "visibility [36068,36076]"
    },
    {
      "src": "(: ( [33078,33079]",
      "dest": "(: ( [45148,45149]"
    },
    {
      "src": "primitive_type [18766,18773]",
      "dest": "primitive_type [34669,34676]"
    },
    {
      "src": "primitive_type [24752,24759]",
      "dest": "primitive_type [33012,33019]"
    },
    {
      "src": "uint256: uint256 [23057,23064]",
      "dest": "uint256: uint256 [44350,44357]"
    },
    {
      "src": "primitive_type [11656,11663]",
      "dest": "primitive_type [1067,1074]"
    },
    {
      "src": "uint256: uint256 [20061,20068]",
      "dest": "uint256: uint256 [37116,37123]"
    },
    {
      "src": "identifier: require [15978,15985]",
      "dest": "identifier: require [4415,4422]"
    },
    {
      "src": "return_type_definition [438,455]",
      "dest": "return_type_definition [6375,6392]"
    },
    {
      "src": "returns: returns [18417,18424]",
      "dest": "returns: returns [38391,38398]"
    },
    {
      "src": "call_argument [40139,40147]",
      "dest": "call_argument [28852,28858]"
    },
    {
      "src": ",: , [41397,41398]",
      "dest": ",: , [28040,28041]"
    },
    {
      "src": "}: } [40155,40156]",
      "dest": "}: } [28866,28867]"
    },
    {
      "src": "solidity_version: 0.4.23 [17,23]",
      "dest": "solidity_version: 0.6.0 [5327,5332]"
    },
    {
      "src": "parameter [25490,25502]",
      "dest": "parameter [34144,34156]"
    },
    {
      "src": "function: function [1043,1051]",
      "dest": "function: function [5949,5957]"
    },
    {
      "src": "address: address [11721,11728]",
      "dest": "address: address [15189,15196]"
    },
    {
      "src": "): ) [17346,17347]",
      "dest": "): ) [32066,32067]"
    },
    {
      "src": ">=: >= [11441,11443]",
      "dest": ">=: >= [10063,10065]"
    },
    {
      "src": "identifier: reclaimToken [17200,17212]",
      "dest": "identifier: reclaimToken [31910,31922]"
    },
    {
      "src": "\": \" [24962,24963]",
      "dest": "\": \" [41483,41484]"
    },
    {
      "src": "type_name [1033,1037]",
      "dest": "type_name [7130,7134]"
    },
    {
      "src": "type_name [10563,10570]",
      "dest": "type_name [16769,16776]"
    },
    {
      "src": "identifier: a [11032,11033]",
      "dest": "identifier: a [13033,13034]"
    },
    {
      "src": "type_name [12818,12825]",
      "dest": "type_name [24298,24305]"
    },
    {
      "src": "type_name [42721,42726]",
      "dest": "type_name [45965,45970]"
    },
    {
      "src": "variable_declaration_statement [22164,22221]",
      "dest": "variable_declaration_statement [10996,11014]"
    },
    {
      "src": "yul_block [30799,31004]",
      "dest": "yul_block [36645,36707]"
    },
    {
      "src": "parameter [40229,40245]",
      "dest": "parameter [41869,41888]"
    },
    {
      "src": "address: address [13883,13890]",
      "dest": "address: address [1111,1118]"
    },
    {
      "src": "type_name [1133,1140]",
      "dest": "type_name [7980,7987]"
    },
    {
      "src": "{: { [18189,18190]",
      "dest": "{: { [24023,24024]"
    },
    {
      "src": "call_argument [38172,38199]",
      "dest": "call_argument [43917,43960]"
    },
    {
      "src": "}: } [32292,32293]",
      "dest": "}: } [38776,38777]"
    },
    {
      "src": ",: , [34201,34202]",
      "dest": ",: , [41972,41973]"
    },
    {
      "src": "=>: => [13978,13980]",
      "dest": "=>: => [1204,1206]"
    },
    {
      "src": "type_name [22603,22610]",
      "dest": "type_name [24607,24614]"
    },
    {
      "src": "): ) [16440,16441]",
      "dest": "): ) [4904,4905]"
    },
    {
      "src": "call_argument [42276,42307]",
      "dest": "call_argument [30261,30297]"
    },
    {
      "src": "type_name [12611,12618]",
      "dest": "type_name [19368,19375]"
    },
    {
      "src": "struct_member [1429,1443]",
      "dest": "struct_member [1564,1583]"
    },
    {
      "src": "public: public [42953,42959]",
      "dest": "public: public [46206,46212]"
    },
    {
      "src": "parameter [33690,33694]",
      "dest": "parameter [25565,25569]"
    },
    {
      "src": "event_definition [23708,23754]",
      "dest": "event_definition [40742,40788]"
    },
    {
      "src": "type_name [513,520]",
      "dest": "type_name [5711,5718]"
    },
    {
      "src": "identifier: _tokenHolder [12390,12402]",
      "dest": "identifier: target [19701,19707]"
    },
    {
      "src": "(: ( [20919,20920]",
      "dest": "(: ( [33449,33450]"
    },
    {
      "src": "primitive_type [13278,13282]",
      "dest": "primitive_type [519,523]"
    },
    {
      "src": "): ) [40136,40137]",
      "dest": "): ) [28840,28841]"
    },
    {
      "src": "yul_evm_builtin [31352,31357]",
      "dest": "yul_evm_builtin [37774,37776]"
    },
    {
      "src": "yul_function_call [29036,29067]",
      "dest": "yul_function_call [38010,38043]"
    },
    {
      "src": "internal: internal [31161,31169]",
      "dest": "internal: internal [12283,12291]"
    },
    {
      "src": "returns: returns [33681,33688]",
      "dest": "returns: returns [25556,25563]"
    },
    {
      "src": "type_name [23937,23944]",
      "dest": "type_name [41252,41259]"
    },
    {
      "src": "visibility [13250,13256]",
      "dest": "visibility [491,497]"
    },
    {
      "src": "address: address [12796,12803]",
      "dest": "address: address [23967,23974]"
    },
    {
      "src": "{: { [11227,11228]",
      "dest": "{: { [10945,10946]"
    },
    {
      "src": "assembly: assembly [27677,27685]",
      "dest": "assembly: assembly [36111,36119]"
    },
    {
      "src": "identifier: symbol_Deprecated [13653,13670]",
      "dest": "identifier: symbol_Deprecated [877,894]"
    },
    {
      "src": "\": \" [24899,24900]",
      "dest": "\": \" [41385,41386]"
    },
    {
      "src": "call_expression [2423,2447]",
      "dest": "call_expression [4625,4682]"
    },
    {
      "src": "identifier: ERC20 [17213,17218]",
      "dest": "identifier: ERC20 [31414,31419]"
    },
    {
      "src": "type_name [22698,22705]",
      "dest": "type_name [27688,27695]"
    },
    {
      "src": "identifier: _increaseApprovalAllArgs [20989,21013]",
      "dest": "identifier: _burn [33486,33491]"
    },
    {
      "src": "): ) [24963,24964]",
      "dest": "): ) [41484,41485]"
    },
    {
      "src": "primitive_type [1306,1313]",
      "dest": "primitive_type [5671,5678]"
    },
    {
      "src": "type_name [25490,25497]",
      "dest": "type_name [34144,34151]"
    },
    {
      "src": "visibility [23365,23373]",
      "dest": "visibility [45047,45055]"
    },
    {
      "src": "inheritance_specifier [32395,32409]",
      "dest": "inheritance_specifier [32480,32494]"
    },
    {
      "src": ",: , [30739,30740]",
      "dest": ",: , [36452,36453]"
    },
    {
      "src": "string [35135,35159]",
      "dest": "string [43090,43127]"
    },
    {
      "src": "type_name [12836,12843]",
      "dest": "type_name [24317,24324]"
    },
    {
      "src": "yul_evm_builtin [29036,29040]",
      "dest": "yul_evm_builtin [38010,38014]"
    },
    {
      "src": "address: address [20252,20259]",
      "dest": "address: address [805,812]"
    },
    {
      "src": "returns: returns [4714,4721]",
      "dest": "returns: returns [14311,14318]"
    },
    {
      "src": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [15863,15940]",
      "dest": "comment: /**      * @dev sets the original `owner` of the contract to the sender      * at construction. Must then be reinitialized      */ [4038,4171]"
    },
    {
      "src": "): ) [38451,38452]",
      "dest": "): ) [29608,29609]"
    },
    {
      "src": "sstore: sstore [31392,31398]",
      "dest": "sstore: sstore [36820,36826]"
    },
    {
      "src": "type_name [22865,22872]",
      "dest": "type_name [42971,42978]"
    },
    {
      "src": "primitive_type [21138,21145]",
      "dest": "primitive_type [26954,26961]"
    },
    {
      "src": "): ) [39352,39353]",
      "dest": "): ) [19569,19570]"
    },
    {
      "src": "==: == [15997,15999]",
      "dest": "==: == [4434,4436]"
    },
    {
      "src": "bool: bool [13278,13282]",
      "dest": "bool: bool [519,523]"
    },
    {
      "src": "contract_declaration [42625,43204]",
      "dest": "contract_declaration [45890,46392]"
    },
    {
      "src": "primitive_type [13773,13780]",
      "dest": "primitive_type [1000,1007]"
    },
    {
      "src": "view: view [499,503]",
      "dest": "view: view [5697,5701]"
    },
    {
      "src": "uint256: uint256 [12836,12843]",
      "dest": "uint256: uint256 [24317,24324]"
    },
    {
      "src": "identifier: c [11460,11461]",
      "dest": "identifier: c [10119,10120]"
    },
    {
      "src": "(: ( [13882,13883]",
      "dest": "(: ( [1110,1111]"
    },
    {
      "src": "call_argument [20126,20134]",
      "dest": "call_argument [24939,24946]"
    },
    {
      "src": "identifier: spender [911,918]",
      "dest": "identifier: spender [24560,24567]"
    },
    {
      "src": "type_name [20061,20068]",
      "dest": "type_name [37116,37123]"
    },
    {
      "src": "identifier: _burner [24994,25001]",
      "dest": "identifier: account [41502,41509]"
    },
    {
      "src": "!=: != [38157,38159]",
      "dest": "!=: != [27866,27868]"
    },
    {
      "src": "identifier: owner [10166,10171]",
      "dest": "identifier: owner [30372,30377]"
    },
    {
      "src": "identifier: a [10651,10652]",
      "dest": "identifier: a [11699,11700]"
    },
    {
      "src": "yul_decimal_number: 0 [29053,29054]",
      "dest": "yul_decimal_number: 0 [38029,38030]"
    },
    {
      "src": "}: } [29128,29129]",
      "dest": "}: } [38257,38258]"
    },
    {
      "src": "uint256: uint256 [4723,4730]",
      "dest": "uint256: uint256 [14320,14327]"
    },
    {
      "src": "\": \" [41064,41065]",
      "dest": "\": \" [27917,27918]"
    },
    {
      "src": "(: ( [40637,40638]",
      "dest": "(: ( [34832,34833]"
    },
    {
      "src": "internal: internal [11195,11203]",
      "dest": "internal: internal [10913,10921]"
    },
    {
      "src": "identifier: hasHook [38216,38223]",
      "dest": "identifier: success [19955,19962]"
    },
    {
      "src": "yul_decimal_number: 1 [30889,30890]",
      "dest": "yul_decimal_number: 1 [36690,36691]"
    },
    {
      "src": ",: , [632,633]",
      "dest": ",: , [7763,7764]"
    },
    {
      "src": "constant: constant [32617,32625]",
      "dest": "constant: constant [40366,40374]"
    },
    {
      "src": "address: address [39335,39342]",
      "dest": "address: address [19497,19504]"
    },
    {
      "src": ",: , [28337,28338]",
      "dest": ",: , [36638,36639]"
    },
    {
      "src": "(: ( [1059,1060]",
      "dest": "(: ( [5966,5967]"
    },
    {
      "src": "address: address [634,641]",
      "dest": "address: address [7765,7772]"
    },
    {
      "src": "(: ( [25475,25476]",
      "dest": "(: ( [34129,34130]"
    },
    {
      "src": "primitive_type [23952,23959]",
      "dest": "primitive_type [41269,41276]"
    },
    {
      "src": "address: address [1060,1067]",
      "dest": "address: address [24833,24840]"
    },
    {
      "src": "type_name [23057,23064]",
      "dest": "type_name [44350,44357]"
    },
    {
      "src": "primitive_type [13215,13222]",
      "dest": "primitive_type [456,463]"
    },
    {
      "src": "identifier: require [39832,39839]",
      "dest": "identifier: require [44395,44402]"
    },
    {
      "src": "member_expression [40008,40024]",
      "dest": "member_expression [28720,28736]"
    },
    {
      "src": "uint256: uint256 [23121,23128]",
      "dest": "uint256: uint256 [10025,10032]"
    },
    {
      "src": "): ) [25502,25503]",
      "dest": "): ) [34156,34157]"
    },
    {
      "src": "call_argument [41359,41397]",
      "dest": "call_argument [28034,28040]"
    },
    {
      "src": "primitive_type [976,983]",
      "dest": "primitive_type [31086,31093]"
    },
    {
      "src": "visibility [13725,13732]",
      "dest": "visibility [952,959]"
    },
    {
      "src": "primitive_type [10779,10786]",
      "dest": "primitive_type [12889,12896]"
    },
    {
      "src": "return_type_definition [18417,18447]",
      "dest": "return_type_definition [38391,38415]"
    },
    {
      "src": "): ) [31410,31411]",
      "dest": "): ) [36838,36839]"
    },
    {
      "src": "identifier: owner [17589,17594]",
      "dest": "identifier: owner [44094,44099]"
    },
    {
      "src": "(: ( [9149,9150]",
      "dest": "(: ( [27774,27775]"
    },
    {
      "src": "identifier: a [10628,10629]",
      "dest": "identifier: a [11671,11672]"
    },
    {
      "src": "type_name [20252,20259]",
      "dest": "type_name [805,812]"
    },
    {
      "src": "yul_evm_builtin [30426,30429]",
      "dest": "yul_evm_builtin [37823,37826]"
    },
    {
      "src": "type_name [13981,13988]",
      "dest": "type_name [1207,1214]"
    },
    {
      "src": "*: * [10630,10631]",
      "dest": "*: * [11673,11674]"
    },
    {
      "src": "address: address [17033,17040]",
      "dest": "address: address [31650,31657]"
    },
    {
      "src": "string_literal [43000,43009]",
      "dest": "string_literal [46269,46278]"
    },
    {
      "src": "let: let [28772,28775]",
      "dest": "let: let [37559,37562]"
    },
    {
      "src": "parameter [941,948]",
      "dest": "parameter [5555,5562]"
    },
    {
      "src": "): ) [29066,29067]",
      "dest": "): ) [38042,38043]"
    },
    {
      "src": ",: , [29044,29045]",
      "dest": ",: , [38020,38021]"
    },
    {
      "src": "identifier: _to [17020,17023]",
      "dest": "identifier: _to [31637,31640]"
    },
    {
      "src": "yul_identifier [30683,30689]",
      "dest": "yul_identifier [36275,36281]"
    },
    {
      "src": "function_body [15967,16040]",
      "dest": "function_body [4404,4477]"
    },
    {
      "src": "type_name [12796,12803]",
      "dest": "type_name [23967,23974]"
    },
    {
      "src": "pure: pure [42349,42353]",
      "dest": "pure: pure [45056,45060]"
    },
    {
      "src": "bool: bool [13424,13428]",
      "dest": "bool: bool [645,649]"
    },
    {
      "src": "{: { [10593,10594]",
      "dest": "{: { [11612,11613]"
    },
    {
      "src": "bool: bool [3309,3313]",
      "dest": "bool: bool [27003,27007]"
    },
    {
      "src": "type_name [13617,13623]",
      "dest": "type_name [841,847]"
    },
    {
      "src": "type_name [17213,17218]",
      "dest": "type_name [31923,31929]"
    },
    {
      "src": "type_name [11878,11885]",
      "dest": "type_name [7096,7103]"
    },
    {
      "src": "parameter [22096,22120]",
      "dest": "parameter [25516,25530]"
    },
    {
      "src": "function_definition [24776,25018]",
      "dest": "function_definition [41238,41563]"
    },
    {
      "src": "parameter [22603,22610]",
      "dest": "parameter [24607,24614]"
    },
    {
      "src": ",: , [25554,25555]",
      "dest": ",: , [34208,34209]"
    },
    {
      "src": "yul_identifier [29091,29099]",
      "dest": "yul_identifier [38109,38117]"
    },
    {
      "src": "(: ( [10242,10243]",
      "dest": "(: ( [28591,28592]"
    },
    {
      "src": "): ) [15846,15847]",
      "dest": "): ) [4281,4282]"
    },
    {
      "src": "type_name [39441,39448]",
      "dest": "type_name [29231,29238]"
    },
    {
      "src": "state_variable_declaration [32609,32662]",
      "dest": "state_variable_declaration [40358,40411]"
    },
    {
      "src": "member_expression [17033,17054]",
      "dest": "member_expression [31650,31671]"
    },
    {
      "src": "call_argument [40750,40763]",
      "dest": "call_argument [34766,34813]"
    },
    {
      "src": "address: address [40579,40586]",
      "dest": "address: address [16813,16820]"
    },
    {
      "src": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [10942,11019]",
      "dest": "comment: // assert(a == b * c + a % b); // There is no case in which this doesn't hold [13049,13126]"
    },
    {
      "src": "library_declaration [10414,11470]",
      "dest": "library_declaration [9684,14403]"
    },
    {
      "src": "identifier: offset [30683,30689]",
      "dest": "identifier: offset [36275,36281]"
    },
    {
      "src": "primitive_type [11218,11225]",
      "dest": "primitive_type [10936,10943]"
    },
    {
      "src": "}: } [29117,29118]",
      "dest": "}: } [38135,38136]"
    },
    {
      "src": "identifier: _to [33719,33722]",
      "dest": "identifier: account [45102,45109]"
    },
    {
      "src": "identifier: reclaimEther [16964,16976]",
      "dest": "identifier: reclaimEther [31573,31585]"
    },
    {
      "src": "contract_body [16862,17608]",
      "dest": "contract_body [31420,32078]"
    },
    {
      "src": ",: , [38443,38444]",
      "dest": ",: , [29600,29601]"
    },
    {
      "src": "primitive_type [13242,13249]",
      "dest": "primitive_type [483,490]"
    },
    {
      "src": "yul_identifier [28859,28865]",
      "dest": "yul_identifier [37647,37653]"
    },
    {
      "src": "primitive_type [11173,11180]",
      "dest": "primitive_type [10863,10870]"
    },
    {
      "src": "external: external [4318,4326]",
      "dest": "external: external [7527,7535]"
    },
    {
      "src": "return_statement [22017,22029]",
      "dest": "return_statement [24436,24448]"
    },
    {
      "src": "type_name [13278,13282]",
      "dest": "type_name [519,523]"
    },
    {
      "src": "primitive_type [12796,12803]",
      "dest": "primitive_type [23967,23974]"
    },
    {
      "src": "identifier: onlyOwner [38124,38133]",
      "dest": "identifier: onlyOwner [42462,42471]"
    },
    {
      "src": "return: return [22017,22023]",
      "dest": "return: return [24436,24442]"
    },
    {
      "src": "primitive_type [38211,38215]",
      "dest": "primitive_type [19950,19954]"
    },
    {
      "src": "\": \" [43000,43001]",
      "dest": "\": \" [46269,46270]"
    },
    {
      "src": "address: address [1306,1313]",
      "dest": "address: address [5671,5678]"
    },
    {
      "src": "state_variable_declaration [13516,13543]",
      "dest": "state_variable_declaration [737,764]"
    },
    {
      "src": "function_body [42805,42839]",
      "dest": "function_body [46058,46092]"
    },
    {
      "src": "identifier: OwnershipTransferred [15808,15828]",
      "dest": "identifier: OwnershipTransferred [4243,4263]"
    },
    {
      "src": "parameter [11218,11225]",
      "dest": "parameter [10936,10943]"
    },
    {
      "src": "comment: /**   * @dev Adds two numbers, throws on overflow.   */ [11279,11336]",
      "dest": "comment: /**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */ [11050,11295]"
    },
    {
      "src": "primitive_type [33013,33017]",
      "dest": "primitive_type [15229,15233]"
    },
    {
      "src": "primitive_type [13837,13844]",
      "dest": "primitive_type [1415,1422]"
    },
    {
      "src": "identifier: onlyPendingOwner [9672,9688]",
      "dest": "identifier: onlyPendingOwner [4595,4611]"
    },
    {
      "src": "function: function [39754,39762]",
      "dest": "function: function [28489,28497]"
    },
    {
      "src": "return: return [21059,21065]",
      "dest": "return: return [24966,24972]"
    },
    {
      "src": "external: external [4124,4132]",
      "dest": "external: external [45435,45443]"
    },
    {
      "src": "event_paramater [654,667]",
      "dest": "event_paramater [7785,7798]"
    },
    {
      "src": "address: address [40127,40134]",
      "dest": "address: address [28831,28838]"
    },
    {
      "src": "address: address [22712,22719]",
      "dest": "address: address [27704,27711]"
    },
    {
      "src": "expression_statement [41350,41414]",
      "dest": "expression_statement [27992,28084]"
    },
    {
      "src": "\": \" [41833,41834]",
      "dest": "\": \" [27797,27798]"
    },
    {
      "src": "binary_expression [11032,11037]",
      "dest": "binary_expression [13033,13038]"
    },
    {
      "src": "type_name [12589,12596]",
      "dest": "type_name [18886,18893]"
    },
    {
      "src": "(: ( [940,941]",
      "dest": "(: ( [5554,5555]"
    },
    {
      "src": "function: function [18240,18248]",
      "dest": "function: function [23785,23793]"
    },
    {
      "src": "function: function [10766,10774]",
      "dest": "function: function [12876,12884]"
    },
    {
      "src": "primitive_type [12323,12330]",
      "dest": "primitive_type [1366,1373]"
    },
    {
      "src": "contract: contract [24650,24658]",
      "dest": "contract: contract [32444,32452]"
    },
    {
      "src": "identifier: sponsorGas2 [26156,26167]",
      "dest": "identifier: gasRefund15 [36040,36051]"
    },
    {
      "src": "yul_identifier [29007,29015]",
      "dest": "yul_identifier [37932,37940]"
    },
    {
      "src": "parameter [22698,22710]",
      "dest": "parameter [27688,27702]"
    },
    {
      "src": "comment: // File: contracts/modularERC20/AllowanceSheet.sol [12104,12154]",
      "dest": "comment: /**  * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.  * Removing state variables has been necessary due to proxy pattern usage.  * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:  * - Remove state variables _name, _symbol, _decimals  * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage  * - Remove constructor  * - Solidity version changed from ^0.6.0 to 0.6.10  * - Contract made abstract  *  * See also: ClaimableOwnable.sol and ProxyStorage.sol  */ [20699,21342]"
    },
    {
      "src": "address: address [9100,9107]",
      "dest": "address: address [5967,5974]"
    },
    {
      "src": "identifier: onlyOwner [16999,17008]",
      "dest": "identifier: onlyOwner [31616,31625]"
    },
    {
      "src": "identifier: _ [16031,16032]",
      "dest": "identifier: _ [4468,4469]"
    },
    {
      "src": "uint256: uint256 [11364,11371]",
      "dest": "uint256: uint256 [9971,9978]"
    },
    {
      "src": "identifier: onlyOwner [39188,39197]",
      "dest": "identifier: onlyOwner [41899,41908]"
    },
    {
      "src": "event_paramater [23719,23737]",
      "dest": "event_paramater [40753,40771]"
    },
    {
      "src": "function_definition [16397,16501]",
      "dest": "function_definition [4861,4965]"
    },
    {
      "src": "\": \" [41845,41846]",
      "dest": "\": \" [27835,27836]"
    },
    {
      "src": "primitive_type [990,997]",
      "dest": "primitive_type [31100,31107]"
    },
    {
      "src": "primitive_type [33690,33694]",
      "dest": "primitive_type [25565,25569]"
    },
    {
      "src": "): ) [42775,42776]",
      "dest": "): ) [46019,46020]"
    },
    {
      "src": "let: let [30713,30716]",
      "dest": "let: let [36426,36429]"
    },
    {
      "src": "): ) [38816,38817]",
      "dest": "): ) [28691,28692]"
    },
    {
      "src": "type_cast_expression [9162,9172]",
      "dest": "type_cast_expression [27785,27795]"
    },
    {
      "src": "type_name [22883,22890]",
      "dest": "type_name [42999,43006]"
    },
    {
      "src": "expression_statement [10220,10246]",
      "dest": "expression_statement [28565,28631]"
    },
    {
      "src": "sub: sub [28061,28064]",
      "dest": "sub: sub [36487,36490]"
    },
    {
      "src": "primitive_type [39578,39585]",
      "dest": "primitive_type [45419,45426]"
    },
    {
      "src": "event_paramater [38913,38928]",
      "dest": "event_paramater [40539,40557]"
    },
    {
      "src": "string [38172,38199]",
      "dest": "string [43917,43960]"
    },
    {
      "src": "visibility [18796,18804]",
      "dest": "visibility [34702,34710]"
    },
    {
      "src": "type_name [24798,24805]",
      "dest": "type_name [544,551]"
    },
    {
      "src": "parameter [23349,23363]",
      "dest": "parameter [43835,43849]"
    },
    {
      "src": "{: { [42895,42896]",
      "dest": "{: { [46148,46149]"
    },
    {
      "src": "primitive_type [12611,12618]",
      "dest": "primitive_type [19368,19375]"
    },
    {
      "src": "call: call [29036,29040]",
      "dest": "call: call [38010,38014]"
    },
    {
      "src": "function_definition [28570,29136]",
      "dest": "function_definition [37095,38265]"
    },
    {
      "src": "mapping: mapping [11647,11654]",
      "dest": "mapping: mapping [1059,1066]"
    },
    {
      "src": "primitive_type [1133,1140]",
      "dest": "primitive_type [7980,7987]"
    },
    {
      "src": "string [24878,24900]",
      "dest": "string [41348,41386]"
    },
    {
      "src": "primitive_type [22883,22890]",
      "dest": "primitive_type [42999,43006]"
    },
    {
      "src": "(: ( [24919,24920]",
      "dest": "(: ( [41405,41406]"
    },
    {
      "src": "event: event [24716,24721]",
      "dest": "event: event [32976,32981]"
    },
    {
      "src": "{: { [15967,15968]",
      "dest": "{: { [4404,4405]"
    },
    {
      "src": "bytes32: bytes32 [13950,13957]",
      "dest": "bytes32: bytes32 [1177,1184]"
    },
    {
      "src": "let: let [28988,28991]",
      "dest": "let: let [37913,37916]"
    },
    {
      "src": ",: , [21022,21023]",
      "dest": ",: , [33502,33503]"
    },
    {
      "src": "public: public [920,926]",
      "dest": "public: public [24569,24575]"
    },
    {
      "src": "\": \" [34287,34288]",
      "dest": "\": \" [44064,44065]"
    },
    {
      "src": "identifier: require [35047,35054]",
      "dest": "identifier: require [43139,43146]"
    },
    {
      "src": "identifier: Transfer [40108,40116]",
      "dest": "identifier: Transfer [28822,28830]"
    },
    {
      "src": "=: = [40006,40007]",
      "dest": "=: = [28718,28719]"
    },
    {
      "src": "=>: => [13891,13893]",
      "dest": "=>: => [1119,1121]"
    },
    {
      "src": "event: event [23652,23657]",
      "dest": "event: event [32694,32699]"
    },
    {
      "src": "return_type_definition [5491,5505]",
      "dest": "return_type_definition [26268,26282]"
    },
    {
      "src": "state_mutability [22589,22593]",
      "dest": "state_mutability [24576,24580]"
    },
    {
      "src": ",: , [28955,28956]",
      "dest": ",: , [38225,38226]"
    },
    {
      "src": "visibility [158,166]",
      "dest": "visibility [5532,5540]"
    },
    {
      "src": "comment: /**   * @dev Integer division of two numbers, truncating the quotient.   */ [10685,10762]",
      "dest": "comment: /**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */ [10136,10405]"
    },
    {
      "src": "state_mutability [22739,22743]",
      "dest": "state_mutability [8703,8707]"
    },
    {
      "src": "(: ( [10562,10563]",
      "dest": "(: ( [11358,11359]"
    },
    {
      "src": "bool: bool [1108,1112]",
      "dest": "bool: bool [6020,6024]"
    },
    {
      "src": "(: ( [18070,18071]",
      "dest": "(: ( [10468,10469]"
    },
    {
      "src": "}: } [16500,16501]",
      "dest": "}: } [4964,4965]"
    },
    {
      "src": "string_literal [34203,34225]",
      "dest": "string_literal [41974,42039]"
    },
    {
      "src": "identifier: oldValue [40139,40147]",
      "dest": "identifier: amount [28852,28858]"
    },
    {
      "src": "identifier: setBurnBounds [25462,25475]",
      "dest": "identifier: setBurnBounds [34116,34129]"
    },
    {
      "src": "identifier: newOwner [9931,9939]",
      "dest": "identifier: sender [7484,7490]"
    },
    {
      "src": "type_name [40960,40964]",
      "dest": "type_name [1814,1818]"
    },
    {
      "src": "identifier: b [11241,11242]",
      "dest": "identifier: b [10964,10965]"
    },
    {
      "src": "yul_evm_builtin [28882,28888]",
      "dest": "yul_evm_builtin [38152,38158]"
    },
    {
      "src": "address: address [479,486]",
      "dest": "address: address [7492,7499]"
    },
    {
      "src": "type_name [1306,1313]",
      "dest": "type_name [5671,5678]"
    },
    {
      "src": "event_paramater [23663,23685]",
      "dest": "event_paramater [32705,32727]"
    },
    {
      "src": "internal: internal [22899,22907]",
      "dest": "internal: internal [43021,43029]"
    },
    {
      "src": "identifier: approve [1052,1059]",
      "dest": "identifier: transfer [5958,5966]"
    },
    {
      "src": "]: ] [4974,4975]",
      "dest": "]: ] [29434,29435]"
    },
    {
      "src": "let: let [28637,28640]",
      "dest": "let: let [37216,37219]"
    },
    {
      "src": "returns: returns [932,939]",
      "dest": "returns: returns [5546,5553]"
    },
    {
      "src": "type_name [13848,13855]",
      "dest": "type_name [1426,1433]"
    },
    {
      "src": "type_name [20093,20097]",
      "dest": "type_name [24899,24903]"
    },
    {
      "src": "array_access [4947,4975]",
      "dest": "array_access [29417,29435]"
    },
    {
      "src": "(: ( [33718,33719]",
      "dest": "(: ( [45101,45102]"
    },
    {
      "src": "(: ( [30654,30655]",
      "dest": "(: ( [36195,36196]"
    },
    {
      "src": "string_literal [5000,5002]",
      "dest": "string_literal [29469,29505]"
    },
    {
      "src": "view: view [3295,3299]",
      "dest": "view: view [15215,15219]"
    },
    {
      "src": "type_name [16424,16431]",
      "dest": "type_name [4888,4895]"
    },
    {
      "src": "internal: internal [23365,23373]",
      "dest": "internal: internal [45047,45055]"
    },
    {
      "src": "call_expression [17319,17347]",
      "dest": "call_expression [32039,32067]"
    },
    {
      "src": "{: { [27686,27687]",
      "dest": "{: { [36120,36121]"
    },
    {
      "src": "primitive_type [20061,20068]",
      "dest": "primitive_type [37116,37123]"
    },
    {
      "src": "uint256: uint256 [22096,22103]",
      "dest": "uint256: uint256 [25516,25523]"
    },
    {
      "src": "parameter [6007,6014]",
      "dest": "parameter [13677,13684]"
    },
    {
      "src": "event_paramater [23739,23752]",
      "dest": "event_paramater [40773,40786]"
    },
    {
      "src": "yul_block [28755,29118]",
      "dest": "yul_block [37855,38136]"
    },
    {
      "src": "comment: // File: contracts/modularERC20/ModularStandardToken.sol [18856,18912]",
      "dest": "comment: // File: contracts/true-currencies-new/TrueGBP.sol [45618,45668]"
    },
    {
      "src": "): ) [43070,43071]",
      "dest": "): ) [46355,46356]"
    },
    {
      "src": "identifier: rounding [42856,42864]",
      "dest": "identifier: rounding [46109,46117]"
    },
    {
      "src": "identifier: allowance [22540,22549]",
      "dest": "identifier: allowance [24527,24536]"
    },
    {
      "src": "primitive_type [22865,22872]",
      "dest": "primitive_type [42971,42978]"
    },
    {
      "src": "identifier: location [30436,30444]",
      "dest": "identifier: location [37827,37835]"
    },
    {
      "src": "expression_statement [24851,24902]",
      "dest": "expression_statement [41315,41388]"
    },
    {
      "src": "function_definition [26147,28471]",
      "dest": "function_definition [36031,36969]"
    },
    {
      "src": "parameter [25476,25488]",
      "dest": "parameter [34130,34142]"
    },
    {
      "src": "uint256: uint256 [23952,23959]",
      "dest": "uint256: uint256 [41269,41276]"
    },
    {
      "src": "): ) [30692,30693]",
      "dest": "): ) [36289,36290]"
    },
    {
      "src": "=: = [16483,16484]",
      "dest": "=: = [4947,4948]"
    },
    {
      "src": "yul_identifier [31358,31366]",
      "dest": "yul_identifier [37777,37785]"
    },
    {
      "src": "yul_identifier [28641,28647]",
      "dest": "yul_identifier [37220,37226]"
    },
    {
      "src": "add: add [28438,28441]",
      "dest": "add: add [20490,20493]"
    },
    {
      "src": "call_argument [39840,39864]",
      "dest": "call_argument [44403,44419]"
    },
    {
      "src": "type_name [10518,10525]",
      "dest": "type_name [11314,11321]"
    },
    {
      "src": "identifier: this [7189,7193]",
      "dest": "identifier: this [16821,16825]"
    },
    {
      "src": "private: private [13477,13484]",
      "dest": "private: private [698,705]"
    },
    {
      "src": "}: } [43103,43104]",
      "dest": "}: } [46388,46389]"
    },
    {
      "src": "internal: internal [30591,30599]",
      "dest": "internal: internal [36068,36076]"
    },
    {
      "src": "call_argument [35074,35096]",
      "dest": "call_argument [43174,43214]"
    },
    {
      "src": "parameter [4302,4316]",
      "dest": "parameter [28521,28535]"
    },
    {
      "src": "primitive_type [18595,18602]",
      "dest": "primitive_type [24850,24857]"
    },
    {
      "src": ",: , [4998,4999]",
      "dest": ",: , [29467,29468]"
    },
    {
      "src": "}: } [29135,29136]",
      "dest": "}: } [38264,38265]"
    },
    {
      "src": "contract_body [13208,15201]",
      "dest": "contract_body [449,3401]"
    },
    {
      "src": "(: ( [9688,9689]",
      "dest": "(: ( [4611,4612]"
    },
    {
      "src": "parameter [11364,11373]",
      "dest": "parameter [9971,9980]"
    },
    {
      "src": "call_expression [15978,16020]",
      "dest": "call_expression [4415,4457]"
    },
    {
      "src": "string_literal [41052,41065]",
      "dest": "string_literal [27881,27918]"
    },
    {
      "src": "state_mutability [42960,42964]",
      "dest": "state_mutability [46222,46226]"
    },
    {
      "src": "}: } [17607,17608]",
      "dest": "}: } [32077,32078]"
    },
    {
      "src": "\": \" [35095,35096]",
      "dest": "\": \" [43213,43214]"
    },
    {
      "src": "identifier: allowanceOf [12340,12351]",
      "dest": "identifier: finOpBalances_Deprecated [1376,1400]"
    },
    {
      "src": "(: ( [29006,29007]",
      "dest": "(: ( [37931,37932]"
    },
    {
      "src": "event: event [23708,23713]",
      "dest": "event: event [40742,40747]"
    },
    {
      "src": "event_paramater [15525,15554]",
      "dest": "event_paramater [3973,4002]"
    },
    {
      "src": "type_name [13391,13398]",
      "dest": "type_name [616,623]"
    },
    {
      "src": "identifier: _value [23065,23071]",
      "dest": "identifier: amount [44358,44364]"
    },
    {
      "src": "type_name [13549,13556]",
      "dest": "type_name [770,777]"
    },
    {
      "src": "primitive_type [1429,1436]",
      "dest": "primitive_type [1564,1571]"
    },
    {
      "src": "uint256: uint256 [18180,18187]",
      "dest": "uint256: uint256 [24014,24021]"
    },
    {
      "src": "(: ( [10823,10824]",
      "dest": "(: ( [12961,12962]"
    },
    {
      "src": "\": \" [35158,35159]",
      "dest": "\": \" [43126,43127]"
    },
    {
      "src": "): ) [42220,42221]",
      "dest": "): ) [29341,29342]"
    },
    {
      "src": "type_name [941,948]",
      "dest": "type_name [5555,5562]"
    },
    {
      "src": "call_argument [34245,34262]",
      "dest": "call_argument [43980,44018]"
    },
    {
      "src": "call_argument [17303,17307]",
      "dest": "call_argument [32022,32026]"
    },
    {
      "src": "event_definition [23652,23702]",
      "dest": "event_definition [32694,32744]"
    },
    {
      "src": "parameter [23815,23829]",
      "dest": "parameter [36052,36066]"
    },
    {
      "src": "=: = [13572,13573]",
      "dest": "=: = [793,794]"
    },
    {
      "src": "internal: internal [35577,35585]",
      "dest": "internal: internal [14297,14305]"
    },
    {
      "src": "primitive_type [5500,5504]",
      "dest": "primitive_type [26277,26281]"
    },
    {
      "src": "uint256: uint256 [941,948]",
      "dest": "uint256: uint256 [5555,5562]"
    },
    {
      "src": ".: . [15785,15786]",
      "dest": ".: . [4220,4221]"
    },
    {
      "src": "uint256: uint256 [11878,11885]",
      "dest": "uint256: uint256 [7096,7103]"
    },
    {
      "src": "state_mutability [32754,32758]",
      "dest": "state_mutability [22969,22973]"
    },
    {
      "src": "visibility [42867,42873]",
      "dest": "visibility [46120,46126]"
    },
    {
      "src": "identifier: BurnableTokenWithBounds [24659,24682]",
      "dest": "identifier: BurnableTokenWithBounds [32453,32476]"
    },
    {
      "src": "bool: bool [40411,40415]",
      "dest": "bool: bool [42438,42442]"
    },
    {
      "src": "visibility [17532,17540]",
      "dest": "visibility [41285,41293]"
    },
    {
      "src": "contract: contract [16826,16834]",
      "dest": "contract: contract [31387,31395]"
    },
    {
      "src": "type_name [888,895]",
      "dest": "type_name [24537,24544]"
    },
    {
      "src": "call_argument [24320,24321]",
      "dest": "call_argument [29393,29394]"
    },
    {
      "src": "(: ( [38420,38421]",
      "dest": "(: ( [29580,29581]"
    },
    {
      "src": "): ) [17054,17055]",
      "dest": "): ) [31671,31672]"
    },
    {
      "src": "address: address [12589,12596]",
      "dest": "address: address [18886,18893]"
    },
    {
      "src": "(: ( [1132,1133]",
      "dest": "(: ( [7979,7980]"
    },
    {
      "src": "identifier: require [24912,24919]",
      "dest": "identifier: require [41398,41405]"
    },
    {
      "src": "inheritance_specifier [16853,16861]",
      "dest": "inheritance_specifier [31414,31419]"
    },
    {
      "src": "uint256: uint256 [4302,4309]",
      "dest": "uint256: uint256 [28521,28528]"
    },
    {
      "src": "return: return [33957,33963]",
      "dest": "return: return [26388,26394]"
    },
    {
      "src": "type_name [18595,18602]",
      "dest": "type_name [24850,24857]"
    },
    {
      "src": "number_literal: 0 [38168,38169]",
      "dest": "number_literal: 0 [27877,27878]"
    },
    {
      "src": "modifier_invocation [25513,25522]",
      "dest": "modifier_invocation [34167,34176]"
    },
    {
      "src": "call_argument [16007,16019]",
      "dest": "call_argument [4444,4456]"
    },
    {
      "src": "primitive_type [10824,10831]",
      "dest": "primitive_type [12962,12969]"
    },
    {
      "src": "type_name [33013,33017]",
      "dest": "type_name [15229,15233]"
    },
    {
      "src": "return: return [43083,43089]",
      "dest": "return: return [46368,46374]"
    },
    {
      "src": ",: , [22562,22563]",
      "dest": ",: , [24550,24551]"
    },
    {
      "src": "string_literal [42045,42076]",
      "dest": "string_literal [28596,28629]"
    },
    {
      "src": "(: ( [28656,28657]",
      "dest": "(: ( [37235,37236]"
    },
    {
      "src": "return: return [11025,11031]",
      "dest": "return: return [13138,13144]"
    },
    {
      "src": "uint256: uint256 [13549,13556]",
      "dest": "uint256: uint256 [770,777]"
    },
    {
      "src": "address: address [16760,16767]",
      "dest": "address: address [5226,5233]"
    },
    {
      "src": "boolean_literal [33299,33303]",
      "dest": "boolean_literal [27167,27171]"
    },
    {
      "src": "parameter [22883,22897]",
      "dest": "parameter [42999,43013]"
    },
    {
      "src": "(: ( [41286,41287]",
      "dest": "(: ( [30158,30159]"
    },
    {
      "src": "parameter [10779,10788]",
      "dest": "parameter [12889,12898]"
    },
    {
      "src": "type_name [23331,23338]",
      "dest": "type_name [45030,45037]"
    },
    {
      "src": "\": \" [42306,42307]",
      "dest": "\": \" [30296,30297]"
    },
    {
      "src": "identifier: _who [23325,23329]",
      "dest": "identifier: account [44341,44348]"
    },
    {
      "src": "return_type_definition [504,521]",
      "dest": "return_type_definition [5702,5719]"
    },
    {
      "src": "visibility [43043,43049]",
      "dest": "visibility [46312,46318]"
    },
    {
      "src": "parameter [479,490]",
      "dest": "parameter [7492,7509]"
    },
    {
      "src": "uint256: uint256 [25490,25497]",
      "dest": "uint256: uint256 [34144,34151]"
    },
    {
      "src": "=: = [13455,13456]",
      "dest": "=: = [676,677]"
    },
    {
      "src": "(: ( [17333,17334]",
      "dest": "(: ( [32053,32054]"
    },
    {
      "src": "internal: internal [10801,10809]",
      "dest": "internal: internal [12939,12947]"
    },
    {
      "src": "function: function [460,468]",
      "dest": "function: function [5652,5660]"
    },
    {
      "src": "yul_identifier [31253,31259]",
      "dest": "yul_identifier [36320,36326]"
    },
    {
      "src": "visibility [12036,12042]",
      "dest": "visibility [23656,23662]"
    },
    {
      "src": "bool: bool [23091,23095]",
      "dest": "bool: bool [1769,1773]"
    },
    {
      "src": "visibility [4318,4326]",
      "dest": "visibility [7527,7535]"
    },
    {
      "src": "expression_statement [25579,25594]",
      "dest": "expression_statement [34258,34273]"
    },
    {
      "src": "type_name [13874,13923]",
      "dest": "type_name [1103,1150]"
    },
    {
      "src": "constant: constant [42692,42700]",
      "dest": "constant: constant [45936,45944]"
    },
    {
      "src": "parameter [903,918]",
      "dest": "parameter [24552,24567]"
    },
    {
      "src": "call_argument [40505,40508]",
      "dest": "call_argument [41936,41943]"
    },
    {
      "src": "state_variable_declaration [13469,13508]",
      "dest": "state_variable_declaration [690,729]"
    },
    {
      "src": "returns: returns [22594,22601]",
      "dest": "returns: returns [24598,24605]"
    },
    {
      "src": "visibility [6504,6512]",
      "dest": "visibility [7112,7120]"
    },
    {
      "src": "): ) [18446,18447]",
      "dest": "): ) [38414,38415]"
    },
    {
      "src": "assignment_expression [39993,40034]",
      "dest": "assignment_expression [28705,28744]"
    },
    {
      "src": "indexed: indexed [23727,23734]",
      "dest": "indexed: indexed [40761,40768]"
    },
    {
      "src": "comment: /* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      *************************************************************************      ** length     input                              usage      *************************************************************************      ** 19         \"trueXXX.proxy.owner\"              Proxy Owner      ** 20         address                            balanceOf      ** 27         \"trueXXX.pending.proxy.owner\"      Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"     Proxy Implementation      ** 32         uint256(11)                        gasRefundPool_Deprecated      ** 40         address,address                    allowance      ** 52         address,bytes32                    Registry attributes     **/ [14012,15198]",
      "dest": "comment: // reward token storage [1247,1270]"
    },
    {
      "src": "address: address [22698,22705]",
      "dest": "address: address [27688,27695]"
    },
    {
      "src": "comment: // File: openzeppelin-solidity/contracts/math/SafeMath.sol [10258,10316]",
      "dest": "comment: /**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */ [9107,9682]"
    },
    {
      "src": "type_name [11736,11743]",
      "dest": "type_name [7511,7518]"
    },
    {
      "src": "uint256: uint256 [25476,25483]",
      "dest": "uint256: uint256 [34130,34137]"
    },
    {
      "src": "yul_evm_builtin [29084,29090]",
      "dest": "yul_evm_builtin [38102,38108]"
    },
    {
      "src": "yul_function_call [28325,28341]",
      "dest": "yul_function_call [36627,36644]"
    },
    {
      "src": "identifier: sender [15990,15996]",
      "dest": "identifier: sender [4427,4433]"
    },
    {
      "src": "identifier: location [29091,29099]",
      "dest": "identifier: location [38109,38117]"
    },
    {
      "src": "primitive_type [12005,12012]",
      "dest": "primitive_type [17903,17910]"
    },
    {
      "src": "bool: bool [38211,38215]",
      "dest": "bool: bool [19950,19954]"
    },
    {
      "src": "visibility [32997,33003]",
      "dest": "visibility [26979,26985]"
    },
    {
      "src": "call_argument [39866,39895]",
      "dest": "call_argument [44421,44466]"
    },
    {
      "src": "type_name [13773,13780]",
      "dest": "type_name [1000,1007]"
    },
    {
      "src": "string [16007,16019]",
      "dest": "string [4444,4456]"
    },
    {
      "src": "identifier: to [23735,23737]",
      "dest": "identifier: to [40769,40771]"
    },
    {
      "src": "primitive_type [13717,13724]",
      "dest": "primitive_type [944,951]"
    },
    {
      "src": "call_argument [15986,16005]",
      "dest": "call_argument [4423,4442]"
    },
    {
      "src": "call_argument [38798,38808]",
      "dest": "call_argument [28664,28674]"
    },
    {
      "src": "yul_identifier [30436,30444]",
      "dest": "yul_identifier [37827,37835]"
    },
    {
      "src": "): ) [454,455]",
      "dest": "): ) [6391,6392]"
    },
    {
      "src": "(: ( [40504,40505]",
      "dest": "(: ( [41935,41936]"
    },
    {
      "src": ":=: := [28785,28787]",
      "dest": ":=: := [37572,37574]"
    },
    {
      "src": "identifier: burnMin [13531,13538]",
      "dest": "identifier: burnMin [752,759]"
    },
    {
      "src": "parameter [21925,21929]",
      "dest": "parameter [45070,45074]"
    },
    {
      "src": "primitive_type [12422,12429]",
      "dest": "primitive_type [1696,1703]"
    },
    {
      "src": "function: function [18126,18134]",
      "dest": "function: function [23948,23956]"
    },
    {
      "src": "}: } [21077,21078]",
      "dest": "}: } [33518,33519]"
    },
    {
      "src": "(: ( [6336,6337]",
      "dest": "(: ( [12305,12306]"
    },
    {
      "src": "function_body [26179,28471]",
      "dest": "function_body [36077,36969]"
    },
    {
      "src": "parameter [23317,23329]",
      "dest": "parameter [44333,44348]"
    },
    {
      "src": "identifier: keccak256 [2423,2432]",
      "dest": "identifier: require [4625,4632]"
    },
    {
      "src": "state_variable_declaration [13391,13412]",
      "dest": "state_variable_declaration [616,637]"
    },
    {
      "src": "call_argument [34184,34201]",
      "dest": "call_argument [41928,41972]"
    },
    {
      "src": "): ) [15754,15755]",
      "dest": "): ) [4189,4190]"
    },
    {
      "src": "parameter [20093,20097]",
      "dest": "parameter [24899,24903]"
    },
    {
      "src": "call_argument [41052,41065]",
      "dest": "call_argument [27881,27918]"
    },
    {
      "src": "identifier: to [998,1000]",
      "dest": "identifier: to [31108,31110]"
    },
    {
      "src": "): ) [9689,9690]",
      "dest": "): ) [4612,4613]"
    },
    {
      "src": "number_literal: 0 [10609,10610]",
      "dest": "number_literal: 0 [11634,11635]"
    },
    {
      "src": "yul_evm_builtin [28061,28064]",
      "dest": "yul_evm_builtin [36487,36490]"
    },
    {
      "src": "call_argument [33079,33082]",
      "dest": "call_argument [45149,45156]"
    },
    {
      "src": "return_statement [10602,10611]",
      "dest": "return_statement [11627,11636]"
    },
    {
      "src": "primitive_type [11398,11405]",
      "dest": "primitive_type [19728,19735]"
    },
    {
      "src": "address: address [21868,21875]",
      "dest": "address: address [41852,41859]"
    },
    {
      "src": "type_cast_expression [40579,40607]",
      "dest": "type_cast_expression [16813,16826]"
    },
    {
      "src": "return: return [22623,22629]",
      "dest": "return: return [24627,24633]"
    },
    {
      "src": "identifier: _who [23033,23037]",
      "dest": "identifier: sender [25489,25495]"
    },
    {
      "src": "\": \" [43090,43091]",
      "dest": "\": \" [46375,46376]"
    },
    {
      "src": "identifier: totalSupply_ [13399,13411]",
      "dest": "identifier: _totalSupply [624,636]"
    },
    {
      "src": "): ) [17307,17308]",
      "dest": "): ) [32027,32028]"
    },
    {
      "src": "parameter [10824,10831]",
      "dest": "parameter [12962,12969]"
    },
    {
      "src": "address: address [10235,10242]",
      "dest": "address: address [28584,28591]"
    },
    {
      "src": "return_type_definition [10554,10573]",
      "dest": "return_type_definition [11350,11367]"
    },
    {
      "src": "number_literal: 10 [23784,23786]",
      "dest": "number_literal: 10 [40345,40347]"
    },
    {
      "src": "type_name [21138,21145]",
      "dest": "type_name [26954,26961]"
    },
    {
      "src": "): ) [12850,12851]",
      "dest": "): ) [24331,24332]"
    },
    {
      "src": ".: . [40020,40021]",
      "dest": ".: . [28732,28733]"
    },
    {
      "src": "expression_statement [9142,9174]",
      "dest": "expression_statement [27767,27838]"
    },
    {
      "src": "private: private [13429,13436]",
      "dest": "private: private [650,657]"
    },
    {
      "src": ".: . [39324,39325]",
      "dest": ".: . [19510,19511]"
    },
    {
      "src": "identifier: onlyPendingOwner [16629,16645]",
      "dest": "identifier: onlyPendingOwner [5095,5111]"
    },
    {
      "src": "function: function [42847,42855]",
      "dest": "function: function [46100,46108]"
    },
    {
      "src": "}: } [31732,31733]",
      "dest": "}: } [38485,38486]"
    },
    {
      "src": "visibility [12645,12651]",
      "dest": "visibility [22773,22779]"
    },
    {
      "src": "(: ( [29040,29041]",
      "dest": "(: ( [38014,38015]"
    },
    {
      "src": "yul_evm_builtin [30680,30682]",
      "dest": "yul_evm_builtin [36272,36274]"
    },
    {
      "src": "type_name [9923,9930]",
      "dest": "type_name [7476,7483]"
    },
    {
      "src": "): ) [35159,35160]",
      "dest": "): ) [43127,43128]"
    },
    {
      "src": "): ) [22610,22611]",
      "dest": "): ) [24614,24615]"
    },
    {
      "src": "is: is [16850,16852]",
      "dest": "is: is [31411,31413]"
    },
    {
      "src": "emit: emit [40103,40107]",
      "dest": "emit: emit [28817,28821]"
    },
    {
      "src": "identifier: _to [17334,17337]",
      "dest": "identifier: _to [32054,32057]"
    },
    {
      "src": "uint256: uint256 [18071,18078]",
      "dest": "uint256: uint256 [10469,10476]"
    },
    {
      "src": "call_expression [24975,25010]",
      "dest": "call_expression [41496,41518]"
    },
    {
      "src": "public: public [43043,43049]",
      "dest": "public: public [46312,46318]"
    },
    {
      "src": "identifier: _max [25550,25554]",
      "dest": "identifier: _max [34204,34208]"
    },
    {
      "src": "(: ( [17040,17041]",
      "dest": "(: ( [31657,31658]"
    },
    {
      "src": "address: address [17226,17233]",
      "dest": "address: address [31937,31944]"
    },
    {
      "src": "identifier: _value [23823,23829]",
      "dest": "identifier: amount [36060,36066]"
    },
    {
      "src": ",: , [15839,15840]",
      "dest": ",: , [4274,4275]"
    },
    {
      "src": "sub: sub [28957,28960]",
      "dest": "sub: sub [38227,38230]"
    },
    {
      "src": "}: } [31003,31004]",
      "dest": "}: } [36706,36707]"
    },
    {
      "src": "): ) [42893,42894]",
      "dest": "): ) [46146,46147]"
    },
    {
      "src": "uint256: uint256 [4857,4864]",
      "dest": "uint256: uint256 [30107,30114]"
    },
    {
      "src": "identifier: newAllowance [23129,23141]",
      "dest": "identifier: c [10033,10034]"
    },
    {
      "src": "primitive_type [12292,12299]",
      "dest": "primitive_type [1336,1343]"
    },
    {
      "src": "address: address [888,895]",
      "dest": "address: address [24537,24544]"
    },
    {
      "src": "identifier: from [984,988]",
      "dest": "identifier: from [31094,31098]"
    },
    {
      "src": "identifier: offset [28961,28967]",
      "dest": "identifier: offset [38231,38237]"
    },
    {
      "src": "call_argument [38810,38816]",
      "dest": "call_argument [28676,28683]"
    },
    {
      "src": "): ) [12330,12331]",
      "dest": "): ) [1373,1374]"
    },
    {
      "src": ",: , [41323,41324]",
      "dest": ",: , [30178,30179]"
    },
    {
      "src": "\": \" [40750,40751]",
      "dest": "\": \" [34766,34767]"
    },
    {
      "src": "identifier: ReclaimerToken [16835,16849]",
      "dest": "identifier: ReclaimerToken [31396,31410]"
    },
    {
      "src": "assignment_expression [16714,16734]",
      "dest": "assignment_expression [5180,5200]"
    },
    {
      "src": "primitive_type [17033,17040]",
      "dest": "primitive_type [31650,31657]"
    },
    {
      "src": "internal: internal [18796,18804]",
      "dest": "internal: internal [34702,34710]"
    },
    {
      "src": "call_argument [25556,25567]",
      "dest": "call_argument [34210,34246]"
    },
    {
      "src": "yul_evm_builtin [29001,29006]",
      "dest": "yul_evm_builtin [37926,37931]"
    },
    {
      "src": "parameter [33013,33017]",
      "dest": "parameter [15229,15233]"
    },
    {
      "src": "(: ( [22602,22603]",
      "dest": "(: ( [24606,24607]"
    },
    {
      "src": "public: public [11894,11900]",
      "dest": "public: public [23808,23814]"
    },
    {
      "src": "{: { [31663,31664]",
      "dest": "{: { [38416,38417]"
    },
    {
      "src": "): ) [40606,40607]",
      "dest": "): ) [16825,16826]"
    },
    {
      "src": "type_alias [19254,19262]",
      "dest": "type_alias [22634,22642]"
    },
    {
      "src": "identifier: _who [18774,18778]",
      "dest": "identifier: account [34677,34684]"
    },
    {
      "src": "address: address [16424,16431]",
      "dest": "address: address [4888,4895]"
    },
    {
      "src": ",: , [29099,29100]",
      "dest": ",: , [38117,38118]"
    },
    {
      "src": "identifier: _spender [21876,21884]",
      "dest": "identifier: account [41860,41867]"
    },
    {
      "src": "return_type_definition [18289,18306]",
      "dest": "return_type_definition [23829,23846]"
    },
    {
      "src": "binary_expression [34184,34201]",
      "dest": "binary_expression [41928,41972]"
    },
    {
      "src": "return_type_definition [33004,33018]",
      "dest": "return_type_definition [15220,15234]"
    },
    {
      "src": "return_statement [20166,20178]",
      "dest": "return_statement [25761,25773]"
    },
    {
      "src": "boolean_literal [33964,33968]",
      "dest": "boolean_literal [26395,26399]"
    },
    {
      "src": "address: address [13970,13977]",
      "dest": "address: address [1196,1203]"
    },
    {
      "src": "number_literal: 0x100000 [32653,32661]",
      "dest": "number_literal: 0x100000 [40402,40410]"
    },
    {
      "src": "string [34203,34225]",
      "dest": "string [41974,42039]"
    },
    {
      "src": "uint256: uint256 [13848,13855]",
      "dest": "uint256: uint256 [1426,1433]"
    },
    {
      "src": "function: function [40322,40330]",
      "dest": "function: function [34654,34662]"
    },
    {
      "src": "\": \" [5087,5088]",
      "dest": "\": \" [27108,27109]"
    },
    {
      "src": "): ) [34288,34289]",
      "dest": "): ) [44065,44066]"
    },
    {
      "src": "visibility [13477,13484]",
      "dest": "visibility [698,705]"
    },
    {
      "src": "identifier: owner [16714,16719]",
      "dest": "identifier: owner [5180,5185]"
    },
    {
      "src": "address: address [13837,13844]",
      "dest": "address: address [1415,1422]"
    },
    {
      "src": "): ) [34225,34226]",
      "dest": "): ) [42039,42040]"
    },
    {
      "src": "uint256: uint256 [513,520]",
      "dest": "uint256: uint256 [5711,5718]"
    },
    {
      "src": "call_argument [25648,25652]",
      "dest": "call_argument [34327,34331]"
    },
    {
      "src": "comment: /* Defines the storage layout of the token implementaiton contract. Any newly declared state variables in future upgrades should be appened to the bottom. Never remove state variables from this list  */ [12978,13184]",
      "dest": "comment: /**  * @title ReclaimerToken  * @dev ERC20 token which allows owner to reclaim ERC20 tokens  * or ether sent to this contract  */ [31243,31376]"
    },
    {
      "src": "function_body [15763,15855]",
      "dest": "function_body [4198,4290]"
    },
    {
      "src": "identifier: _value [18400,18406]",
      "dest": "identifier: amount [33458,33464]"
    },
    {
      "src": ",: , [35072,35073]",
      "dest": ",: , [43172,43173]"
    },
    {
      "src": "indexed: indexed [1141,1148]",
      "dest": "indexed: indexed [7988,7995]"
    },
    {
      "src": "indexed: indexed [15573,15580]",
      "dest": "indexed: indexed [4012,4019]"
    },
    {
      "src": "string [24939,24963]",
      "dest": "string [41437,41484]"
    },
    {
      "src": "): ) [30890,30891]",
      "dest": "): ) [36691,36692]"
    },
    {
      "src": "identifier: msg [15782,15785]",
      "dest": "identifier: msg [4217,4220]"
    },
    {
      "src": "comment: /**  * @title HasOwner  * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin.   and provides basic authorization control functions. Inherits storage layout of   ProxyStorage.  */ [15240,15443]",
      "dest": "comment: /**  * @title BurnableTokenWithBounds  * @dev Burning functions as redeeming money from the system.  * The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */ [32179,32433]"
    },
    {
      "src": "state_mutability [10549,10553]",
      "dest": "state_mutability [11345,11349]"
    },
    {
      "src": "yul_evm_builtin [31392,31398]",
      "dest": "yul_evm_builtin [36820,36826]"
    },
    {
      "src": "address: address [41646,41653]",
      "dest": "address: address [1628,1635]"
    },
    {
      "src": "(: ( [11438,11439]",
      "dest": "(: ( [10060,10061]"
    },
    {
      "src": "number_literal: 0 [24320,24321]",
      "dest": "number_literal: 0 [29393,29394]"
    },
    {
      "src": "identifier: _getBalance [18249,18260]",
      "dest": "identifier: totalSupply [23794,23805]"
    },
    {
      "src": "visibility [11375,11383]",
      "dest": "visibility [9982,9990]"
    },
    {
      "src": "): ) [25567,25568]",
      "dest": "): ) [34246,34247]"
    },
    {
      "src": "yul_variable_declaration [28772,28866]",
      "dest": "yul_variable_declaration [37559,37654]"
    },
    {
      "src": "contract_body [15479,16781]",
      "dest": "contract_body [3758,5247]"
    },
    {
      "src": "(: ( [28960,28961]",
      "dest": "(: ( [38230,38231]"
    },
    {
      "src": "yul_path [28243,28251]",
      "dest": "yul_path [37718,37726]"
    },
    {
      "src": "address: address [1477,1484]",
      "dest": "address: address [1593,1600]"
    },
    {
      "src": ",: , [554,555]",
      "dest": ",: , [7490,7491]"
    },
    {
      "src": "primitive_type [24312,24319]",
      "dest": "primitive_type [29385,29392]"
    },
    {
      "src": "function: function [25453,25461]",
      "dest": "function: function [34107,34115]"
    },
    {
      "src": "): ) [24900,24901]",
      "dest": "): ) [41386,41387]"
    },
    {
      "src": "): ) [13922,13923]",
      "dest": "): ) [1149,1150]"
    },
    {
      "src": "expression_statement [9698,9734]",
      "dest": "expression_statement [4625,4683]"
    },
    {
      "src": "parameter [18766,18778]",
      "dest": "parameter [34669,34684]"
    },
    {
      "src": "string_literal [35074,35096]",
      "dest": "string_literal [43174,43214]"
    },
    {
      "src": "(: ( [40134,40135]",
      "dest": "(: ( [28838,28839]"
    },
    {
      "src": "uint256: uint256 [10563,10570]",
      "dest": "uint256: uint256 [16769,16776]"
    },
    {
      "src": "type_name [612,619]",
      "dest": "type_name [7743,7750]"
    },
    {
      "src": "identifier: _who [3524,3528]",
      "dest": "identifier: account [28512,28519]"
    },
    {
      "src": "function_body [40417,40841]",
      "dest": "function_body [34728,34988]"
    },
    {
      "src": "primitive_type [587,591]",
      "dest": "primitive_type [7545,7549]"
    },
    {
      "src": ",: , [20142,20143]",
      "dest": ",: , [24946,24947]"
    },
    {
      "src": "type_name [5500,5504]",
      "dest": "type_name [26277,26281]"
    },
    {
      "src": "identifier: sub [40021,40024]",
      "dest": "identifier: add [28733,28736]"
    },
    {
      "src": "primitive_type [23091,23095]",
      "dest": "primitive_type [1769,1773]"
    },
    {
      "src": "identifier: value [1437,1442]",
      "dest": "identifier: proportion [1572,1582]"
    },
    {
      "src": "return_type_definition [932,949]",
      "dest": "return_type_definition [5546,5563]"
    },
    {
      "src": "binary_expression [9150,9172]",
      "dest": "binary_expression [27775,27795]"
    },
    {
      "src": "identifier: _to [16985,16988]",
      "dest": "identifier: _to [31602,31605]"
    },
    {
      "src": "function: function [31595,31603]",
      "dest": "function: function [38345,38353]"
    },
    {
      "src": "uint8: uint8 [42888,42893]",
      "dest": "uint8: uint8 [46141,46146]"
    },
    {
      "src": "{: { [17009,17010]",
      "dest": "{: { [31626,31627]"
    },
    {
      "src": "address: address [22851,22858]",
      "dest": "address: address [42946,42953]"
    },
    {
      "src": "identifier: BurnableTokenWithBounds [32426,32449]",
      "dest": "identifier: BurnableTokenWithBounds [40279,40302]"
    },
    {
      "src": "string: string [42974,42980]",
      "dest": "string: string [46236,46242]"
    },
    {
      "src": "}: } [39370,39371]",
      "dest": "}: } [19652,19653]"
    },
    {
      "src": "identifier: balance [38921,38928]",
      "dest": "identifier: isBlacklisted [40544,40557]"
    },
    {
      "src": "(: ( [30878,30879]",
      "dest": "(: ( [36679,36680]"
    },
    {
      "src": "external: external [25504,25512]",
      "dest": "external: external [34158,34166]"
    },
    {
      "src": "number_literal: 0 [9170,9171]",
      "dest": "number_literal: 0 [27793,27794]"
    },
    {
      "src": "view: view [18166,18170]",
      "dest": "view: view [23991,23995]"
    },
    {
      "src": "primitive_type [39335,39342]",
      "dest": "primitive_type [19497,19504]"
    },
    {
      "src": ",: , [28967,28968]",
      "dest": ",: , [38237,38238]"
    },
    {
      "src": "=: = [22181,22182]",
      "dest": "=: = [11006,11007]"
    },
    {
      "src": "return_type_definition [11209,11226]",
      "dest": "return_type_definition [10927,10944]"
    },
    {
      "src": "): ) [40763,40764]",
      "dest": "): ) [34813,34814]"
    },
    {
      "src": "function_definition [42937,43017]",
      "dest": "function_definition [46190,46286]"
    },
    {
      "src": "identifier: offset [30639,30645]",
      "dest": "identifier: offset [36180,36186]"
    },
    {
      "src": "identifier: OwnershipTransferred [15494,15514]",
      "dest": "identifier: OwnershipTransferred [3952,3972]"
    },
    {
      "src": "parameter [3550,3564]",
      "dest": "parameter [27723,27737]"
    },
    {
      "src": "}: } [12931,12932]",
      "dest": "}: } [24454,24455]"
    },
    {
      "src": "\": \" [43095,43096]",
      "dest": "\": \" [46380,46381]"
    },
    {
      "src": "function_definition [1043,1114]",
      "dest": "function_definition [5949,6026]"
    },
    {
      "src": "state_variable_declaration [13549,13576]",
      "dest": "state_variable_declaration [770,797]"
    },
    {
      "src": "address: address [1133,1140]",
      "dest": "address: address [7980,7987]"
    },
    {
      "src": "primitive_type [23057,23064]",
      "dest": "primitive_type [44350,44357]"
    },
    {
      "src": "primitive_type [23025,23032]",
      "dest": "primitive_type [25481,25488]"
    },
    {
      "src": "yul_path [29007,29015]",
      "dest": "yul_path [37932,37940]"
    },
    {
      "src": "visibility [42953,42959]",
      "dest": "visibility [46206,46212]"
    },
    {
      "src": "=>: => [12320,12322]",
      "dest": "=>: => [1363,1365]"
    },
    {
      "src": "type_name [42798,42803]",
      "dest": "type_name [46051,46056]"
    },
    {
      "src": "identifier: SetBurnBounds [24722,24735]",
      "dest": "identifier: SetBurnBounds [32982,32995]"
    },
    {
      "src": "identifier: pendingOwner [13257,13269]",
      "dest": "identifier: pendingOwner [498,510]"
    },
    {
      "src": "binary_expression [33071,33110]",
      "dest": "binary_expression [45141,45162]"
    },
    {
      "src": "yul_evm_builtin [29041,29044]",
      "dest": "yul_evm_builtin [38015,38018]"
    },
    {
      "src": "visibility [16442,16448]",
      "dest": "visibility [4906,4912]"
    },
    {
      "src": "yul_function_call [28788,28866]",
      "dest": "yul_function_call [37575,37654]"
    },
    {
      "src": "number_literal: 0 [10590,10591]",
      "dest": "number_literal: 0 [11609,11610]"
    },
    {
      "src": "(: ( [15753,15754]",
      "dest": "(: ( [4188,4189]"
    },
    {
      "src": "call_argument [24920,24937]",
      "dest": "call_argument [41406,41435]"
    },
    {
      "src": "primitive_type [13903,13910]",
      "dest": "primitive_type [1130,1137]"
    },
    {
      "src": "}: } [18231,18232]",
      "dest": "}: } [24066,24067]"
    },
    {
      "src": "state_mutability [31636,31640]",
      "dest": "state_mutability [38386,38390]"
    },
    {
      "src": "state_variable_declaration [13941,14002]",
      "dest": "state_variable_declaration [1169,1239]"
    },
    {
      "src": "call_argument [35116,35133]",
      "dest": "call_argument [43066,43088]"
    },
    {
      "src": "internal: internal [24831,24839]",
      "dest": "internal: internal [10446,10454]"
    },
    {
      "src": "identifier: REDEMPTION_ADDRESS_COUNT [33726,33750]",
      "dest": "identifier: REDEMPTION_ADDRESS_COUNT [45113,45137]"
    },
    {
      "src": "primitive_type [38160,38167]",
      "dest": "primitive_type [27869,27876]"
    },
    {
      "src": "address: address [13903,13910]",
      "dest": "address: address [1130,1137]"
    },
    {
      "src": "return_statement [43083,43097]",
      "dest": "return_statement [46368,46382]"
    },
    {
      "src": "pure: pure [42784,42788]",
      "dest": "pure: pure [46037,46041]"
    },
    {
      "src": "identifier: require [41278,41285]",
      "dest": "identifier: require [30151,30158]"
    },
    {
      "src": "identifier: _requireCanTransfer [40331,40350]",
      "dest": "identifier: _burn [34663,34668]"
    },
    {
      "src": "primitive_type [18071,18078]",
      "dest": "primitive_type [10469,10476]"
    },
    {
      "src": "identifier: msg [33046,33049]",
      "dest": "identifier: msg [8760,8763]"
    },
    {
      "src": "identifier: _value [20136,20142]",
      "dest": "identifier: amount [24948,24954]"
    },
    {
      "src": "parameter [23025,23037]",
      "dest": "parameter [25481,25495]"
    },
    {
      "src": "): ) [31627,31628]",
      "dest": "): ) [38377,38378]"
    },
    {
      "src": "yul_identifier [28171,28176]",
      "dest": "yul_identifier [36501,36507]"
    },
    {
      "src": "string_literal [40750,40763]",
      "dest": "string_literal [34766,34813]"
    },
    {
      "src": "public: public [12645,12651]",
      "dest": "public: public [22773,22779]"
    },
    {
      "src": "yul_identifier [28243,28251]",
      "dest": "yul_identifier [37718,37726]"
    },
    {
      "src": "yul_evm_builtin [28325,28328]",
      "dest": "yul_evm_builtin [36931,36934]"
    },
    {
      "src": "(: ( [11352,11353]",
      "dest": "(: ( [9959,9960]"
    },
    {
      "src": "identifier: CENT [23777,23781]",
      "dest": "identifier: CENT [40338,40342]"
    },
    {
      "src": "address: address [13215,13222]",
      "dest": "address: address [456,463]"
    },
    {
      "src": "string: string [13646,13652]",
      "dest": "string: string [870,876]"
    },
    {
      "src": "expression_statement [16745,16771]",
      "dest": "expression_statement [5211,5237]"
    },
    {
      "src": "address: address [24798,24805]",
      "dest": "address: address [544,551]"
    },
    {
      "src": "(: ( [4991,4992]",
      "dest": "(: ( [29460,29461]"
    },
    {
      "src": "/: / [10649,10650]",
      "dest": "/: / [11697,11698]"
    },
    {
      "src": "type_name [1156,1163]",
      "dest": "type_name [8003,8010]"
    },
    {
      "src": "parameter [11398,11407]",
      "dest": "parameter [19728,19744]"
    },
    {
      "src": "returns: returns [33004,33011]",
      "dest": "returns: returns [15220,15227]"
    },
    {
      "src": "parameter [21138,21157]",
      "dest": "parameter [26954,26977]"
    },
    {
      "src": "): ) [20976,20977]",
      "dest": "): ) [24370,24371]"
    },
    {
      "src": "public: public [20956,20962]",
      "dest": "public: public [24333,24339]"
    },
    {
      "src": "identifier: location [30717,30725]",
      "dest": "identifier: location [36430,36438]"
    },
    {
      "src": "yul_function_call [30680,30693]",
      "dest": "yul_function_call [36272,36290]"
    },
    {
      "src": "identifier: _value [23357,23363]",
      "dest": "identifier: amount [43843,43849]"
    },
    {
      "src": "expression_statement [41278,41340]",
      "dest": "expression_statement [30151,30220]"
    },
    {
      "src": "returns: returns [11209,11216]",
      "dest": "returns: returns [10927,10934]"
    },
    {
      "src": "emit_statement [40103,40149]",
      "dest": "emit_statement [28817,28860]"
    },
    {
      "src": "comment: /**     * @dev sets the original `owner` of the contract to the sender     * at construction. Must then be reinitialized      */ [15605,15736]",
      "dest": "comment: /**      * @dev emitted when ownership is transferred      * @param previousOwner previous owner of this contract      * @param newOwner new owner of this contract      */ [3765,3940]"
    },
    {
      "src": "expression_statement [24912,24965]",
      "dest": "expression_statement [41398,41486]"
    },
    {
      "src": ",: , [23737,23738]",
      "dest": ",: , [40771,40772]"
    },
    {
      "src": "yul_evm_builtin [30729,30732]",
      "dest": "yul_evm_builtin [36442,36445]"
    },
    {
      "src": "call_argument [38429,38430]",
      "dest": "call_argument [29598,29599]"
    },
    {
      "src": "}: } [671,672]",
      "dest": "}: } [8045,8046]"
    },
    {
      "src": "call_argument [40710,40748]",
      "dest": "call_argument [34747,34764]"
    },
    {
      "src": "return_type_definition [5998,6015]",
      "dest": "return_type_definition [13668,13685]"
    },
    {
      "src": "internal: internal [22730,22738]",
      "dest": "internal: internal [27739,27747]"
    },
    {
      "src": "(: ( [11217,11218]",
      "dest": "(: ( [10935,10936]"
    },
    {
      "src": "function_definition [40322,40841]",
      "dest": "function_definition [34654,34988]"
    },
    {
      "src": "call_expression [20989,21048]",
      "dest": "call_expression [33486,33511]"
    },
    {
      "src": "call_expression [40629,40690]",
      "dest": "call_expression [34825,34902]"
    },
    {
      "src": "parameter [9923,9939]",
      "dest": "parameter [7476,7490]"
    },
    {
      "src": "contract: contract [13186,13194]",
      "dest": "contract: contract [427,435]"
    },
    {
      "src": "comment: //may be disabled by setting both to 0 (this will not be done under normal [25107,25181]",
      "dest": "comment: /**      * @dev Emitted when new burn bounds were set      * @param newMin new minimum burn amount      * @param newMax new maximum burn amount      * @notice `newMin` should never be greater than `newMax`      */ [32752,32970]"
    },
    {
      "src": "(: ( [33689,33690]",
      "dest": "(: ( [25564,25565]"
    },
    {
      "src": "call_argument [42045,42076]",
      "dest": "call_argument [28596,28629]"
    },
    {
      "src": "return: return [18200,18206]",
      "dest": "return: return [24034,24040]"
    },
    {
      "src": "let: let [30635,30638]",
      "dest": "let: let [36176,36179]"
    },
    {
      "src": "type_name [22851,22858]",
      "dest": "type_name [42946,42953]"
    },
    {
      "src": "primitive_type [41138,41145]",
      "dest": "primitive_type [1758,1765]"
    },
    {
      "src": "identifier: allowance [878,887]",
      "dest": "identifier: totalSupply [5518,5529]"
    },
    {
      "src": "comment: //by setting the minimum extremely high, and we don't want to lock [25335,25401]",
      "dest": "comment: /**      * @dev Checks if amount is within allowed burn bounds and      * destroys `amount` tokens from `account`, reducing the      * total supply.      * @param account account to burn tokens for      * @param amount amount of tokens to burn      *      * Emits a {Burn} event      */ [34354,34648]"
    },
    {
      "src": "{: { [398,399]",
      "dest": "{: { [5428,5429]"
    },
    {
      "src": ",: , [12816,12817]",
      "dest": ",: , [24315,24316]"
    },
    {
      "src": "uint256: uint256 [447,454]",
      "dest": "uint256: uint256 [6384,6391]"
    },
    {
      "src": "address: address [13469,13476]",
      "dest": "address: address [690,697]"
    },
    {
      "src": "): ) [1112,1113]",
      "dest": "): ) [6024,6025]"
    },
    {
      "src": "}: } [11466,11467]",
      "dest": "}: } [10127,10128]"
    },
    {
      "src": "}: } [16039,16040]",
      "dest": "}: } [4476,4477]"
    },
    {
      "src": "bool: bool [1033,1037]",
      "dest": "bool: bool [7130,7134]"
    },
    {
      "src": "yul_evm_builtin [28741,28743]",
      "dest": "yul_evm_builtin [36627,36629]"
    },
    {
      "src": "primitive_type [1181,1188]",
      "dest": "primitive_type [8028,8035]"
    },
    {
      "src": "parameter [20061,20075]",
      "dest": "parameter [37116,37130]"
    },
    {
      "src": "primitive_type [22164,22171]",
      "dest": "primitive_type [10996,11003]"
    },
    {
      "src": "external: external [23831,23839]",
      "dest": "external: external [41890,41898]"
    },
    {
      "src": "): ) [34948,34949]",
      "dest": "): ) [43019,43020]"
    },
    {
      "src": "): ) [5504,5505]",
      "dest": "): ) [26281,26282]"
    },
    {
      "src": ",: , [652,653]",
      "dest": ",: , [7783,7784]"
    },
    {
      "src": ",: , [20059,20060]",
      "dest": ",: , [24848,24849]"
    },
    {
      "src": "(: ( [28888,28889]",
      "dest": "(: ( [38158,38159]"
    },
    {
      "src": "external: external [17532,17540]",
      "dest": "external: external [41285,41293]"
    },
    {
      "src": "pure: pure [32754,32758]",
      "dest": "pure: pure [22969,22973]"
    },
    {
      "src": "yul_function_call [29084,29103]",
      "dest": "yul_function_call [38102,38121]"
    },
    {
      "src": "public: public [13781,13787]",
      "dest": "public: public [1820,1826]"
    },
    {
      "src": "function: function [24776,24784]",
      "dest": "function: function [41238,41246]"
    },
    {
      "src": "type_name [13961,13989]",
      "dest": "type_name [1188,1215]"
    },
    {
      "src": "): ) [39802,39803]",
      "dest": "): ) [28535,28536]"
    },
    {
      "src": "public: public [5479,5485]",
      "dest": "public: public [26253,26259]"
    },
    {
      "src": "identifier: offset [28859,28865]",
      "dest": "identifier: offset [37647,37653]"
    },
    {
      "src": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [28889,28955]",
      "dest": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [38159,38225]"
    },
    {
      "src": "call_argument [16768,16769]",
      "dest": "call_argument [5234,5235]"
    },
    {
      "src": "primitive_type [13391,13398]",
      "dest": "primitive_type [616,623]"
    },
    {
      "src": "type_cast_expression [40497,40509]",
      "dest": "type_cast_expression [41928,41944]"
    },
    {
      "src": "returns: returns [5998,6005]",
      "dest": "returns: returns [13668,13675]"
    },
    {
      "src": "identifier: _who [4831,4835]",
      "dest": "identifier: account [29222,29229]"
    },
    {
      "src": "identifier: c [11406,11407]",
      "dest": "identifier: weiValue [19736,19744]"
    },
    {
      "src": "type_name [1340,1347]",
      "dest": "type_name [5986,5993]"
    },
    {
      "src": "type_name [18766,18773]",
      "dest": "type_name [34669,34676]"
    },
    {
      "src": "mapping: mapping [13961,13968]",
      "dest": "mapping: mapping [1188,1195]"
    },
    {
      "src": "view: view [18057,18061]",
      "dest": "view: view [8815,8819]"
    },
    {
      "src": "visibility [3286,3294]",
      "dest": "visibility [15206,15214]"
    },
    {
      "src": "parameter [6461,6480]",
      "dest": "parameter [31112,31126]"
    },
    {
      "src": "type_name [33690,33694]",
      "dest": "type_name [25565,25569]"
    },
    {
      "src": "parameter [4723,4730]",
      "dest": "parameter [14320,14327]"
    },
    {
      "src": "}: } [31739,31740]",
      "dest": "}: } [38492,38493]"
    },
    {
      "src": "identifier: DECIMALS [42701,42709]",
      "dest": "identifier: DECIMALS [45945,45953]"
    },
    {
      "src": "function_definition [954,1039]",
      "dest": "function_definition [31056,31148]"
    },
    {
      "src": "identifier: AttributeData [1404,1417]",
      "dest": "identifier: RewardAllocation [1536,1552]"
    },
    {
      "src": "comment: // Fork of OpenZeppelin's BasicToken [17669,17705]",
      "dest": "comment: // File: contracts/true-currencies-new/TrueCurrency.sol [38781,38836]"
    },
    {
      "src": "expression_statement [16714,16735]",
      "dest": "expression_statement [5180,5201]"
    },
    {
      "src": "identifier: pendingOwner [16470,16482]",
      "dest": "identifier: pendingOwner [4934,4946]"
    },
    {
      "src": "bool: bool [20972,20976]",
      "dest": "bool: bool [24366,24370]"
    },
    {
      "src": "binary_expression [10628,10633]",
      "dest": "binary_expression [11671,11676]"
    },
    {
      "src": "(: ( [478,479]",
      "dest": "(: ( [5670,5671]"
    },
    {
      "src": "expression_statement [11432,11447]",
      "dest": "expression_statement [10053,10100]"
    },
    {
      "src": "primitive_type [38798,38805]",
      "dest": "primitive_type [28664,28671]"
    },
    {
      "src": "function_definition [16596,16778]",
      "dest": "function_definition [5062,5244]"
    },
    {
      "src": "event: event [15488,15493]",
      "dest": "event: event [3946,3951]"
    },
    {
      "src": "type_name [3900,3907]",
      "dest": "type_name [13021,13028]"
    },
    {
      "src": "(: ( [34244,34245]",
      "dest": "(: ( [43979,43980]"
    },
    {
      "src": "address: address [23039,23046]",
      "dest": "address: address [25497,25504]"
    },
    {
      "src": "public: public [12852,12858]",
      "dest": "public: public [22954,22960]"
    },
    {
      "src": "(: ( [21924,21925]",
      "dest": "(: ( [45069,45070]"
    },
    {
      "src": "state_variable_declaration [13424,13463]",
      "dest": "state_variable_declaration [645,684]"
    },
    {
      "src": "comment: // A wrapper around the balanceOf mapping. [11526,11568]",
      "dest": "comment: // File: contracts/true-currencies-new/ERC20.sol [20647,20695]"
    },
    {
      "src": "(: ( [39785,39786]",
      "dest": "(: ( [28503,28504]"
    },
    {
      "src": "function_body [11227,11273]",
      "dest": "function_body [10945,11042]"
    },
    {
      "src": "primitive_type [634,641]",
      "dest": "primitive_type [7765,7772]"
    },
    {
      "src": "\": \" [34203,34204]",
      "dest": "\": \" [41974,41975]"
    },
    {
      "src": "return_type_definition [10815,10832]",
      "dest": "return_type_definition [12953,12970]"
    },
    {
      "src": "primitive_type [11184,11191]",
      "dest": "primitive_type [10874,10881]"
    },
    {
      "src": "): ) [24766,24767]",
      "dest": "): ) [33026,33027]"
    },
    {
      "src": "uint256: uint256 [22231,22238]",
      "dest": "uint256: uint256 [11659,11666]"
    },
    {
      "src": "assembly: assembly [28613,28621]",
      "dest": "assembly: assembly [37152,37160]"
    },
    {
      "src": "identifier: a [10787,10788]",
      "dest": "identifier: a [12897,12898]"
    },
    {
      "src": "(: ( [25541,25542]",
      "dest": "(: ( [34195,34196]"
    },
    {
      "src": "parameter [9100,9116]",
      "dest": "parameter [5967,5984]"
    },
    {
      "src": "internal: internal [34063,34071]",
      "dest": "internal: internal [43857,43865]"
    },
    {
      "src": "parameter [11353,11362]",
      "dest": "parameter [9960,9969]"
    },
    {
      "src": "yul_function_call [28154,28177]",
      "dest": "yul_function_call [36487,36508]"
    },
    {
      "src": "(: ( [30682,30683]",
      "dest": "(: ( [36274,36275]"
    },
    {
      "src": ",: , [40125,40126]",
      "dest": ",: , [28841,28842]"
    },
    {
      "src": "\": \" [16007,16008]",
      "dest": "\": \" [4444,4445]"
    },
    {
      "src": "internal: internal [18611,18619]",
      "dest": "internal: internal [18369,18377]"
    },
    {
      "src": "visibility [25504,25512]",
      "dest": "visibility [34158,34166]"
    },
    {
      "src": "address: address [23663,23670]",
      "dest": "address: address [32705,32712]"
    },
    {
      "src": "identifier: Transfer [603,611]",
      "dest": "identifier: Transfer [7734,7742]"
    },
    {
      "src": "identifier: onlyOwner [39811,39820]",
      "dest": "identifier: onlyOwner [45444,45453]"
    },
    {
      "src": "(: ( [39839,39840]",
      "dest": "(: ( [44402,44403]"
    },
    {
      "src": "visibility [7125,7133]",
      "dest": "visibility [6002,6010]"
    },
    {
      "src": "uint256: uint256 [10779,10786]",
      "dest": "uint256: uint256 [12889,12896]"
    },
    {
      "src": "expression_statement [39313,39354]",
      "dest": "expression_statement [19489,19571]"
    },
    {
      "src": "uint256: uint256 [13773,13780]",
      "dest": "uint256: uint256 [1000,1007]"
    },
    {
      "src": "}: } [31482,31483]",
      "dest": "}: } [36853,36854]"
    },
    {
      "src": ",: , [34919,34920]",
      "dest": ",: , [42960,42961]"
    },
    {
      "src": "identifier: adminAddr [1485,1494]",
      "dest": "identifier: finOp [1601,1606]"
    },
    {
      "src": "primitive_type [9162,9169]",
      "dest": "primitive_type [27785,27792]"
    },
    {
      "src": "address: address [38421,38428]",
      "dest": "address: address [29590,29597]"
    },
    {
      "src": "contract_declaration [16826,17608]",
      "dest": "contract_declaration [31378,32078]"
    },
    {
      "src": "): ) [40508,40509]",
      "dest": "): ) [41943,41944]"
    },
    {
      "src": "visibility [12852,12858]",
      "dest": "visibility [22954,22960]"
    },
    {
      "src": "primitive_type [11721,11728]",
      "dest": "primitive_type [15189,15196]"
    },
    {
      "src": "call_expression [41350,41413]",
      "dest": "call_expression [28012,28083]"
    },
    {
      "src": "call_argument [24878,24900]",
      "dest": "call_argument [41348,41386]"
    },
    {
      "src": "yul_path [28329,28337]",
      "dest": "yul_path [36630,36638]"
    },
    {
      "src": "primitive_type [41568,41572]",
      "dest": "primitive_type [40539,40543]"
    },
    {
      "src": "indexed: indexed [1164,1171]",
      "dest": "indexed: indexed [8011,8018]"
    },
    {
      "src": "return_type_definition [22594,22611]",
      "dest": "return_type_definition [24598,24615]"
    },
    {
      "src": "\": \" [43008,43009]",
      "dest": "\": \" [46277,46278]"
    },
    {
      "src": "yul_identifier [31698,31704]",
      "dest": "yul_identifier [38451,38457]"
    },
    {
      "src": "parameter [4823,4835]",
      "dest": "parameter [29214,29229]"
    },
    {
      "src": "): ) [33694,33695]",
      "dest": "): ) [25569,25570]"
    },
    {
      "src": ".: . [17292,17293]",
      "dest": ".: . [32003,32004]"
    },
    {
      "src": "variable_declaration_statement [3900,3931]",
      "dest": "variable_declaration_statement [13021,13039]"
    },
    {
      "src": "string_literal [25556,25567]",
      "dest": "string_literal [34210,34246]"
    },
    {
      "src": "call_argument [15841,15846]",
      "dest": "call_argument [4276,4281]"
    },
    {
      "src": "parameter [4857,4871]",
      "dest": "parameter [30107,30121]"
    },
    {
      "src": "string [43000,43009]",
      "dest": "string [46269,46278]"
    },
    {
      "src": "parameter [513,520]",
      "dest": "parameter [5711,5718]"
    },
    {
      "src": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [28370,28436]",
      "dest": "yul_hex_number: 0xfffff [36922,36929]"
    },
    {
      "src": "call_argument [11439,11445]",
      "dest": "call_argument [10061,10067]"
    },
    {
      "src": "\": \" [40688,40689]",
      "dest": "\": \" [34900,34901]"
    },
    {
      "src": "!=: != [9159,9161]",
      "dest": "!=: != [27782,27784]"
    },
    {
      "src": "parameter [1002,1015]",
      "dest": "parameter [19403,19416]"
    },
    {
      "src": "uint256: uint256 [21138,21145]",
      "dest": "uint256: uint256 [26954,26961]"
    },
    {
      "src": "if_statement [35171,35294]",
      "dest": "if_statement [43228,43491]"
    },
    {
      "src": "): ) [948,949]",
      "dest": "): ) [5562,5563]"
    },
    {
      "src": "type_name [903,910]",
      "dest": "type_name [24552,24559]"
    },
    {
      "src": "expression_statement [38145,38201]",
      "dest": "expression_statement [27848,27920]"
    },
    {
      "src": "primitive_type [12312,12319]",
      "dest": "primitive_type [1355,1362]"
    },
    {
      "src": "expression_statement [34176,34227]",
      "dest": "expression_statement [41920,42041]"
    },
    {
      "src": "address: address [12292,12299]",
      "dest": "address: address [1336,1343]"
    },
    {
      "src": "yul_identifier [30788,30796]",
      "dest": "yul_identifier [37811,37819]"
    },
    {
      "src": "identifier: hasHook [37189,37196]",
      "dest": "identifier: success [16975,16982]"
    },
    {
      "src": "primitive_type [10563,10570]",
      "dest": "primitive_type [16769,16776]"
    },
    {
      "src": ":=: := [31705,31707]",
      "dest": ":=: := [38458,38460]"
    },
    {
      "src": "identifier: value [1010,1015]",
      "dest": "identifier: value [19411,19416]"
    },
    {
      "src": "visibility [20077,20083]",
      "dest": "visibility [24866,24872]"
    },
    {
      "src": "(: ( [42166,42167]",
      "dest": "(: ( [29282,29283]"
    },
    {
      "src": "yul_path [31253,31259]",
      "dest": "yul_path [36320,36326]"
    },
    {
      "src": "parameter [1306,1318]",
      "dest": "parameter [5671,5686]"
    },
    {
      "src": "function: function [28570,28578]",
      "dest": "function: function [37095,37103]"
    },
    {
      "src": "(: ( [18425,18426]",
      "dest": "(: ( [38399,38400]"
    },
    {
      "src": "\": \" [39894,39895]",
      "dest": "\": \" [44465,44466]"
    },
    {
      "src": "string_literal [5087,5089]",
      "dest": "string_literal [27108,27147]"
    }
  ],
  "actions": [
    {
      "action": "move-tree",
      "tree": "contract_declaration [13186,15201]",
      "parent": "source_file [0,46392]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [15445,16781]",
      "parent": "source_file [0,46392]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "pragma_directive [0,24]",
      "parent": "source_file [0,46392]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "interface_declaration [1247,1368]",
      "parent": "source_file [0,46392]",
      "at": 14
    },
    {
      "action": "move-tree",
      "tree": "comment: /**  * @title SafeMath  * @dev Math operations with safety checks that throw on error  */ [10320,10412]",
      "parent": "source_file [0,46392]",
      "at": 22
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [16826,17608]",
      "parent": "source_file [0,46392]",
      "at": 31
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [24650,25670]",
      "parent": "source_file [0,46392]",
      "at": 34
    },
    {
      "action": "move-tree",
      "tree": "contract_declaration [25959,32293]",
      "parent": "source_file [0,46392]",
      "at": 37
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/TrueCoinReceiver.sol [28,67]",
      "label": "// SPDX-License-Identifier: MIT"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol [174,241]",
      "label": "// File: contracts/true-currencies-new/ProxyStorage.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [94,117]",
      "parent": "source_file [0,46392]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title ERC20Basic  * @dev Simpler version of ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/179  */ [245,376]",
      "label": "/**  * Defines the storage layout of the token implementation contract. Any  * newly declared state variables in future upgrades should be appended  * to the bottom. Never remove state variables from this list, however variables  * can be renamed. Please add _Deprecated to deprecated variables.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol [676,738]",
      "label": "// File: contracts/true-currencies-new/ClaimableOwnable.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [3468,3491]",
      "parent": "source_file [0,46392]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title ERC20 interface  * @dev see https://github.com/ethereum/EIPs/issues/20  */ [742,833]",
      "label": "/**  * @title ClamableOwnable  * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.  * and provides basic authorization control functions. Inherits storage layout of  * ProxyStorage.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: registry/contracts/Registry.sol [1203,1243]",
      "label": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/ownership/Ownable.sol [8170,8232]",
      "label": "/**  * @dev Interface of the ERC20 standard as defined in the EIP.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Ownable  * @dev The Ownable contract has an owner address, and provides basic authorization control  * functions, this simplifies the implementation of \"user permissions\".  */ [8236,8429]",
      "label": "// File: @openzeppelin/contracts/GSN/Context.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [8102,8125]",
      "parent": "source_file [0,46392]",
      "at": 14
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/ownership/Claimable.sol [9260,9324]",
      "label": "/*  * @dev Provides information about the current execution context, including the  * sender of the transaction and its data. While these are generally available  * via msg.sender and msg.data, they should not be accessed in such a direct  * manner, since when dealing with GSN meta-transactions the account sending and  * paying for execution may not be the actual sender (as far as an application  * is concerned).  *  * This contract is only required for intermediate, library-like contracts.  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [8639,9022]",
      "parent": "source_file [0,46392]",
      "at": 16
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Claimable  * @dev Extension for the Ownable contract, where the ownership needs to be claimed.  * This allows the new owner to accept the transfer.  */ [9328,9497]",
      "label": "// File: @openzeppelin/contracts/math/SafeMath.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [9080,9103]",
      "parent": "source_file [0,46392]",
      "at": 18
    },
    {
      "action": "update-node",
      "tree": "comment: // File: openzeppelin-solidity/contracts/math/SafeMath.sol [10258,10316]",
      "label": "/**  * @dev Wrappers over Solidity's arithmetic operations with added overflow  * checks.  *  * Arithmetic operations in Solidity wrap on overflow. This can easily result  * in bugs, because programmers usually assume that an overflow raises an  * error, which is the standard behavior in high level programming languages.  * `SafeMath` restores this intuition by reverting the transaction when an  * operation overflows.  *  * Using this library instead of the unchecked operations eliminates an entire  * class of bugs, so it's recommended to use it always.  */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title SafeMath  * @dev Math operations with safety checks that throw on error  */ [10320,10412]",
      "label": "// File: @openzeppelin/contracts/utils/Address.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [14461,14484]",
      "parent": "source_file [0,46392]",
      "at": 22
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/modularERC20/BalanceSheet.sol [11474,11522]",
      "label": "/**  * @dev Collection of functions related to the address type  */"
    },
    {
      "action": "insert-node",
      "tree": "library_declaration [14559,20643]",
      "parent": "source_file [0,46392]",
      "at": 24
    },
    {
      "action": "update-node",
      "tree": "comment: // A wrapper around the balanceOf mapping. [11526,11568]",
      "label": "// File: contracts/true-currencies-new/ERC20.sol"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/modularERC20/AllowanceSheet.sol [12104,12154]",
      "label": "/**  * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.  * Removing state variables has been necessary due to proxy pattern usage.  * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:  * - Remove state variables _name, _symbol, _decimals  * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage  * - Remove constructor  * - Solidity version changed from ^0.6.0 to 0.6.10  * - Contract made abstract  *  * See also: ClaimableOwnable.sol and ProxyStorage.sol  */"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [21346,21369]",
      "parent": "source_file [0,46392]",
      "at": 27
    },
    {
      "action": "update-node",
      "tree": "comment: // A wrapper around the allowanceOf mapping. [12158,12202]",
      "label": "/**  * @dev Implementation of the {IERC20} interface.  *  * This implementation is agnostic to the way tokens are created. This means  * that a supply mechanism has to be added in a derived contract using {_mint}.  * For a generic mechanism see {ERC20PresetMinterPauser}.  *  * TIP: For a detailed writeup see our guide  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How  * to implement supply mechanisms].  *  * We have followed general OpenZeppelin guidelines: functions revert instead  * of returning `false` on failure. This behavior is nonetheless conventional  * and does not conflict with the expectations of ERC20 applications.  *  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.  * This allows applications to reconstruct the allowance for all accounts just  * by listening to said events. Other implementations of the EIP may not emit  * these events, as it isn't required by the specification.  *  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}  * functions have been added to mitigate the well-known issues around setting  * allowances. See {IERC20-approve}.  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [22560,31151]",
      "parent": "source_file [0,46392]",
      "at": 29
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/ProxyStorage.sol [12939,12974]",
      "label": "// File: contracts/true-currencies-new/ReclaimerToken.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [31216,31239]",
      "parent": "source_file [0,46392]",
      "at": 31
    },
    {
      "action": "update-node",
      "tree": "comment: /* Defines the storage layout of the token implementaiton contract. Any newly declared state variables in future upgrades should be appened to the bottom. Never remove state variables from this list  */ [12978,13184]",
      "label": "/**  * @title ReclaimerToken  * @dev ERC20 token which allows owner to reclaim ERC20 tokens  * or ether sent to this contract  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/HasOwner.sol [15205,15236]",
      "label": "// File: contracts/true-currencies-new/BurnableTokenWithBounds.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [32152,32175]",
      "parent": "source_file [0,46392]",
      "at": 35
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title HasOwner  * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin.   and provides basic authorization control functions. Inherits storage layout of   ProxyStorage.  */ [15240,15443]",
      "label": "/**  * @title BurnableTokenWithBounds  * @dev Burning functions as redeeming money from the system.  * The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/ReclaimerToken.sol [16785,16822]",
      "label": "// File: contracts/true-currencies-new/GasRefund.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [35051,35074]",
      "parent": "source_file [0,46392]",
      "at": 39
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/modularERC20/ModularBasicToken.sol [17612,17665]",
      "label": "/**  * @title Gas Reclaim Legacy  *  * Note: this contract does not affect any of the token logic. It merely  * exists so the TokenController (owner) can reclaim the sponsored gas  *  * Previously TrueCurrency has a feature called \"gas boost\" which allowed  * us to sponsor gas by setting non-empty storage slots to 1.  * We are depricating this feature, but there is a bunch of gas saved  * from years of sponsoring gas. This contract is meant to allow the owner  * to take advantage of this leftover gas. Once all the slots are used,  * this contract can be removed from TrueCurrency.  *  * Utilitzes the gas refund mechanism in EVM. Each time an non-empty  * storage slot is set to 0, evm will refund 15,000 to the sender.  * Also utilized the refund for selfdestruct, see gasRefund39  *  */"
    },
    {
      "action": "update-node",
      "tree": "comment: // Fork of OpenZeppelin's BasicToken [17669,17705]",
      "label": "// File: contracts/true-currencies-new/TrueCurrency.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [38840,38863]",
      "parent": "source_file [0,46392]",
      "at": 43
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Basic token  * @dev Basic version of StandardToken, with no allowances.  */ [17707,17799]",
      "label": "/**  * @title TrueCurrency  * @dev TrueCurrency is an ERC20 with blacklist & redemption addresses  *  * TrueCurrency is a compliant stablecoin with blacklist and redemption  * addresses. Only the owner can blacklist accounts. Redemption addresses  * are assigned automatically to the first 0x100000 addresses. Sending  * tokens to the redemption address will trigger a burn operation. Only  * the owner can mint or blacklist accounts.  *  * This contract is owned by the TokenController, which manages token  * minting & admin functionality. See TokenController.sol  *  * See also: BurnableTokenWithBounds.sol  *  * ~~~~ Features ~~~~  *  * Redemption Addresses  * - The first 0x100000 addresses are redemption addresses  * - Tokens sent to redemption addresses are burned  * - Redemptions are tracked off-chain  * - Cannot mint tokens to redemption addresses  *  * Blacklist  * - Owner can blacklist accounts in accordance with local regulatory bodies  * - Only a court order will merit a blacklist; blacklisting is extremely rare  *  * Burn Bounds & CanBurn  * - Owner can set min & max burn amounts  * - Only accounts flagged in canBurn are allowed to burn tokens  * - canBurn prevents tokens from being sent to the incorrect address  *  * Reclaimer Token  * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner  */"
    },
    {
      "action": "insert-node",
      "tree": "contract_declaration [40245,45614]",
      "parent": "source_file [0,46392]",
      "at": 45
    },
    {
      "action": "update-node",
      "tree": "comment: // File: contracts/modularERC20/ModularStandardToken.sol [18856,18912]",
      "label": "// File: contracts/true-currencies-new/TrueGBP.sol"
    },
    {
      "action": "insert-tree",
      "tree": "pragma_directive [45672,45695]",
      "parent": "source_file [0,46392]",
      "at": 47
    },
    {
      "action": "update-node",
      "tree": "comment: /**  * @title Standard ERC20 token  *  * @dev Implementation of the basic standard token.  * @dev https://github.com/ethereum/EIPs/issues/20  * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol  */ [18916,19188]",
      "label": "/**  * @title TrueGBP  * @dev This is the top-level ERC20 contract, but most of the interesting functionality is  * inherited - see the documentation on the corresponding contracts.  */"
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [13828,13868]",
      "parent": "contract_body [449,3401]",
      "at": 20
    },
    {
      "action": "update-node",
      "tree": "identifier: HasOwner [15454,15462]",
      "label": "ClaimableOwnable"
    },
    {
      "action": "move-tree",
      "tree": "event_definition [15488,15597]",
      "parent": "contract_body [3758,5247]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "constructor_definition [15742,15855]",
      "parent": "contract_body [3758,5247]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "modifier_definition [15946,16040]",
      "parent": "contract_body [3758,5247]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "function_definition [16397,16501]",
      "parent": "contract_body [3758,5247]",
      "at": 10
    },
    {
      "action": "update-node",
      "tree": "identifier: RegistryClone [1257,1270]",
      "label": "IERC20"
    },
    {
      "action": "move-tree",
      "tree": "contract_body [398,672]",
      "parent": "interface_declaration [5411,8046]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "function_definition [403,456]",
      "parent": "contract_body [5428,8046]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [8639,8647]",
      "parent": "contract_declaration [8639,9022]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [8648,8656]",
      "parent": "contract_declaration [8639,9022]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: Context [8657,8664]",
      "parent": "contract_declaration [8639,9022]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "contract_body [8665,9022]",
      "parent": "contract_declaration [8639,9022]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "function_definition [11340,11467]",
      "parent": "contract_body [9701,14403]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "function_definition [10505,10679]",
      "parent": "contract_body [9701,14403]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "function_definition [10766,11043]",
      "parent": "contract_body [9701,14403]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "library: library [14559,14566]",
      "parent": "library_declaration [14559,20643]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: Address [14567,14574]",
      "parent": "library_declaration [14559,20643]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "contract_body [14575,20643]",
      "parent": "library_declaration [14559,20643]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [22560,22568]",
      "parent": "contract_declaration [22560,31151]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [22569,22577]",
      "parent": "contract_declaration [22560,31151]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: ERC20 [22578,22583]",
      "parent": "contract_declaration [22560,31151]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "is: is [22584,22586]",
      "parent": "contract_declaration [22560,31151]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22587,22603]",
      "parent": "contract_declaration [22560,31151]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [22603,22604]",
      "parent": "contract_declaration [22560,31151]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22605,22612]",
      "parent": "contract_declaration [22560,31151]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [22612,22613]",
      "parent": "contract_declaration [22560,31151]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [22614,22620]",
      "parent": "contract_declaration [22560,31151]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "contract_body [22621,31151]",
      "parent": "contract_declaration [22560,31151]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [31378,31386]",
      "parent": "contract_declaration [31378,32078]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [32435,32443]",
      "parent": "contract_declaration [32435,34991]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "inheritance_specifier [32395,32409]",
      "parent": "contract_declaration [32435,34991]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "event_definition [24716,24768]",
      "parent": "contract_body [32495,34991]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "comment: //by setting the minimum extremely high, and we don't want to lock [25335,25401]",
      "parent": "contract_body [32495,34991]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [35891,35899]",
      "parent": "contract_declaration [35891,38777]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: GasRefundToken [25968,25982]",
      "label": "GasRefund"
    },
    {
      "action": "move-tree",
      "tree": "comment: /**       @dev refund 15,000 gas     @dev costs slightly more than 10,200 gas     */ [31045,31132]",
      "parent": "contract_body [35919,38777]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [40245,40253]",
      "parent": "contract_declaration [40245,45614]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "contract: contract [40254,40262]",
      "parent": "contract_declaration [40245,45614]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: TrueCurrency [40263,40275]",
      "parent": "contract_declaration [40245,45614]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "is: is [40276,40278]",
      "parent": "contract_declaration [40245,45614]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "inheritance_specifier [32426,32449]",
      "parent": "contract_declaration [40245,45614]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [40302,40303]",
      "parent": "contract_declaration [40245,45614]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "inheritance_specifier [40304,40313]",
      "parent": "contract_declaration [40245,45614]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "contract_body [40314,45614]",
      "parent": "contract_declaration [40245,45614]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [544,572]",
      "parent": "contract_body [449,3401]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [578,608]",
      "parent": "contract_body [449,3401]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [805,833]",
      "parent": "contract_body [449,3401]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [903,938]",
      "parent": "contract_body [449,3401]",
      "at": 14
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [11647,11693]",
      "parent": "contract_body [449,3401]",
      "at": 21
    },
    {
      "action": "update-node",
      "tree": "comment: /* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      *************************************************************************      ** length     input                              usage      *************************************************************************      ** 19         \"trueXXX.proxy.owner\"              Proxy Owner      ** 20         address                            balanceOf      ** 27         \"trueXXX.pending.proxy.owner\"      Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"     Proxy Implementation      ** 32         uint256(11)                        gasRefundPool_Deprecated      ** 40         address,address                    allowance      ** 52         address,bytes32                    Registry attributes     **/ [14012,15198]",
      "label": "// reward token storage"
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1276,1322]",
      "parent": "contract_body [449,3401]",
      "at": 21
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [12283,12352]",
      "parent": "contract_body [449,3401]",
      "at": 26
    },
    {
      "action": "insert-node",
      "tree": "comment: // true reward allocation [1466,1491]",
      "parent": "contract_body [449,3401]",
      "at": 24
    },
    {
      "action": "insert-node",
      "tree": "comment: // proportion: 1000 = 100% [1497,1523]",
      "parent": "contract_body [449,3401]",
      "at": 25
    },
    {
      "action": "move-tree",
      "tree": "struct_declaration [1397,1530]",
      "parent": "contract_body [449,3401]",
      "at": 30
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1620,1690]",
      "parent": "contract_body [449,3401]",
      "at": 27
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1696,1742]",
      "parent": "contract_body [449,3401]",
      "at": 28
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1750,1789]",
      "parent": "contract_body [449,3401]",
      "at": 29
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1795,1835]",
      "parent": "contract_body [449,3401]",
      "at": 30
    },
    {
      "action": "insert-node",
      "tree": "comment: /* Additionally, we have several keccak-based storage locations.      * If you add more keccak-based storage mappings, such as mappings, you must document them here.      * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.      * A preimage collision can be used to attack the contract by treating one storage location as another,      * which would always be a critical issue.      * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.      *******************************************************************************************************      ** length     input                                                         usage      *******************************************************************************************************      ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner      ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner      ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation      ** 32         uint256(11)                                                   gasRefundPool_Deprecated      ** 64         uint256(address),uint256(14)                                  balanceOf      ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance      ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes      **/ [1843,3398]",
      "parent": "contract_body [449,3401]",
      "at": 31
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev sets the original `owner` of the contract to the sender     * at construction. Must then be reinitialized      */ [15605,15736]",
      "label": "/**      * @dev emitted when ownership is transferred      * @param previousOwner previous owner of this contract      * @param newOwner new owner of this contract      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [15863,15940]",
      "label": "/**      * @dev sets the original `owner` of the contract to the sender      * at construction. Must then be reinitialized      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [16048,16141]",
      "label": "/**      * @dev Throws if called by any account other than the owner.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [16249,16391]",
      "label": "/**      * @dev Modifier throws if called by any account other than the pendingOwner.      */"
    },
    {
      "action": "move-tree",
      "tree": "modifier_definition [9663,9747]",
      "parent": "contract_body [3758,5247]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [16509,16590]",
      "label": "/**      * @dev Allows the current owner to set the pendingOwner address.      * @param newOwner The address to transfer ownership to.      */"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Allows the pendingOwner address to finalize the transfer.      */ [4973,5056]",
      "parent": "contract_body [3758,5247]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.4.23 [17,23]",
      "label": "0.6.0"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the amount of tokens in existence.      */ [5435,5503]",
      "parent": "contract_body [5428,8046]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "function_definition [869,950]",
      "parent": "contract_body [5428,8046]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the amount of tokens owned by `account`.      */ [5572,5646]",
      "parent": "contract_body [5428,8046]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Moves `amount` tokens from the caller's account to `recipient`.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * Emits a {Transfer} event.      */ [5728,5943]",
      "parent": "contract_body [5428,8046]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "function_definition [1043,1114]",
      "parent": "contract_body [5428,8046]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the remaining number of tokens that `spender` will be      * allowed to spend on behalf of `owner` through {transferFrom}. This is      * zero by default.      *      * This value changes when {approve} or {transferFrom} are called.      */ [6034,6304]",
      "parent": "contract_body [5428,8046]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * IMPORTANT: Beware that changing an allowance with this method brings the risk      * that someone may use both the old and the new allowance by unfortunate      * transaction ordering. One possible solution to mitigate this race      * condition is to first reduce the spender's allowance to 0 and set the      * desired value afterwards:      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729      *      * Emits an {Approval} event.      */ [6401,7056]",
      "parent": "contract_body [5428,8046]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [7062,7136]",
      "parent": "contract_body [5428,8046]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Moves `amount` tokens from `sender` to `recipient` using the      * allowance mechanism. `amount` is then deducted from the caller's      * allowance.      *      * Returns a boolean value indicating whether the operation succeeded.      *      * Emits a {Transfer} event.      */ [7144,7448]",
      "parent": "contract_body [5428,8046]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when `value` tokens are moved from one account (`from`) to      * another (`to`).      *      * Note that `value` may be zero.      */ [7559,7722]",
      "parent": "contract_body [5428,8046]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when the allowance of a `spender` for an `owner` is set by      * a call to {approve}. `value` is the new allowance.      */ [7808,7959]",
      "parent": "contract_body [5428,8046]",
      "at": 15
    },
    {
      "action": "move-tree",
      "tree": "event_definition [1118,1196]",
      "parent": "contract_body [5428,8046]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "{: { [8665,8666]",
      "parent": "contract_body [8665,9022]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "function_definition [8672,8778]",
      "parent": "contract_body [8665,9022]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "function_definition [8786,9019]",
      "parent": "contract_body [8665,9022]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [9021,9022]",
      "parent": "contract_body [8665,9022]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "comment: /**   * @dev Multiplies two numbers, throws on overflow.   */ [10438,10501]",
      "label": "/**      * @dev Returns the addition of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `+` operator.      *      * Requirements:      *      * - Addition cannot overflow.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**   * @dev Integer division of two numbers, truncating the quotient.   */ [10685,10762]",
      "label": "/**      * @dev Returns the subtraction of two unsigned integers, reverting on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */"
    },
    {
      "action": "insert-node",
      "tree": "function_definition [10411,10547]",
      "parent": "contract_body [9701,14403]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "comment: /**   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).   */ [11049,11156]",
      "label": "/**      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on      * overflow (when the result is negative).      *      * Counterpart to Solidity's `-` operator.      *      * Requirements:      *      * - Subtraction cannot overflow.      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**   * @dev Adds two numbers, throws on overflow.   */ [11279,11336]",
      "label": "/**      * @dev Returns the multiplication of two unsigned integers, reverting on      * overflow.      *      * Counterpart to Solidity's `*` operator.      *      * Requirements:      *      * - Multiplication cannot overflow.      */"
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [11780,12242]",
      "parent": "contract_body [9701,14403]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [12248,12380]",
      "parent": "contract_body [9701,14403]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on      * division by zero. The result is rounded towards zero.      *      * Counterpart to Solidity's `/` operator. Note: this function uses a      * `revert` opcode (which leaves remaining gas untouched) while Solidity      * uses an invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [12388,12870]",
      "parent": "contract_body [9701,14403]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [13162,13613]",
      "parent": "contract_body [9701,14403]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function_definition [13619,13749]",
      "parent": "contract_body [9701,14403]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),      * Reverts with custom message when dividing by zero.      *      * Counterpart to Solidity's `%` operator. This function uses a `revert`      * opcode (which leaves remaining gas untouched) while Solidity uses an      * invalid opcode to revert (consuming all remaining gas).      *      * Requirements:      *      * - The divisor cannot be zero.      */ [13757,14228]",
      "parent": "contract_body [9701,14403]",
      "at": 15
    },
    {
      "action": "insert-node",
      "tree": "function_definition [14234,14400]",
      "parent": "contract_body [9701,14403]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "{: { [14575,14576]",
      "parent": "contract_body [14575,20643]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns true if `account` is a contract.      *      * [IMPORTANT]      * ====      * It is unsafe to assume that an address for which this function returns      * false is an externally-owned account (EOA) and not a contract.      *      * Among others, `isContract` will return false for the following      * types of addresses:      *      *  - an externally-owned account      *  - a contract in construction      *  - an address where a contract will be created      *  - an address where a contract lived, but was destroyed      * ====      */ [14582,15163]",
      "parent": "contract_body [14575,20643]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "function_definition [15169,15788]",
      "parent": "contract_body [14575,20643]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to      * `recipient`, forwarding all available gas and reverting on errors.      *      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost      * of certain opcodes, possibly making contracts go over the 2300 gas limit      * imposed by `transfer`, making them unable to receive funds via      * `transfer`. {sendValue} removes this limitation.      *      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].      *      * IMPORTANT: because control is transferred to `recipient`, care must be      * taken to not create reentrancy vulnerabilities. Consider using      * {ReentrancyGuard} or the      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].      */ [15796,16717]",
      "parent": "contract_body [14575,20643]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function_definition [16723,17120]",
      "parent": "contract_body [14575,20643]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Performs a Solidity function call using a low level `call`. A      * plain`call` is an unsafe replacement for a function call: use this      * function instead.      *      * If `target` reverts with a revert reason, it is bubbled up by this      * function (like regular Solidity function calls).      *      * Returns the raw returned data. To convert to the expected return value,      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].      *      * Requirements:      *      * - `target` must be a contract.      * - calling `target` with `data` must not revert.      *      * _Available since v3.1._      */ [17128,17875]",
      "parent": "contract_body [14575,20643]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "function_definition [17881,18054]",
      "parent": "contract_body [14575,20643]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with      * `errorMessage` as a fallback revert reason when `target` reverts.      *      * _Available since v3.1._      */ [18062,18278]",
      "parent": "contract_body [14575,20643]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_definition [18284,18480]",
      "parent": "contract_body [14575,20643]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],      * but also transferring `value` wei to `target`.      *      * Requirements:      *      * - the calling contract must have an ETH balance of at least `value`.      * - the called Solidity function must be `payable`.      *      * _Available since v3.1._      */ [18488,18849]",
      "parent": "contract_body [14575,20643]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [18855,19081]",
      "parent": "contract_body [14575,20643]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but      * with `errorMessage` as a fallback revert reason when `target` reverts.      *      * _Available since v3.1._      */ [19089,19331]",
      "parent": "contract_body [14575,20643]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function_definition [19337,19653]",
      "parent": "contract_body [14575,20643]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_definition [19661,20640]",
      "parent": "contract_body [14575,20643]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "}: } [20642,20643]",
      "parent": "contract_body [14575,20643]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "{: { [22621,22622]",
      "parent": "contract_body [22621,31151]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "using_directive [19248,19275]",
      "parent": "contract_body [22621,31151]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "using_directive [22661,22687]",
      "parent": "contract_body [22621,31151]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the name of the token.      */ [22695,22751]",
      "parent": "contract_body [22621,31151]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function_definition [22757,22817]",
      "parent": "contract_body [22621,31151]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the symbol of the token, usually a shorter version of the      * name.      */ [22825,22930]",
      "parent": "contract_body [22621,31151]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "function_definition [22936,22998]",
      "parent": "contract_body [22621,31151]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Returns the number of decimals used to get its user representation.      * For example, if `decimals` equals `2`, a balance of `505` tokens should      * be displayed to a user as `5,05` (`505 / 10 ** 2`).      *      * Tokens usually opt for a value of 18, imitating the relationship between      * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is      * called.      *      * NOTE: This information is only used for _display_ purposes: it in      * no way affects any of the arithmetic of the contract, including      * {IERC20-balanceOf} and {IERC20-transfer}.      */ [23006,23630]",
      "parent": "contract_body [22621,31151]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_definition [23636,23720]",
      "parent": "contract_body [22621,31151]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-totalSupply}.      */ [23728,23779]",
      "parent": "contract_body [22621,31151]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "function_definition [18240,18349]",
      "parent": "contract_body [22621,31151]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-balanceOf}.      */ [23893,23942]",
      "parent": "contract_body [22621,31151]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "function_definition [18126,18232]",
      "parent": "contract_body [22621,31151]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-transfer}.      *      * Requirements:      *      * - `recipient` cannot be the zero address.      * - the caller must have a balance of at least `amount`.      */ [24075,24274]",
      "parent": "contract_body [22621,31151]",
      "at": 13
    },
    {
      "action": "move-tree",
      "tree": "function_definition [12774,12932]",
      "parent": "contract_body [22621,31151]",
      "at": 14
    },
    {
      "action": "move-tree",
      "tree": ",: , [12816,12817]",
      "parent": "function_definition [24280,24455]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-allowance}.      */ [24463,24512]",
      "parent": "contract_body [22621,31151]",
      "at": 15
    },
    {
      "action": "move-tree",
      "tree": "function_definition [22531,22667]",
      "parent": "contract_body [22621,31151]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-approve}.      *      * Requirements:      *      * - `spender` cannot be the zero address.      */ [24677,24810]",
      "parent": "contract_body [22621,31151]",
      "at": 17
    },
    {
      "action": "move-tree",
      "tree": "function_definition [20026,20185]",
      "parent": "contract_body [22621,31151]",
      "at": 18
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev See {IERC20-transferFrom}.      *      * Emits an {Approval} event indicating the updated allowance. This is not      * required by the EIP. See the note at the beginning of {ERC20};      *      * Requirements:      * - `sender` and `recipient` cannot be the zero address.      * - `sender` must have a balance of at least `amount`.      * - the caller must have allowance for ``sender``'s tokens of at least      * `amount`.      */ [24993,25453]",
      "parent": "contract_body [22621,31151]",
      "at": 19
    },
    {
      "action": "insert-node",
      "tree": "function_definition [25459,25780]",
      "parent": "contract_body [22621,31151]",
      "at": 20
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Atomically increases the allowance granted to `spender` by the caller.      *      * This is an alternative to {approve} that can be used as a mitigation for      * problems described in {IERC20-approve}.      *      * Emits an {Approval} event indicating the updated allowance.      *      * Requirements:      *      * - `spender` cannot be the zero address.      */ [25788,26183]",
      "parent": "contract_body [22621,31151]",
      "at": 21
    },
    {
      "action": "insert-node",
      "tree": "function_definition [26189,26407]",
      "parent": "contract_body [22621,31151]",
      "at": 22
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Atomically decreases the allowance granted to `spender` by the caller.      *      * This is an alternative to {approve} that can be used as a mitigation for      * problems described in {IERC20-approve}.      *      * Emits an {Approval} event indicating the updated allowance.      *      * Requirements:      *      * - `spender` cannot be the zero address.      * - `spender` must have allowance for the caller of at least      * `subtractedValue`.      */ [26415,26904]",
      "parent": "contract_body [22621,31151]",
      "at": 23
    },
    {
      "action": "insert-node",
      "tree": "function_definition [26910,27179]",
      "parent": "contract_body [22621,31151]",
      "at": 24
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Moves tokens `amount` from `sender` to `recipient`.      *      * This is internal function is equivalent to {transfer}, and can be used to      * e.g. implement automatic token fees, slashing mechanisms, etc.      *      * Emits a {Transfer} event.      *      * Requirements:      *      * - `sender` cannot be the zero address.      * - `recipient` cannot be the zero address.      * - `sender` must have a balance of at least `amount`.      */ [27187,27663]",
      "parent": "contract_body [22621,31151]",
      "at": 25
    },
    {
      "action": "insert-node",
      "tree": "function_definition [27669,28208]",
      "parent": "contract_body [22621,31151]",
      "at": 26
    },
    {
      "action": "insert-node",
      "tree": "comment: /** @dev Creates `amount` tokens and assigns them to `account`, increasing      * the total supply.      *      * Emits a {Transfer} event with `from` set to the zero address.      *      * Requirements      *      * - `to` cannot be the zero address.      */ [28216,28483]",
      "parent": "contract_body [22621,31151]",
      "at": 27
    },
    {
      "action": "move-tree",
      "tree": "function_definition [39754,40156]",
      "parent": "contract_body [22621,31151]",
      "at": 28
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Destroys `amount` tokens from `account`, reducing the      * total supply.      *      * Emits a {Transfer} event with `to` set to the zero address.      *      * Requirements      *      * - `account` cannot be the zero address.      * - `account` must have at least `amount` tokens.      */ [28875,29193]",
      "parent": "contract_body [22621,31151]",
      "at": 29
    },
    {
      "action": "insert-node",
      "tree": "function_definition [29199,29617]",
      "parent": "contract_body [22621,31151]",
      "at": 30
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.      *      * This is internal function is equivalent to `approve`, and can be used to      * e.g. set automatic allowances for certain subsystems, etc.      *      * Emits an {Approval} event.      *      * Requirements:      *      * - `owner` cannot be the zero address.      * - `spender` cannot be the zero address.      */ [29625,30051]",
      "parent": "contract_body [22621,31151]",
      "at": 31
    },
    {
      "action": "insert-node",
      "tree": "function_definition [30057,30403]",
      "parent": "contract_body [22621,31151]",
      "at": 32
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Hook that is called before any transfer of tokens. This includes      * minting and burning.      *      * Calling conditions:      *      * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens      * will be to transferred to `to`.      * - when `from` is zero, `amount` tokens will be minted for `to`.      * - when `to` is zero, `amount` of ``from``'s tokens will be burned.      * - `from` and `to` are never both zero.      *      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].      */ [30411,31000]",
      "parent": "contract_body [22621,31151]",
      "at": 33
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-empty-blocks [31006,31050]",
      "parent": "contract_body [22621,31151]",
      "at": 34
    },
    {
      "action": "move-tree",
      "tree": "function_definition [954,1039]",
      "parent": "contract_body [22621,31151]",
      "at": 35
    },
    {
      "action": "insert-node",
      "tree": "}: } [31150,31151]",
      "parent": "contract_body [22621,31151]",
      "at": 36
    },
    {
      "action": "move-tree",
      "tree": "user_defined_type [17213,17218]",
      "parent": "inheritance_specifier [31414,31419]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "comment: /**       *@dev send all eth balance in the contract to another address     */ [16869,16949]",
      "label": "/**      * @dev send all eth balance in the contract to another address      * @param _to address to send eth balance to      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**       *@dev send all token balance of an arbitary erc20 token     in the contract to another address     */ [17071,17185]",
      "label": "/**      * @dev send all token balance of an arbitrary erc20 token      * in the contract to another address      * @param token token to reclaim      * @param _to address to send eth balance to      */"
    },
    {
      "action": "update-node",
      "tree": "comment: //Change the minimum and maximum amount that can be burned at once. Burning [25026,25101]",
      "label": "/**      * @dev Emitted when `value` tokens are burnt from one account (`burner`)      * @param burner address which burned tokens      * @param value amount of tokens burned      */"
    },
    {
      "action": "move-tree",
      "tree": "event_definition [23652,23702]",
      "parent": "contract_body [32495,34991]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "comment: //may be disabled by setting both to 0 (this will not be done under normal [25107,25181]",
      "label": "/**      * @dev Emitted when new burn bounds were set      * @param newMin new minimum burn amount      * @param newMax new maximum burn amount      * @notice `newMin` should never be greater than `newMax`      */"
    },
    {
      "action": "update-node",
      "tree": "comment: //operation, but we can't add checks to disallow it without losing a lot of [25187,25262]",
      "label": "/**      * @dev Destroys `amount` tokens from `msg.sender`, reducing the      * total supply.      * @param amount amount of tokens to burn      *      * Emits a {Transfer} event with `to` set to the zero address.      * Emits a {Burn} event with `burner` set to `msg.sender`      *      * Requirements      *      * - `msg.sender` must have at least `amount` tokens.      *      */"
    },
    {
      "action": "move-tree",
      "tree": "function_definition [20894,21078]",
      "parent": "contract_body [32495,34991]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "comment: //flexibility since burning could also be as good as disabled [25268,25329]",
      "label": "/**      * @dev Change the minimum and maximum amount that can be burned at once.      * Burning may be disabled by setting both to 0 (this will not be done      * under normal operation, but we can't add checks to disallow it without      * losing a lot of flexibility since burning could also be as good as disabled      * by setting the minimum extremely high, and we don't want to lock      * in any particular cap for the minimum)      * @param _min minimum amount that can be burned at once      * @param _max maximum amount that can be burned at once      */"
    },
    {
      "action": "update-node",
      "tree": "comment: //by setting the minimum extremely high, and we don't want to lock [25335,25401]",
      "label": "/**      * @dev Checks if amount is within allowed burn bounds and      * destroys `amount` tokens from `account`, reducing the      * total supply.      * @param account account to burn tokens for      * @param amount amount of tokens to burn      *      * Emits a {Burn} event      */"
    },
    {
      "action": "move-tree",
      "tree": "function_definition [40322,40841]",
      "parent": "contract_body [32495,34991]",
      "at": 12
    },
    {
      "action": "update-node",
      "tree": "comment: /**       A buffer of \"Sheep\" runs from 0xffff...fffe down       They suicide when you call them, if you are their parent     */ [26008,26139]",
      "label": "/**      * @dev Refund 15,000 gas per slot.      * @param amount number of slots to free      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**     @dev refund 39,000 gas     @dev costs slightly more than 16,100 gas     */ [28479,28564]",
      "label": "/**      * @dev use smart contract self-destruct to refund gas      * will refund 39,000 * amount gas      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**       @dev refund 30,000 gas     @dev costs slightly more than 15,400 gas     */ [30475,30562]",
      "label": "/**      * @dev Return the remaining sponsored gas slots      */"
    },
    {
      "action": "update-node",
      "tree": "comment: /**       @dev refund 15,000 gas     @dev costs slightly more than 10,200 gas     */ [31045,31132]",
      "label": "/**      * @dev Return the remaining sheep slots      */"
    },
    {
      "action": "insert-node",
      "tree": "function_definition [38565,38774]",
      "parent": "contract_body [35919,38777]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "{: { [40314,40315]",
      "parent": "contract_body [40314,45614]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [23760,23793]",
      "parent": "contract_body [40314,45614]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [32609,32662]",
      "parent": "contract_body [40314,45614]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when account blacklist status changes      */ [40419,40490]",
      "parent": "contract_body [40314,45614]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "event_definition [38859,38930]",
      "parent": "contract_body [40314,45614]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Emitted when `value` tokens are minted for `to`      * @param to address to mint tokens for      * @param value amount of tokens to be minted      */ [40567,40736]",
      "parent": "contract_body [40314,45614]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "event_definition [23708,23754]",
      "parent": "contract_body [40314,45614]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Creates `amount` tokens and assigns them to `account`, increasing      * the total supply.      * @param account address to mint tokens for      * @param amount amount of tokens to be minted      *      * Emits a {Mint} event      *      * Requirements      *      * - `account` cannot be the zero address.      * - `account` cannot be blacklisted.      * - `account` cannot be a redemption address.      */ [40796,41232]",
      "parent": "contract_body [40314,45614]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "function_definition [24776,25018]",
      "parent": "contract_body [40314,45614]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Set blacklisted status for the account.      * @param account address to set blacklist flag for      * @param _isBlacklisted blacklist flag value      *      * Requirements:      *      * - `msg.sender` should be owner.      */ [41571,41822]",
      "parent": "contract_body [40314,45614]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_definition [41828,42150]",
      "parent": "contract_body [40314,45614]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Set canBurn status for the account.      * @param account address to set canBurn flag for      * @param _canBurn canBurn flag value      *      * Requirements:      *      * - `msg.sender` should be owner.      */ [42158,42395]",
      "parent": "contract_body [40314,45614]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function_definition [42401,42518]",
      "parent": "contract_body [40314,45614]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Check if neither account is blacklisted before performing transfer      * If transfer recipient is a redemption address, burns tokens      * @notice Transfer to redemption address will burn tokens with a 1 cent precision      * @param sender address of sender      * @param recipient address of recipient      * @param amount amount of tokens to transfer      */ [42526,42911]",
      "parent": "contract_body [40314,45614]",
      "at": 13
    },
    {
      "action": "move-tree",
      "tree": "function_definition [34880,35477]",
      "parent": "contract_body [40314,45614]",
      "at": 14
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Requere neither accounts to be blacklisted before approval      * @param owner address of owner giving approval      * @param spender address of spender to approve for      * @param amount amount of tokens to approve      */ [43506,43751]",
      "parent": "contract_body [40314,45614]",
      "at": 15
    },
    {
      "action": "insert-node",
      "tree": "function_definition [43757,44125]",
      "parent": "contract_body [40314,45614]",
      "at": 16
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev Check if tokens can be burned at address before burning      * @param account account to burn tokens from      * @param amount amount of tokens to burn      */ [44133,44312]",
      "parent": "contract_body [40314,45614]",
      "at": 17
    },
    {
      "action": "insert-node",
      "tree": "function_definition [44318,44514]",
      "parent": "contract_body [40314,45614]",
      "at": 18
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev First 0x100000-1 addresses (0x0000000000000000000000000000000000000001 to 0x00000000000000000000000000000000000fffff)      * are the redemption addresses.      * @param account address to check is a redemption address      *      * All transfers to redemption address will trigger token burn.      *      * @notice For transfer to succeed, canBurn must be true for redemption address      *      * @return is `account` a redemption address      */ [44522,44995]",
      "parent": "contract_body [40314,45614]",
      "at": 19
    },
    {
      "action": "insert-node",
      "tree": "function_definition [45001,45170]",
      "parent": "contract_body [40314,45614]",
      "at": 20
    },
    {
      "action": "insert-node",
      "tree": "comment: /**      * @dev reclaim gas from legacy gas refund #1      * will refund 15,000 * amount gas to sender (minus exection cost)      * If gas pool is empty, refund 39,000 * amount gas by calling selfdestruct      */ [45178,45394]",
      "parent": "contract_body [40314,45614]",
      "at": 21
    },
    {
      "action": "insert-node",
      "tree": "function_definition [45400,45611]",
      "parent": "contract_body [40314,45614]",
      "at": 22
    },
    {
      "action": "insert-node",
      "tree": "}: } [45613,45614]",
      "parent": "contract_body [40314,45614]",
      "at": 23
    },
    {
      "action": "move-tree",
      "tree": "type_name [24798,24805]",
      "parent": "state_variable_declaration [544,572]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: balances_Deprecated [552,571]",
      "parent": "state_variable_declaration [544,572]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [12404,12411]",
      "parent": "state_variable_declaration [578,608]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: allowances_Deprecated [586,607]",
      "parent": "state_variable_declaration [578,608]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [13399,13411]",
      "label": "_totalSupply"
    },
    {
      "action": "move-tree",
      "tree": "type_name [20252,20259]",
      "parent": "state_variable_declaration [805,833]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: registry_Deprecated [813,832]",
      "parent": "state_variable_declaration [805,833]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "type_name [903,912]",
      "parent": "state_variable_declaration [903,938]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: gasRefundPool_Deprecated [913,937]",
      "parent": "state_variable_declaration [903,938]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: minimumGasPriceForFutureRefunds [13788,13819]",
      "label": "minimumGasPriceForFutureRefunds_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: balanceOf [11683,11692]",
      "label": "_balances"
    },
    {
      "action": "update-node",
      "tree": "identifier: _allowance [13924,13934]",
      "label": "_allowances"
    },
    {
      "action": "update-node",
      "tree": "identifier: attributes [13991,14001]",
      "label": "attributes_Deprecated"
    },
    {
      "action": "move-tree",
      "tree": "type_name [6482,6491]",
      "parent": "state_variable_declaration [1276,1322]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: finOps_Deprecated [1304,1321]",
      "parent": "state_variable_declaration [1276,1322]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: allowanceOf [12340,12351]",
      "label": "finOpBalances_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: _balanceOf [13857,13867]",
      "label": "finOpSupply_Deprecated"
    },
    {
      "action": "update-node",
      "tree": "identifier: AttributeData [1404,1417]",
      "label": "RewardAllocation"
    },
    {
      "action": "insert-node",
      "tree": "type_name [1620,1658]",
      "parent": "state_variable_declaration [1620,1690]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _rewardDistribution_Deprecated [1659,1689]",
      "parent": "state_variable_declaration [1620,1690]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [12422,12429]",
      "parent": "state_variable_declaration [1696,1742]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: maxRewardProportion_Deprecated [1704,1734]",
      "parent": "state_variable_declaration [1696,1742]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "=: = [1735,1736]",
      "parent": "state_variable_declaration [1696,1742]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 1000 [1737,1741]",
      "parent": "state_variable_declaration [1696,1742]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "type_name [1750,1774]",
      "parent": "state_variable_declaration [1750,1789]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: isBlacklisted [1775,1788]",
      "parent": "state_variable_declaration [1750,1789]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "type_name [1795,1819]",
      "parent": "state_variable_declaration [1795,1835]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "visibility [13781,13787]",
      "parent": "state_variable_declaration [1795,1835]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: canBurn [1827,1834]",
      "parent": "state_variable_declaration [1795,1835]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: allowance [878,887]",
      "label": "totalSupply"
    },
    {
      "action": "move-tree",
      "tree": "visibility [158,166]",
      "parent": "function_definition [5509,5564]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "parameter [1306,1318]",
      "parent": "function_definition [5652,5720]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [1356,1364]",
      "parent": "function_definition [5652,5720]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: approve [1052,1059]",
      "label": "transfer"
    },
    {
      "action": "move-tree",
      "tree": "parameter [9100,9116]",
      "parent": "function_definition [5949,6026]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [1340,1354]",
      "parent": "function_definition [5949,6026]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [7125,7133]",
      "parent": "function_definition [5949,6026]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply [412,423]",
      "label": "allowance"
    },
    {
      "action": "insert-tree",
      "tree": "parameter [6329,6342]",
      "parent": "function_definition [6310,6393]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [6342,6343]",
      "parent": "function_definition [6310,6393]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [6344,6359]",
      "parent": "function_definition [6310,6393]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "visibility [6996,7004]",
      "parent": "function_definition [6310,6393]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [7062,7070]",
      "parent": "function_definition [7062,7136]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: approve [7071,7078]",
      "parent": "function_definition [7062,7136]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [7078,7079]",
      "parent": "function_definition [7062,7136]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [7079,7094]",
      "parent": "function_definition [7062,7136]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [7094,7095]",
      "parent": "function_definition [7062,7136]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [11878,11892]",
      "parent": "function_definition [7062,7136]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [7110,7111]",
      "parent": "function_definition [7062,7136]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [6504,6512]",
      "parent": "function_definition [7062,7136]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [1024,1038]",
      "parent": "function_definition [7062,7136]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: transfer [535,543]",
      "label": "transferFrom"
    },
    {
      "action": "move-tree",
      "tree": "parameter [9923,9939]",
      "parent": "function_definition [7454,7551]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [479,490]",
      "parent": "function_definition [7454,7551]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [7509,7510]",
      "parent": "function_definition [7454,7551]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [11736,11750]",
      "parent": "function_definition [7454,7551]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [4318,4326]",
      "parent": "function_definition [7454,7551]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [8672,8680]",
      "parent": "function_definition [8672,8778]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _msgSender [8681,8691]",
      "parent": "function_definition [8672,8778]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [8691,8692]",
      "parent": "function_definition [8672,8778]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [8692,8693]",
      "parent": "function_definition [8672,8778]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [18408,18416]",
      "parent": "function_definition [8672,8778]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [22739,22743]",
      "parent": "function_definition [8672,8778]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [8708,8715]",
      "parent": "function_definition [8672,8778]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [8716,8741]",
      "parent": "function_definition [8672,8778]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [8742,8778]",
      "parent": "function_definition [8672,8778]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [8786,8794]",
      "parent": "function_definition [8786,9019]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _msgData [8795,8803]",
      "parent": "function_definition [8786,9019]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [8803,8804]",
      "parent": "function_definition [8786,9019]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [8804,8805]",
      "parent": "function_definition [8786,9019]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [18275,18283]",
      "parent": "function_definition [8786,9019]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [18057,18061]",
      "parent": "function_definition [8786,9019]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [8820,8827]",
      "parent": "function_definition [8786,9019]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [8828,8850]",
      "parent": "function_definition [8786,9019]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "function_body [8851,9019]",
      "parent": "function_definition [8786,9019]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [10411,10419]",
      "parent": "function_definition [10411,10547]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: sub [10420,10423]",
      "parent": "function_definition [10411,10547]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [10423,10424]",
      "parent": "function_definition [10411,10547]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [10424,10433]",
      "parent": "function_definition [10411,10547]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [10433,10434]",
      "parent": "function_definition [10411,10547]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [10435,10444]",
      "parent": "function_definition [10411,10547]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [10444,10445]",
      "parent": "function_definition [10411,10547]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [24831,24839]",
      "parent": "function_definition [10411,10547]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [10455,10459]",
      "parent": "function_definition [10411,10547]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [18062,18079]",
      "parent": "function_definition [10411,10547]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [10478,10547]",
      "parent": "function_definition [10411,10547]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": ",: , [10883,10884]",
      "parent": "function_definition [10850,11042]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [10885,10911]",
      "parent": "function_definition [10850,11042]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [12248,12256]",
      "parent": "function_definition [12248,12380]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: div [12257,12260]",
      "parent": "function_definition [12248,12380]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [12260,12261]",
      "parent": "function_definition [12248,12380]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [12261,12270]",
      "parent": "function_definition [12248,12380]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [12270,12271]",
      "parent": "function_definition [12248,12380]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [12272,12281]",
      "parent": "function_definition [12248,12380]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [12281,12282]",
      "parent": "function_definition [12248,12380]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [31161,31169]",
      "parent": "function_definition [12248,12380]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [12292,12296]",
      "parent": "function_definition [12248,12380]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [6328,6345]",
      "parent": "function_definition [12248,12380]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [12315,12380]",
      "parent": "function_definition [12248,12380]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": ",: , [12909,12910]",
      "parent": "function_definition [12876,13154]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [12911,12937]",
      "parent": "function_definition [12876,13154]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [13619,13627]",
      "parent": "function_definition [13619,13749]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: mod [13628,13631]",
      "parent": "function_definition [13619,13749]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [13631,13632]",
      "parent": "function_definition [13619,13749]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [13632,13641]",
      "parent": "function_definition [13619,13749]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [13641,13642]",
      "parent": "function_definition [13619,13749]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [13643,13652]",
      "parent": "function_definition [13619,13749]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [13652,13653]",
      "parent": "function_definition [13619,13749]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [34950,34958]",
      "parent": "function_definition [13619,13749]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [13663,13667]",
      "parent": "function_definition [13619,13749]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [5998,6015]",
      "parent": "function_definition [13619,13749]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "function_body [13686,13749]",
      "parent": "function_definition [13619,13749]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [14234,14242]",
      "parent": "function_definition [14234,14400]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: mod [14243,14246]",
      "parent": "function_definition [14234,14400]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [14246,14247]",
      "parent": "function_definition [14234,14400]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [14247,14256]",
      "parent": "function_definition [14234,14400]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [14256,14257]",
      "parent": "function_definition [14234,14400]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [14258,14267]",
      "parent": "function_definition [14234,14400]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [14267,14268]",
      "parent": "function_definition [14234,14400]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [14269,14295]",
      "parent": "function_definition [14234,14400]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [14295,14296]",
      "parent": "function_definition [14234,14400]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [35577,35585]",
      "parent": "function_definition [14234,14400]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [14306,14310]",
      "parent": "function_definition [14234,14400]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [4714,4731]",
      "parent": "function_definition [14234,14400]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "function_body [14329,14400]",
      "parent": "function_definition [14234,14400]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function: function [15169,15177]",
      "parent": "function_definition [15169,15788]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: isContract [15178,15188]",
      "parent": "function_definition [15169,15788]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [15188,15189]",
      "parent": "function_definition [15169,15788]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [11721,11734]",
      "parent": "function_definition [15169,15788]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [15204,15205]",
      "parent": "function_definition [15169,15788]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [3286,3294]",
      "parent": "function_definition [15169,15788]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [3295,3299]",
      "parent": "function_definition [15169,15788]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [33004,33018]",
      "parent": "function_definition [15169,15788]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [15235,15788]",
      "parent": "function_definition [15169,15788]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [16723,16731]",
      "parent": "function_definition [16723,17120]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: sendValue [16732,16741]",
      "parent": "function_definition [16723,17120]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [16741,16742]",
      "parent": "function_definition [16723,17120]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [16742,16767]",
      "parent": "function_definition [16723,17120]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [16767,16768]",
      "parent": "function_definition [16723,17120]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [10563,10572]",
      "parent": "function_definition [16723,17120]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [16783,16784]",
      "parent": "function_definition [16723,17120]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [37164,37172]",
      "parent": "function_definition [16723,17120]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [16794,17120]",
      "parent": "function_definition [16723,17120]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [17881,17889]",
      "parent": "function_definition [17881,18054]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCall [17890,17902]",
      "parent": "function_definition [17881,18054]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [17902,17903]",
      "parent": "function_definition [17881,18054]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [12005,12018]",
      "parent": "function_definition [17881,18054]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [17917,17918]",
      "parent": "function_definition [17881,18054]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [17919,17936]",
      "parent": "function_definition [17881,18054]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [17936,17937]",
      "parent": "function_definition [17881,18054]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [20274,20282]",
      "parent": "function_definition [17881,18054]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [17947,17969]",
      "parent": "function_definition [17881,18054]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "function_body [17970,18054]",
      "parent": "function_definition [17881,18054]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [18284,18292]",
      "parent": "function_definition [18284,18480]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCall [18293,18305]",
      "parent": "function_definition [18284,18480]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18305,18306]",
      "parent": "function_definition [18284,18480]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [11863,11876]",
      "parent": "function_definition [18284,18480]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [18320,18321]",
      "parent": "function_definition [18284,18480]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18322,18339]",
      "parent": "function_definition [18284,18480]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [18339,18340]",
      "parent": "function_definition [18284,18480]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18341,18367]",
      "parent": "function_definition [18284,18480]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [18367,18368]",
      "parent": "function_definition [18284,18480]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [18611,18619]",
      "parent": "function_definition [18284,18480]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [18378,18400]",
      "parent": "function_definition [18284,18480]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [18401,18480]",
      "parent": "function_definition [18284,18480]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [18855,18863]",
      "parent": "function_definition [18855,19081]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCallWithValue [18864,18885]",
      "parent": "function_definition [18855,19081]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18885,18886]",
      "parent": "function_definition [18855,19081]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [12589,12609]",
      "parent": "function_definition [18855,19081]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [18900,18901]",
      "parent": "function_definition [18855,19081]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [18902,18919]",
      "parent": "function_definition [18855,19081]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [18919,18920]",
      "parent": "function_definition [18855,19081]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [1077,1090]",
      "parent": "function_definition [18855,19081]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [18934,18935]",
      "parent": "function_definition [18855,19081]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [22144,22152]",
      "parent": "function_definition [18855,19081]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [18945,18967]",
      "parent": "function_definition [18855,19081]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "function_body [18968,19081]",
      "parent": "function_definition [18855,19081]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [19337,19345]",
      "parent": "function_definition [19337,19653]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: functionCallWithValue [19346,19367]",
      "parent": "function_definition [19337,19653]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19367,19368]",
      "parent": "function_definition [19337,19653]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [12611,12627]",
      "parent": "function_definition [19337,19653]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [19382,19383]",
      "parent": "function_definition [19337,19653]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19384,19401]",
      "parent": "function_definition [19337,19653]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [19401,19402]",
      "parent": "function_definition [19337,19653]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [1002,1015]",
      "parent": "function_definition [19337,19653]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [19416,19417]",
      "parent": "function_definition [19337,19653]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19418,19444]",
      "parent": "function_definition [19337,19653]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "): ) [19444,19445]",
      "parent": "function_definition [19337,19653]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "visibility [21181,21189]",
      "parent": "function_definition [19337,19653]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [19455,19477]",
      "parent": "function_definition [19337,19653]",
      "at": 12
    },
    {
      "action": "move-tree",
      "tree": "function_body [39304,39371]",
      "parent": "function_definition [19337,19653]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function: function [19661,19669]",
      "parent": "function_definition [19661,20640]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _functionCallWithValue [19670,19692]",
      "parent": "function_definition [19661,20640]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19692,19693]",
      "parent": "function_definition [19661,20640]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [12382,12402]",
      "parent": "function_definition [19661,20640]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [19707,19708]",
      "parent": "function_definition [19661,20640]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19709,19726]",
      "parent": "function_definition [19661,20640]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [19726,19727]",
      "parent": "function_definition [19661,20640]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [11398,11407]",
      "parent": "function_definition [19661,20640]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [19744,19745]",
      "parent": "function_definition [19661,20640]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "parameter [19746,19772]",
      "parent": "function_definition [19661,20640]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "): ) [19772,19773]",
      "parent": "function_definition [19661,20640]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "visibility [19774,19781]",
      "parent": "function_definition [19661,20640]",
      "at": 11
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [19782,19804]",
      "parent": "function_definition [19661,20640]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_body [19805,20640]",
      "parent": "function_definition [19661,20640]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "using: using [22661,22666]",
      "parent": "using_directive [22661,22687]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "type_alias [22667,22674]",
      "parent": "using_directive [22661,22687]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "for: for [22675,22678]",
      "parent": "using_directive [22661,22687]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_name [33630,33637]",
      "parent": "using_directive [22661,22687]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function: function [22757,22765]",
      "parent": "function_definition [22757,22817]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: name [22766,22770]",
      "parent": "function_definition [22757,22817]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [22770,22771]",
      "parent": "function_definition [22757,22817]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [22771,22772]",
      "parent": "function_definition [22757,22817]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [12645,12651]",
      "parent": "function_definition [22757,22817]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [22780,22787]",
      "parent": "function_definition [22757,22817]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [22788,22792]",
      "parent": "function_definition [22757,22817]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [22793,22816]",
      "parent": "function_definition [22757,22817]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [22936,22944]",
      "parent": "function_definition [22936,22998]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: symbol [22945,22951]",
      "parent": "function_definition [22936,22998]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [22951,22952]",
      "parent": "function_definition [22936,22998]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [22952,22953]",
      "parent": "function_definition [22936,22998]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [12852,12858]",
      "parent": "function_definition [22936,22998]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [22961,22968]",
      "parent": "function_definition [22936,22998]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [32754,32758]",
      "parent": "function_definition [22936,22998]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [22974,22997]",
      "parent": "function_definition [22936,22998]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [23636,23644]",
      "parent": "function_definition [23636,23720]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: decimals [23645,23653]",
      "parent": "function_definition [23636,23720]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [23653,23654]",
      "parent": "function_definition [23636,23720]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [23654,23655]",
      "parent": "function_definition [23636,23720]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [12036,12042]",
      "parent": "function_definition [23636,23720]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [23663,23670]",
      "parent": "function_definition [23636,23720]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [43140,43144]",
      "parent": "function_definition [23636,23720]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [23676,23691]",
      "parent": "function_definition [23636,23720]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "function_body [23692,23720]",
      "parent": "function_definition [23636,23720]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: _getBalance [18249,18260]",
      "label": "totalSupply"
    },
    {
      "action": "move-tree",
      "tree": "visibility [11894,11900]",
      "parent": "function_definition [23785,23885]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [23820,23828]",
      "parent": "function_definition [23785,23885]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [12796,12816]",
      "parent": "function_definition [23948,24067]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [23996,24004]",
      "parent": "function_definition [23948,24067]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: setAllowance [12783,12795]",
      "label": "transfer"
    },
    {
      "action": "move-tree",
      "tree": "visibility [20956,20962]",
      "parent": "function_definition [24280,24455]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24340,24347]",
      "parent": "function_definition [24280,24455]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24348,24356]",
      "parent": "function_definition [24280,24455]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [20963,20977]",
      "parent": "function_definition [24280,24455]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "parameter [888,901]",
      "parent": "function_definition [24518,24669]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [903,918]",
      "parent": "function_definition [24518,24669]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [920,926]",
      "parent": "function_definition [24518,24669]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24581,24588]",
      "parent": "function_definition [24518,24669]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24589,24597]",
      "parent": "function_definition [24518,24669]",
      "at": 10
    },
    {
      "action": "move-tree",
      "tree": "parameter [1060,1075]",
      "parent": "function_definition [24816,24985]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [18595,18609]",
      "parent": "function_definition [24816,24985]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [24873,24880]",
      "parent": "function_definition [24816,24985]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [24881,24889]",
      "parent": "function_definition [24816,24985]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [25459,25467]",
      "parent": "function_definition [25459,25780]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: transferFrom [25468,25480]",
      "parent": "function_definition [25459,25780]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [25480,25481]",
      "parent": "function_definition [25459,25780]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23025,23037]",
      "parent": "function_definition [25459,25780]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [25495,25496]",
      "parent": "function_definition [25459,25780]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [23039,23055]",
      "parent": "function_definition [25459,25780]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [25514,25515]",
      "parent": "function_definition [25459,25780]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [22096,22120]",
      "parent": "function_definition [25459,25780]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [25530,25531]",
      "parent": "function_definition [25459,25780]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [33674,33680]",
      "parent": "function_definition [25459,25780]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [25539,25546]",
      "parent": "function_definition [25459,25780]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [25547,25555]",
      "parent": "function_definition [25459,25780]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [33681,33695]",
      "parent": "function_definition [25459,25780]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "function_body [25571,25780]",
      "parent": "function_definition [25459,25780]",
      "at": 13
    },
    {
      "action": "insert-node",
      "tree": "function: function [26189,26197]",
      "parent": "function_definition [26189,26407]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: increaseAllowance [26198,26215]",
      "parent": "function_definition [26189,26407]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [26215,26216]",
      "parent": "function_definition [26189,26407]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [26216,26231]",
      "parent": "function_definition [26189,26407]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [26231,26232]",
      "parent": "function_definition [26189,26407]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [12020,12034]",
      "parent": "function_definition [26189,26407]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [26251,26252]",
      "parent": "function_definition [26189,26407]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [5479,5485]",
      "parent": "function_definition [26189,26407]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [26260,26267]",
      "parent": "function_definition [26189,26407]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [5491,5505]",
      "parent": "function_definition [26189,26407]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_body [26283,26407]",
      "parent": "function_definition [26189,26407]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [26910,26918]",
      "parent": "function_definition [26910,27179]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: decreaseAllowance [26919,26936]",
      "parent": "function_definition [26910,27179]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [26936,26937]",
      "parent": "function_definition [26910,27179]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [26937,26952]",
      "parent": "function_definition [26910,27179]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [26952,26953]",
      "parent": "function_definition [26910,27179]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [21138,21157]",
      "parent": "function_definition [26910,27179]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [26977,26978]",
      "parent": "function_definition [26910,27179]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [32997,33003]",
      "parent": "function_definition [26910,27179]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [26986,26993]",
      "parent": "function_definition [26910,27179]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [3300,3314]",
      "parent": "function_definition [26910,27179]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_body [27009,27179]",
      "parent": "function_definition [26910,27179]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [27669,27677]",
      "parent": "function_definition [27669,28208]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _transfer [27678,27687]",
      "parent": "function_definition [27669,28208]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [27687,27688]",
      "parent": "function_definition [27669,28208]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [22698,22710]",
      "parent": "function_definition [27669,28208]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [27702,27703]",
      "parent": "function_definition [27669,28208]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [22712,22728]",
      "parent": "function_definition [27669,28208]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [27721,27722]",
      "parent": "function_definition [27669,28208]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [3550,3564]",
      "parent": "function_definition [27669,28208]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [27737,27738]",
      "parent": "function_definition [27669,28208]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [22730,22738]",
      "parent": "function_definition [27669,28208]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [27748,27755]",
      "parent": "function_definition [27669,28208]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [27756,28208]",
      "parent": "function_definition [27669,28208]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: wipeBlacklistedAccount [39763,39785]",
      "label": "_mint"
    },
    {
      "action": "move-tree",
      "tree": "parameter [3516,3528]",
      "parent": "function_definition [28489,28867]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [28519,28520]",
      "parent": "function_definition [28489,28867]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [4302,4316]",
      "parent": "function_definition [28489,28867]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "visibility [41976,41984]",
      "parent": "function_definition [28489,28867]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [28546,28553]",
      "parent": "function_definition [28489,28867]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [39958,39983]",
      "parent": "function_body [28554,28867]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "function: function [29199,29207]",
      "parent": "function_definition [29199,29617]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _burn [29208,29213]",
      "parent": "function_definition [29199,29617]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [29213,29214]",
      "parent": "function_definition [29199,29617]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [4823,4835]",
      "parent": "function_definition [29199,29617]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [29229,29230]",
      "parent": "function_definition [29199,29617]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [39441,39455]",
      "parent": "function_definition [29199,29617]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [29245,29246]",
      "parent": "function_definition [29199,29617]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [23968,23976]",
      "parent": "function_definition [29199,29617]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [29256,29263]",
      "parent": "function_definition [29199,29617]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [29264,29617]",
      "parent": "function_definition [29199,29617]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [30057,30065]",
      "parent": "function_definition [30057,30403]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [30066,30074]",
      "parent": "function_definition [30057,30403]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30074,30075]",
      "parent": "function_definition [30057,30403]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [30075,30088]",
      "parent": "function_definition [30057,30403]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [30088,30089]",
      "parent": "function_definition [30057,30403]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [30090,30105]",
      "parent": "function_definition [30057,30403]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [30105,30106]",
      "parent": "function_definition [30057,30403]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [4857,4871]",
      "parent": "function_definition [30057,30403]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [30121,30122]",
      "parent": "function_definition [30057,30403]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [42133,42141]",
      "parent": "function_definition [30057,30403]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [30132,30139]",
      "parent": "function_definition [30057,30403]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [30140,30403]",
      "parent": "function_definition [30057,30403]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: transferFrom [963,975]",
      "label": "_beforeTokenTransfer"
    },
    {
      "action": "move-tree",
      "tree": "parameter [6461,6480]",
      "parent": "function_definition [31056,31148]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "visibility [41536,41544]",
      "parent": "function_definition [31056,31148]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [31137,31144]",
      "parent": "function_definition [31056,31148]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "function_body [31145,31148]",
      "parent": "function_definition [31056,31148]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "identifier: increaseApproval [20903,20919]",
      "label": "burn"
    },
    {
      "action": "move-tree",
      "tree": "parameter [18392,18406]",
      "parent": "function_definition [33436,33519]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [26170,26178]",
      "parent": "function_definition [33436,33519]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: _requireCanTransfer [40331,40350]",
      "label": "_burn"
    },
    {
      "action": "move-tree",
      "tree": "parameter [18766,18778]",
      "parent": "function_definition [34654,34988]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [18780,18794]",
      "parent": "function_definition [34654,34988]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [18796,18804]",
      "parent": "function_definition [34654,34988]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [34711,34718]",
      "parent": "function_definition [34654,34988]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [34719,34727]",
      "parent": "function_definition [34654,34988]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [40629,40691]",
      "parent": "function_body [34728,34988]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: sponsorGas2 [26156,26167]",
      "label": "gasRefund15"
    },
    {
      "action": "move-tree",
      "tree": "parameter [23815,23829]",
      "parent": "function_definition [36031,36969]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [30591,30599]",
      "parent": "function_definition [36031,36969]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "parameter [20061,20075]",
      "parent": "function_definition [37095,38265]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [18417,18447]",
      "parent": "function_definition [38345,38493]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "function: function [38565,38573]",
      "parent": "function_definition [38565,38774]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: remainingSheepRefundPool [38574,38598]",
      "parent": "function_definition [38565,38774]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38598,38599]",
      "parent": "function_definition [38565,38774]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [38599,38600]",
      "parent": "function_definition [38565,38774]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [31787,31793]",
      "parent": "function_definition [38565,38774]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [31794,31798]",
      "parent": "function_definition [38565,38774]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [18620,18644]",
      "parent": "function_definition [38565,38774]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "function_body [38638,38774]",
      "parent": "function_definition [38565,38774]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: WipeBlacklistedAccount [38865,38887]",
      "label": "Blacklisted"
    },
    {
      "action": "update-node",
      "tree": "identifier: _burnAllArgs [24785,24797]",
      "label": "mint"
    },
    {
      "action": "move-tree",
      "tree": "parameter [23937,23950]",
      "parent": "function_definition [41238,41563]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [23952,23966]",
      "parent": "function_definition [41238,41563]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [17532,17540]",
      "parent": "function_definition [41238,41563]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [17541,17550]",
      "parent": "function_definition [41238,41563]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [41828,41836]",
      "parent": "function_definition [41828,42150]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setBlacklisted [41837,41851]",
      "parent": "function_definition [41828,42150]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [41851,41852]",
      "parent": "function_definition [41828,42150]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [21868,21884]",
      "parent": "function_definition [41828,42150]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [41867,41868]",
      "parent": "function_definition [41828,42150]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [40229,40245]",
      "parent": "function_definition [41828,42150]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [41888,41889]",
      "parent": "function_definition [41828,42150]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [23831,23839]",
      "parent": "function_definition [41828,42150]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [39188,39197]",
      "parent": "function_definition [41828,42150]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [41909,42150]",
      "parent": "function_definition [41828,42150]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [42401,42409]",
      "parent": "function_definition [42401,42518]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setCanBurn [42410,42420]",
      "parent": "function_definition [42401,42518]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [42420,42421]",
      "parent": "function_definition [42401,42518]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [22550,22562]",
      "parent": "function_definition [42401,42518]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [42436,42437]",
      "parent": "function_definition [42401,42518]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [40411,40415]",
      "parent": "function_definition [42401,42518]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [42451,42452]",
      "parent": "function_definition [42401,42518]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [29166,29174]",
      "parent": "function_definition [42401,42518]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [38124,38133]",
      "parent": "function_definition [42401,42518]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "function_body [42472,42518]",
      "parent": "function_definition [42401,42518]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: _burnFromAllArgs [34889,34905]",
      "label": "_transfer"
    },
    {
      "action": "move-tree",
      "tree": "parameter [22851,22863]",
      "parent": "function_definition [42917,43498]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "parameter [22865,22881]",
      "parent": "function_definition [42917,43498]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [22883,22897]",
      "parent": "function_definition [42917,43498]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "visibility [22899,22907]",
      "parent": "function_definition [42917,43498]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [43030,43037]",
      "parent": "function_definition [42917,43498]",
      "at": 10
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [43038,43046]",
      "parent": "function_definition [42917,43498]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [35047,35098]",
      "parent": "function_body [43047,43498]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "function: function [43757,43765]",
      "parent": "function_definition [43757,44125]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [43766,43774]",
      "parent": "function_definition [43757,44125]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [43774,43775]",
      "parent": "function_definition [43757,44125]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [43785,43798]",
      "parent": "function_definition [43757,44125]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [43798,43799]",
      "parent": "function_definition [43757,44125]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "parameter [43809,43824]",
      "parent": "function_definition [43757,44125]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [43824,43825]",
      "parent": "function_definition [43757,44125]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "parameter [23349,23363]",
      "parent": "function_definition [43757,44125]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [43855,43856]",
      "parent": "function_definition [43757,44125]",
      "at": 8
    },
    {
      "action": "move-tree",
      "tree": "visibility [34063,34071]",
      "parent": "function_definition [43757,44125]",
      "at": 9
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [43866,43874]",
      "parent": "function_definition [43757,44125]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_body [43875,44125]",
      "parent": "function_definition [43757,44125]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "function: function [44318,44326]",
      "parent": "function_definition [44318,44514]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: _burn [44327,44332]",
      "parent": "function_definition [44318,44514]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [44332,44333]",
      "parent": "function_definition [44318,44514]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23317,23329]",
      "parent": "function_definition [44318,44514]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [44348,44349]",
      "parent": "function_definition [44318,44514]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [23057,23071]",
      "parent": "function_definition [44318,44514]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [44364,44365]",
      "parent": "function_definition [44318,44514]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "visibility [23073,23081]",
      "parent": "function_definition [44318,44514]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [44375,44383]",
      "parent": "function_definition [44318,44514]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [44384,44514]",
      "parent": "function_definition [44318,44514]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [45001,45009]",
      "parent": "function_definition [45001,45170]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: isRedemptionAddress [45010,45029]",
      "parent": "function_definition [45001,45170]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [45029,45030]",
      "parent": "function_definition [45001,45170]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [23331,23347]",
      "parent": "function_definition [45001,45170]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [45045,45046]",
      "parent": "function_definition [45001,45170]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [23365,23373]",
      "parent": "function_definition [45001,45170]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [42349,42353]",
      "parent": "function_definition [45001,45170]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "return_type_definition [21916,21930]",
      "parent": "function_definition [45001,45170]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function_body [45076,45170]",
      "parent": "function_definition [45001,45170]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [45400,45408]",
      "parent": "function_definition [45400,45611]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: refundGas [45409,45418]",
      "parent": "function_definition [45400,45611]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [45418,45419]",
      "parent": "function_definition [45400,45611]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [39578,39592]",
      "parent": "function_definition [45400,45611]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [45433,45434]",
      "parent": "function_definition [45400,45611]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [4124,4132]",
      "parent": "function_definition [45400,45611]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "modifier_invocation [39811,39820]",
      "parent": "function_definition [45400,45611]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "function_body [45454,45611]",
      "parent": "function_definition [45400,45611]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: CompliantDepositTokenWithHook [42647,42676]",
      "label": "TrueCurrency"
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [46028,46036]",
      "parent": "function_definition [46001,46092]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [46213,46221]",
      "parent": "function_definition [46190,46286]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [46319,46327]",
      "parent": "function_definition [46294,46389]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "type_name [2684,2691]",
      "parent": "type_name [903,912]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "[: [ [910,911]",
      "parent": "type_name [903,912]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "]: ] [911,912]",
      "parent": "type_name [903,912]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1276,1283]",
      "parent": "type_name [1276,1303]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1283,1284]",
      "parent": "type_name [1276,1303]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [2163,2170]",
      "parent": "type_name [1276,1303]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1292,1294]",
      "parent": "type_name [1276,1303]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [1302,1303]",
      "parent": "type_name [1276,1303]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: value [1437,1442]",
      "label": "proportion"
    },
    {
      "action": "update-node",
      "tree": "identifier: adminAddr [1485,1494]",
      "label": "finOp"
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1620,1627]",
      "parent": "type_name [1620,1658]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1627,1628]",
      "parent": "type_name [1620,1658]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [41646,41653]",
      "parent": "type_name [1620,1658]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1636,1638]",
      "parent": "type_name [1620,1658]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "type_name [1639,1657]",
      "parent": "type_name [1620,1658]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [1657,1658]",
      "parent": "type_name [1620,1658]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1750,1757]",
      "parent": "type_name [1750,1774]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1757,1758]",
      "parent": "type_name [1750,1774]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [41138,41145]",
      "parent": "type_name [1750,1774]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1766,1768]",
      "parent": "type_name [1750,1774]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [23091,23095]",
      "parent": "type_name [1750,1774]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [1773,1774]",
      "parent": "type_name [1750,1774]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "mapping: mapping [1795,1802]",
      "parent": "type_name [1795,1819]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1802,1803]",
      "parent": "type_name [1795,1819]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [41228,41235]",
      "parent": "type_name [1795,1819]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=>: => [1811,1813]",
      "parent": "type_name [1795,1819]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [40960,40964]",
      "parent": "type_name [1795,1819]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [1818,1819]",
      "parent": "type_name [1795,1819]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [1314,1318]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [9108,9116]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [1348,1354]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [11886,11892]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [9931,9939]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: who [487,490]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [11744,11750]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [8742,8743]",
      "parent": "function_body [8742,8778]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [8753,8771]",
      "parent": "function_body [8742,8778]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [8777,8778]",
      "parent": "function_body [8742,8778]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [10005,10012]",
      "parent": "return_type_definition [9996,10013]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [10025,10043]",
      "parent": "function_body [10014,10128]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [22164,22221]",
      "parent": "function_body [10945,11042]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [11359,11366]",
      "parent": "return_type_definition [11350,11367]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // Gas optimization: this is cheaper than requiring 'a' not being zero, but the [11379,11458]",
      "parent": "function_body [11368,11772]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // benefit is lost if 'b' is also tested. [11468,11509]",
      "parent": "function_body [11368,11772]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 [11519,11590]",
      "parent": "function_body [11368,11772]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [22231,22248]",
      "parent": "function_body [11368,11772]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [12982,13011]",
      "parent": "function_body [12971,13154]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [3900,3931]",
      "parent": "function_body [12971,13154]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [11729,11734]",
      "label": "account"
    },
    {
      "action": "insert-node",
      "tree": "{: { [15235,15236]",
      "parent": "function_body [15235,15788]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // According to EIP-1052, 0x0 is the value returned for not-yet created accounts [15246,15326]",
      "parent": "function_body [15235,15788]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned [15336,15421]",
      "parent": "function_body [15235,15788]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // for accounts without code, i.e. `keccak256('')` [15431,15481]",
      "parent": "function_body [15235,15788]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [15491,15508]",
      "parent": "function_body [15235,15788]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [15518,15607]",
      "parent": "function_body [15235,15788]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-inline-assembly [15617,15664]",
      "parent": "function_body [15235,15788]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "assembly_statement [15674,15719]",
      "parent": "function_body [15235,15788]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [15729,15781]",
      "parent": "function_body [15235,15788]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "}: } [15787,15788]",
      "parent": "function_body [15235,15788]",
      "at": 9
    },
    {
      "action": "update-node",
      "tree": "identifier: c [10571,10572]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [16794,16795]",
      "parent": "function_body [16794,17120]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [16805,16879]",
      "parent": "function_body [16794,17120]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line avoid-low-level-calls, avoid-call-value [16891,16959]",
      "parent": "function_body [16794,17120]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [16969,17024]",
      "parent": "function_body [16794,17120]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [17034,17113]",
      "parent": "function_body [16794,17120]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [17119,17120]",
      "parent": "function_body [16794,17120]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [12013,12018]",
      "label": "target"
    },
    {
      "action": "update-node",
      "tree": "identifier: _addr [11871,11876]",
      "label": "target"
    },
    {
      "action": "insert-node",
      "tree": "{: { [18401,18402]",
      "parent": "function_body [18401,18480]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [18412,18473]",
      "parent": "function_body [18401,18480]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [18479,18480]",
      "parent": "function_body [18401,18480]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _tokenHolder [12597,12609]",
      "label": "target"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [12619,12627]",
      "label": "target"
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [19581,19646]",
      "parent": "function_body [19478,19653]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _tokenHolder [12390,12402]",
      "label": "target"
    },
    {
      "action": "update-node",
      "tree": "identifier: c [11406,11407]",
      "label": "weiValue"
    },
    {
      "action": "insert-node",
      "tree": "{: { [19805,19806]",
      "parent": "function_body [19805,20640]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [19816,19877]",
      "parent": "function_body [19805,20640]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line avoid-low-level-calls [19889,19939]",
      "parent": "function_body [19805,20640]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [19949,20028]",
      "parent": "function_body [19805,20640]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "if_statement [20038,20633]",
      "parent": "function_body [19805,20640]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [20639,20640]",
      "parent": "function_body [19805,20640]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _tokenHolder [12804,12816]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [12826,12834]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [12844,12850]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "return_statement [22017,22029]",
      "parent": "function_body [24372,24455]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [18603,18609]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "return_statement [21059,21071]",
      "parent": "function_body [24905,24985]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [23033,23037]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [23047,23055]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _subtractedValue [22104,22120]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [25571,25572]",
      "parent": "function_body [25571,25780]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [25582,25619]",
      "parent": "function_body [25571,25780]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [25629,25751]",
      "parent": "function_body [25571,25780]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "return_statement [20166,20178]",
      "parent": "function_body [25571,25780]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [25779,25780]",
      "parent": "function_body [25571,25780]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [12028,12034]",
      "label": "addedValue"
    },
    {
      "action": "insert-node",
      "tree": "{: { [26283,26284]",
      "parent": "function_body [26283,26407]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [26294,26378]",
      "parent": "function_body [26283,26407]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "return_statement [33957,33969]",
      "parent": "function_body [26283,26407]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [26406,26407]",
      "parent": "function_body [26283,26407]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _addedValue [21146,21157]",
      "label": "subtractedValue"
    },
    {
      "action": "insert-node",
      "tree": "{: { [27009,27010]",
      "parent": "function_body [27009,27179]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [27020,27150]",
      "parent": "function_body [27009,27179]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "return_statement [33292,33304]",
      "parent": "function_body [27009,27179]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [27178,27179]",
      "parent": "function_body [27009,27179]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [22706,22710]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [22720,22728]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [3558,3564]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [27756,27757]",
      "parent": "function_body [27756,28208]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [9142,9174]",
      "parent": "function_body [27756,28208]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [38145,38201]",
      "parent": "function_body [27756,28208]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [27932,27980]",
      "parent": "function_body [27756,28208]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [41350,41414]",
      "parent": "function_body [27756,28208]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [28094,28150]",
      "parent": "function_body [27756,28208]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "emit_statement [28160,28201]",
      "parent": "function_body [27756,28208]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "}: } [28207,28208]",
      "parent": "function_body [27756,28208]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [3524,3528]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _index [4310,4316]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [10220,10246]",
      "parent": "function_body [28554,28867]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [38762,38818]",
      "parent": "function_body [28554,28867]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": ",: , [40125,40126]",
      "parent": "emit_statement [28817,28860]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [40117,40125]",
      "parent": "emit_statement [28817,28860]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [4831,4835]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [39449,39455]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [29264,29265]",
      "parent": "function_body [29264,29617]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [42158,42222]",
      "parent": "function_body [29264,29617]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [29355,29405]",
      "parent": "function_body [29264,29617]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [4947,5033]",
      "parent": "function_body [29264,29617]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [29517,29557]",
      "parent": "function_body [29264,29617]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "emit_statement [38407,38453]",
      "parent": "function_body [29264,29617]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": ",: , [38431,38432]",
      "parent": "emit_statement [29567,29610]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [38421,38431]",
      "parent": "emit_statement [29567,29610]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "}: } [29616,29617]",
      "parent": "function_body [29264,29617]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [4865,4871]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [30140,30141]",
      "parent": "function_body [30140,30403]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [41278,41340]",
      "parent": "function_body [30140,30403]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [30230,30299]",
      "parent": "function_body [30140,30403]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [30311,30348]",
      "parent": "function_body [30140,30403]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "emit_statement [30358,30396]",
      "parent": "function_body [30140,30403]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "}: } [30402,30403]",
      "parent": "function_body [30140,30403]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: _startIndex [6469,6480]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [18400,18406]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [18774,18778]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [18788,18794]",
      "label": "amount"
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [34915,34944]",
      "parent": "function_body [34728,34988]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "emit_statement [34954,34981]",
      "parent": "function_body [34728,34988]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [23823,23829]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "comment: /**         Deploy (9 bytes)           PC Assembly       Opcodes                                       Stack           00 PUSH1(31)      60 1f                                         1f           02 DUP1           80                                            1f 1f           03 PUSH1(9)       60 09                                         1f 1f 09           05 RETURNDATASIZE 3d                                            1f 1f 09 00           06 CODECOPY       39                                            1f           07 RETURNDATASIZE 3d                                            1f 00           08 RETURN         f3         Sheep (31 bytes = 3 + 20 + 8)           PC Assembly       Opcodes                                       Stack           00 RETURNDATASIZE 3d                                            0           01 CALLER         33                                            0 caller           02 PUSH20(me)     73 memememememememememememememememememememe   0 caller me           17 EQ             14                                            0 valid           18 PUSH1(1d)      60 1d                                         0 valid 1d           1a JUMPI          57                                            0           1b DUP1           80                                            0 0           1c REVERT         fd           1d JUMPDEST       5b                                            0           1e SELFDESTRUCT   ff         */ [26190,27667]",
      "label": "// refund gas"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [20069,20075]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [38638,38639]",
      "parent": "function_body [38638,38774]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assembly_statement [38649,38767]",
      "parent": "function_body [38638,38774]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [38773,38774]",
      "parent": "function_body [38638,38774]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_name [41568,41572]",
      "parent": "event_paramater [40539,40557]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: balance [38921,38928]",
      "label": "isBlacklisted"
    },
    {
      "action": "update-node",
      "tree": "identifier: _from [23945,23950]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [23960,23966]",
      "label": "amount"
    },
    {
      "action": "insert-tree",
      "tree": "emit_statement [41529,41556]",
      "parent": "function_body [41304,41563]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [21876,21884]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: blacklisted [40234,40245]",
      "label": "_isBlacklisted"
    },
    {
      "action": "insert-node",
      "tree": "{: { [41909,41910]",
      "parent": "function_body [41909,42150]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [34176,34227]",
      "parent": "function_body [41909,42150]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [42051,42091]",
      "parent": "function_body [41909,42150]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "emit_statement [42101,42143]",
      "parent": "function_body [41909,42150]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [42149,42150]",
      "parent": "function_body [41909,42150]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [22558,22562]",
      "label": "account"
    },
    {
      "action": "insert-node",
      "tree": "identifier: _canBurn [42443,42451]",
      "parent": "parameter [42438,42451]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [22859,22863]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [22873,22881]",
      "label": "recipient"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [22891,22897]",
      "label": "amount"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [23357,23363]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [43875,43876]",
      "parent": "function_body [43875,44125]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [43886,43962]",
      "parent": "function_body [43875,44125]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [34237,34290]",
      "parent": "function_body [43875,44125]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [44079,44118]",
      "parent": "function_body [43875,44125]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [44124,44125]",
      "parent": "function_body [43875,44125]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _who [23325,23329]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [23065,23071]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "{: { [44384,44385]",
      "parent": "function_body [44384,44514]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "expression_statement [39832,39897]",
      "parent": "function_body [44384,44514]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [44478,44507]",
      "parent": "function_body [44384,44514]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [44513,44514]",
      "parent": "function_body [44384,44514]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [23339,23347]",
      "label": "account"
    },
    {
      "action": "insert-node",
      "tree": "{: { [45076,45077]",
      "parent": "function_body [45076,45170]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return_statement [45087,45163]",
      "parent": "function_body [45076,45170]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [45169,45170]",
      "parent": "function_body [45076,45170]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [39586,39592]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "call_expression [2423,2447]",
      "parent": "expression_statement [4625,4683]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return: return [8753,8759]",
      "parent": "return_statement [8753,8771]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "member_expression [33046,33056]",
      "parent": "return_statement [8753,8771]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [23121,23141]",
      "parent": "variable_declaration_statement [10025,10043]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [10035,10036]",
      "parent": "variable_declaration_statement [10025,10043]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [11420,11425]",
      "parent": "variable_declaration_statement [10025,10043]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [11262,11267]",
      "parent": "variable_declaration_statement [10996,11014]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: c [11033,11034]",
      "parent": "return_statement [11026,11035]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "=: = [11669,11670]",
      "parent": "variable_declaration_statement [11659,11677]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [10628,10633]",
      "parent": "variable_declaration_statement [11659,11677]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [11032,11037]",
      "parent": "variable_declaration_statement [13021,13039]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: c [13145,13146]",
      "parent": "return_statement [13138,13147]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [15491,15507]",
      "parent": "variable_declaration_statement [15491,15508]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [15518,15537]",
      "parent": "variable_declaration_statement [15518,15607]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [15538,15539]",
      "parent": "variable_declaration_statement [15518,15607]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 [15540,15606]",
      "parent": "variable_declaration_statement [15518,15607]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "call_expression [16805,16878]",
      "parent": "expression_statement [16805,16879]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_tuple [16969,16985]",
      "parent": "variable_declaration_statement [16969,17024]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [16986,16987]",
      "parent": "variable_declaration_statement [16969,17024]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [16988,17023]",
      "parent": "variable_declaration_statement [16969,17024]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "return: return [18412,18418]",
      "parent": "return_statement [18412,18473]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [18419,18472]",
      "parent": "return_statement [18412,18473]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_tuple [19949,19988]",
      "parent": "variable_declaration_statement [19949,20028]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [19989,19990]",
      "parent": "variable_declaration_statement [19949,20028]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [19991,20027]",
      "parent": "variable_declaration_statement [19949,20028]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "if: if [20038,20040]",
      "parent": "if_statement [20038,20633]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20041,20042]",
      "parent": "if_statement [20038,20633]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: success [20042,20049]",
      "parent": "if_statement [20038,20633]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [20049,20050]",
      "parent": "if_statement [20038,20633]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [20051,20095]",
      "parent": "if_statement [20038,20633]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [20096,20100]",
      "parent": "if_statement [20038,20633]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "block_statement [20101,20633]",
      "parent": "if_statement [20038,20633]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "identifier: _totalSupply [23865,23877]",
      "parent": "return_statement [23858,23878]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "array_access [24041,24059]",
      "parent": "return_statement [24034,24060]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [24383,24425]",
      "parent": "expression_statement [24383,24426]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [24634,24661]",
      "parent": "return_statement [24627,24662]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [20144,20154]",
      "parent": "call_expression [24916,24955]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [20126,20134]",
      "parent": "call_expression [24916,24955]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "call_argument [20136,20142]",
      "parent": "call_expression [24916,24955]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "call_expression [27020,27149]",
      "parent": "expression_statement [27020,27150]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "assignment_expression [27992,28083]",
      "parent": "expression_statement [27992,28084]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [28565,28630]",
      "parent": "expression_statement [28565,28631]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "assignment_expression [28755,28806]",
      "parent": "expression_statement [28755,28807]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [29355,29404]",
      "parent": "expression_statement [29355,29405]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [30230,30298]",
      "parent": "expression_statement [30230,30299]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "emit: emit [30358,30362]",
      "parent": "emit_statement [30358,30396]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: Approval [30363,30371]",
      "parent": "emit_statement [30358,30396]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30371,30372]",
      "parent": "emit_statement [30358,30396]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "call_argument [10166,10171]",
      "parent": "emit_statement [30358,30396]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [30377,30378]",
      "parent": "emit_statement [30358,30396]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [30379,30386]",
      "parent": "emit_statement [30358,30396]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": ",: , [30386,30387]",
      "parent": "emit_statement [30358,30396]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [30388,30394]",
      "parent": "emit_statement [30358,30396]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "): ) [30394,30395]",
      "parent": "emit_statement [30358,30396]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "user_defined_type [31923,31929]",
      "parent": "type_name [31923,31929]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": ",: , [21022,21023]",
      "parent": "call_expression [33486,33511]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "call_argument [21014,21022]",
      "parent": "call_expression [33486,33511]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: // get number of free slots [36135,36162]",
      "parent": "assembly_statement [36111,36962]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_variable_declaration [30635,30663]",
      "parent": "assembly_statement [36111,36962]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: // make sure there are enough slots [36220,36255]",
      "parent": "assembly_statement [36111,36962]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "yul_if_statement [36269,36341]",
      "parent": "assembly_statement [36111,36962]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "yul_if_statement [36355,36412]",
      "parent": "assembly_statement [36111,36962]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "yul_variable_declaration [30713,30749]",
      "parent": "assembly_statement [36111,36962]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "yul_variable_declaration [36476,36508]",
      "parent": "assembly_statement [36111,36962]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: // loop until amount is reached [36522,36553]",
      "parent": "assembly_statement [36111,36962]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "comment: // i = storage location [36567,36590]",
      "parent": "assembly_statement [36111,36962]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "yul_for_statement [36604,36854]",
      "parent": "assembly_statement [36111,36962]",
      "at": 11
    },
    {
      "action": "insert-node",
      "tree": "comment: // store new number of free slots [36868,36901]",
      "parent": "assembly_statement [36111,36962]",
      "at": 12
    },
    {
      "action": "insert-node",
      "tree": "comment: // get amount of gas slots [37176,37202]",
      "parent": "assembly_statement [37152,38258]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // make sure there are enough slots [37317,37352]",
      "parent": "assembly_statement [37152,38258]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "yul_if_statement [37366,37438]",
      "parent": "assembly_statement [37152,38258]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "yul_if_statement [37452,37509]",
      "parent": "assembly_statement [37152,38258]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "comment: // first sheep pointer [37523,37545]",
      "parent": "assembly_statement [37152,38258]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "yul_variable_declaration [28772,28866]",
      "parent": "assembly_statement [37152,38258]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "comment: // last sheep pointer [37668,37689]",
      "parent": "assembly_statement [37152,38258]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "yul_variable_declaration [37703,37735]",
      "parent": "assembly_statement [37152,38258]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "yul_for_statement [37751,38136]",
      "parent": "assembly_statement [37152,38258]",
      "at": 11
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [28882,28972]",
      "parent": "assembly_statement [37152,38258]",
      "at": 12
    },
    {
      "action": "update-node",
      "tree": "identifier: priorBalance [18434,18446]",
      "label": "length"
    },
    {
      "action": "update-node",
      "tree": "identifier: result [18637,18643]",
      "label": "length"
    },
    {
      "action": "insert-node",
      "tree": "assembly: assembly [38649,38657]",
      "parent": "assembly_statement [38649,38767]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [38658,38659]",
      "parent": "assembly_statement [38649,38767]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_assignment [38673,38756]",
      "parent": "assembly_statement [38649,38767]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [38766,38767]",
      "parent": "assembly_statement [38649,38767]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [43232,43262]",
      "parent": "if_statement [43228,43491]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [43264,43416]",
      "parent": "if_statement [43228,43491]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [43422,43491]",
      "parent": "if_statement [43228,43491]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "call_expression [43886,43961]",
      "parent": "expression_statement [43886,43962]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "call_expression [44079,44117]",
      "parent": "expression_statement [44079,44118]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "return: return [45087,45093]",
      "parent": "return_statement [45087,45163]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [45094,45162]",
      "parent": "return_statement [45087,45163]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "memory: memory [46243,46249]",
      "parent": "parameter [46236,46249]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "memory: memory [46349,46355]",
      "parent": "parameter [46342,46355]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "identifier: keccak256 [2423,2432]",
      "label": "require"
    },
    {
      "action": "move-tree",
      "tree": "call_argument [9706,9732]",
      "parent": "call_expression [4625,4682]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [4659,4660]",
      "parent": "call_expression [4625,4682]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: newAllowance [23129,23141]",
      "label": "c"
    },
    {
      "action": "update-node",
      "tree": "identifier: assert [11432,11438]",
      "label": "require"
    },
    {
      "action": "insert-node",
      "tree": ",: , [10067,10068]",
      "parent": "call_expression [10053,10099]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [10069,10098]",
      "parent": "call_expression [10053,10099]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: assert [11234,11240]",
      "label": "require"
    },
    {
      "action": "insert-node",
      "tree": ",: , [10970,10971]",
      "parent": "call_expression [10956,10985]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [10972,10984]",
      "parent": "call_expression [10956,10985]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: oldValue [22172,22180]",
      "label": "c"
    },
    {
      "action": "update-node",
      "tree": "identifier: newValue [22239,22247]",
      "label": "c"
    },
    {
      "action": "update-node",
      "tree": "identifier: assert [10640,10646]",
      "label": "require"
    },
    {
      "action": "insert-node",
      "tree": ",: , [11705,11706]",
      "parent": "call_expression [11687,11743]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [11707,11742]",
      "parent": "call_expression [11687,11743]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: index [3908,3913]",
      "label": "c"
    },
    {
      "action": "move-tree",
      "tree": "type_name [1320,1327]",
      "parent": "variable_declaration [15491,15507]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: codehash [15499,15507]",
      "parent": "variable_declaration [15491,15507]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [3250,3257]",
      "parent": "variable_declaration [15518,15537]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: accountHash [15526,15537]",
      "parent": "variable_declaration [15518,15537]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [16805,16812]",
      "parent": "call_expression [16805,16878]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [16812,16813]",
      "parent": "call_expression [16805,16878]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [16813,16844]",
      "parent": "call_expression [16805,16878]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [16844,16845]",
      "parent": "call_expression [16805,16878]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [16846,16877]",
      "parent": "call_expression [16805,16878]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [16877,16878]",
      "parent": "call_expression [16805,16878]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "(: ( [16969,16970]",
      "parent": "variable_declaration_tuple [16969,16985]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [37184,37196]",
      "parent": "variable_declaration_tuple [16969,16985]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ",: , [16982,16983]",
      "parent": "variable_declaration_tuple [16969,16985]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [16984,16985]",
      "parent": "variable_declaration_tuple [16969,16985]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "identifier: _functionCallWithValue [18419,18441]",
      "parent": "call_expression [18419,18472]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [18441,18442]",
      "parent": "call_expression [18419,18472]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18442,18448]",
      "parent": "call_expression [18419,18472]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [18448,18449]",
      "parent": "call_expression [18419,18472]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18450,18454]",
      "parent": "call_expression [18419,18472]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [18454,18455]",
      "parent": "call_expression [18419,18472]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "call_argument [39980,39981]",
      "parent": "call_expression [18419,18472]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": ",: , [18457,18458]",
      "parent": "call_expression [18419,18472]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [18459,18471]",
      "parent": "call_expression [18419,18472]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "): ) [18471,18472]",
      "parent": "call_expression [18419,18472]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": ",: , [19527,19528]",
      "parent": "call_expression [19489,19570]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [19529,19569]",
      "parent": "call_expression [19489,19570]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "(: ( [19949,19950]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [38211,38223]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ",: , [19962,19963]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "variable_declaration [19964,19987]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [19987,19988]",
      "parent": "variable_declaration_tuple [19949,19988]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [20101,20102]",
      "parent": "block_statement [20101,20633]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // Look for revert reason and bubble it up if present [20116,20169]",
      "parent": "block_statement [20101,20633]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "if_statement [20183,20622]",
      "parent": "block_statement [20101,20633]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [20632,20633]",
      "parent": "block_statement [20101,20633]",
      "at": 3
    },
    {
      "action": "update-node",
      "tree": "identifier: _approveAllArgs [20110,20125]",
      "label": "_approve"
    },
    {
      "action": "insert-node",
      "tree": "identifier: _approve [27020,27028]",
      "parent": "call_expression [27020,27149]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [27028,27029]",
      "parent": "call_expression [27020,27149]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [27029,27041]",
      "parent": "call_expression [27020,27149]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [27041,27042]",
      "parent": "call_expression [27020,27149]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [27043,27050]",
      "parent": "call_expression [27020,27149]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [27050,27051]",
      "parent": "call_expression [27020,27149]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "call_argument [27052,27148]",
      "parent": "call_expression [27020,27149]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [27148,27149]",
      "parent": "call_expression [27020,27149]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": ",: , [27795,27796]",
      "parent": "call_expression [27767,27837]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [41833,41846]",
      "parent": "call_expression [27767,27837]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "call_argument [41052,41065]",
      "parent": "call_expression [27848,27919]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "array_access [27992,28009]",
      "parent": "assignment_expression [27992,28083]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [28010,28011]",
      "parent": "assignment_expression [27992,28083]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_expression [41350,41413]",
      "parent": "assignment_expression [27992,28083]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [28565,28572]",
      "parent": "call_expression [28565,28630]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [28572,28573]",
      "parent": "call_expression [28565,28630]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [28573,28594]",
      "parent": "call_expression [28565,28630]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [28594,28595]",
      "parent": "call_expression [28565,28630]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [42045,42076]",
      "parent": "call_expression [28565,28630]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [28629,28630]",
      "parent": "call_expression [28565,28630]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "identifier: _beforeTokenTransfer [28643,28663]",
      "parent": "call_expression [28643,28692]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ",: , [28683,28684]",
      "parent": "call_expression [28643,28692]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [28685,28691]",
      "parent": "call_expression [28643,28692]",
      "at": 6
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [39993,40005]",
      "label": "_totalSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: _account [40117,40125]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: oldValue [40139,40147]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: _beforeTokenTransfer [29355,29375]",
      "parent": "call_expression [29355,29404]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [29375,29376]",
      "parent": "call_expression [29355,29404]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [29376,29383]",
      "parent": "call_expression [29355,29404]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [29383,29384]",
      "parent": "call_expression [29355,29404]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [24312,24322]",
      "parent": "call_expression [29355,29404]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [29395,29396]",
      "parent": "call_expression [29355,29404]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [29397,29403]",
      "parent": "call_expression [29355,29404]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [29403,29404]",
      "parent": "call_expression [29355,29404]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "[: [ [4963,4964]",
      "parent": "array_access [29417,29435]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: originalTo [38433,38443]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [38445,38451]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [30230,30237]",
      "parent": "call_expression [30230,30298]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [30237,30238]",
      "parent": "call_expression [30230,30298]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [30238,30259]",
      "parent": "call_expression [30230,30298]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [30259,30260]",
      "parent": "call_expression [30230,30298]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [42276,42307]",
      "parent": "call_expression [30230,30298]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [30297,30298]",
      "parent": "call_expression [30230,30298]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "payable: payable [31594,31601]",
      "parent": "primitive_type [31586,31601]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "call_argument [32014,32027]",
      "parent": "call_expression [31998,32028]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _increaseApprovalAllArgs [20989,21013]",
      "label": "_burn"
    },
    {
      "action": "insert-node",
      "tree": "if: if [36269,36271]",
      "parent": "yul_if_statement [36269,36341]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [30680,30693]",
      "parent": "yul_if_statement [36269,36341]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_block [36291,36341]",
      "parent": "yul_if_statement [36269,36341]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "let: let [36476,36479]",
      "parent": "yul_variable_declaration [36476,36508]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_identifier [36480,36483]",
      "parent": "yul_variable_declaration [36476,36508]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ":=: := [36484,36486]",
      "parent": "yul_variable_declaration [36476,36508]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [28154,28177]",
      "parent": "yul_variable_declaration [36476,36508]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "for: for [36604,36607]",
      "parent": "yul_for_statement [36604,36854]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_block [36608,36626]",
      "parent": "yul_for_statement [36604,36854]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [28325,28341]",
      "parent": "yul_for_statement [36604,36854]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_block [30799,31004]",
      "parent": "yul_for_statement [36604,36854]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "yul_block [31369,31483]",
      "parent": "yul_for_statement [36604,36854]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [28370,28436]",
      "label": "0xfffff"
    },
    {
      "action": "insert-node",
      "tree": "if: if [37366,37368]",
      "parent": "yul_if_statement [37366,37438]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [28741,28754]",
      "parent": "yul_if_statement [37366,37438]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_block [37388,37438]",
      "parent": "yul_if_statement [37366,37438]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "let: let [37703,37706]",
      "parent": "yul_variable_declaration [37703,37735]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_identifier [37707,37710]",
      "parent": "yul_variable_declaration [37703,37735]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ":=: := [37711,37713]",
      "parent": "yul_variable_declaration [37703,37735]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [28239,28255]",
      "parent": "yul_variable_declaration [37703,37735]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "for: for [37751,37754]",
      "parent": "yul_for_statement [37751,38136]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_block [37755,37773]",
      "parent": "yul_for_statement [37751,38136]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [31352,31367]",
      "parent": "yul_for_statement [37751,38136]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "yul_block [37792,37854]",
      "parent": "yul_for_statement [37751,38136]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "yul_block [28755,29118]",
      "parent": "yul_for_statement [37751,38136]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [38673,38679]",
      "parent": "yul_assignment [38673,38756]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ":=: := [38680,38682]",
      "parent": "yul_assignment [38673,38756]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [38683,38756]",
      "parent": "yul_assignment [38673,38756]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: _mint [41496,41501]",
      "parent": "call_expression [41496,41518]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [43886,43893]",
      "parent": "call_expression [43886,43961]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [43893,43894]",
      "parent": "call_expression [43886,43961]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [43894,43915]",
      "parent": "call_expression [43886,43961]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [43915,43916]",
      "parent": "call_expression [43886,43961]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [38172,38199]",
      "parent": "call_expression [43886,43961]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [43960,43961]",
      "parent": "call_expression [43886,43961]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [44079,44093]",
      "parent": "call_expression [44079,44117]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [44093,44094]",
      "parent": "call_expression [44079,44117]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [17589,17594]",
      "parent": "call_expression [44079,44117]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [44099,44100]",
      "parent": "call_expression [44079,44117]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [44101,44108]",
      "parent": "call_expression [44079,44117]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [44108,44109]",
      "parent": "call_expression [44079,44117]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [44110,44116]",
      "parent": "call_expression [44079,44117]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "): ) [44116,44117]",
      "parent": "call_expression [44079,44117]",
      "at": 7
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [33711,33750]",
      "parent": "binary_expression [45094,45162]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "&&: && [45138,45140]",
      "parent": "binary_expression [45094,45162]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [33071,33110]",
      "parent": "binary_expression [45094,45162]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [16813,16844]",
      "parent": "call_argument [16813,16844]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: hasHook [37189,37196]",
      "label": "success"
    },
    {
      "action": "update-node",
      "tree": "identifier: hasHook [38216,38223]",
      "label": "success"
    },
    {
      "action": "insert-node",
      "tree": "if: if [20183,20185]",
      "parent": "if_statement [20183,20622]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20186,20187]",
      "parent": "if_statement [20183,20622]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [20187,20208]",
      "parent": "if_statement [20183,20622]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [20208,20209]",
      "parent": "if_statement [20183,20622]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "block_statement [20210,20561]",
      "parent": "if_statement [20183,20622]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [20562,20566]",
      "parent": "if_statement [20183,20622]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [20567,20622]",
      "parent": "if_statement [20183,20622]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [24925,24937]",
      "parent": "call_argument [24925,24937]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [20126,20134]",
      "label": "spender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [20136,20142]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "call_expression [27052,27148]",
      "parent": "call_argument [27052,27148]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [28012,28033]",
      "parent": "call_expression [28012,28083]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [28573,28594]",
      "parent": "call_argument [28573,28594]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [38810,38816]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _attribute [4964,4974]",
      "label": "_balances"
    },
    {
      "action": "insert-node",
      "tree": "identifier: account [29427,29434]",
      "parent": "array_access [29417,29435]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [29438,29460]",
      "parent": "call_expression [29438,29506]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [32014,32027]",
      "parent": "call_argument [32014,32027]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _spender [21014,21022]",
      "label": "amount"
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [36283,36289]",
      "parent": "yul_function_call [36272,36290]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [36291,36292]",
      "parent": "yul_block [36291,36341]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "yul_assignment [36310,36326]",
      "parent": "yul_block [36291,36341]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [36340,36341]",
      "parent": "yul_block [36291,36341]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [28061,28064]",
      "parent": "yul_function_call [36487,36508]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [28741,28743]",
      "parent": "yul_function_call [36627,36644]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [36640,36643]",
      "parent": "yul_function_call [36627,36644]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "comment: // set storage location to zero [36727,36758]",
      "parent": "yul_block [36708,36854]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // this refunds 15,000 gas [36776,36802]",
      "parent": "yul_block [36708,36854]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [28325,28328]",
      "parent": "yul_function_call [36931,36950]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [36943,36949]",
      "parent": "yul_function_call [36931,36950]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "yul_evm_builtin [37369,37371]",
      "parent": "yul_function_call [37369,37387]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [37380,37386]",
      "parent": "yul_function_call [37369,37387]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [37388,37389]",
      "parent": "yul_block [37388,37438]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "yul_assignment [37407,37423]",
      "parent": "yul_block [37388,37438]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [37437,37438]",
      "parent": "yul_block [37388,37438]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [29446,29449]",
      "parent": "yul_function_call [37714,37735]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [37728,37734]",
      "parent": "yul_function_call [37714,37735]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": ",: , [37785,37786]",
      "parent": "yul_function_call [37774,37791]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [37787,37790]",
      "parent": "yul_function_call [37774,37791]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "{: { [37792,37793]",
      "parent": "yul_block [37792,37854]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_assignment [30416,30449]",
      "parent": "yul_block [37792,37854]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "}: } [37853,37854]",
      "parent": "yul_block [37792,37854]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "comment: // load sheep address [37874,37895]",
      "parent": "yul_block [37855,38136]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // call selfdestruct on sheep [37959,37988]",
      "parent": "yul_block [37855,38136]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: // clear sheep address [38062,38084]",
      "parent": "yul_block [37855,38136]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [38239,38245]",
      "parent": "yul_function_call [38227,38246]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [31873,31878]",
      "parent": "yul_function_call [38683,38756]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38688,38689]",
      "parent": "yul_function_call [38683,38756]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_hex_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff [38689,38755]",
      "parent": "yul_function_call [38683,38756]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [38755,38756]",
      "parent": "yul_function_call [38683,38756]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "array_access [41323,41346]",
      "parent": "call_argument [41323,41346]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "unary_expression [41406,41435]",
      "parent": "call_argument [41406,41435]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _burner [24994,25001]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [25003,25009]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "identifier: _value [34184,34190]",
      "parent": "binary_expression [41928,41972]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "array_access [43066,43088]",
      "parent": "call_argument [43066,43088]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [43147,43172]",
      "parent": "call_argument [43147,43172]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "array_access [44403,44419]",
      "parent": "call_argument [44403,44419]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [45158,45160]",
      "parent": "binary_expression [45141,45162]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0 [45161,45162]",
      "parent": "binary_expression [45141,45162]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "member_expression [16813,16834]",
      "parent": "binary_expression [16813,16844]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [16835,16837]",
      "parent": "binary_expression [16813,16844]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [16838,16844]",
      "parent": "binary_expression [16813,16844]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "identifier: msg [39321,39324]",
      "parent": "member_expression [19497,19518]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [19519,19521]",
      "parent": "binary_expression [19497,19527]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: value [19522,19527]",
      "parent": "binary_expression [19497,19527]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "{: { [20210,20211]",
      "parent": "block_statement [20210,20561]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "comment: // The easiest way to bubble the revert reason is using memory via assembly [20229,20304]",
      "parent": "block_statement [20210,20561]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "comment: // solhint-disable-next-line no-inline-assembly [20324,20371]",
      "parent": "block_statement [20210,20561]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "assembly_statement [20389,20546]",
      "parent": "block_statement [20210,20561]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [20560,20561]",
      "parent": "block_statement [20210,20561]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "member_expression [27052,27090]",
      "parent": "call_expression [27052,27148]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [27090,27091]",
      "parent": "call_expression [27052,27148]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [27091,27106]",
      "parent": "call_expression [27052,27148]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [27106,27107]",
      "parent": "call_expression [27052,27148]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [5087,5089]",
      "parent": "call_expression [27052,27148]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [27147,27148]",
      "parent": "call_expression [27052,27148]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: newOwner [9150,9158]",
      "label": "sender"
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [38153,38156]",
      "label": "recipient"
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [28034,28040]",
      "parent": "call_argument [28034,28040]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: account [28573,28580]",
      "parent": "binary_expression [28573,28594]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [28581,28583]",
      "parent": "binary_expression [28573,28594]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [10235,10245]",
      "parent": "binary_expression [28573,28594]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: totalSupply_ [40008,40020]",
      "label": "_totalSupply"
    },
    {
      "action": "update-node",
      "tree": "identifier: sub [40021,40024]",
      "label": "add"
    },
    {
      "action": "update-node",
      "tree": "identifier: oldValue [40025,40033]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: account [29283,29290]",
      "parent": "binary_expression [29283,29304]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [29291,29293]",
      "parent": "binary_expression [29283,29304]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "type_cast_expression [29294,29304]",
      "parent": "binary_expression [29283,29304]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [4992,4998]",
      "label": "amount"
    },
    {
      "action": "insert-node",
      "tree": "identifier: owner [30159,30164]",
      "parent": "binary_expression [30159,30178]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "!=: != [30165,30167]",
      "parent": "binary_expression [30159,30178]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "type_cast_expression [30168,30178]",
      "parent": "binary_expression [30159,30178]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [40489,40496]",
      "parent": "type_cast_expression [32014,32027]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [32021,32022]",
      "parent": "type_cast_expression [32014,32027]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "call_argument [17303,17307]",
      "parent": "type_cast_expression [32014,32027]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [32026,32027]",
      "parent": "type_cast_expression [32014,32027]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [34747,34753]",
      "parent": "binary_expression [34747,34764]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ">=: >= [34754,34756]",
      "parent": "binary_expression [34747,34764]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: burnMin [34757,34764]",
      "parent": "binary_expression [34747,34764]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: amount [34833,34839]",
      "parent": "binary_expression [34833,34850]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "<=: <= [34840,34842]",
      "parent": "binary_expression [34833,34850]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: burnMax [34843,34850]",
      "parent": "binary_expression [34833,34850]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "lt: lt [36272,36274]",
      "parent": "yul_evm_builtin [36272,36274]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [36310,36316]",
      "parent": "yul_assignment [36310,36326]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ":=: := [36317,36319]",
      "parent": "yul_assignment [36310,36326]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "yul_path [31253,31259]",
      "parent": "yul_assignment [36310,36326]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [37407,37413]",
      "parent": "yul_assignment [37407,37423]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ":=: := [37414,37416]",
      "parent": "yul_assignment [37407,37423]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "yul_path [31453,31459]",
      "parent": "yul_assignment [37407,37423]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "lt: lt [37774,37776]",
      "parent": "yul_evm_builtin [37774,37776]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_path [30788,30796]",
      "parent": "yul_assignment [37811,37839]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "yul_function_call [30430,30445]",
      "parent": "yul_assignment [37811,37839]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [40497,40509]",
      "parent": "binary_expression [41928,41972]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: _value [34184,34190]",
      "label": "REDEMPTION_ADDRESS_COUNT"
    },
    {
      "action": "insert-tree",
      "tree": "array_access [43980,44003]",
      "parent": "binary_expression [43980,44018]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "||: || [44004,44006]",
      "parent": "binary_expression [43980,44018]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [44007,44018]",
      "parent": "binary_expression [43980,44018]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [40579,40607]",
      "parent": "member_expression [16813,16834]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ".: . [16826,16827]",
      "parent": "member_expression [16813,16834]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: balance [16827,16834]",
      "parent": "member_expression [16813,16834]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "type_cast_expression [39335,39352]",
      "parent": "member_expression [19497,19518]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "identifier: msg [39321,39324]",
      "label": "balance"
    },
    {
      "action": "insert-node",
      "tree": "assembly: assembly [20389,20397]",
      "parent": "assembly_statement [20389,20546]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "{: { [20398,20399]",
      "parent": "assembly_statement [20389,20546]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "yul_variable_declaration [20421,20461]",
      "parent": "assembly_statement [20389,20546]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [20483,20527]",
      "parent": "assembly_statement [20389,20546]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [20545,20546]",
      "parent": "assembly_statement [20389,20546]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: sheep [28171,28176]",
      "label": "amount"
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [30426,30429]",
      "parent": "yul_function_call [37823,37839]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": ",: , [37835,37836]",
      "parent": "yul_function_call [37823,37839]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "yul_decimal_number: 1 [37837,37838]",
      "parent": "yul_function_call [37823,37839]",
      "at": 4
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [33719,33722]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [33079,33082]",
      "label": "account"
    },
    {
      "action": "move-tree",
      "tree": "call_argument [7189,7193]",
      "parent": "type_cast_expression [16813,16826]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "yul_evm_builtin [20483,20489]",
      "parent": "yul_function_call [20483,20527]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20489,20490]",
      "parent": "yul_function_call [20483,20527]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_function_call [20490,20509]",
      "parent": "yul_function_call [20483,20527]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [20509,20510]",
      "parent": "yul_function_call [20483,20527]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [20511,20526]",
      "parent": "yul_function_call [20483,20527]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [20526,20527]",
      "parent": "yul_function_call [20483,20527]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "(: ( [38018,38019]",
      "parent": "yul_function_call [38015,38020]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "): ) [38019,38020]",
      "parent": "yul_function_call [38015,38020]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: _to [40505,40508]",
      "label": "account"
    },
    {
      "action": "update-node",
      "tree": "identifier: registry [39343,39351]",
      "label": "this"
    },
    {
      "action": "move-tree",
      "tree": "yul_evm_builtin [28438,28441]",
      "parent": "yul_function_call [20490,20509]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [20493,20494]",
      "parent": "yul_function_call [20490,20509]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "yul_decimal_number: 32 [20494,20496]",
      "parent": "yul_function_call [20490,20509]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [20496,20497]",
      "parent": "yul_function_call [20490,20509]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "yul_path [20498,20508]",
      "parent": "yul_function_call [20490,20509]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [20508,20509]",
      "parent": "yul_function_call [20490,20509]",
      "at": 5
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [71,79]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: TrueCoinReceiver [80,96]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [97,98]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [104,112]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: tokenFallback [113,126]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [126,127]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [128,140]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [140,141]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [142,155]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [156,157]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [104,167]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [169,170]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [97,170]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [71,170]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13307,13340]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13346,13383]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13584,13609]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [13679,13711]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [11676,11682]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [6489,6490]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [6490,6491]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [12333,12339]"
    },
    {
      "action": "delete-tree",
      "tree": "struct_member [1453,1467]"
    },
    {
      "action": "delete-tree",
      "tree": "struct_member [1505,1523]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [378,386]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ERC20Basic [387,397]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [378,672]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [16147,16241]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [9698,9705]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9705,9706]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9732,9733]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [9698,9733]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [835,843]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ERC20 [844,849]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [850,852]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [853,863]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [864,865]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [1198,1199]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [864,1199]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [835,1199]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [1372,1380]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Registry [1381,1389]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [1390,1391]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // never remove any storage variables [1542,1579]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [1585,1606]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [1612,1640]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [1646,1663]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Stores arbitrary attributes for users. An example use case is an ERC20 [1671,1744]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // token that requires its users to go through a KYC/AML check - in this case [1750,1827]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate [1833,1914]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // that account can use the token. This mapping stores that value (1, in the [1920,1996]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // example) as well as which validator last set the value and at what time, [2002,2077]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // so that e.g. the check can be renewed at appropriate intervals. [2083,2149]"
    },
    {
      "action": "delete-node",
      "tree": "mapping: mapping [2155,2162]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2162,2163]"
    },
    {
      "action": "delete-node",
      "tree": "=>: => [2171,2173]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [2174,2207]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [2207,2208]"
    },
    {
      "action": "delete-node",
      "tree": "type_name [2155,2208]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: attributes [2209,2219]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [2155,2220]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // The logic governing who is allowed to set what attributes is abstracted as [2226,2303]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // this accessManager, so that it may be replaced by the owner as needed [2309,2381]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [2387,2394]"
    },
    {
      "action": "delete-node",
      "tree": "constant: constant [2395,2403]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: WRITE_PERMISSION [2404,2420]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [2421,2422]"
    },
    {
      "action": "delete-node",
      "tree": "state_variable_declaration [2387,2448]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [2454,2502]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [2510,2619]"
    },
    {
      "action": "delete-node",
      "tree": "event: event [2625,2630]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: SetAttribute [2631,2643]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2643,2644]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [2644,2663]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2663,2664]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [2665,2682]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2682,2683]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: value [2692,2697]"
    },
    {
      "action": "delete-node",
      "tree": "event_paramater [2684,2697]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2697,2698]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [2699,2712]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2712,2713]"
    },
    {
      "action": "delete-tree",
      "tree": "event_paramater [2714,2739]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [2739,2740]"
    },
    {
      "action": "delete-node",
      "tree": "event_definition [2625,2741]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [2747,2820]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [2826,2911]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [2917,3001]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Allows a write if either a) the writer is that Registry's owner, or [3009,3079]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // b) the writer is writing to attribute foo and that writer already has [3085,3157]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // the canWriteTo-foo attribute set (in that same Registry) [3163,3222]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [3228,3236]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: confirmWrite [3237,3249]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [3249,3250]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _attribute [3258,3268]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [3250,3268]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3268,3269]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [3270,3284]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [3284,3285]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [3315,3424]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [3228,3424]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Writes are allowed only if the accessManager approves [3432,3488]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [3494,3502]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setAttribute [3503,3515]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [3515,3516]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3528,3529]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [3530,3548]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3548,3549]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [3564,3565]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [3566,3580]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [3580,3581]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [3582,3588]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [3589,3590]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [3600,3646]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [3656,3746]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [3756,3820]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [3832,3890]"
    },
    {
      "action": "delete-tree",
      "tree": "while_statement [3941,4047]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [4053,4054]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [3589,4054]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [3494,4054]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [4062,4070]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subscribe [4071,4080]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [4080,4081]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4081,4099]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4099,4100]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4101,4122]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [4122,4123]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [4133,4142]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [4143,4253]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [4062,4253]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [4261,4269]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: unsubscribe [4270,4281]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [4281,4282]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4282,4300]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4300,4301]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [4316,4317]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [4327,4336]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [4337,4649]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [4261,4649]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [4657,4665]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subscriberCount [4666,4681]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [4681,4682]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4682,4700]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [4700,4701]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [4702,4708]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [4709,4713]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [4732,4788]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [4657,4788]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [4796,4804]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setAttributeValue [4805,4822]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [4822,4823]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4835,4836]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [4837,4855]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [4855,4856]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [4871,4872]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [4873,4879]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [4880,4881]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [4891,4937]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [5043,5047]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: SetAttribute [5048,5060]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5060,5061]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5061,5065]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5065,5066]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5067,5077]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5077,5078]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5079,5085]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5085,5086]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5089,5090]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5091,5101]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [5101,5102]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [5043,5103]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [5113,5171]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [5181,5212]"
    },
    {
      "action": "delete-tree",
      "tree": "while_statement [5222,5328]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [5334,5335]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [4880,5335]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [4796,5335]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Returns true if the uint256 value stored for this attribute is non-zero [5343,5417]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [5423,5431]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: hasAttribute [5432,5444]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5444,5445]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5445,5457]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5457,5458]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5459,5477]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [5477,5478]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [5486,5490]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [5506,5571]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [5423,5571]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Returns the exact value of the attribute, as well as its metadata [5581,5649]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [5655,5917]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [5925,5933]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: getAttributeValue [5934,5951]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5951,5952]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5952,5964]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5964,5965]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5966,5984]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [5984,5985]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [5986,5992]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [5993,5997]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [6016,6076]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [5925,6076]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [6084,6243]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [6251,6259]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: getAttributeTimestamp [6260,6281]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [6281,6282]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [6282,6294]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [6294,6295]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [6296,6314]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6314,6315]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [6316,6322]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [6323,6327]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [6346,6410]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [6251,6410]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [6418,6426]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: syncAttribute [6427,6440]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [6440,6441]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [6441,6459]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [6459,6460]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [6480,6481]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addresses [6492,6502]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [6482,6502]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6502,6503]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [6513,6953]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [6418,6953]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [6961,6969]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reclaimEther [6970,6982]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [6982,6983]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [6983,6994]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6994,6995]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [7005,7014]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [7015,7069]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [6961,7069]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [7077,7085]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reclaimToken [7086,7098]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [7098,7099]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [7099,7110]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [7110,7111]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [7112,7123]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [7123,7124]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [7134,7143]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [7144,7145]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [7155,7170]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [7171,7172]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [7173,7188]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [7188,7189]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [7193,7194]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [7173,7194]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [7155,7195]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [7205,7234]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [7240,7241]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [7144,7241]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [7077,7241]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Throws if called by any account other than the owner.     */ [7248,7325]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [7331,7425]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Modifier throws if called by any account other than the pendingOwner.     */ [7433,7526]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [7532,7626]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Allows the current owner to set the pendingOwner address.     * @param newOwner The address to transfer ownership to.     */ [7634,7776]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [7782,7886]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Allows the pendingOwner address to finalize the transfer.     */ [7894,7975]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [7981,8163]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [8165,8166]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [1390,8166]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [1372,8166]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [901,902]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [492,498]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [1092,1098]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [426,432]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [544,554]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [556,569]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [571,577]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [1271,1272]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [1278,1286]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: syncAttributeValue [1287,1305]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1305,1306]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1318,1319]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _attribute [1328,1338]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [1320,1338]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1338,1339]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1354,1355]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [1278,1365]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [1367,1368]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [1271,1368]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [8431,8439]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Ownable [8440,8447]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [8448,8449]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [8453,8474]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [8482,8566]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev The Ownable constructor sets the original `owner` of the contract to the sender    * account.    */ [8574,8690]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [8694,8751]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Throws if called by any account other than the owner.    */ [8757,8832]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_definition [8836,8906]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Allows the current owner to transfer control of the contract to a newOwner.    * @param newOwner The address to transfer ownership to.    */ [8912,9069]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [9073,9081]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferOwnership [9082,9099]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9099,9100]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9116,9117]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [9118,9124]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [9125,9134]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [9135,9136]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [9180,9223]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [9229,9246]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [9250,9251]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [9135,9251]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [9073,9251]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [9255,9256]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [8448,9256]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [8431,9256]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [9499,9507]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Claimable [9508,9517]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [9518,9520]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [9521,9528]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [9529,9530]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [9534,9562]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Modifier throws if called by any account other than the pendingOwner.    */ [9568,9659]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Allows the current owner to set the pendingOwner address.    * @param newOwner The address to transfer ownership to.    */ [9753,9892]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [9896,9904]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferOwnership [9905,9922]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9922,9923]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9939,9940]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [9941,9950]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [9951,9957]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [9958,9994]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [9896,9994]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**    * @dev Allows the pendingOwner address to finalize the transfer.    */ [10000,10079]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [10083,10091]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: claimOwnership [10092,10106]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [10106,10107]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [10107,10108]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [10109,10125]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [10126,10132]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [10133,10134]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [10140,10144]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: OwnershipTransferred [10145,10165]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [10165,10166]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [10171,10172]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [10173,10185]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [10185,10186]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [10140,10187]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [10193,10214]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [10250,10251]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [10133,10251]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [10083,10251]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [10253,10254]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [9529,10254]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [9499,10254]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: c [11416,11417]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [11418,11419]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [11416,11425]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [11416,11426]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [22183,22220]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: c [10624,10625]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [10626,10627]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [10624,10633]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [10624,10634]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [3916,3930]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // assert(b > 0); // Solidity automatically throws when dividing by 0 [10840,10909]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // uint256 c = a / b; [10915,10936]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [40587,40606]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: sender [39325,39331]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [39332,39334]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [39362,39364]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [11570,11578]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: BalanceSheet [11579,11591]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [11592,11594]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [11595,11604]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [11605,11606]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [11612,11639]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [11701,11709]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: addBalance [11710,11720]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11720,11721]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [11734,11735]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11750,11751]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [11752,11758]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [11759,11768]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [11769,11835]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [11701,11835]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [11843,11851]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subBalance [11852,11862]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11862,11863]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [11876,11877]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11892,11893]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [11901,11910]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [11911,11977]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [11843,11977]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [11985,11993]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setBalance [11994,12004]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [12004,12005]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12018,12019]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [12034,12035]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [12043,12052]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [12053,12097]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [11985,12097]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [12099,12100]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [11605,12100]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [11570,12100]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [18261,18273]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [18325,18341]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [18145,18157]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [18207,18224]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12834,12835]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [12859,12868]"
    },
    {
      "action": "delete-tree",
      "tree": "assignment_expression [12880,12924]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22564,22580]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [22582,22588]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [22630,22659]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [20043,20059]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [20144,20154]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [41350,41357]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [41359,41397]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [39786,39802]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [39804,39810]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: pendingOwner [10220,10232]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [10233,10234]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [10220,10245]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [38762,38797]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [39907,39948]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setBalance [39958,39969]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39969,39970]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [39970,39978]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [39978,39979]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39981,39982]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [39958,39982]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [40045,40093]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [42167,42200]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [42201,42203]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [42204,42205]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [4947,4963]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: AttributeData [4978,4991]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5002,5003]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5004,5014]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [5014,5015]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [5016,5031]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [41287,41318]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [41319,41321]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [41322,41323]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [1017,1023]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [12204,12212]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: AllowanceSheet [12213,12227]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [12228,12230]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [12231,12240]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [12241,12242]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [12248,12275]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [12360,12368]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: addAllowance [12369,12381]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [12381,12382]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12402,12403]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _spender [12412,12420]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [12404,12420]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12420,12421]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _value [12430,12436]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [12422,12436]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [12436,12437]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [12438,12444]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [12445,12454]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [12455,12559]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [12360,12559]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [12567,12575]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subAllowance [12576,12588]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [12588,12589]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12609,12610]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [12627,12628]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [12629,12643]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [12643,12644]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [12652,12661]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [12662,12766]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [12567,12766]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [12934,12935]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [12241,12935]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [12204,12935]"
    },
    {
      "action": "delete-tree",
      "tree": "user_defined_type [16853,16861]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**       *@dev allows owner of the contract to gain ownership of any contract that the contract currently owns     */ [17363,17483]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [17489,17497]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: reclaimContract [17498,17513]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [17513,17514]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [17514,17530]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [17530,17531]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [17551,17552]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [17562,17588]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [17588,17589]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [17594,17595]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [17562,17595]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [17562,17596]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [17602,17603]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [17551,17603]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [17489,17603]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [24686,24706]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [20920,20936]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [20936,20937]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [20938,20954]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [21024,21035]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21035,21036]"
    },
    {
      "action": "delete-node",
      "tree": "comment: //in any particular cap for the minimum) [25407,25447]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40351,40364]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40366,40377]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40379,40387]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [40388,40392]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [40393,40400]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40401,40402]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40402,40409]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40409,40410]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40415,40416]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [40393,40416]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [40428,40455]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [40456,40457]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [40458,40488]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [40488,40489]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40496,40497]"
    },
    {
      "action": "delete-node",
      "tree": ">>: >> [40510,40512]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 20 [40513,40515]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [40497,40515]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [40497,40515]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40515,40516]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [40489,40516]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [40516,40517]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [40458,40517]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [40428,40518]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [40528,40530]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40531,40532]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [40532,40556]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40556,40557]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [40558,40559]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _to [40573,40576]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [40577,40578]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [40573,40607]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [40573,40608]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [40618,40619]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [40558,40619]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [40528,40619]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [40710,40743]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [40744,40746]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [40747,40748]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [40638,40669]"
    },
    {
      "action": "delete-node",
      "tree": "==: == [40670,40672]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [40673,40674]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [40775,40834]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [25983,25985]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [25986,25998]"
    },
    {
      "action": "delete-node",
      "tree": "gt: gt [30680,30682]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [30691,30692]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [28154,28160]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 2 [28339,28340]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30822,30841]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30913,30932]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30954,30985]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31433,31439]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31439,31440]"
    },
    {
      "action": "delete-node",
      "tree": "yul_hex_number: 0xfffff [31440,31447]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31447,31448]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31449,31452]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31452,31453]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31459,31460]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [31461,31462]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31462,31463]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31449,31463]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31463,31464]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31433,31464]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [27701,27791]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [27805,27885]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [27899,27930]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [27944,28031]"
    },
    {
      "action": "delete-node",
      "tree": "let: let [28045,28048]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_identifier [28049,28057]"
    },
    {
      "action": "delete-node",
      "tree": ":=: := [28058,28060]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [28064,28065]"
    },
    {
      "action": "delete-node",
      "tree": "yul_hex_number: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe [28065,28131]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [28131,28132]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [28133,28139]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [28139,28140]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [28061,28140]"
    },
    {
      "action": "delete-node",
      "tree": "yul_variable_declaration [28045,28140]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [28191,28218]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [28232,28238]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [28238,28239]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [28255,28256]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [28257,28262]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [28262,28263]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [28232,28263]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [28277,28304]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [28318,28324]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [28324,28325]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [28341,28342]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [28343,28348]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [28348,28349]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [28318,28349]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 3 [28450,28451]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 0 [28752,28753]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [28239,28242]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [28253,28254]"
    },
    {
      "action": "delete-node",
      "tree": "sload: sload [31352,31357]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [30416,30422]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [30430,30435]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [30429,30430]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [30445,30446]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [30447,30448]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [30448,30449]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [30426,30449]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [28969,28970]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [28738,28740]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [28738,29118]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [29144,29152]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: sponsorGas [29153,29163]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [29163,29164]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [29164,29165]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [29175,29176]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [29186,29240]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [29250,29275]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [29285,29293]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [29294,29295]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [29309,29337]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [29351,29379]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29393,29416]"
    },
    {
      "action": "delete-node",
      "tree": "let: let [29430,29433]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_identifier [29434,29442]"
    },
    {
      "action": "delete-node",
      "tree": ":=: := [29443,29445]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [29449,29450]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [29450,29456]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [29456,29457]"
    },
    {
      "action": "delete-node",
      "tree": "yul_hex_number: 0x100000 [29458,29466]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [29466,29467]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [29446,29467]"
    },
    {
      "action": "delete-node",
      "tree": "yul_variable_declaration [29430,29467]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29481,29510]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [29524,29552]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29566,29595]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [29609,29637]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29651,29680]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [29694,29722]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29736,29765]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [29779,29807]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29821,29850]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [29864,29892]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29906,29935]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [29949,29977]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [29991,30020]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [30034,30062]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30076,30105]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_assignment [30119,30147]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30161,30190]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [30200,30201]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [29285,30201]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [30207,30208]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [29175,30208]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [29144,30208]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [30216,30224]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: minimumGasPriceForRefund [30225,30249]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [30249,30250]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [30250,30251]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [30252,30258]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [30259,30263]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [30264,30288]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30289,30290]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [30300,30308]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30309,30310]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [30324,30352]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [30366,30402]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [30459,30460]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [30300,30460]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [30466,30467]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [30289,30467]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [30216,30467]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [30568,30576]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: gasRefund30 [30577,30588]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [30588,30589]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [30589,30590]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30600,30601]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [30611,30619]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30620,30621]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [30677,30679]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [30694,30695]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [30767,30769]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [30770,30772]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [30772,30773]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [30773,30781]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [30781,30782]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [30782,30787]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [30787,30788]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [30796,30797]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [30782,30797]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [30797,30798]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [30770,30798]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [30767,31004]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31018,31019]"
    },
    {
      "action": "delete-node",
      "tree": "yul_block [30694,31019]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [30677,31019]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31029,31030]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [30611,31030]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31036,31037]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [30600,31037]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [30568,31037]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [31138,31146]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: gasRefund15 [31147,31158]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31158,31159]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31159,31160]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31170,31171]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [31181,31189]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31190,31191]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [31205,31233]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [31247,31249]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31250,31252]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31252,31253]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31259,31260]"
    },
    {
      "action": "delete-node",
      "tree": "yul_decimal_number: 1 [31261,31262]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31262,31263]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31250,31263]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31264,31265]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_variable_declaration [31283,31319]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [31337,31339]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_evm_builtin [31340,31342]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31342,31343]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [31343,31351]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [31351,31352]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31367,31368]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31340,31368]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [31337,31483]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31497,31498]"
    },
    {
      "action": "delete-node",
      "tree": "yul_block [31264,31498]"
    },
    {
      "action": "delete-node",
      "tree": "yul_if_statement [31247,31498]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31508,31509]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [31181,31509]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31515,31516]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [31170,31516]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [31138,31516]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**       *@dev Return the remaining sponsored gas slots     */ [31524,31589]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [31641,31662]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [31748,31756]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: gasRefundPool [31757,31770]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31770,31771]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [31771,31785]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31785,31786]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [31799,31825]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31826,31827]"
    },
    {
      "action": "delete-node",
      "tree": "assembly: assembly [31837,31845]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [31846,31847]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_path [31861,31869]"
    },
    {
      "action": "delete-node",
      "tree": ":=: := [31870,31872]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [31878,31879]"
    },
    {
      "action": "delete-tree",
      "tree": "yul_function_call [31879,31900]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [31900,31901]"
    },
    {
      "action": "delete-node",
      "tree": "yul_function_call [31873,31901]"
    },
    {
      "action": "delete-node",
      "tree": "yul_assignment [31861,31901]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31911,31912]"
    },
    {
      "action": "delete-node",
      "tree": "assembly_statement [31837,31912]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [31918,31919]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [31826,31919]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [31748,31919]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [31927,32014]"
    },
    {
      "action": "delete-tree",
      "tree": "function_definition [32022,32290]"
    },
    {
      "action": "delete-tree",
      "tree": "type_name [38913,38920]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burner [24806,24813]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [24798,24813]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [24815,24829]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [24859,24876]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [24920,24937]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [24975,24993]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burnMin [34194,34201]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34906,34919]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34921,34932]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34934,34948]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34970,35002]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [35012,35037]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [35116,35133]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [35055,35072]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [35175,35206]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [35208,35248]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [35254,35294]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [35304,35338]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [35348,35388]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [35398,35421]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [35431,35470]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _value [34245,34251]"
    },
    {
      "action": "delete-node",
      "tree": "<=: <= [34252,34254]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burnMax [34255,34262]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [39840,39864]"
    },
    {
      "action": "delete-node",
      "tree": "<: < [33084,33085]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: REDEMPTION_ADDRESS_COUNT [33086,33110]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [17801,17809]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularBasicToken [17810,17827]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [17828,17830]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [17831,17839]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [17840,17841]"
    },
    {
      "action": "delete-tree",
      "tree": "using_directive [17847,17874]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [17882,17954]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev total number of tokens in existence     */ [17962,18021]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [18027,18035]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: totalSupply [18036,18047]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [18047,18048]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [18048,18049]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [18050,18056]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [18080,18118]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [18027,18118]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [18357,18365]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addBalance [18366,18377]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [18377,18378]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [18378,18390]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [18390,18391]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [18406,18407]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [18448,18552]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [18357,18552]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [18560,18568]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subBalance [18569,18580]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [18580,18581]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [18581,18593]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [18593,18594]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [18609,18610]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [18645,18737]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [18560,18737]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [18745,18753]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setBalance [18754,18765]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [18765,18766]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [18778,18779]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [18794,18795]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [18805,18849]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [18745,18849]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [18851,18852]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [17840,18852]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [17801,18852]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [19190,19198]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularStandardToken [19199,19219]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [19220,19222]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [19223,19240]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [19241,19242]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [19287,19365]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.      *      * Beware that changing an allowance with this method brings the risk that someone may use both the old      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729      * @param _spender The address which will spend the funds.      * @param _value The amount of tokens to be spent.      */ [19377,20020]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [20193,20201]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _approveAllArgs [20202,20217]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [20217,20218]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [20218,20234]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [20234,20235]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [20236,20250]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [20250,20251]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _tokenHolder [20260,20272]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [20252,20272]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [20272,20273]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [20283,20403]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [20193,20403]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Increase the amount of tokens that an owner allowed to a spender.      *      * approve should be called when allowed[_spender] == 0. To increment      * allowed value is better to use this function to avoid 2 calls (and wait until      * the first transaction is mined)      * From MonolithDAO Token.sol      * @param _spender The address which will spend the funds.      * @param _addedValue The amount of tokens to increase the allowance by.      */ [20411,20888]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [21086,21094]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _increaseApprovalAllArgs [21095,21119]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [21119,21120]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21120,21136]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21136,21137]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21157,21158]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21159,21179]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [21179,21180]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [21190,21346]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [21086,21346]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Decrease the amount of tokens that an owner allowed to a spender.      *      * approve should be called when allowed[_spender] == 0. To decrement      * allowed value is better to use this function to avoid 2 calls (and wait until      * the first transaction is mined)      * From MonolithDAO Token.sol      * @param _spender The address which will spend the funds.      * @param _subtractedValue The amount of tokens to decrease the allowance by.      */ [21354,21836]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [21842,21850]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: decreaseApproval [21851,21867]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [21867,21868]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [21884,21885]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [21886,21907]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [21907,21908]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [21909,21915]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [21931,21932]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [21942,22007]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [22035,22036]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [21931,22036]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [21842,22036]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [22044,22052]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _decreaseApprovalAllArgs [22053,22077]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [22077,22078]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22078,22094]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22094,22095]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22120,22121]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [22122,22142]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [22142,22143]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [22153,22154]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [22258,22401]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [22411,22459]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [22469,22516]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [22522,22523]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [22153,22523]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [22044,22523]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [22675,22683]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _getAllowance [22684,22697]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [22697,22698]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22710,22711]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [22728,22729]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [22744,22767]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [22768,22820]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [22675,22820]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [22828,22836]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _addAllowance [22837,22850]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [22850,22851]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22863,22864]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [22881,22882]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [22897,22898]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [22908,22994]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [22828,22994]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23002,23010]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _subAllowance [23011,23024]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23024,23025]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23037,23038]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23055,23056]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23071,23072]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [23082,23089]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23090,23091]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: allowanceZero [23096,23109]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [23091,23109]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23109,23110]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [23082,23110]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [23110,23111]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [23142,23143]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [23144,23182]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [23121,23183]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [23193,23235]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [23245,23279]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [23285,23286]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [23110,23286]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23002,23286]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23294,23302]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _setAllowance [23303,23316]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23316,23317]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23329,23330]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23347,23348]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23363,23364]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [23374,23428]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23294,23428]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [23430,23431]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [19241,23431]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [19190,23431]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/modularERC20/ModularBurnableToken.sol [23435,23491]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Burnable Token  * @dev Token that can be irreversibly burned (destroyed).  */ [23495,23589]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [23591,23599]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: ModularBurnableToken [23600,23620]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [23621,23623]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [23624,23644]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [23645,23646]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23801,23809]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: burn [23810,23814]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23814,23815]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23829,23830]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [23840,23907]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23801,23907]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [23915,23923]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnAllArgs [23924,23936]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [23936,23937]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [23950,23951]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [23966,23967]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [23977,23978]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // no need to require value <= totalSupply, since that would imply the [23988,24058]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // sender's balance is greater than the totalSupply, which *should* be an assertion failure [24068,24159]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [24169,24196]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [24206,24246]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [24256,24281]"
    },
    {
      "action": "delete-node",
      "tree": "emit: emit [24291,24295]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: Transfer [24296,24304]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [24304,24305]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [24305,24310]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [24310,24311]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [24322,24323]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [24324,24330]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [24330,24331]"
    },
    {
      "action": "delete-node",
      "tree": "emit_statement [24291,24332]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [24338,24339]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [23977,24339]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [23915,24339]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [24341,24342]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [23645,24342]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [23591,24342]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/BurnableTokenWithBounds.sol [24346,24392]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**  * @title Burnable Token WithBounds  * @dev Burning functions as redeeming money from the system. The platform will keep track of who burns coins,  * and will send them back the equivalent amount of money (rounded down to the nearest cent).  */ [24396,24648]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/GasRefundToken.sol [25674,25711]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**   @title Gas Refund Token Allow any user to sponsor gas refunds for transfer and mints. Utilitzes the gas refund mechanism in EVM Each time an non-empty storage slot is set to 0, evm refund 15,000 to the sender of the transaction. */ [25715,25957]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/CompliantDepositTokenWithHook.sol [32297,32349]"
    },
    {
      "action": "delete-node",
      "tree": "contract: contract [32353,32361]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: CompliantDepositTokenWithHook [32362,32391]"
    },
    {
      "action": "delete-node",
      "tree": "is: is [32392,32394]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [32409,32410]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [32411,32424]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [32424,32425]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [32449,32450]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [32451,32465]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [32466,32467]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [32475,32540]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [32546,32603]"
    },
    {
      "action": "delete-tree",
      "tree": "state_variable_declaration [32668,32718]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [32726,32734]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: canBurn [32735,32742]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [32742,32743]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [32743,32744]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [32745,32753]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [32759,32776]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [32726,32777]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev transfer token for a specified address     * @param _to The address to transfer to.     * @param _value The amount to be transferred.     */ [32785,32944]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [32950,32958]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transfer [32959,32967]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [32967,32968]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [32968,32979]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [32979,32980]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [32981,32995]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [32995,32996]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [33019,33020]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [33030,33043]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [33044,33045]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [33030,33057]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [33067,33069]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [33070,33071]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [33110,33111]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [33112,33213]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [33214,33218]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [33219,33282]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [33067,33282]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [33310,33311]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [33019,33311]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [32950,33311]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**      * @dev Transfer tokens from one address to another      * @param _from address The address which you want to send tokens from      * @param _to address The address which you want to transfer to      * @param _value uint256 the amount of tokens to be transferred      */ [33319,33602]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [33608,33616]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: transferFrom [33617,33629]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [33629,33630]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _from [33638,33643]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [33630,33643]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33643,33644]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33645,33656]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [33656,33657]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [33658,33672]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [33672,33673]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [33696,33697]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [33707,33709]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [33710,33711]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [33750,33751]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [33752,33862]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [33863,33867]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [33868,33947]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [33707,33947]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [33975,33976]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [33696,33976]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [33608,33976]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [33984,33992]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnFromAllowanceAllArgs [33993,34018]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [34018,34019]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34019,34032]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [34032,34033]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34034,34045]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [34045,34046]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [34047,34061]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [34061,34062]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [34072,34073]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34083,34131]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34141,34166]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [34300,34689]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [34699,34733]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [34743,34783]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [34793,34816]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [34826,34865]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [34871,34872]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [34072,34872]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [33984,34872]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [35485,35493]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferFromAllArgs [35494,35514]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [35514,35515]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35515,35528]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35528,35529]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35530,35541]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35541,35542]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35543,35557]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [35557,35558]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [35559,35575]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [35575,35576]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [35586,37086]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [35485,37086]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [37094,37102]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _transferAllArgs [37103,37119]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [37119,37120]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37120,37133]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37133,37134]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37135,37146]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [37146,37147]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [37148,37162]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [37162,37163]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [37173,37174]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [37184,37197]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [37207,37223]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [37233,37286]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [37296,37675]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [37685,37719]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [37729,38059]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [38065,38066]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [37173,38066]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [37094,38066]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [38074,38082]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: mint [38083,38087]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [38087,38088]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38088,38099]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [38099,38100]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [38101,38115]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [38115,38116]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [38117,38123]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [38134,38135]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [38211,38224]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [38234,38259]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [38269,38307]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [38317,38357]"
    },
    {
      "action": "delete-tree",
      "tree": "emit_statement [38367,38397]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [38463,38551]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [38561,38586]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [38596,38598]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [38599,38600]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: hasHook [38600,38607]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [38607,38608]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [38609,38610]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [38624,38626]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [38627,38628]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [38628,38645]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [38645,38646]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [38647,38737]"
    },
    {
      "action": "delete-node",
      "tree": "else: else [38738,38742]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [38743,38744]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [38832,38833]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [38743,38833]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [38624,38833]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [38843,38844]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [38609,38844]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [38596,38844]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [38850,38851]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [38134,38851]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [38074,38851]"
    },
    {
      "action": "delete-tree",
      "tree": "event_definition [38936,38980]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /**     * @dev Point to the registry that contains all compliance related data     @param _registry The address of the registry instance     */ [38988,39134]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [39140,39148]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setRegistry [39149,39160]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39160,39161]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [39161,39179]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39179,39180]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [39181,39187]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [39198,39274]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [39140,39274]"
    },
    {
      "action": "delete-node",
      "tree": "modifier: modifier [39282,39290]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: onlyRegistry [39291,39303]"
    },
    {
      "action": "delete-node",
      "tree": "modifier_definition [39282,39371]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [39379,39387]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: syncAttributeValue [39388,39406]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39406,39407]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [39407,39419]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [39419,39420]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [39421,39439]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [39439,39440]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39455,39456]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [39457,39463]"
    },
    {
      "action": "delete-tree",
      "tree": "modifier_invocation [39464,39476]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [39477,39533]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [39379,39533]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [39541,39549]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _burnAllArgs [39550,39562]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [39562,39563]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [39563,39576]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [39576,39577]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [39592,39593]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [39594,39602]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [39603,39688]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [39541,39688]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Destroy the tokens owned by a blacklisted account [39696,39748]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [40164,40172]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _isBlacklisted [40173,40187]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40187,40188]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40188,40204]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40204,40205]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40206,40214]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [40215,40219]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [40220,40227]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40228,40229]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40245,40246]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [40220,40246]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [40247,40314]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [40164,40314]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [40849,40857]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanTransferFrom [40858,40881]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40881,40882]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40882,40898]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40898,40899]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40900,40913]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40913,40914]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40915,40926]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40926,40927]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [40928,40936]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [40937,40941]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [40942,40949]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [40950,40951]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [40951,40958]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [40958,40959]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [40960,40964]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [40964,40965]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [40942,40965]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [40966,40967]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [40977,40990]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [41000,41007]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41008,41009]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41009,41050]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41050,41051]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41065,41066]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [41000,41066]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [41000,41067]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [41077,41104]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [41105,41106]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [41107,41137]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [41137,41138]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41145,41146]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41146,41164]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41164,41165]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [41138,41165]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [41165,41166]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [41107,41166]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [41077,41167]"
    },
    {
      "action": "delete-node",
      "tree": "if: if [41177,41179]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41180,41181]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [41181,41205]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41205,41206]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [41207,41208]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _to [41222,41225]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [41226,41227]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41235,41236]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41236,41255]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41255,41256]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [41228,41256]"
    },
    {
      "action": "delete-node",
      "tree": "assignment_expression [41222,41256]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [41222,41257]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [41267,41268]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [41207,41268]"
    },
    {
      "action": "delete-node",
      "tree": "if_statement [41177,41268]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [41424,41483]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [41489,41490]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [40966,41490]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [40849,41490]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [41498,41506]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanMint [41507,41522]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41522,41523]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41523,41534]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41534,41535]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [41545,41549]"
    },
    {
      "action": "delete-node",
      "tree": "returns: returns [41550,41557]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41558,41559]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41559,41566]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41566,41567]"
    },
    {
      "action": "delete-node",
      "tree": "parameter [41568,41572]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41572,41573]"
    },
    {
      "action": "delete-node",
      "tree": "return_type_definition [41550,41573]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [41574,41575]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [41585,41612]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [41613,41614]"
    },
    {
      "action": "delete-tree",
      "tree": "array_access [41615,41645]"
    },
    {
      "action": "delete-node",
      "tree": "[: [ [41645,41646]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41653,41654]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41654,41672]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41672,41673]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [41646,41673]"
    },
    {
      "action": "delete-node",
      "tree": "]: ] [41673,41674]"
    },
    {
      "action": "delete-node",
      "tree": "array_access [41615,41674]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [41585,41675]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [41685,41776]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [41786,41793]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41794,41795]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [41795,41831]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [41831,41832]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41846,41847]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [41786,41847]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [41786,41848]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [41858,41917]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [41923,41924]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [41574,41924]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [41498,41924]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [41932,41940]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireOnlyCanBurn [41941,41960]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [41960,41961]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [41961,41974]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [41974,41975]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [41985,41989]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [41990,41991]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [42001,42008]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42009,42010]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [42010,42043]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [42043,42044]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42076,42077]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [42001,42077]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [42001,42078]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42084,42085]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [41990,42085]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [41932,42085]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [42093,42101]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: _requireCanBurn [42102,42117]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42117,42118]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [42118,42131]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42131,42132]"
    },
    {
      "action": "delete-tree",
      "tree": "state_mutability [42142,42146]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [42147,42148]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [42232,42239]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42240,42241]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [42241,42274]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [42274,42275]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42307,42308]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [42232,42308]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [42232,42309]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42315,42316]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [42147,42316]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [42093,42316]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [42324,42332]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: paused [42333,42339]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [42339,42340]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [42340,42341]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [42342,42348]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [42354,42368]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [42369,42400]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [42324,42400]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [42402,42403]"
    },
    {
      "action": "delete-node",
      "tree": "contract_body [32466,42403]"
    },
    {
      "action": "delete-node",
      "tree": "contract_declaration [32353,42403]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // File: contracts/TrueGBP.sol [42407,42437]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /** @title TrueGBP * @dev This is the top-level ERC20 contract, but most of the interesting functionality is * inherited - see the documentation on the corresponding contracts. */ [42441,42623]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [43112,43120]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: canBurn [43121,43128]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [43128,43129]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [43129,43130]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [43131,43139]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [43145,43162]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [43163,43201]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [43112,43201]"
    }
  ]
}