{
  "matches": [
    {
      "src": "function: function [2099,2107]",
      "dest": "function: function [1542,1550]"
    },
    {
      "src": "identifier: require [3099,3106]",
      "dest": "identifier: require [3002,3009]"
    },
    {
      "src": "\": \" [1636,1637]",
      "dest": "\": \" [2027,2028]"
    },
    {
      "src": "=: = [1025,1026]",
      "dest": "=: = [1023,1024]"
    },
    {
      "src": "{: { [731,732]",
      "dest": "{: { [733,734]"
    },
    {
      "src": "identifier: orderTreeHeight [3248,3263]",
      "dest": "identifier: orderTreeHeight [3151,3166]"
    },
    {
      "src": "primitive_type [997,1004]",
      "dest": "primitive_type [996,1003]"
    },
    {
      "src": "call_argument [3123,3133]",
      "dest": "call_argument [3026,3036]"
    },
    {
      "src": "==: == [3213,3215]",
      "dest": "==: == [3116,3118]"
    },
    {
      "src": "identifier: REVERT_MSG [3174,3184]",
      "dest": "identifier: REVERT_MSG [3077,3087]"
    },
    {
      "src": "): ) [3229,3230]",
      "dest": "): ) [3132,3133]"
    },
    {
      "src": "number_literal: 4 [820,821]",
      "dest": "number_literal: 20188 [985,990]"
    },
    {
      "src": "string_literal [1820,1851]",
      "dest": "string_literal [2207,2238]"
    },
    {
      "src": "variable_declaration [2901,2925]",
      "dest": "variable_declaration [2804,2828]"
    },
    {
      "src": "expression_statement [3195,3231]",
      "dest": "expression_statement [3098,3134]"
    },
    {
      "src": "string_literal [770,777]",
      "dest": "string_literal [772,779]"
    },
    {
      "src": "(: ( [3247,3248]",
      "dest": "(: ( [3150,3151]"
    },
    {
      "src": "internal: internal [2763,2771]",
      "dest": "internal: internal [1470,1478]"
    },
    {
      "src": "identifier: index [1958,1963]",
      "dest": "identifier: index [2346,2351]"
    },
    {
      "src": "type_name [1713,1720]",
      "dest": "type_name [2089,2096]"
    },
    {
      "src": "contract: contract [677,685]",
      "dest": "contract: contract [692,700]"
    },
    {
      "src": "string_literal [1988,2019]",
      "dest": "string_literal [2628,2657]"
    },
    {
      "src": "identifier: initializationSentinel [2844,2866]",
      "dest": "identifier: initializationSentinel [2746,2768]"
    },
    {
      "src": "number_literal: 0 [3171,3172]",
      "dest": "number_literal: 0 [3074,3075]"
    },
    {
      "src": "identifier: id [1897,1899]",
      "dest": "identifier: id [2285,2287]"
    },
    {
      "src": "function_body [2891,3288]",
      "dest": "function_body [2794,3191]"
    },
    {
      "src": "{: { [1776,1777]",
      "dest": "{: { [2162,2163]"
    },
    {
      "src": "assignment_expression [1983,2019]",
      "dest": "assignment_expression [2623,2657]"
    },
    {
      "src": "expression_statement [1815,1852]",
      "dest": "expression_statement [2202,2239]"
    },
    {
      "src": "primitive_type [1758,1764]",
      "dest": "primitive_type [2144,2150]"
    },
    {
      "src": "state_mutability [2250,2254]",
      "dest": "state_mutability [1696,1700]"
    },
    {
      "src": "}: } [2185,2186]",
      "dest": "}: } [1636,1637]"
    },
    {
      "src": "=: = [1165,1166]",
      "dest": "=: = [1214,1215]"
    },
    {
      "src": "type_name [2409,2416]",
      "dest": "type_name [1670,1677]"
    },
    {
      "src": "comment: // Salt for a 7 bit unique spread of all relevant selectors. Pre-calculated. [828,904]",
      "dest": "comment: // Salt for a 8 bit unique spread of all relevant selectors. Pre-caclulated. [786,862]"
    },
    {
      "src": "\": \" [2057,2058]",
      "dest": "\": \" [2695,2696]"
    },
    {
      "src": "\": \" [776,777]",
      "dest": "\": \" [778,779]"
    },
    {
      "src": "function_definition [1686,2093]",
      "dest": "function_definition [2062,2731]"
    },
    {
      "src": "identifier: REVERT_MSG [2915,2925]",
      "dest": "identifier: REVERT_MSG [2818,2828]"
    },
    {
      "src": "number_literal: 0 [3216,3217]",
      "dest": "number_literal: 0 [3119,3120]"
    },
    {
      "src": "public: public [744,750]",
      "dest": "public: public [746,752]"
    },
    {
      "src": "assignment_expression [1897,1937]",
      "dest": "assignment_expression [2285,2325]"
    },
    {
      "src": "number_literal: 0 [3120,3121]",
      "dest": "number_literal: 0 [3023,3024]"
    },
    {
      "src": "return_type_definition [2143,2160]",
      "dest": "return_type_definition [1586,1602]"
    },
    {
      "src": "\": \" [2928,2929]",
      "dest": "\": \" [2831,2832]"
    },
    {
      "src": "(: ( [2151,2152]",
      "dest": "(: ( [1593,1594]"
    },
    {
      "src": "call_argument [3152,3172]",
      "dest": "call_argument [3055,3075]"
    },
    {
      "src": "): ) [3184,3185]",
      "dest": "): ) [3087,3088]"
    },
    {
      "src": "}: } [1947,1948]",
      "dest": "}: } [2335,2336]"
    },
    {
      "src": "returns: returns [2143,2150]",
      "dest": "returns: returns [1586,1593]"
    },
    {
      "src": "expression_statement [1983,2020]",
      "dest": "expression_statement [2623,2658]"
    },
    {
      "src": "identifier: index [1721,1726]",
      "dest": "identifier: index [2097,2102]"
    },
    {
      "src": "if_statement [1954,2087]",
      "dest": "if_statement [2593,2725]"
    },
    {
      "src": "constant: constant [751,759]",
      "dest": "constant: constant [753,761]"
    },
    {
      "src": "import_directive [647,675]",
      "dest": "import_directive [662,690]"
    },
    {
      "src": "solidity_version_comparison_operator [611,613]",
      "dest": "solidity_version_comparison_operator [651,653]"
    },
    {
      "src": "uint256: uint256 [2377,2384]",
      "dest": "uint256: uint256 [1287,1294]"
    },
    {
      "src": "==: == [1964,1966]",
      "dest": "==: == [2352,2354]"
    },
    {
      "src": "): ) [1882,1883]",
      "dest": "): ) [2523,2524]"
    },
    {
      "src": "string_literal [1902,1937]",
      "dest": "string_literal [2290,2325]"
    },
    {
      "src": "\": \" [2951,2952]",
      "dest": "\": \" [2854,2855]"
    },
    {
      "src": "==: == [1796,1798]",
      "dest": "==: == [2182,2184]"
    },
    {
      "src": "\": \" [770,771]",
      "dest": "\": \" [772,773]"
    },
    {
      "src": "call_argument [3174,3184]",
      "dest": "call_argument [3077,3087]"
    },
    {
      "src": "}: } [1861,1862]",
      "dest": "}: } [2248,2249]"
    },
    {
      "src": "(: ( [3106,3107]",
      "dest": "(: ( [3009,3010]"
    },
    {
      "src": "(: ( [1712,1713]",
      "dest": "(: ( [2088,2089]"
    },
    {
      "src": "internal: internal [2129,2137]",
      "dest": "internal: internal [1563,1571]"
    },
    {
      "src": "function_body [2161,2186]",
      "dest": "function_body [1603,1637]"
    },
    {
      "src": "comment: // ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ---------- [909,992]",
      "dest": "comment: // ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ---------- [867,950]"
    },
    {
      "src": "binary_expression [1790,1800]",
      "dest": "binary_expression [2176,2186]"
    },
    {
      "src": "): ) [1726,1727]",
      "dest": "): ) [2102,2103]"
    },
    {
      "src": "(: ( [2866,2867]",
      "dest": "(: ( [2768,2769]"
    },
    {
      "src": "expression_statement [3144,3186]",
      "dest": "expression_statement [3047,3089]"
    },
    {
      "src": "revert_statement [2050,2077]",
      "dest": "revert_statement [2688,2715]"
    },
    {
      "src": "=: = [2926,2927]",
      "dest": "=: = [2829,2830]"
    },
    {
      "src": "else: else [2031,2035]",
      "dest": "else: else [2669,2673]"
    },
    {
      "src": "number_literal: 1 [1799,1800]",
      "dest": "number_literal: 1 [2185,2186]"
    },
    {
      "src": "pure: pure [2138,2142]",
      "dest": "pure: pure [1572,1576]"
    },
    {
      "src": "string: string [1758,1764]",
      "dest": "string: string [2144,2150]"
    },
    {
      "src": "comment: // ---------- End of auto-generated code. ---------- [1239,1291]",
      "dest": "comment: // ---------- End of auto-generated code. ---------- [1382,1434]"
    },
    {
      "src": "string [1636,1672]",
      "dest": "string [2027,2048]"
    },
    {
      "src": "type_name [997,1004]",
      "dest": "type_name [996,1003]"
    },
    {
      "src": "internal: internal [2241,2249]",
      "dest": "internal: internal [2112,2120]"
    },
    {
      "src": "\": \" [1936,1937]",
      "dest": "\": \" [2324,2325]"
    },
    {
      "src": "contract_declaration [677,3290]",
      "dest": "contract_declaration [692,3193]"
    },
    {
      "src": "identifier: require [3240,3247]",
      "dest": "identifier: require [3143,3150]"
    },
    {
      "src": "type_name [2152,2159]",
      "dest": "type_name [1594,1601]"
    },
    {
      "src": "source_file [0,3291]",
      "dest": "source_file [0,3194]"
    },
    {
      "src": "identifier: MAGIC_SALT [1014,1024]",
      "dest": "identifier: IDX_MAP_0 [1013,1022]"
    },
    {
      "src": "number_literal: 45733 [1027,1032]",
      "dest": "number_literal: 0x110200000021000030000005000020015200500020500200002020220000 [1025,1087]"
    },
    {
      "src": "comment: // This initializer sets roots etc. It must not be applied twice. [2962,3027]",
      "dest": "comment: // This initializer sets roots etc. It must not be applied twice. [2865,2930]"
    },
    {
      "src": "identifier: id [1983,1985]",
      "dest": "identifier: id [2623,2625]"
    },
    {
      "src": "parameter [1713,1726]",
      "dest": "parameter [2089,2102]"
    },
    {
      "src": "state_variable_declaration [737,778]",
      "dest": "state_variable_declaration [739,780]"
    },
    {
      "src": "uint256: uint256 [1038,1045]",
      "dest": "uint256: uint256 [1093,1100]"
    },
    {
      "src": "parenthesized_expression [2056,2076]",
      "dest": "parenthesized_expression [2694,2714]"
    },
    {
      "src": "{: { [2161,2162]",
      "dest": "{: { [1603,1604]"
    },
    {
      "src": "}: } [2029,2030]",
      "dest": "}: } [2667,2668]"
    },
    {
      "src": "(: ( [2126,2127]",
      "dest": "(: ( [1560,1561]"
    },
    {
      "src": "): ) [1774,1775]",
      "dest": "): ) [2160,2161]"
    },
    {
      "src": "return_statement [2171,2180]",
      "dest": "return_statement [1613,1631]"
    },
    {
      "src": ",: , [3268,3269]",
      "dest": ",: , [3171,3172]"
    },
    {
      "src": "call_expression [3195,3230]",
      "dest": "call_expression [3098,3133]"
    },
    {
      "src": "state_variable_declaration [784,822]",
      "dest": "state_variable_declaration [955,991]"
    },
    {
      "src": ",: , [3172,3173]",
      "dest": ",: , [3075,3076]"
    },
    {
      "src": "identifier: require [3195,3202]",
      "dest": "identifier: require [3098,3105]"
    },
    {
      "src": "return_type_definition [1749,1775]",
      "dest": "return_type_definition [2135,2161]"
    },
    {
      "src": "==: == [1878,1880]",
      "dest": "==: == [2265,2267]"
    },
    {
      "src": "identifier: getNumSubcontracts [2108,2126]",
      "dest": "identifier: magicSalt [1551,1560]"
    },
    {
      "src": "comment: /*   Copyright 2019,2020 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "dest": "comment: /*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]"
    },
    {
      "src": "binary_expression [1958,1968]",
      "dest": "binary_expression [2346,2356]"
    },
    {
      "src": "call_argument [3219,3229]",
      "dest": "call_argument [3122,3132]"
    },
    {
      "src": "string: string [737,743]",
      "dest": "string: string [739,745]"
    },
    {
      "src": "parameter [2152,2159]",
      "dest": "parameter [1594,1601]"
    },
    {
      "src": "string_literal [2057,2075]",
      "dest": "string_literal [2695,2713]"
    },
    {
      "src": "number_literal: 0 [3267,3268]",
      "dest": "number_literal: 0 [3170,3171]"
    },
    {
      "src": "block_statement [1883,1948]",
      "dest": "block_statement [2271,2336]"
    },
    {
      "src": "internal: internal [1367,1375]",
      "dest": "internal: internal [1687,1695]"
    },
    {
      "src": "returns: returns [1749,1756]",
      "dest": "returns: returns [2135,2142]"
    },
    {
      "src": "call_argument [3203,3217]",
      "dest": "call_argument [3106,3120]"
    },
    {
      "src": "call_argument [3107,3121]",
      "dest": "call_argument [3010,3024]"
    },
    {
      "src": "visibility [1367,1375]",
      "dest": "visibility [1687,1695]"
    },
    {
      "src": "return: return [2171,2177]",
      "dest": "return: return [1613,1619]"
    },
    {
      "src": "identifier: VERSION [760,767]",
      "dest": "identifier: VERSION [762,769]"
    },
    {
      "src": "identifier: REVERT_MSG [3219,3229]",
      "dest": "identifier: REVERT_MSG [3122,3132]"
    },
    {
      "src": "string [2928,2952]",
      "dest": "string [2831,2855]"
    },
    {
      "src": "call_argument [3248,3268]",
      "dest": "call_argument [3151,3171]"
    },
    {
      "src": "(: ( [3151,3152]",
      "dest": "(: ( [3054,3055]"
    },
    {
      "src": "==: == [3117,3119]",
      "dest": "==: == [3020,3022]"
    },
    {
      "src": "identifier: orderRoot [3203,3212]",
      "dest": "identifier: orderRoot [3106,3115]"
    },
    {
      "src": "\": \" [673,674]",
      "dest": "\": \" [688,689]"
    },
    {
      "src": "primitive_type [1138,1145]",
      "dest": "primitive_type [1187,1194]"
    },
    {
      "src": "=: = [818,819]",
      "dest": "=: = [983,984]"
    },
    {
      "src": "block_statement [2036,2087]",
      "dest": "block_statement [2674,2725]"
    },
    {
      "src": "view: view [2886,2890]",
      "dest": "view: view [2780,2784]"
    },
    {
      "src": "): ) [3133,3134]",
      "dest": "): ) [3036,3037]"
    },
    {
      "src": "revert: revert [2050,2056]",
      "dest": "revert: revert [2688,2694]"
    },
    {
      "src": "string_literal [2928,2952]",
      "dest": "string_literal [2831,2855]"
    },
    {
      "src": "visibility [2129,2137]",
      "dest": "visibility [1563,1571]"
    },
    {
      "src": "binary_expression [3152,3172]",
      "dest": "binary_expression [3055,3075]"
    },
    {
      "src": "identifier: StarkExchange [686,699]",
      "dest": "identifier: StarkExchange [701,714]"
    },
    {
      "src": "uint256: uint256 [1138,1145]",
      "dest": "uint256: uint256 [1187,1194]"
    },
    {
      "src": "identifier: REVERT_MSG [3123,3133]",
      "dest": "identifier: REVERT_MSG [3026,3036]"
    },
    {
      "src": "string_literal [1636,1672]",
      "dest": "string_literal [2027,2048]"
    },
    {
      "src": "internal: internal [2877,2885]",
      "dest": "internal: internal [2771,2779]"
    },
    {
      "src": "identifier: vaultRoot [3107,3116]",
      "dest": "identifier: vaultRoot [3010,3019]"
    },
    {
      "src": "function: function [2835,2843]",
      "dest": "function: function [2737,2745]"
    },
    {
      "src": "}: } [2086,2087]",
      "dest": "}: } [2724,2725]"
    },
    {
      "src": "binary_expression [1872,1882]",
      "dest": "binary_expression [2259,2269]"
    },
    {
      "src": "\": \" [1850,1851]",
      "dest": "\": \" [2237,2238]"
    },
    {
      "src": "uint256: uint256 [784,791]",
      "dest": "uint256: uint256 [955,962]"
    },
    {
      "src": "type_name [1138,1145]",
      "dest": "type_name [1187,1194]"
    },
    {
      "src": "visibility [2241,2249]",
      "dest": "visibility [2112,2120]"
    },
    {
      "src": "pure: pure [1376,1380]",
      "dest": "pure: pure [1479,1483]"
    },
    {
      "src": "primitive_type [2377,2384]",
      "dest": "primitive_type [1287,1294]"
    },
    {
      "src": "binary_expression [3248,3268]",
      "dest": "binary_expression [3151,3171]"
    },
    {
      "src": "if: if [1954,1956]",
      "dest": "if: if [2593,2595]"
    },
    {
      "src": "): ) [1968,1969]",
      "dest": "): ) [2607,2608]"
    },
    {
      "src": "primitive_type [1713,1720]",
      "dest": "primitive_type [2089,2096]"
    },
    {
      "src": "==: == [3168,3170]",
      "dest": "==: == [3071,3073]"
    },
    {
      "src": "type_name [2377,2384]",
      "dest": "type_name [1287,1294]"
    },
    {
      "src": "primitive_type [2152,2159]",
      "dest": "primitive_type [1594,1601]"
    },
    {
      "src": ",: , [3121,3122]",
      "dest": ",: , [3024,3025]"
    },
    {
      "src": "else: else [1949,1953]",
      "dest": "else: else [2588,2592]"
    },
    {
      "src": "identifier: id [1815,1817]",
      "dest": "identifier: id [2202,2204]"
    },
    {
      "src": "call_expression [3099,3134]",
      "dest": "call_expression [3002,3037]"
    },
    {
      "src": "state_mutability [1376,1380]",
      "dest": "state_mutability [1479,1483]"
    },
    {
      "src": "memory: memory [1765,1771]",
      "dest": "memory: memory [2151,2157]"
    },
    {
      "src": "{: { [2891,2892]",
      "dest": "{: { [2794,2795]"
    },
    {
      "src": "(: ( [3202,3203]",
      "dest": "(: ( [3105,3106]"
    },
    {
      "src": "if_statement [1786,2087]",
      "dest": "if_statement [2172,2725]"
    },
    {
      "src": "comment: // I.e. it can run only when the state is still empty. [3036,3090]",
      "dest": "comment: // I.e. it can run only when the state is still empty. [2939,2993]"
    },
    {
      "src": "identifier: index [1790,1795]",
      "dest": "identifier: index [2176,2181]"
    },
    {
      "src": "visibility [2877,2885]",
      "dest": "visibility [2771,2779]"
    },
    {
      "src": "=: = [1065,1066]",
      "dest": "=: = [1120,1121]"
    },
    {
      "src": "solidity_version: 0.5.2 [613,618]",
      "dest": "solidity_version: 0.6.11 [653,659]"
    },
    {
      "src": "string [1820,1851]",
      "dest": "string [2207,2238]"
    },
    {
      "src": "constant: constant [1146,1154]",
      "dest": "constant: constant [1195,1203]"
    },
    {
      "src": "constant: constant [1005,1013]",
      "dest": "constant: constant [1004,1012]"
    },
    {
      "src": "string [1988,2019]",
      "dest": "string [2628,2657]"
    },
    {
      "src": "primitive_type [737,743]",
      "dest": "primitive_type [739,745]"
    },
    {
      "src": "if_statement [1868,2087]",
      "dest": "if_statement [2509,2725]"
    },
    {
      "src": "\": \" [1988,1989]",
      "dest": "\": \" [2628,2629]"
    },
    {
      "src": "identifier: IDX_MAP_0 [1055,1064]",
      "dest": "identifier: IDX_MAP_1 [1110,1119]"
    },
    {
      "src": "pragma_directive [596,619]",
      "dest": "pragma_directive [636,660]"
    },
    {
      "src": "primitive_type [2901,2907]",
      "dest": "primitive_type [2804,2810]"
    },
    {
      "src": "binary_expression [3107,3121]",
      "dest": "binary_expression [3010,3024]"
    },
    {
      "src": "}: } [2092,2093]",
      "dest": "}: } [2730,2731]"
    },
    {
      "src": "{: { [1801,1802]",
      "dest": "{: { [2188,2189]"
    },
    {
      "src": "(: ( [1789,1790]",
      "dest": "(: ( [2175,2176]"
    },
    {
      "src": "}: } [3289,3290]",
      "dest": "}: } [3192,3193]"
    },
    {
      "src": "{: { [1969,1970]",
      "dest": "{: { [2609,2610]"
    },
    {
      "src": "): ) [3280,3281]",
      "dest": "): ) [3183,3184]"
    },
    {
      "src": "\": \" [654,655]",
      "dest": "\": \" [669,670]"
    },
    {
      "src": "parameter [1758,1774]",
      "dest": "parameter [2144,2160]"
    },
    {
      "src": "=: = [1900,1901]",
      "dest": "=: = [2288,2289]"
    },
    {
      "src": "number_literal: 0x2100003002200010003000000300100220220203000020000101022100011100 [1167,1233]",
      "dest": "number_literal: 0x100230002000000020032200261550025010000100102002003020010000030 [1216,1281]"
    },
    {
      "src": "if: if [1786,1788]",
      "dest": "if: if [2172,2174]"
    },
    {
      "src": "call_argument [3270,3280]",
      "dest": "call_argument [3173,3183]"
    },
    {
      "src": "call_expression [3144,3185]",
      "dest": "call_expression [3047,3088]"
    },
    {
      "src": "contract_body [731,3290]",
      "dest": "contract_body [733,3193]"
    },
    {
      "src": "function_definition [2835,3288]",
      "dest": "function_definition [2737,3191]"
    },
    {
      "src": "(: ( [2056,2057]",
      "dest": "(: ( [2694,2695]"
    },
    {
      "src": "identifier: require [3144,3151]",
      "dest": "identifier: require [3047,3054]"
    },
    {
      "src": "primitive_type [2409,2416]",
      "dest": "primitive_type [1670,1677]"
    },
    {
      "src": "type_name [1758,1764]",
      "dest": "type_name [2144,2150]"
    },
    {
      "src": "identifier: id [1772,1774]",
      "dest": "identifier: id [2158,2160]"
    },
    {
      "src": "identifier: index [1872,1877]",
      "dest": "identifier: index [2259,2264]"
    },
    {
      "src": "call_expression [3240,3281]",
      "dest": "call_expression [3143,3184]"
    },
    {
      "src": "{: { [1883,1884]",
      "dest": "{: { [2271,2272]"
    },
    {
      "src": "string [2057,2075]",
      "dest": "string [2695,2713]"
    },
    {
      "src": "state_mutability [2886,2890]",
      "dest": "state_mutability [2780,2784]"
    },
    {
      "src": "uint256: uint256 [2409,2416]",
      "dest": "uint256: uint256 [1670,1677]"
    },
    {
      "src": "user_defined_type [716,730]",
      "dest": "user_defined_type [718,732]"
    },
    {
      "src": "): ) [2159,2160]",
      "dest": "): ) [1601,1602]"
    },
    {
      "src": "\": \" [2018,2019]",
      "dest": "\": \" [2656,2657]"
    },
    {
      "src": "identifier: MainDispatcher [716,730]",
      "dest": "identifier: MainDispatcher [718,732]"
    },
    {
      "src": "constant: constant [792,800]",
      "dest": "constant: constant [963,971]"
    },
    {
      "src": "type_name [784,791]",
      "dest": "type_name [955,962]"
    },
    {
      "src": "else: else [1863,1867]",
      "dest": "else: else [2250,2254]"
    },
    {
      "src": "block_statement [1801,1862]",
      "dest": "block_statement [2188,2249]"
    },
    {
      "src": "solidity: solidity [603,611]",
      "dest": "solidity: solidity [643,651]"
    },
    {
      "src": "visibility [744,750]",
      "dest": "visibility [746,752]"
    },
    {
      "src": "identifier: REVERT_MSG [3270,3280]",
      "dest": "identifier: REVERT_MSG [3173,3183]"
    },
    {
      "src": "view: view [2250,2254]",
      "dest": "view: view [1696,1700]"
    },
    {
      "src": "constant: constant [1046,1054]",
      "dest": "constant: constant [1101,1109]"
    },
    {
      "src": "state_mutability [1744,1748]",
      "dest": "state_mutability [2121,2125]"
    },
    {
      "src": "state_variable_declaration [1138,1234]",
      "dest": "state_variable_declaration [1187,1282]"
    },
    {
      "src": "variable_declaration_statement [2901,2953]",
      "dest": "variable_declaration_statement [2804,2856]"
    },
    {
      "src": "inheritance_specifier [716,730]",
      "dest": "inheritance_specifier [718,732]"
    },
    {
      "src": "primitive_type [784,791]",
      "dest": "primitive_type [955,962]"
    },
    {
      "src": "\": \" [1902,1903]",
      "dest": "\": \" [2290,2291]"
    },
    {
      "src": "number_literal: 2 [1881,1882]",
      "dest": "number_literal: 2 [2268,2269]"
    },
    {
      "src": "type_name [1038,1045]",
      "dest": "type_name [1093,1100]"
    },
    {
      "src": "}: } [3287,3288]",
      "dest": "}: } [3190,3191]"
    },
    {
      "src": "\": \" [1671,1672]",
      "dest": "\": \" [2047,2048]"
    },
    {
      "src": "=: = [768,769]",
      "dest": "=: = [770,771]"
    },
    {
      "src": "{: { [2036,2037]",
      "dest": "{: { [2674,2675]"
    },
    {
      "src": "expression_statement [3099,3135]",
      "dest": "expression_statement [3002,3038]"
    },
    {
      "src": "identifier: vaultTreeHeight [3152,3167]",
      "dest": "identifier: vaultTreeHeight [3055,3070]"
    },
    {
      "src": "=: = [1818,1819]",
      "dest": "=: = [2205,2206]"
    },
    {
      "src": "\": \" [2074,2075]",
      "dest": "\": \" [2712,2713]"
    },
    {
      "src": "type_name [2901,2907]",
      "dest": "type_name [2804,2810]"
    },
    {
      "src": "uint256: uint256 [2152,2159]",
      "dest": "uint256: uint256 [1594,1601]"
    },
    {
      "src": "string [654,674]",
      "dest": "string [669,689]"
    },
    {
      "src": "visibility [2763,2771]",
      "dest": "visibility [1470,1478]"
    },
    {
      "src": "memory: memory [2908,2914]",
      "dest": "memory: memory [2811,2817]"
    },
    {
      "src": "state_variable_declaration [1038,1133]",
      "dest": "state_variable_declaration [1093,1182]"
    },
    {
      "src": "): ) [1800,1801]",
      "dest": "): ) [2186,2187]"
    },
    {
      "src": "uint256: uint256 [1713,1720]",
      "dest": "uint256: uint256 [2089,2096]"
    },
    {
      "src": "import: import [647,653]",
      "dest": "import: import [662,668]"
    },
    {
      "src": "=: = [1986,1987]",
      "dest": "=: = [2626,2627]"
    },
    {
      "src": "string [1902,1937]",
      "dest": "string [2290,2325]"
    },
    {
      "src": "if: if [1868,1870]",
      "dest": "if: if [2509,2511]"
    },
    {
      "src": "(: ( [1957,1958]",
      "dest": "(: ( [2596,2597]"
    },
    {
      "src": "function: function [1686,1694]",
      "dest": "function: function [2062,2070]"
    },
    {
      "src": "binary_expression [3203,3217]",
      "dest": "binary_expression [3106,3120]"
    },
    {
      "src": ",: , [3217,3218]",
      "dest": ",: , [3120,3121]"
    },
    {
      "src": "string: string [2901,2907]",
      "dest": "string: string [2804,2810]"
    },
    {
      "src": "primitive_type [1038,1045]",
      "dest": "primitive_type [1093,1100]"
    },
    {
      "src": "type_name [737,743]",
      "dest": "type_name [739,745]"
    },
    {
      "src": "expression_statement [3240,3282]",
      "dest": "expression_statement [3143,3185]"
    },
    {
      "src": "==: == [3264,3266]",
      "dest": "==: == [3167,3169]"
    },
    {
      "src": "): ) [2075,2076]",
      "dest": "): ) [2713,2714]"
    },
    {
      "src": "state_variable_declaration [997,1033]",
      "dest": "state_variable_declaration [996,1088]"
    },
    {
      "src": "^:  ^ [611,613]",
      "dest": "^:  ^ [651,653]"
    },
    {
      "src": "(: ( [1757,1758]",
      "dest": "(: ( [2143,2144]"
    },
    {
      "src": "): ) [2867,2868]",
      "dest": "): ) [2769,2770]"
    },
    {
      "src": "function_definition [2099,2186]",
      "dest": "function_definition [1542,1637]"
    },
    {
      "src": "solidity_pragma_token [603,618]",
      "dest": "solidity_pragma_token [643,659]"
    },
    {
      "src": "): ) [2127,2128]",
      "dest": "): ) [1561,1562]"
    },
    {
      "src": "number_literal: 0x201220230201001000221220210222000000020303010211122120200003002 [1067,1132]",
      "dest": "number_literal: 0x200200032001330010000101000203000003120201405000200010000 [1122,1181]"
    },
    {
      "src": "pure: pure [1744,1748]",
      "dest": "pure: pure [2121,2125]"
    },
    {
      "src": "\": \" [1820,1821]",
      "dest": "\": \" [2207,2208]"
    },
    {
      "src": "uint256: uint256 [997,1004]",
      "dest": "uint256: uint256 [996,1003]"
    },
    {
      "src": "(: ( [1871,1872]",
      "dest": "(: ( [2512,2513]"
    },
    {
      "src": "identifier: expectedIdByIndex [1695,1712]",
      "dest": "identifier: expectedIdByIndex [2071,2088]"
    },
    {
      "src": "pragma: pragma [596,602]",
      "dest": "pragma: pragma [636,642]"
    },
    {
      "src": "is: is [700,702]",
      "dest": "is: is [715,717]"
    },
    {
      "src": "expression_statement [1897,1938]",
      "dest": "expression_statement [2285,2326]"
    },
    {
      "src": "number_literal: 3 [1967,1968]",
      "dest": "number_literal: 3 [2355,2356]"
    },
    {
      "src": "function_body [1776,2093]",
      "dest": "function_body [2162,2731]"
    },
    {
      "src": "assignment_expression [1815,1851]",
      "dest": "assignment_expression [2202,2238]"
    },
    {
      "src": "identifier: SUBCONTRACT_BITS [801,817]",
      "dest": "identifier: MAGIC_SALT [972,982]"
    },
    {
      "src": "identifier: IDX_MAP_1 [1155,1164]",
      "dest": "identifier: IDX_MAP_2 [1204,1213]"
    },
    {
      "src": "state_mutability [2138,2142]",
      "dest": "state_mutability [1572,1576]"
    },
    {
      "src": "string [770,777]",
      "dest": "string [772,779]"
    },
    {
      "src": "block_statement [1969,2030]",
      "dest": "block_statement [2609,2668]"
    }
  ],
  "actions": [
    {
      "action": "update-node",
      "tree": "comment: /*   Copyright 2019,2020 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "label": "/*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */"
    },
    {
      "action": "insert-node",
      "tree": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]",
      "parent": "source_file [0,3194]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "state_variable_declaration [784,822]",
      "parent": "contract_body [733,3193]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "function_definition [1686,2093]",
      "parent": "contract_body [733,3193]",
      "at": 11
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.5.2 [613,618]",
      "label": "0.6.11"
    },
    {
      "action": "update-node",
      "tree": "comment: // Salt for a 7 bit unique spread of all relevant selectors. Pre-calculated. [828,904]",
      "label": "// Salt for a 8 bit unique spread of all relevant selectors. Pre-caclulated."
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [1287,1377]",
      "parent": "contract_body [733,3193]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_definition [1440,1536]",
      "parent": "contract_body [733,3193]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function_definition [1643,2056]",
      "parent": "contract_body [733,3193]",
      "at": 12
    },
    {
      "action": "update-node",
      "tree": "identifier: SUBCONTRACT_BITS [801,817]",
      "label": "MAGIC_SALT"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 4 [820,821]",
      "label": "20188"
    },
    {
      "action": "update-node",
      "tree": "identifier: MAGIC_SALT [1014,1024]",
      "label": "IDX_MAP_0"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 45733 [1027,1032]",
      "label": "0x110200000021000030000005000020015200500020500200002020220000"
    },
    {
      "action": "update-node",
      "tree": "identifier: IDX_MAP_0 [1055,1064]",
      "label": "IDX_MAP_1"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 0x201220230201001000221220210222000000020303010211122120200003002 [1067,1132]",
      "label": "0x200200032001330010000101000203000003120201405000200010000"
    },
    {
      "action": "update-node",
      "tree": "identifier: IDX_MAP_1 [1155,1164]",
      "label": "IDX_MAP_2"
    },
    {
      "action": "update-node",
      "tree": "number_literal: 0x2100003002200010003000000300100220220203000020000101022100011100 [1167,1233]",
      "label": "0x100230002000000020032200261550025010000100102002003020010000030"
    },
    {
      "action": "move-tree",
      "tree": "type_name [2377,2384]",
      "parent": "state_variable_declaration [1287,1377]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "constant: constant [1295,1303]",
      "parent": "state_variable_declaration [1287,1377]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: IDX_MAP_3 [1304,1313]",
      "parent": "state_variable_declaration [1287,1377]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=: = [1314,1315]",
      "parent": "state_variable_declaration [1287,1377]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0x2001022000000001031050500102200001020200300004010100002002 [1316,1376]",
      "parent": "state_variable_declaration [1287,1377]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "function: function [1440,1448]",
      "parent": "function_definition [1440,1536]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: getNumSubcontracts [1449,1467]",
      "parent": "function_definition [1440,1536]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1467,1468]",
      "parent": "function_definition [1440,1536]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [1468,1469]",
      "parent": "function_definition [1440,1536]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "visibility [2763,2771]",
      "parent": "function_definition [1440,1536]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [1376,1380]",
      "parent": "function_definition [1440,1536]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [1484,1492]",
      "parent": "function_definition [1440,1536]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [1493,1510]",
      "parent": "function_definition [1440,1536]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "function_body [1511,1536]",
      "parent": "function_definition [1440,1536]",
      "at": 8
    },
    {
      "action": "update-node",
      "tree": "identifier: getNumSubcontracts [2108,2126]",
      "label": "magicSalt"
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [1577,1585]",
      "parent": "function_definition [1542,1637]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "function: function [1643,1651]",
      "parent": "function_definition [1643,2056]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: handlerMapSection [1652,1669]",
      "parent": "function_definition [1643,2056]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1669,1670]",
      "parent": "function_definition [1643,2056]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "parameter [1670,1685]",
      "parent": "function_definition [1643,2056]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [1685,1686]",
      "parent": "function_definition [1643,2056]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "visibility [1367,1375]",
      "parent": "function_definition [1643,2056]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "state_mutability [2250,2254]",
      "parent": "function_definition [1643,2056]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [1701,1709]",
      "parent": "function_definition [1643,2056]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "return_type_definition [1710,1726]",
      "parent": "function_definition [1643,2056]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [1727,2056]",
      "parent": "function_definition [1643,2056]",
      "at": 9
    },
    {
      "action": "move-tree",
      "tree": "visibility [2241,2249]",
      "parent": "function_definition [2062,2731]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [2126,2134]",
      "parent": "function_definition [2062,2731]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [2785,2793]",
      "parent": "function_definition [2737,3191]",
      "at": 6
    },
    {
      "action": "move-tree",
      "tree": "type_name [2409,2416]",
      "parent": "parameter [1670,1685]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: section [1678,1685]",
      "parent": "parameter [1670,1685]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "{: { [1727,1728]",
      "parent": "function_body [1727,2056]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "if_statement [1737,2011]",
      "parent": "function_body [1727,2056]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "revert_statement [2020,2050]",
      "parent": "function_body [1727,2056]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "}: } [2055,2056]",
      "parent": "function_body [1727,2056]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "identifier: MAGIC_SALT [1620,1630]",
      "parent": "return_statement [1613,1631]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "revert: revert [2020,2026]",
      "parent": "revert_statement [2020,2050]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "parenthesized_expression [2026,2049]",
      "parent": "revert_statement [2020,2050]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "if_statement [2255,2725]",
      "parent": "if_statement [2172,2725]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2026,2027]",
      "parent": "parenthesized_expression [2026,2049]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "string_literal [1636,1672]",
      "parent": "parenthesized_expression [2026,2049]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "): ) [2048,2049]",
      "parent": "parenthesized_expression [2026,2049]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "if: if [2255,2257]",
      "parent": "if_statement [2255,2725]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2258,2259]",
      "parent": "if_statement [2255,2725]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [1872,1882]",
      "parent": "if_statement [2255,2725]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [2269,2270]",
      "parent": "if_statement [2255,2725]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "block_statement [1883,1948]",
      "parent": "if_statement [2255,2725]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [2337,2341]",
      "parent": "if_statement [2255,2725]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "if_statement [2342,2725]",
      "parent": "if_statement [2255,2725]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "if: if [2342,2344]",
      "parent": "if_statement [2342,2725]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2345,2346]",
      "parent": "if_statement [2342,2725]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [1958,1968]",
      "parent": "if_statement [2342,2725]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [2356,2357]",
      "parent": "if_statement [2342,2725]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [2358,2419]",
      "parent": "if_statement [2342,2725]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [2420,2424]",
      "parent": "if_statement [2342,2725]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "if_statement [2425,2725]",
      "parent": "if_statement [2342,2725]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "if: if [2425,2427]",
      "parent": "if_statement [2425,2725]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2428,2429]",
      "parent": "if_statement [2425,2725]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [2429,2439]",
      "parent": "if_statement [2425,2725]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [2439,2440]",
      "parent": "if_statement [2425,2725]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [2441,2503]",
      "parent": "if_statement [2425,2725]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "else: else [2504,2508]",
      "parent": "if_statement [2425,2725]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "if_statement [1868,2087]",
      "parent": "if_statement [2425,2725]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [2513,2523]",
      "parent": "if_statement [2509,2725]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "block_statement [2525,2587]",
      "parent": "if_statement [2509,2725]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [2597,2607]",
      "parent": "if_statement [2593,2725]",
      "at": 2
    },
    {
      "action": "delete-tree",
      "tree": "import_directive [621,646]"
    },
    {
      "action": "delete-tree",
      "tree": "inheritance_specifier [703,714]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [714,715]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [1297,1305]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: validateSubContractIndex [1306,1330]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1330,1331]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [1331,1344]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1344,1345]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [1346,1365]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1365,1366]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [1380,1381]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [1390,1447]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [1456,1539]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [1548,1555]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [1555,1556]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [1569,1622]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [1622,1623]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [1636,1672]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [1672,1673]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [1548,1673]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [1548,1674]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [1679,1680]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [1380,1680]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [1297,1680]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 3 [2178,2179]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [1736,1743]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [2192,2200]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: getSubContract [2201,2215]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2215,2216]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [2216,2231]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [2231,2232]"
    },
    {
      "action": "delete-tree",
      "tree": "return_type_definition [2255,2272]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [2273,2274]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [2283,2368]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: subContractIdx [2385,2399]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [2377,2399]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [2377,2400]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: offset [2417,2423]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [2409,2423]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [2424,2425]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [2426,2459]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [2409,2460]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [2469,2632]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [2641,2677]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [2682,2683]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [2273,2683]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [2192,2683]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [2689,2697]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: setSubContractAddress [2698,2719]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [2719,2720]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [2720,2733]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [2733,2734]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [2735,2761]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [2761,2762]"
    },
    {
      "action": "delete-tree",
      "tree": "function_body [2772,2829]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [2689,2829]"
    }
  ]
}