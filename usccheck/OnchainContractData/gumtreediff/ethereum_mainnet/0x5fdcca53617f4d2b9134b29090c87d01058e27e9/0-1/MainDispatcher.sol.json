{
  "matches": [
    {
      "src": "identifier: externalInitializerAddr [10556,10579]",
      "dest": "identifier: subContractAddress [2047,2065]"
    },
    {
      "src": "type_name [805,812]",
      "dest": "type_name [1140,1147]"
    },
    {
      "src": "call_argument [10739,10758]",
      "dest": "call_argument [1440,1476]"
    },
    {
      "src": "primitive_type [6842,6849]",
      "dest": "primitive_type [1572,1579]"
    },
    {
      "src": "string: string [11883,11889]",
      "dest": "string: string [1067,1073]"
    },
    {
      "src": "inheritance_specifier [752,763]",
      "dest": "inheritance_specifier [758,769]"
    },
    {
      "src": "import_directive [675,695]",
      "dest": "import_directive [688,720]"
    },
    {
      "src": "uint256: uint256 [9090,9097]",
      "dest": "uint256: uint256 [1617,1624]"
    },
    {
      "src": "type_name [10589,10596]",
      "dest": "type_name [2024,2031]"
    },
    {
      "src": "address: address [6842,6849]",
      "dest": "address: address [1572,1579]"
    },
    {
      "src": "address: address [10548,10555]",
      "dest": "address: address [2039,2046]"
    },
    {
      "src": "primitive_type [5955,5962]",
      "dest": "primitive_type [933,940]"
    },
    {
      "src": ",: , [763,764]",
      "dest": ",: , [769,770]"
    },
    {
      "src": "is: is [749,751]",
      "dest": "is: is [755,757]"
    },
    {
      "src": "primitive_type [9090,9097]",
      "dest": "primitive_type [1617,1624]"
    },
    {
      "src": "type_name [5791,5798]",
      "dest": "type_name [1021,1028]"
    },
    {
      "src": "variable_declaration [5232,5253]",
      "dest": "variable_declaration [1686,1708]"
    },
    {
      "src": "^:  ^ [611,613]",
      "dest": "^:  ^ [651,653]"
    },
    {
      "src": "type_name [10948,10955]",
      "dest": "type_name [1125,1132]"
    },
    {
      "src": "pragma_directive [596,619]",
      "dest": "pragma_directive [636,660]"
    },
    {
      "src": "source_file [0,11912]",
      "dest": "source_file [0,2145]"
    },
    {
      "src": "primitive_type [5791,5798]",
      "dest": "primitive_type [1021,1028]"
    },
    {
      "src": "solidity_version: 0.5.2 [613,618]",
      "dest": "solidity_version: 0.6.11 [653,659]"
    },
    {
      "src": "parameter [10589,10605]",
      "dest": "parameter [2024,2037]"
    },
    {
      "src": "parameter [10548,10579]",
      "dest": "parameter [2039,2065]"
    },
    {
      "src": "uint256: uint256 [10948,10955]",
      "dest": "uint256: uint256 [1125,1132]"
    },
    {
      "src": "string: string [11822,11828]",
      "dest": "string: string [1194,1200]"
    },
    {
      "src": "primitive_type [10948,10955]",
      "dest": "primitive_type [1125,1132]"
    },
    {
      "src": "inheritance_specifier [765,777]",
      "dest": "inheritance_specifier [771,789]"
    },
    {
      "src": "string [682,694]",
      "dest": "string [695,719]"
    },
    {
      "src": "variable_declaration_statement [10862,10914]",
      "dest": "variable_declaration_statement [1718,1771]"
    },
    {
      "src": "primitive_type [10548,10555]",
      "dest": "primitive_type [2039,2046]"
    },
    {
      "src": "identifier: StorageSlots [765,777]",
      "dest": "identifier: MainDispatcherBase [771,789]"
    },
    {
      "src": "string [10739,10758]",
      "dest": "string [1440,1476]"
    },
    {
      "src": "\": \" [10739,10740]",
      "dest": "\": \" [1440,1441]"
    },
    {
      "src": "binary_expression [10886,10913]",
      "dest": "binary_expression [1735,1770]"
    },
    {
      "src": "\": \" [672,673]",
      "dest": "\": \" [685,686]"
    },
    {
      "src": "identifier: srcDataOffset [10870,10883]",
      "dest": "identifier: offset [1726,1732]"
    },
    {
      "src": "uint256: uint256 [11223,11230]",
      "dest": "uint256: uint256 [892,899]"
    },
    {
      "src": "type_name [6109,6116]",
      "dest": "type_name [980,987]"
    },
    {
      "src": "import_directive [649,674]",
      "dest": "import_directive [662,687]"
    },
    {
      "src": "primitive_type [5232,5239]",
      "dest": "primitive_type [1686,1693]"
    },
    {
      "src": "uint256: uint256 [10923,10930]",
      "dest": "uint256: uint256 [1591,1598]"
    },
    {
      "src": "\": \" [682,683]",
      "dest": "\": \" [695,696]"
    },
    {
      "src": "type_name [11223,11230]",
      "dest": "type_name [892,899]"
    },
    {
      "src": "primitive_type [6109,6116]",
      "dest": "primitive_type [980,987]"
    },
    {
      "src": "primitive_type [10923,10930]",
      "dest": "primitive_type [1591,1598]"
    },
    {
      "src": "uint256: uint256 [10589,10596]",
      "dest": "uint256: uint256 [2024,2031]"
    },
    {
      "src": "solidity: solidity [603,611]",
      "dest": "solidity: solidity [643,651]"
    },
    {
      "src": "contract_body [778,11911]",
      "dest": "contract_body [790,2144]"
    },
    {
      "src": "primitive_type [10589,10596]",
      "dest": "primitive_type [2024,2031]"
    },
    {
      "src": "string [656,673]",
      "dest": "string [669,686]"
    },
    {
      "src": "pragma: pragma [596,602]",
      "dest": "pragma: pragma [636,642]"
    },
    {
      "src": "\": \" [656,657]",
      "dest": "\": \" [669,670]"
    },
    {
      "src": "type_name [10862,10869]",
      "dest": "type_name [1718,1725]"
    },
    {
      "src": "primitive_type [11883,11889]",
      "dest": "primitive_type [1067,1073]"
    },
    {
      "src": "contract_declaration [725,11911]",
      "dest": "contract_declaration [722,2144]"
    },
    {
      "src": "=: = [10884,10885]",
      "dest": "=: = [1733,1734]"
    },
    {
      "src": "variable_declaration [10923,10938]",
      "dest": "variable_declaration [1591,1607]"
    },
    {
      "src": "\": \" [10757,10758]",
      "dest": "\": \" [1475,1476]"
    },
    {
      "src": "uint256: uint256 [6109,6116]",
      "dest": "uint256: uint256 [980,987]"
    },
    {
      "src": "uint256: uint256 [6234,6241]",
      "dest": "uint256: uint256 [797,804]"
    },
    {
      "src": "primitive_type [10862,10869]",
      "dest": "primitive_type [1718,1725]"
    },
    {
      "src": "uint256: uint256 [5955,5962]",
      "dest": "uint256: uint256 [933,940]"
    },
    {
      "src": "primitive_type [6234,6241]",
      "dest": "primitive_type [797,804]"
    },
    {
      "src": "primitive_type [805,812]",
      "dest": "primitive_type [1140,1147]"
    },
    {
      "src": "{: { [778,779]",
      "dest": "{: { [790,791]"
    },
    {
      "src": "uint256: uint256 [10862,10869]",
      "dest": "uint256: uint256 [1718,1725]"
    },
    {
      "src": "uint256: uint256 [5232,5239]",
      "dest": "uint256: uint256 [1686,1693]"
    },
    {
      "src": "address: address [805,812]",
      "dest": "address: address [1140,1147]"
    },
    {
      "src": "uint256: uint256 [5791,5798]",
      "dest": "uint256: uint256 [1021,1028]"
    },
    {
      "src": "string_literal [10739,10758]",
      "dest": "string_literal [1440,1476]"
    },
    {
      "src": "identifier: srcData [10931,10938]",
      "dest": "identifier: location [1599,1607]"
    },
    {
      "src": "type_name [6234,6241]",
      "dest": "type_name [797,804]"
    },
    {
      "src": "type_name [5955,5962]",
      "dest": "type_name [933,940]"
    },
    {
      "src": "comment: /*   Copyright 2019,2020 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "dest": "comment: /*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]"
    },
    {
      "src": "type_name [10548,10555]",
      "dest": "type_name [2039,2046]"
    },
    {
      "src": "user_defined_type [765,777]",
      "dest": "user_defined_type [771,789]"
    },
    {
      "src": "user_defined_type [752,763]",
      "dest": "user_defined_type [758,769]"
    },
    {
      "src": "solidity_version_comparison_operator [611,613]",
      "dest": "solidity_version_comparison_operator [651,653]"
    },
    {
      "src": "identifier: nSubContracts [5240,5253]",
      "dest": "identifier: subContractIdx [1694,1708]"
    },
    {
      "src": "}: } [11910,11911]",
      "dest": "}: } [2143,2144]"
    },
    {
      "src": "type_name [10923,10930]",
      "dest": "type_name [1591,1598]"
    },
    {
      "src": "contract: contract [725,733]",
      "dest": "contract: contract [731,739]"
    },
    {
      "src": "variable_declaration_statement [5232,5277]",
      "dest": "variable_declaration_statement [1686,1709]"
    },
    {
      "src": "type_name [5232,5239]",
      "dest": "type_name [1686,1693]"
    },
    {
      "src": "identifier: MainDispatcher [734,748]",
      "dest": "identifier: MainDispatcher [740,754]"
    },
    {
      "src": "import: import [649,655]",
      "dest": "import: import [662,668]"
    },
    {
      "src": "\": \" [693,694]",
      "dest": "\": \" [718,719]"
    },
    {
      "src": "primitive_type [11223,11230]",
      "dest": "primitive_type [892,899]"
    },
    {
      "src": "variable_declaration [10862,10883]",
      "dest": "variable_declaration [1718,1732]"
    },
    {
      "src": "import: import [675,681]",
      "dest": "import: import [688,694]"
    },
    {
      "src": "solidity_pragma_token [603,618]",
      "dest": "solidity_pragma_token [643,659]"
    },
    {
      "src": "primitive_type [11822,11828]",
      "dest": "primitive_type [1194,1200]"
    },
    {
      "src": "identifier: IDispatcher [752,763]",
      "dest": "identifier: MainStorage [758,769]"
    },
    {
      "src": "type_name [6842,6849]",
      "dest": "type_name [1572,1579]"
    },
    {
      "src": "identifier: dataSize [10597,10605]",
      "dest": "identifier: index [2032,2037]"
    }
  ],
  "actions": [
    {
      "action": "update-node",
      "tree": "comment: /*   Copyright 2019,2020 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */ [0,595]",
      "label": "/*   Copyright 2019-2021 StarkWare Industries Ltd.    Licensed under the Apache License, Version 2.0 (the \"License\").   You may not use this file except in compliance with the License.   You may obtain a copy of the License at    https://www.starkware.co/open-source-license/    Unless required by applicable law or agreed to in writing,   software distributed under the License is distributed on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions   and limitations under the License. */"
    },
    {
      "action": "insert-node",
      "tree": "comment: // SPDX-License-Identifier: Apache-2.0. [596,635]",
      "parent": "source_file [0,2145]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "abstract: abstract [722,730]",
      "parent": "contract_declaration [722,2144]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "solidity_version: 0.5.2 [613,618]",
      "label": "0.6.11"
    },
    {
      "action": "insert-node",
      "tree": "state_variable_declaration [797,835]",
      "parent": "contract_body [790,2144]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "function_definition [841,901]",
      "parent": "contract_body [790,2144]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "function_definition [906,989]",
      "parent": "contract_body [790,2144]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "function_definition [994,1085]",
      "parent": "contract_body [790,2144]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "function_definition [1091,1493]",
      "parent": "contract_body [790,2144]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "function_definition [1499,1987]",
      "parent": "contract_body [790,2144]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "function_definition [1993,2142]",
      "parent": "contract_body [790,2144]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: IDispatcher [752,763]",
      "label": "MainStorage"
    },
    {
      "action": "update-node",
      "tree": "identifier: StorageSlots [765,777]",
      "label": "MainDispatcherBase"
    },
    {
      "action": "move-tree",
      "tree": "type_name [6234,6241]",
      "parent": "state_variable_declaration [797,835]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "constant: constant [805,813]",
      "parent": "state_variable_declaration [797,835]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: SUBCONTRACT_BITS [814,830]",
      "parent": "state_variable_declaration [797,835]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "=: = [831,832]",
      "parent": "state_variable_declaration [797,835]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 4 [833,834]",
      "parent": "state_variable_declaration [797,835]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "function: function [841,849]",
      "parent": "function_definition [841,901]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: magicSalt [850,859]",
      "parent": "function_definition [841,901]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [859,860]",
      "parent": "function_definition [841,901]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [860,861]",
      "parent": "function_definition [841,901]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "visibility [862,870]",
      "parent": "function_definition [841,901]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [871,875]",
      "parent": "function_definition [841,901]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [876,883]",
      "parent": "function_definition [841,901]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "return_type_definition [884,900]",
      "parent": "function_definition [841,901]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "function: function [906,914]",
      "parent": "function_definition [906,989]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: handlerMapSection [915,932]",
      "parent": "function_definition [906,989]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [932,933]",
      "parent": "function_definition [906,989]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "parameter [933,948]",
      "parent": "function_definition [906,989]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [948,949]",
      "parent": "function_definition [906,989]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "visibility [950,958]",
      "parent": "function_definition [906,989]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [959,963]",
      "parent": "function_definition [906,989]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [964,971]",
      "parent": "function_definition [906,989]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "return_type_definition [972,988]",
      "parent": "function_definition [906,989]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [994,1002]",
      "parent": "function_definition [994,1085]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: expectedIdByIndex [1003,1020]",
      "parent": "function_definition [994,1085]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1020,1021]",
      "parent": "function_definition [994,1085]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "parameter [1021,1034]",
      "parent": "function_definition [994,1085]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [1034,1035]",
      "parent": "function_definition [994,1085]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "visibility [1036,1044]",
      "parent": "function_definition [994,1085]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [1045,1049]",
      "parent": "function_definition [994,1085]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "virtual: virtual [1050,1057]",
      "parent": "function_definition [994,1085]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "return_type_definition [1058,1084]",
      "parent": "function_definition [994,1085]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function: function [1091,1099]",
      "parent": "function_definition [1091,1493]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: validateSubContractIndex [1100,1124]",
      "parent": "function_definition [1091,1493]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1124,1125]",
      "parent": "function_definition [1091,1493]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "parameter [1125,1138]",
      "parent": "function_definition [1091,1493]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [1138,1139]",
      "parent": "function_definition [1091,1493]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "parameter [1140,1159]",
      "parent": "function_definition [1091,1493]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [1159,1160]",
      "parent": "function_definition [1091,1493]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "visibility [1161,1169]",
      "parent": "function_definition [1091,1493]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [1170,1174]",
      "parent": "function_definition [1091,1493]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [1175,1183]",
      "parent": "function_definition [1091,1493]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function_body [1184,1493]",
      "parent": "function_definition [1091,1493]",
      "at": 10
    },
    {
      "action": "insert-node",
      "tree": "function: function [1499,1507]",
      "parent": "function_definition [1499,1987]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: getSubContract [1508,1522]",
      "parent": "function_definition [1499,1987]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1522,1523]",
      "parent": "function_definition [1499,1987]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parameter [1523,1538]",
      "parent": "function_definition [1499,1987]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "): ) [1538,1539]",
      "parent": "function_definition [1499,1987]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "visibility [1540,1548]",
      "parent": "function_definition [1499,1987]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "state_mutability [1549,1553]",
      "parent": "function_definition [1499,1987]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [1554,1562]",
      "parent": "function_definition [1499,1987]",
      "at": 7
    },
    {
      "action": "insert-node",
      "tree": "return_type_definition [1563,1580]",
      "parent": "function_definition [1499,1987]",
      "at": 8
    },
    {
      "action": "insert-node",
      "tree": "function_body [1581,1987]",
      "parent": "function_definition [1499,1987]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "function: function [1993,2001]",
      "parent": "function_definition [1993,2142]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: setSubContractAddress [2002,2023]",
      "parent": "function_definition [1993,2142]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "(: ( [2023,2024]",
      "parent": "function_definition [1993,2142]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "parameter [10589,10605]",
      "parent": "function_definition [1993,2142]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": ",: , [2037,2038]",
      "parent": "function_definition [1993,2142]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "parameter [10548,10579]",
      "parent": "function_definition [1993,2142]",
      "at": 5
    },
    {
      "action": "insert-node",
      "tree": "): ) [2065,2066]",
      "parent": "function_definition [1993,2142]",
      "at": 6
    },
    {
      "action": "insert-tree",
      "tree": "visibility [2067,2075]",
      "parent": "function_definition [1993,2142]",
      "at": 7
    },
    {
      "action": "insert-tree",
      "tree": "override_specifier [2076,2084]",
      "parent": "function_definition [1993,2142]",
      "at": 8
    },
    {
      "action": "insert-tree",
      "tree": "function_body [2085,2142]",
      "parent": "function_definition [1993,2142]",
      "at": 9
    },
    {
      "action": "insert-node",
      "tree": "returns: returns [884,891]",
      "parent": "return_type_definition [884,900]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [891,892]",
      "parent": "return_type_definition [884,900]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "parameter [892,899]",
      "parent": "return_type_definition [884,900]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [899,900]",
      "parent": "return_type_definition [884,900]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [5955,5962]",
      "parent": "parameter [933,948]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: section [941,948]",
      "parent": "parameter [933,948]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "returns: returns [972,979]",
      "parent": "return_type_definition [972,988]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [979,980]",
      "parent": "return_type_definition [972,988]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "parameter [980,987]",
      "parent": "return_type_definition [972,988]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [987,988]",
      "parent": "return_type_definition [972,988]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [5791,5798]",
      "parent": "parameter [1021,1034]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: index [1029,1034]",
      "parent": "parameter [1021,1034]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "returns: returns [1058,1065]",
      "parent": "return_type_definition [1058,1084]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1066,1067]",
      "parent": "return_type_definition [1058,1084]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "parameter [1067,1083]",
      "parent": "return_type_definition [1058,1084]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [1083,1084]",
      "parent": "return_type_definition [1058,1084]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "type_name [10948,10955]",
      "parent": "parameter [1125,1138]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: index [1133,1138]",
      "parent": "parameter [1125,1138]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "type_name [805,812]",
      "parent": "parameter [1140,1159]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "identifier: subContract [1148,1159]",
      "parent": "parameter [1140,1159]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "{: { [1184,1185]",
      "parent": "function_body [1184,1493]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [1194,1251]",
      "parent": "function_body [1184,1493]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "variable_declaration_statement [1260,1343]",
      "parent": "function_body [1184,1493]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "expression_statement [1352,1487]",
      "parent": "function_body [1184,1493]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "}: } [1492,1493]",
      "parent": "function_body [1184,1493]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "returns: returns [1563,1570]",
      "parent": "return_type_definition [1563,1580]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1571,1572]",
      "parent": "return_type_definition [1563,1580]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "parameter [1572,1579]",
      "parent": "return_type_definition [1563,1580]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [1579,1580]",
      "parent": "return_type_definition [1563,1580]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "{: { [1581,1582]",
      "parent": "function_body [1581,1987]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration_statement [1591,1677]",
      "parent": "function_body [1581,1987]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [5232,5277]",
      "parent": "function_body [1581,1987]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration_statement [10862,10914]",
      "parent": "function_body [1581,1987]",
      "at": 3
    },
    {
      "action": "insert-node",
      "tree": "comment: // We have 64 locations in each register, hence the >>6 (i.e. location // 64). [1781,1859]",
      "parent": "function_body [1581,1987]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "expression_statement [1868,1936]",
      "parent": "function_body [1581,1987]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "return_statement [1945,1981]",
      "parent": "function_body [1581,1987]",
      "at": 6
    },
    {
      "action": "insert-node",
      "tree": "}: } [1986,1987]",
      "parent": "function_body [1581,1987]",
      "at": 7
    },
    {
      "action": "update-node",
      "tree": "identifier: dataSize [10597,10605]",
      "label": "index"
    },
    {
      "action": "update-node",
      "tree": "identifier: externalInitializerAddr [10556,10579]",
      "label": "subContractAddress"
    },
    {
      "action": "move-tree",
      "tree": "type_name [11223,11230]",
      "parent": "parameter [892,899]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "type_name [6109,6116]",
      "parent": "parameter [980,987]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_name [1067,1073]",
      "parent": "parameter [1067,1083]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "memory: memory [1074,1080]",
      "parent": "parameter [1067,1083]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: id [1081,1083]",
      "parent": "parameter [1067,1083]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "variable_declaration [1194,1210]",
      "parent": "variable_declaration_statement [1194,1251]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [1211,1212]",
      "parent": "variable_declaration_statement [1194,1251]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_expression [1213,1250]",
      "parent": "variable_declaration_statement [1194,1251]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "call_expression [1352,1486]",
      "parent": "expression_statement [1352,1487]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "type_name [6842,6849]",
      "parent": "parameter [1572,1579]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "variable_declaration [10923,10938]",
      "parent": "variable_declaration_statement [1591,1677]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "=: = [1608,1609]",
      "parent": "variable_declaration_statement [1591,1677]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "binary_expression [1610,1676]",
      "parent": "variable_declaration_statement [1591,1677]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [11883,11889]",
      "parent": "type_name [1067,1073]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "type_name [1194,1200]",
      "parent": "variable_declaration [1194,1210]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "memory: memory [1201,1207]",
      "parent": "variable_declaration [1194,1210]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "identifier: id [1208,1210]",
      "parent": "variable_declaration [1194,1210]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: require [1352,1359]",
      "parent": "call_expression [1352,1486]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1359,1360]",
      "parent": "call_expression [1352,1486]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [1373,1426]",
      "parent": "call_expression [1352,1486]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": ",: , [1426,1427]",
      "parent": "call_expression [1352,1486]",
      "at": 3
    },
    {
      "action": "move-tree",
      "tree": "call_argument [10739,10758]",
      "parent": "call_expression [1352,1486]",
      "at": 4
    },
    {
      "action": "insert-node",
      "tree": "): ) [1485,1486]",
      "parent": "call_expression [1352,1486]",
      "at": 5
    },
    {
      "action": "update-node",
      "tree": "identifier: srcData [10931,10938]",
      "label": "location"
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 0xFF [1610,1614]",
      "parent": "binary_expression [1610,1676]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "&: & [1615,1616]",
      "parent": "binary_expression [1610,1676]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "type_cast_expression [1617,1676]",
      "parent": "binary_expression [1610,1676]",
      "at": 2
    },
    {
      "action": "update-node",
      "tree": "identifier: nSubContracts [5240,5253]",
      "label": "subContractIdx"
    },
    {
      "action": "update-node",
      "tree": "identifier: srcDataOffset [10870,10883]",
      "label": "offset"
    },
    {
      "action": "insert-tree",
      "tree": "parenthesized_expression [1735,1764]",
      "parent": "binary_expression [1735,1770]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "%: % [1765,1766]",
      "parent": "binary_expression [1735,1770]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "number_literal: 256 [1767,1770]",
      "parent": "binary_expression [1735,1770]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [11822,11828]",
      "parent": "type_name [1194,1200]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "primitive_type [9090,9097]",
      "parent": "type_cast_expression [1617,1676]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "(: ( [1624,1625]",
      "parent": "type_cast_expression [1617,1676]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "call_argument [1625,1675]",
      "parent": "type_cast_expression [1617,1676]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "): ) [1675,1676]",
      "parent": "type_cast_expression [1617,1676]",
      "at": 3
    },
    {
      "action": "delete-tree",
      "tree": "import_directive [621,648]"
    },
    {
      "action": "delete-tree",
      "tree": "import_directive [696,722]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [5254,5255]"
    },
    {
      "action": "delete-tree",
      "tree": "call_expression [5256,5276]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [10886,10902]"
    },
    {
      "action": "delete-node",
      "tree": "-: - [10903,10904]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: dataSize [10905,10913]"
    },
    {
      "action": "delete-node",
      "tree": "using: using [785,790]"
    },
    {
      "action": "delete-tree",
      "tree": "type_alias [791,800]"
    },
    {
      "action": "delete-node",
      "tree": "for: for [801,804]"
    },
    {
      "action": "delete-node",
      "tree": "using_directive [785,813]"
    },
    {
      "action": "delete-tree",
      "tree": "fallback_receive_definition [819,1918]"
    },
    {
      "action": "delete-node",
      "tree": "comment: /*       1. Extract subcontracts.       2. Verify correct sub-contract initializer size.       3. Extract sub-contract initializer data.       4. Call sub-contract initializer.        The init data bytes passed to initialize are structed as following:       I. N slots (uin256 size) addresses of the deployed sub-contracts.       II. An address of an external initialization contract (optional, or ZERO_ADDRESS).       III. (Up to) N bytes sections of the sub-contracts initializers.        If already initialized (i.e. upgrade) we expect the init data to be consistent with this.       and if a different size of init data is expected when upgrading, the initializerSize should       reflect this.        If an external initializer contract is not used, ZERO_ADDRESS is passed in its slot.       If the external initializer contract is used, all the remaining init data is passed to it,       and internal initialization will not occur.        External Initialization Contract       --------------------------------       External Initialization Contract (EIC) is a hook for custom initialization.       Typically in an upgrade flow, the expected initialization contains only the addresses of       the sub-contracts. Normal initialization of the sub-contracts is such that is not needed       in an upgrade, and actually may be very dangerous, as changing of state on a working system       may corrupt it.        In the event that some state initialization is required, the EIC is a hook that allows this.       It may be deployed and called specifically for this purpose.        The address of the EIC must be provided (if at all) when a new implementation is added to       a Proxy contract (as part of the initialization vector).       Hence, it is considered part of the code open to reviewers prior to a time-locked upgrade.        When a custom initialization is performed using an EIC,       the main dispatcher initialize extracts and stores the sub-contracts addresses, and then       yields to the EIC, skipping the rest of its initialization code.         Flow of MainDispatcher initialize       ---------------------------------       1. Extraction and assignment of subcontracts addresses          Main dispatcher expects a valid and consistent set of addresses in the passed data.          It validates that, extracts the addresses from the data, and validates that the addresses          are of the expected type and order. Then those addresses are stored.        2. Extraction of EIC address          The address of the EIC is extracted from the data.          External Initializer Contract is optional. ZERO_ADDRESS indicates it is not used.        3a. EIC is used           Dispatcher calls the EIC initialize function with the remaining data.           Note - In this option 3b is not performed.        3b. EIC is not used           If there is additional initialization data then:           I. Sentitenl function is called to permit subcontracts initialization.           II. Dispatcher loops through the subcontracts and for each one it extracts the               initializing data and passes it to the subcontract's initialize function.      */ [1924,5093]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // NOLINTNEXTLINE: external-function. [5098,5135]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [5140,5148]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: initialize [5149,5159]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [5159,5160]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [5160,5177]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [5177,5178]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [5179,5185]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [5186,5187]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Number of sub-contracts. [5196,5223]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // We support currently 4 bits per contract, i.e. 16, reserving 00 leads to 15. [5287,5366]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [5375,5430]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Init data MUST include addresses for all sub-contracts. [5440,5498]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [5507,5586]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Ensure implementation is a valid contract. [5596,5641]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [5650,5715]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Size of passed data, excluding sub-contract addresses. [5725,5782]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: additionalDataSize [5799,5817]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [5791,5817]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [5818,5819]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [5820,5858]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [5791,5859]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Sum of subcontract initializers. Aggregated for verification near the end. [5869,5946]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: totalInitSizes [5963,5977]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [5955,5977]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [5978,5979]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [5980,5981]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [5955,5982]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Offset (within data) of sub-contract initializer vector. [5992,6051]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Just past the sub-contract addresses. [6060,6100]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: initDataContractsOffset [6117,6140]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [6109,6140]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [6141,6142]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [6143,6167]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [6109,6168]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // 1. Extract & update contract addresses. [6178,6220]"
    },
    {
      "action": "delete-node",
      "tree": "for: for [6229,6232]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [6233,6234]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: nContract [6242,6251]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [6234,6251]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [6252,6253]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 1 [6254,6255]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [6234,6256]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [6257,6284]"
    },
    {
      "action": "delete-tree",
      "tree": "update_expression [6285,6296]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [6296,6297]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [6298,6770]"
    },
    {
      "action": "delete-node",
      "tree": "for_statement [6229,6770]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Check if we have an external initializer contract. [6780,6833]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: externalInitializerAddr [6850,6873]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [6842,6873]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [6842,6874]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // 2. Extract sub-contract address, again. It's cheaper than reading from storage. [6884,6966]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // solium-disable-next-line security/no-inline-assembly [6975,7030]"
    },
    {
      "action": "delete-tree",
      "tree": "assembly_statement [7039,7147]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // 3(a). Yield to EIC initialization. [7157,7194]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [7203,7367]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // 3(b). Subcontracts initialization. [7377,7414]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // I. If no init data passed besides sub-contracts, return. [7423,7482]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [7491,7551]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Just to be on the safe side. [7561,7592]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [7601,7649]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // II. Gate further initialization. [7659,7694]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [7703,7728]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // III. Loops through the subcontracts, extracts their data and calls their initializer. [7738,7826]"
    },
    {
      "action": "delete-node",
      "tree": "for: for [7835,7838]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [7839,7840]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [7840,7862]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [7863,7890]"
    },
    {
      "action": "delete-tree",
      "tree": "update_expression [7891,7902]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [7902,7903]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [7904,7905]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [7918,7942]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Extract sub-contract address, again. It's cheaper than reading from storage. [7956,8035]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // solium-disable-next-line security/no-inline-assembly [8048,8103]"
    },
    {
      "action": "delete-tree",
      "tree": "assembly_statement [8116,8212]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // The initializerSize returns the expected size, with respect also to the state status. [8225,8313]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // i.e. different size if it's a first init (clean state) or upgrade init (alive state). [8326,8414]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // NOLINTNEXTLINE: calls-loop. [8427,8457]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // The initializerSize is called via delegatecall, so that it can relate to the state, [8471,8557]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // and not only to the new contract code. (e.g. return 0 if state-intialized else 192). [8570,8657]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // solium-disable-next-line security/no-low-level-calls [8670,8725]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // NOLINTNEXTLINE: reentrancy-events low-level-calls calls-loop. [8738,8802]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [8815,8984]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [8997,9034]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration [9047,9063]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [9064,9065]"
    },
    {
      "action": "delete-tree",
      "tree": "member_expression [9066,9076]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9076,9077]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [9077,9087]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [9087,9088]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [9089,9090]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9097,9098]"
    },
    {
      "action": "delete-node",
      "tree": "parenthesized_expression [9089,9098]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [9089,9098]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [9098,9099]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [9066,9099]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [9047,9100]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [9113,9181]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [9194,9279]"
    },
    {
      "action": "delete-tree",
      "tree": "if_statement [9293,9353]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Extract sub-contract init vector. [9367,9403]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [9416,9471]"
    },
    {
      "action": "delete-tree",
      "tree": "for_statement [9484,9878]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Call sub-contract initializer. [9892,9925]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // solium-disable-next-line security/no-low-level-calls [9938,9993]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // NOLINTNEXTLINE: low-level-calls. [10006,10041]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [10054,10208]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [10221,10258]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [10271,10298]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [10311,10347]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [10356,10357]"
    },
    {
      "action": "delete-node",
      "tree": "block_statement [7904,10357]"
    },
    {
      "action": "delete-node",
      "tree": "for_statement [7835,10357]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [10366,10467]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [10472,10473]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [5186,10473]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [5140,10473]"
    },
    {
      "action": "delete-node",
      "tree": "function: function [10479,10487]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: callExternalInitializer [10488,10511]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [10511,10512]"
    },
    {
      "action": "delete-tree",
      "tree": "parameter [10521,10538]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [10538,10539]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [10579,10580]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [10605,10606]"
    },
    {
      "action": "delete-tree",
      "tree": "visibility [10615,10622]"
    },
    {
      "action": "delete-node",
      "tree": "{: { [10623,10624]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [10633,10697]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [10706,10713]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [10713,10714]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [10714,10737]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [10737,10738]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [10758,10759]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [10706,10759]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [10706,10760]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [10769,10816]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Prepare memcpy pointers. [10826,10853]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [10923,10939]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: trgData [10956,10963]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [10948,10963]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [10948,10964]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // solium-disable-next-line security/no-inline-assembly [10974,11029]"
    },
    {
      "action": "delete-tree",
      "tree": "assembly_statement [11038,11150]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // Copy initializer data to be passed to the EIC. [11160,11209]"
    },
    {
      "action": "delete-node",
      "tree": "for: for [11218,11221]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11222,11223]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: seek [11231,11235]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration [11223,11235]"
    },
    {
      "action": "delete-node",
      "tree": "=: = [11236,11237]"
    },
    {
      "action": "delete-node",
      "tree": "number_literal: 0 [11238,11239]"
    },
    {
      "action": "delete-node",
      "tree": "variable_declaration_statement [11223,11240]"
    },
    {
      "action": "delete-tree",
      "tree": "expression_statement [11241,11257]"
    },
    {
      "action": "delete-tree",
      "tree": "augmented_assignment_expression [11258,11268]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11268,11269]"
    },
    {
      "action": "delete-tree",
      "tree": "block_statement [11270,11514]"
    },
    {
      "action": "delete-node",
      "tree": "for_statement [11218,11514]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // solium-disable-next-line security/no-low-level-calls [11524,11579]"
    },
    {
      "action": "delete-node",
      "tree": "comment: // NOLINTNEXTLINE: low-level-calls. [11588,11623]"
    },
    {
      "action": "delete-tree",
      "tree": "variable_declaration_statement [11632,11796]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [11805,11812]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11812,11813]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [11813,11820]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [11820,11821]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11828,11829]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [11829,11839]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11839,11840]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [11822,11840]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [11822,11840]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11840,11841]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [11805,11841]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [11805,11842]"
    },
    {
      "action": "delete-node",
      "tree": "identifier: require [11851,11858]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11858,11859]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [11859,11881]"
    },
    {
      "action": "delete-node",
      "tree": ",: , [11881,11882]"
    },
    {
      "action": "delete-node",
      "tree": "(: ( [11889,11890]"
    },
    {
      "action": "delete-tree",
      "tree": "call_argument [11890,11900]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11900,11901]"
    },
    {
      "action": "delete-node",
      "tree": "type_cast_expression [11883,11901]"
    },
    {
      "action": "delete-node",
      "tree": "call_argument [11883,11901]"
    },
    {
      "action": "delete-node",
      "tree": "): ) [11901,11902]"
    },
    {
      "action": "delete-node",
      "tree": "call_expression [11851,11902]"
    },
    {
      "action": "delete-node",
      "tree": "expression_statement [11851,11903]"
    },
    {
      "action": "delete-node",
      "tree": "}: } [11908,11909]"
    },
    {
      "action": "delete-node",
      "tree": "function_body [10623,11909]"
    },
    {
      "action": "delete-node",
      "tree": "function_definition [10479,11909]"
    }
  ]
}