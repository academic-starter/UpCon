{
  "matches": [
    {
      "src": "parameter [3022,3035]",
      "dest": "parameter [3022,3035]"
    },
    {
      "src": "): ) [3169,3170]",
      "dest": "): ) [3169,3170]"
    },
    {
      "src": "primitive_type [3791,3798]",
      "dest": "primitive_type [3791,3798]"
    },
    {
      "src": "bytes32: bytes32 [3791,3798]",
      "dest": "bytes32: bytes32 [3791,3798]"
    },
    {
      "src": "parameter [3501,3514]",
      "dest": "parameter [3501,3514]"
    },
    {
      "src": "(: ( [3765,3766]",
      "dest": "(: ( [3765,3766]"
    },
    {
      "src": "identifier: spender [3053,3060]",
      "dest": "identifier: spender [3053,3060]"
    },
    {
      "src": "return_type_definition [3530,3547]",
      "dest": "return_type_definition [3530,3547]"
    },
    {
      "src": "type_name [3539,3546]",
      "dest": "type_name [3539,3546]"
    },
    {
      "src": "view: view [3777,3781]",
      "dest": "view: view [3777,3781]"
    },
    {
      "src": "address: address [3045,3052]",
      "dest": "address: address [3045,3052]"
    },
    {
      "src": "(: ( [3500,3501]",
      "dest": "(: ( [3500,3501]"
    },
    {
      "src": "{: { [2136,2137]",
      "dest": "{: { [2136,2137]"
    },
    {
      "src": "primitive_type [3119,3124]",
      "dest": "primitive_type [3119,3124]"
    },
    {
      "src": "type_name [3045,3052]",
      "dest": "type_name [3045,3052]"
    },
    {
      "src": "uint256: uint256 [3539,3546]",
      "dest": "uint256: uint256 [3539,3546]"
    },
    {
      "src": "identifier: s [3163,3164]",
      "dest": "identifier: s [3163,3164]"
    },
    {
      "src": "contract_body [2136,3802]",
      "dest": "contract_body [2136,3802]"
    },
    {
      "src": "parameter [3791,3798]",
      "dest": "parameter [3791,3798]"
    },
    {
      "src": "parameter [3119,3126]",
      "dest": "parameter [3119,3126]"
    },
    {
      "src": "returns: returns [3530,3537]",
      "dest": "returns: returns [3530,3537]"
    },
    {
      "src": "identifier: IERC20Permit [2123,2135]",
      "dest": "identifier: IERC20Permit [2123,2135]"
    },
    {
      "src": "interface: interface [2113,2122]",
      "dest": "interface: interface [2113,2122]"
    },
    {
      "src": "comment: // solhint-disable-next-line func-name-mixedcase [3687,3735]",
      "dest": "comment: // solhint-disable-next-line func-name-mixedcase [3687,3735]"
    },
    {
      "src": "interface_declaration [2113,3802]",
      "dest": "interface_declaration [2113,3802]"
    },
    {
      "src": "parameter [3045,3060]",
      "dest": "parameter [3045,3060]"
    },
    {
      "src": "primitive_type [3155,3162]",
      "dest": "primitive_type [3155,3162]"
    },
    {
      "src": "comment: // SPDX-License-Identifier: MIT [0,31]",
      "dest": "comment: // SPDX-License-Identifier: MIT [0,31]"
    },
    {
      "src": "identifier: permit [3006,3012]",
      "dest": "identifier: permit [3006,3012]"
    },
    {
      "src": "solidity_version: 0.8.20 [140,146]",
      "dest": "solidity_version: 0.8.20 [140,146]"
    },
    {
      "src": "primitive_type [3093,3100]",
      "dest": "primitive_type [3093,3100]"
    },
    {
      "src": "type_name [3136,3143]",
      "dest": "type_name [3136,3143]"
    },
    {
      "src": "): ) [3766,3767]",
      "dest": "): ) [3766,3767]"
    },
    {
      "src": "identifier: nonces [3494,3500]",
      "dest": "identifier: nonces [3494,3500]"
    },
    {
      "src": ",: , [3145,3146]",
      "dest": ",: , [3145,3146]"
    },
    {
      "src": "identifier: v [3125,3126]",
      "dest": "identifier: v [3125,3126]"
    },
    {
      "src": "external: external [3516,3524]",
      "dest": "external: external [3516,3524]"
    },
    {
      "src": "primitive_type [3539,3546]",
      "dest": "primitive_type [3539,3546]"
    },
    {
      "src": ",: , [3060,3061]",
      "dest": ",: , [3060,3061]"
    },
    {
      "src": "comment: /**      * @dev Returns the current nonce for `owner`. This value must be      * included whenever a signature is generated for {permit}.      *      * Every successful call to {permit} increases ``owner``'s nonce by one. This      * prevents a signature from being used multiple times.      */ [3186,3480]",
      "dest": "comment: /**      * @dev Returns the current nonce for `owner`. This value must be      * included whenever a signature is generated for {permit}.      *      * Every successful call to {permit} increases ``owner``'s nonce by one. This      * prevents a signature from being used multiple times.      */ [3186,3480]"
    },
    {
      "src": "parameter [3070,3083]",
      "dest": "parameter [3070,3083]"
    },
    {
      "src": "parameter [3155,3164]",
      "dest": "parameter [3155,3164]"
    },
    {
      "src": "identifier: owner [3509,3514]",
      "dest": "identifier: owner [3509,3514]"
    },
    {
      "src": "parameter [3539,3546]",
      "dest": "parameter [3539,3546]"
    },
    {
      "src": "solidity: solidity [130,138]",
      "dest": "solidity: solidity [130,138]"
    },
    {
      "src": "function_definition [2997,3180]",
      "dest": "function_definition [2997,3180]"
    },
    {
      "src": ",: , [3083,3084]",
      "dest": ",: , [3083,3084]"
    },
    {
      "src": "visibility [3171,3179]",
      "dest": "visibility [3171,3179]"
    },
    {
      "src": "): ) [3514,3515]",
      "dest": "): ) [3514,3515]"
    },
    {
      "src": "returns: returns [3782,3789]",
      "dest": "returns: returns [3782,3789]"
    },
    {
      "src": "type_name [3093,3100]",
      "dest": "type_name [3093,3100]"
    },
    {
      "src": "function: function [2997,3005]",
      "dest": "function: function [2997,3005]"
    },
    {
      "src": "address: address [3501,3508]",
      "dest": "address: address [3501,3508]"
    },
    {
      "src": "primitive_type [3070,3077]",
      "dest": "primitive_type [3070,3077]"
    },
    {
      "src": "primitive_type [3136,3143]",
      "dest": "primitive_type [3136,3143]"
    },
    {
      "src": "solidity_pragma_token [130,146]",
      "dest": "solidity_pragma_token [130,146]"
    },
    {
      "src": "(: ( [3790,3791]",
      "dest": "(: ( [3790,3791]"
    },
    {
      "src": "comment: /**  * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in  * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].  *  * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by  * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't  * need to send a transaction, and thus is not required to hold Ether at all.  *  * ==== Security Considerations  *  * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature  * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be  * considered as an intention to spend the allowance in any specific way. The second is that because permits have  * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should  * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be  * generally recommended is:  *  * ```solidity  * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {  *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}  *     doThing(..., value);  * }  *  * function doThing(..., uint256 value) public {  *     token.safeTransferFrom(msg.sender, address(this), value);  *     ...  * }  * ```  *  * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of  * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also  * {SafeERC20-safeTransferFrom}).  *  * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so  * contracts should have entry points that don't rely on permit.  */ [149,2112]",
      "dest": "comment: /**  * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in  * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].  *  * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by  * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't  * need to send a transaction, and thus is not required to hold Ether at all.  *  * ==== Security Considerations  *  * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature  * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be  * considered as an intention to spend the allowance in any specific way. The second is that because permits have  * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should  * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be  * generally recommended is:  *  * ```solidity  * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {  *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}  *     doThing(..., value);  * }  *  * function doThing(..., uint256 value) public {  *     token.safeTransferFrom(msg.sender, address(this), value);  *     ...  * }  * ```  *  * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of  * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also  * {SafeERC20-safeTransferFrom}).  *  * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so  * contracts should have entry points that don't rely on permit.  */ [149,2112]"
    },
    {
      "src": "type_name [3155,3162]",
      "dest": "type_name [3155,3162]"
    },
    {
      "src": "type_name [3119,3124]",
      "dest": "type_name [3119,3124]"
    },
    {
      "src": "(: ( [3012,3013]",
      "dest": "(: ( [3012,3013]"
    },
    {
      "src": "identifier: value [3078,3083]",
      "dest": "identifier: value [3078,3083]"
    },
    {
      "src": "type_name [3070,3077]",
      "dest": "type_name [3070,3077]"
    },
    {
      "src": "bytes32: bytes32 [3155,3162]",
      "dest": "bytes32: bytes32 [3155,3162]"
    },
    {
      "src": "primitive_type [3045,3052]",
      "dest": "primitive_type [3045,3052]"
    },
    {
      "src": "view: view [3525,3529]",
      "dest": "view: view [3525,3529]"
    },
    {
      "src": "uint256: uint256 [3093,3100]",
      "dest": "uint256: uint256 [3093,3100]"
    },
    {
      "src": "uint8: uint8 [3119,3124]",
      "dest": "uint8: uint8 [3119,3124]"
    },
    {
      "src": "): ) [3546,3547]",
      "dest": "): ) [3546,3547]"
    },
    {
      "src": ",: , [3035,3036]",
      "dest": ",: , [3035,3036]"
    },
    {
      "src": "(: ( [3538,3539]",
      "dest": "(: ( [3538,3539]"
    },
    {
      "src": "comment: /**      * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.      */ [3554,3682]",
      "dest": "comment: /**      * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.      */ [3554,3682]"
    },
    {
      "src": "source_file [0,3803]",
      "dest": "source_file [0,3803]"
    },
    {
      "src": "pragma: pragma [123,129]",
      "dest": "pragma: pragma [123,129]"
    },
    {
      "src": "primitive_type [3022,3029]",
      "dest": "primitive_type [3022,3029]"
    },
    {
      "src": "external: external [3768,3776]",
      "dest": "external: external [3768,3776]"
    },
    {
      "src": "parameter [3136,3145]",
      "dest": "parameter [3136,3145]"
    },
    {
      "src": "parameter [3093,3109]",
      "dest": "parameter [3093,3109]"
    },
    {
      "src": "}: } [3801,3802]",
      "dest": "}: } [3801,3802]"
    },
    {
      "src": "address: address [3022,3029]",
      "dest": "address: address [3022,3029]"
    },
    {
      "src": "function_definition [3740,3800]",
      "dest": "function_definition [3740,3800]"
    },
    {
      "src": "external: external [3171,3179]",
      "dest": "external: external [3171,3179]"
    },
    {
      "src": "function: function [3740,3748]",
      "dest": "function: function [3740,3748]"
    },
    {
      "src": "visibility [3768,3776]",
      "dest": "visibility [3768,3776]"
    },
    {
      "src": ",: , [3126,3127]",
      "dest": ",: , [3126,3127]"
    },
    {
      "src": "state_mutability [3777,3781]",
      "dest": "state_mutability [3777,3781]"
    },
    {
      "src": "return_type_definition [3782,3799]",
      "dest": "return_type_definition [3782,3799]"
    },
    {
      "src": "): ) [3798,3799]",
      "dest": "): ) [3798,3799]"
    },
    {
      "src": "identifier: r [3144,3145]",
      "dest": "identifier: r [3144,3145]"
    },
    {
      "src": "type_name [3791,3798]",
      "dest": "type_name [3791,3798]"
    },
    {
      "src": "identifier: deadline [3101,3109]",
      "dest": "identifier: deadline [3101,3109]"
    },
    {
      "src": "visibility [3516,3524]",
      "dest": "visibility [3516,3524]"
    },
    {
      "src": "function: function [3485,3493]",
      "dest": "function: function [3485,3493]"
    },
    {
      "src": "identifier: DOMAIN_SEPARATOR [3749,3765]",
      "dest": "identifier: DOMAIN_SEPARATOR [3749,3765]"
    },
    {
      "src": "type_name [3022,3029]",
      "dest": "type_name [3022,3029]"
    },
    {
      "src": "solidity_version_comparison_operator [138,140]",
      "dest": "solidity_version_comparison_operator [138,140]"
    },
    {
      "src": "identifier: owner [3030,3035]",
      "dest": "identifier: owner [3030,3035]"
    },
    {
      "src": "comment: /**      * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,      * given ``owner``'s signed approval.      *      * IMPORTANT: The same issues {IERC20-approve} has related to transaction      * ordering also apply here.      *      * Emits an {Approval} event.      *      * Requirements:      *      * - `spender` cannot be the zero address.      * - `deadline` must be a timestamp in the future.      * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`      * over the EIP712-formatted function arguments.      * - the signature must use ``owner``'s current nonce (see {nonces}).      *      * For more information on the signature format, see the      * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP      * section].      *      * CAUTION: See Security Considerations above.      */ [2142,2992]",
      "dest": "comment: /**      * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,      * given ``owner``'s signed approval.      *      * IMPORTANT: The same issues {IERC20-approve} has related to transaction      * ordering also apply here.      *      * Emits an {Approval} event.      *      * Requirements:      *      * - `spender` cannot be the zero address.      * - `deadline` must be a timestamp in the future.      * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`      * over the EIP712-formatted function arguments.      * - the signature must use ``owner``'s current nonce (see {nonces}).      *      * For more information on the signature format, see the      * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP      * section].      *      * CAUTION: See Security Considerations above.      */ [2142,2992]"
    },
    {
      "src": "primitive_type [3501,3508]",
      "dest": "primitive_type [3501,3508]"
    },
    {
      "src": "uint256: uint256 [3070,3077]",
      "dest": "uint256: uint256 [3070,3077]"
    },
    {
      "src": "bytes32: bytes32 [3136,3143]",
      "dest": "bytes32: bytes32 [3136,3143]"
    },
    {
      "src": "state_mutability [3525,3529]",
      "dest": "state_mutability [3525,3529]"
    },
    {
      "src": "pragma_directive [123,147]",
      "dest": "pragma_directive [123,147]"
    },
    {
      "src": "type_name [3501,3508]",
      "dest": "type_name [3501,3508]"
    },
    {
      "src": "function_definition [3485,3548]",
      "dest": "function_definition [3485,3548]"
    },
    {
      "src": "comment: // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol) [32,121]",
      "dest": "comment: // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol) [32,121]"
    },
    {
      "src": "^:  ^ [138,140]",
      "dest": "^:  ^ [138,140]"
    },
    {
      "src": ",: , [3109,3110]",
      "dest": ",: , [3109,3110]"
    }
  ],
  "actions": []
}